#!/bin/bash

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# Skip mode simple (NOUVEAU - 2 lignes)
if [ "$SKIP_AI_HOOK" = "true" ] || [ -f ".skip-ai-hook" ]; then
  exit 0
fi

# Lire le message de commit
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# NOUVEAU: D√©tecter si c'est un message conventionnel (de VS Code AI)
# et ajouter "ai:" devant pour d√©clencher l'analyse
if [[ "$COMMIT_MSG" =~ ^(feat|fix|chore|test|docs|refactor|perf|style|ci|build|revert)(\(.+\))?: ]] && [[ ! "$COMMIT_MSG" =~ ^ai: ]]; then
  # Version portable (macOS et Linux)
  echo "ai: $COMMIT_MSG" > "$COMMIT_MSG_FILE.tmp"
  mv "$COMMIT_MSG_FILE.tmp" "$COMMIT_MSG_FILE"
  # Recharger le message modifi√©
  COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
fi

# Si commit commence par "ai:", enrichir le contexte
if [[ "$COMMIT_MSG" =~ ^ai: ]]; then
  echo "ü§ñ Analyzing project for AI context..."
  
  # V√©rifications de base (NOUVEAU - protection)
  if ! command -v jq &> /dev/null; then
    echo "‚ö†Ô∏è  Warning: jq is not installed. Skipping analysis."
    exit 0
  fi
  
  if [ ! -f ".ai.md" ]; then
    echo "‚ö†Ô∏è  Warning: .ai.md not found. Skipping."
    exit 0
  fi
  
  # Analyser le projet
  ANALYSIS=$(npx insightcode analyze . --json 2>/dev/null || echo '{}')
  
  # V√©rifier si l'analyse a r√©ussi (AM√âLIORATION)
  if [ "$ANALYSIS" = "{}" ]; then
    echo "‚ö†Ô∏è  Warning: InsightCode analysis failed. Continuing without metrics."
  else
    # Extraire les m√©triques
    SCORE=$(echo "$ANALYSIS" | jq -r '.score // "?"')
    GRADE=$(echo "$ANALYSIS" | jq -r '.grade // "?"')
    FILES=$(echo "$ANALYSIS" | jq -r '.summary.totalFiles // "?"')
    LINES=$(echo "$ANALYSIS" | jq -r '.summary.totalLines // "?"')
    TOP_ISSUE=$(echo "$ANALYSIS" | jq -r '.topFiles[0] // {} | "\(.path // "N/A") (complexity: \(.complexity // "N/A"))"')
    
    # Date au format ISO
    CURRENT_DATE=$(date "+%Y-%m-%d %H:%M")
    
    # Cr√©er le nouveau contenu pour Quick Status
    NEW_STATUS="<!-- GIT-HOOK:START -->
Last Analysis: $CURRENT_DATE
Score: $GRADE ($SCORE/100) | Files: $FILES | Lines: $LINES
Top Issues: $TOP_ISSUE
<!-- GIT-HOOK:END -->"
    
    # Mettre √† jour .ai.md avec sed
    # D'abord, extraire tout avant GIT-HOOK:START
    sed -n '1,/<!-- GIT-HOOK:START -->/p' .ai.md | sed '$d' > .ai.md.new
    
    # Ajouter le nouveau status
    echo "$NEW_STATUS" >> .ai.md.new
    
    # Ajouter tout apr√®s GIT-HOOK:END
    sed -n '/<!-- GIT-HOOK:END -->/,$p' .ai.md | tail -n +2 >> .ai.md.new
    
    # Remplacer le fichier
    mv .ai.md.new .ai.md
    
    # Ajouter le contexte au message de commit

    # Ajouter le contexte au message de commit
    # Note: Ce score est InsightCode s'analysant lui-m√™me pour les tests
    echo "" >> "$COMMIT_MSG_FILE"
    echo "AI-Context: Score $SCORE/100 ($GRADE)" >> "$COMMIT_MSG_FILE"
    
    # Stage le fichier modifi√©
    git add .ai.md
  fi
fi

# Logger dans l'historique (sauf pour les merges)
if [[ "$COMMIT_SOURCE" != "merge" ]] && [[ ! -z "$COMMIT_MSG" ]]; then
  # Extraire le message principal (premi√®re ligne)
  MSG_LINE=$(head -1 "$COMMIT_MSG_FILE")
  DATE=$(date +%Y-%m-%d)
  
  # Ajouter au log (AM√âLIORATION: support de tous les types)
  if [[ "$MSG_LINE" =~ ^(ai|feat|fix|perf|chore|test|docs|refactor|style|ci|build|revert): ]]; then
    # BUG FIX: Nettoyer le message en 2 √©tapes
    # D'abord enlever "ai: " si pr√©sent
    if [[ "$MSG_LINE" =~ ^ai: ]]; then
      MSG_LINE_CLEAN=$(echo "$MSG_LINE" | sed 's/^ai: //')
    else
      MSG_LINE_CLEAN="$MSG_LINE"
    fi
    
    # Puis extraire le message apr√®s le type de commit
    CLEAN_MSG=$(echo "$MSG_LINE_CLEAN" | sed 's/^[^:]*: //')
    
    # Cr√©er un fichier temporaire pour le nouveau log
    cp .ai.md .ai.md.tmp
    
    # Ins√©rer apr√®s GIT-LOG:START
    awk -v date="$DATE" -v msg="$CLEAN_MSG" '
      /<!-- GIT-LOG:START -->/ { 
        print
        print "- " date ": " msg
        found=1
        next
      }
      { print }
    ' .ai.md.tmp > .ai.md
    
    rm .ai.md.tmp
    
    # Limiter √† 50 derni√®res entr√©es (AM√âLIORATION: 20 ‚Üí 50)
    cp .ai.md .ai.md.tmp
    awk '
      BEGIN { count=0 }
      /<!-- GIT-LOG:START -->/ { p=1; print; next }
      /<!-- GIT-LOG:END -->/ { p=0; print; next }
      p && /^- / { 
        if (++count <= 50) print
        next
      }
      { print }
    ' .ai.md.tmp > .ai.md
    
    rm .ai.md.tmp
    git add .ai.md
  fi
fi