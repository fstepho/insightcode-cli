#!/bin/bash

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# Skip simple mode (NEW - 2 lines)
if [ "$SKIP_AI_HOOK" = "true" ] || [ -f ".skip-ai-hook" ]; then
  exit 0
fi

# Read the commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# NEW: Detect if it's a conventional message (from VS Code AI)
# and add "ai:" prefix to trigger analysis
if [[ "$COMMIT_MSG" =~ ^(feat|fix|chore|test|docs|refactor|perf|style|ci|build|revert)(\(.+\))?: ]] && [[ ! "$COMMIT_MSG" =~ ^ai: ]]; then
  # Portable version (macOS and Linux)
  echo "ai: $COMMIT_MSG" > "$COMMIT_MSG_FILE.tmp"
  mv "$COMMIT_MSG_FILE.tmp" "$COMMIT_MSG_FILE"
  # Reload the modified message
  COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
fi

# If commit starts with "ai:", enrich the context
if [[ "$COMMIT_MSG" =~ ^ai: ]]; then
  echo "ü§ñ Analyzing project for AI context..."
  
  # Basic checks (NEW - protection)
  if ! command -v jq &> /dev/null; then
    echo "‚ö†Ô∏è  Warning: jq is not installed. Skipping analysis."
    exit 0
  fi
  
  if [ ! -f ".ai.md" ]; then
    echo "‚ö†Ô∏è  Warning: .ai.md not found. Skipping."
    exit 0
  fi
  
  # Analyze the project and validate JSON
  ANALYSIS_RAW=$(npx insightcode ./src --json 2>/dev/null || echo '{}')
  
  # Validate that it's valid JSON
  ANALYSIS=$(echo "$ANALYSIS_RAW" | jq -r '.' 2>/dev/null || echo '{}')
  
  # Check if analysis succeeded (IMPROVEMENT)
  if [ "$ANALYSIS" = "{}" ] || [ -z "$ANALYSIS" ]; then
    echo "‚ö†Ô∏è  Warning: InsightCode analysis failed or returned invalid JSON. Continuing without metrics."
  else
    # Extract metrics
    SCORE=$(echo "$ANALYSIS" | jq -r '.overview.scores.overall // "?"')
    GRADE=$(echo "$ANALYSIS" | jq -r '.overview.grade // "?"')
    FILES=$(echo "$ANALYSIS" | jq -r '.context.analysis.filesAnalyzed // "?"')
    LINES=$(echo "$ANALYSIS" | jq -r '.overview.statistics.totalLOC // "?"')
    TOP_ISSUE=$(echo "$ANALYSIS" | jq -r '.details[0] // {} | "\(.file // "N/A") (complexity: \(.metrics.complexity // "N/A"))"')
    
    # Date in ISO format
    CURRENT_DATE=$(date "+%Y-%m-%d %H:%M")
    
    # Create new content for Quick Status
    NEW_STATUS="<!-- GIT-HOOK:START -->
Last Analysis: $CURRENT_DATE
Score: $GRADE ($SCORE/100) | Files: $FILES | Lines: $LINES
Top Issue: $TOP_ISSUE
<!-- GIT-HOOK:END -->" 
    
    # Add new status to .ai.md
    echo "Updating .ai.md with new status..."
    # Update .ai.md with sed
    # First, extract everything before GIT-HOOK:START
    sed -n '1,/<!-- GIT-HOOK:START -->/p' .ai.md | sed '$d' > .ai.md.new
    
    # Add the new status
    echo "$NEW_STATUS" >> .ai.md.new
    
    # Add everything after GIT-HOOK:END
    sed -n '/<!-- GIT-HOOK:END -->/,$p' .ai.md | tail -n +2 >> .ai.md.new
    
    # Replace the file
    mv .ai.md.new .ai.md
    
    # Add context to commit message

    # Add context to commit message
    # Note: This score is InsightCode analyzing itself for tests
    echo "" >> "$COMMIT_MSG_FILE"
    echo "AI-Context: Score $SCORE/100 ($GRADE)" >> "$COMMIT_MSG_FILE"
    
    # Stage the modified file
    git add .ai.md
  fi
fi

# Log to history (except for merges)
if [[ "$COMMIT_SOURCE" != "merge" ]] && [[ ! -z "$COMMIT_MSG" ]]; then
  # Extract main message (first line)
  MSG_LINE=$(head -1 "$COMMIT_MSG_FILE")
  DATE=$(date +%Y-%m-%d)
  
  # Add to log (IMPROVEMENT: support all types)
  if [[ "$MSG_LINE" =~ ^(ai|feat|fix|perf|chore|test|docs|refactor|style|ci|build|revert): ]]; then
    # BUG FIX: Clean message in 2 steps
    # First remove "ai: " if present
    if [[ "$MSG_LINE" =~ ^ai: ]]; then
      MSG_LINE_CLEAN=$(echo "$MSG_LINE" | sed 's/^ai: //')
    else
      MSG_LINE_CLEAN="$MSG_LINE"
    fi
    
    # Then extract message after commit type
    CLEAN_MSG=$(echo "$MSG_LINE_CLEAN" | sed 's/^[^:]*: //')
    
    # Create a temporary file for the new log
    cp .ai.md .ai.md.tmp
    
    # Insert after GIT-LOG:START
    awk -v date="$DATE" -v msg="$CLEAN_MSG" '
      /<!-- GIT-LOG:START -->/ { 
        print
        print "- " date ": " msg
        found=1
        next
      }
      { print }
    ' .ai.md.tmp > .ai.md
    
    rm .ai.md.tmp
    
    # Limit to last 50 entries (IMPROVEMENT: 20 ‚Üí 50)
    cp .ai.md .ai.md.tmp
    awk '
      BEGIN { count=0 }
      /<!-- GIT-LOG:START -->/ { p=1; print; next }
      /<!-- GIT-LOG:END -->/ { p=0; print; next }
      p && /^- / { 
        if (++count <= 50) print
        next
      }
      { print }
    ' .ai.md.tmp > .ai.md
    
    rm .ai.md.tmp
    git add .ai.md
  fi
fi