import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { parseFile, parseDirectory, findFiles } from '../src/parser';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

describe('Parser v0.6.0', () => {
  let tempDir: string;
  
  beforeEach(() => {
    // Create temp directory for test files
    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'insightcode-test-'));
  });
  
  afterEach(() => {
    // Clean up temp directory
    fs.rmSync(tempDir, { recursive: true, force: true });
  });
  
  describe('findFiles', () => {
    it('should find TypeScript and JavaScript files', async () => {
      // Create test files
      fs.writeFileSync(path.join(tempDir, 'test.ts'), 'const x = 1;');
      fs.writeFileSync(path.join(tempDir, 'test.js'), 'const y = 2;');
      fs.writeFileSync(path.join(tempDir, 'test.tsx'), 'const z = 3;');
      fs.writeFileSync(path.join(tempDir, 'test.jsx'), 'const w = 4;');
      fs.writeFileSync(path.join(tempDir, 'test.txt'), 'not included');
      
      const files = await findFiles(tempDir);
      
      expect(files).toHaveLength(4);
      expect(files.some(f => f.endsWith('test.ts'))).toBe(true);
      expect(files.some(f => f.endsWith('test.js'))).toBe(true);
      expect(files.some(f => f.endsWith('test.tsx'))).toBe(true);
      expect(files.some(f => f.endsWith('test.jsx'))).toBe(true);
      expect(files.some(f => f.endsWith('test.txt'))).toBe(false);
    });
    
    it('should exclude node_modules by default', async () => {
      // Create node_modules with a file
      const nodeModulesDir = path.join(tempDir, 'node_modules');
      fs.mkdirSync(nodeModulesDir);
      fs.writeFileSync(path.join(nodeModulesDir, 'lib.ts'), 'export const x = 1;');
      fs.writeFileSync(path.join(tempDir, 'app.ts'), 'const app = true;');
      
      const files = await findFiles(tempDir);
      
      expect(files).toHaveLength(1);
      expect(files[0].endsWith('app.ts')).toBe(true);
    });
    
    it('should respect custom exclude patterns', async () => {
      fs.writeFileSync(path.join(tempDir, 'include.ts'), 'const x = 1;');
      fs.writeFileSync(path.join(tempDir, 'exclude.ts'), 'const y = 2;');
      
      const files = await findFiles(tempDir, ['**/exclude.ts']);
      
      expect(files).toHaveLength(1);
      expect(files[0].endsWith('include.ts')).toBe(true);
    });
    
    it('should exclude utility files when production is true', async () => {
      fs.writeFileSync(path.join(tempDir, 'app.ts'), 'const app = true;');
      const testDir = path.join(tempDir, 'test');
      fs.mkdirSync(testDir);
      fs.writeFileSync(path.join(testDir, 'app.test.ts'), 'const test = true;');
      
      const files = await findFiles(tempDir, [], true);
      
      expect(files).toHaveLength(1);
      expect(files[0].endsWith('app.ts')).toBe(true);
    });
  });

  describe('parseFile', () => {
    it('should calculate cyclomatic complexity correctly', () => {
      const testFile = path.join(tempDir, 'simple.ts');
      fs.writeFileSync(testFile, `
        function simple() {
          return 1;
        }
      `);
      
      const result = parseFile(testFile);
      const fileDetail = result.fileDetail;
      
      expect(fileDetail.metrics.complexity).toBe(1);
      expect(fileDetail.metrics.loc).toBe(3);
      expect(fileDetail.file).toBe(path.relative(process.cwd(), testFile));
      expect(fileDetail.metrics.functionCount).toBe(1);
      expect(fileDetail.metrics.duplicationRatio).toBe(0);
      expect(fileDetail.issues).toHaveLength(0);
    });
    
    it('should count lines of code excluding comments and empty lines', () => {
      const testFile = path.join(tempDir, 'comments.ts');
      fs.writeFileSync(testFile, `
        // This is a comment
        function test() {
          /* Multi-line
             comment */
          return 1;
        }
        
        // Another comment
      `);
      
      const fileDetail = parseFile(testFile);
      
      expect(fileDetail.metrics.loc).toBe(3); // Only counting actual code lines
    });

    it('should detect high complexity issues', () => {
      const testFile = path.join(tempDir, 'complex-file.ts');
      const complexCode = `
function complexFunction(x: number): number {
  if (x > 0) {    // +1
    if (x > 10) {  // +1
      if (x > 100) {  // +1
        if (x > 1000) {  // +1
          if (x > 10000) {  // +1
            return x * 2;
          } else {    // +1
            return x * 3;
          }
        } else {      // +1
          return x * 4;
        }
      } else {        // +1
        return x * 5;
      }
    } else {          // +1
      return x * 6;
    }
  } else {            // +1
    return x * 7;
  }
}`;
      
      fs.writeFileSync(testFile, complexCode);
      const fileDetail = parseFile(testFile);
      
      // Should detect higher complexity than base level
      expect(fileDetail.metrics.complexity).toBeGreaterThan(1);
      
      // Complex nested structure should produce complexity proportional to decision points
      expect(fileDetail.metrics.complexity).toBeGreaterThan(3);
      expect(fileDetail.metrics.complexity).toBeLessThan(20);
    });
    
    it('should detect medium complexity issues', () => {
      const testFile = path.join(tempDir, 'medium-complex.ts');
      const code = `
function mediumComplex(x: number): number {
  if (x > 0) {          // +1
    return x * 2;
  }
  return x;
}

for (let i = 0; i < x; i++) {    // +1
  if (i % 3 === 0) {             // +1
    console.log(i);
  } else if (i % 5 === 0) {      // +1
    console.log(i * 2);
  }
}

switch (x) {              // +1 per case
  case 1: return 1;      // +1
  case 2: return 2;      // +1
  case 3: return 3;      // +1
  case 4: return 4;      // +1
  case 5: return 5;      // +1
  default: return 0;
}`;
      
      fs.writeFileSync(testFile, code);
      const fileDetail = parseFile(testFile);
      
      // Should detect higher complexity due to multiple decision points
      expect(fileDetail.metrics.complexity).toBeGreaterThan(5);
      
      // File with this complexity should potentially have issues
      // But we don't force the exact number since it depends on thresholds
      expect(fileDetail.issues.length).toBeGreaterThanOrEqual(0);
    });
    
    it('should detect large file issues', () => {
      const testFile = path.join(tempDir, 'large-file.ts');
      // Create a file with 350 lines
      const lines = Array(350).fill(0).map((_, i) => `const var${i} = ${i};`).join('\n');
      
      fs.writeFileSync(testFile, lines);
      const fileDetail = parseFile(testFile);
      
      // Should count the generated lines correctly
      expect(fileDetail.metrics.loc).toBeGreaterThan(300);
      expect(fileDetail.metrics.loc).toBeLessThan(400);
      expect(fileDetail.issues).toHaveLength(1);
      expect(fileDetail.issues[0]).toMatchObject({
        type: 'size',
        severity: 'high',
        line: 1,
        threshold: 300,
        excessRatio: expect.any(Number)
      });
    });
    
    it('should count functions correctly', () => {
      const testFile = path.join(tempDir, 'functions.ts');
      fs.writeFileSync(testFile, `
        function regularFunction() {}
        const arrowFunction = () => {};
        export function exportedFunction() {}
      `);
      
      const fileDetail = parseFile(testFile);
      
      expect(fileDetail.metrics.functionCount).toBe(3);
      expect(fileDetail.metrics.complexity).toBe(1); // Base complexity only
    });
    
    it('should handle logical operators in complexity calculation', () => {
      const testFile = path.join(tempDir, 'logical.ts');
      fs.writeFileSync(testFile, `
        function test(a: boolean, b: boolean, c: boolean) {
          return a && b || c;  // Each && and || adds +1
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      expect(fileDetail.metrics.complexity).toBeGreaterThan(1);
    });

    it('should set correct dependency defaults', () => {
      const testFile = path.join(tempDir, 'index.ts');
      fs.writeFileSync(testFile, 'export const main = true;');
      
      const fileDetail = parseFile(testFile);
      
      // Verify that dependencies are initialized with default values
      expect(fileDetail.dependencies.incomingDependencies).toBe(0);
      expect(fileDetail.dependencies.outgoingDependencies).toBe(0);
      expect(fileDetail.dependencies.instability).toBe(0);
      expect(fileDetail.dependencies.cohesionScore).toBe(0);
      expect(fileDetail.dependencies.percentileUsageRank).toBe(0);
      expect(fileDetail.dependencies.isInCycle).toBe(false);
      expect(fileDetail.healthScore).toBe(0); // Will be calculated later
    });
  });
  
  describe('parseDirectory', () => {
    it('should parse all TypeScript files in directory', async () => {
      fs.writeFileSync(path.join(tempDir, 'file1.ts'), 'const x = 1;');
      fs.writeFileSync(path.join(tempDir, 'file2.ts'), 'const y = 2;');
      
      const results = await parseDirectory(tempDir);
      
      expect(results.length).toBe(2);
      expect(results[0].metrics.complexity).toBe(1);
      expect(results[0].metrics.loc).toBe(1);
      expect(results[1].metrics.complexity).toBe(1);
      expect(results[1].metrics.loc).toBe(1);
    });
    
    it('should throw error when no files found', async () => {
      await expect(parseDirectory(tempDir)).rejects.toThrow('No TypeScript/JavaScript files found');
    });
    
    it('should handle parse errors gracefully', async () => {
      // Create a file with invalid syntax
      fs.writeFileSync(path.join(tempDir, 'invalid.ts'), 'const x = ;');
      fs.writeFileSync(path.join(tempDir, 'valid.ts'), 'const y = 1;');
      
      // Should not throw, but log warnings
      const results = await parseDirectory(tempDir);
      
      // Should continue processing other files (TypeScript may parse invalid files)
      expect(results.length).toBeGreaterThanOrEqual(1);
      expect(results.some(r => r.file.includes('valid.ts'))).toBe(true);
    });
  });

  describe('Edge Cases and Algorithm Bugs', () => {
    it('should handle files with mixed comment styles', () => {
      const testFile = path.join(tempDir, 'mixed-comments.ts');
      fs.writeFileSync(testFile, `
        // Single line comment
        const x = 1; /* inline comment */ const y = 2;
        /*
         * Multi-line comment
         * with multiple lines
         */
        function test() {
          // Another comment
          return x + y;
        }
        /* Another inline */ console.log('test');
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count actual code lines, not comments
      expect(fileDetail.metrics.loc).toBeGreaterThan(0);
      expect(fileDetail.metrics.functionCount).toBe(1);
      expect(fileDetail.metrics.complexity).toBe(1);
    });

    it('should handle nested control structures correctly', () => {
      const testFile = path.join(tempDir, 'nested-control.ts');
      fs.writeFileSync(testFile, `
        function complexNested(x: number, y: number): string {
          if (x > 0) {                    // +1
            for (let i = 0; i < 10; i++) { // +1
              if (i % 2 === 0) {          // +1
                switch (y) {              // +1
                  case 1: return 'one';   // +1
                  case 2: return 'two';   // +1
                  default: 
                    if (i > 5) {          // +1
                      return 'big';
                    }
                    break;
                }
              }
            }
          }
          return 'default';
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count all decision points: 1 base + 7 control structures
      expect(fileDetail.metrics.complexity).toBe(8);
      expect(fileDetail.metrics.functionCount).toBe(1);
    });

    it('should handle logical operators in complexity calculation', () => {
      const testFile = path.join(tempDir, 'logical-ops.ts');
      fs.writeFileSync(testFile, `
        function logicalComplex(a: boolean, b: boolean, c: boolean, d: boolean): boolean {
          return a && b || c && d;  // Each && and || should add +1
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count: 1 base + 3 logical operators (&&, ||, &&)
      expect(fileDetail.metrics.complexity).toBe(4);
    });

    it('should handle ternary operators in complexity calculation', () => {
      const testFile = path.join(tempDir, 'ternary-ops.ts');
      fs.writeFileSync(testFile, `
        function ternaryComplex(x: number): string {
          return x > 0 ? 'positive' : x < 0 ? 'negative' : 'zero';
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count: 1 base + 2 ternary operators
      expect(fileDetail.metrics.complexity).toBe(3);
    });

    it('should handle empty files', () => {
      const testFile = path.join(tempDir, 'empty.ts');
      fs.writeFileSync(testFile, '');
      
      const fileDetail = parseFile(testFile);
      
      expect(fileDetail.metrics.complexity).toBe(1); // Base complexity
      expect(fileDetail.metrics.loc).toBe(0);
      expect(fileDetail.metrics.functionCount).toBe(0);
      expect(fileDetail.issues).toHaveLength(0);
    });

    it('should handle files with only whitespace', () => {
      const testFile = path.join(tempDir, 'whitespace.ts');
      fs.writeFileSync(testFile, '   \n\n   \t\t\n   ');
      
      const fileDetail = parseFile(testFile);
      
      expect(fileDetail.metrics.complexity).toBe(1); // Base complexity
      expect(fileDetail.metrics.loc).toBe(0);
      expect(fileDetail.metrics.functionCount).toBe(0);
    });

    it('should handle async/await complexity correctly', () => {
      const testFile = path.join(tempDir, 'async-await.ts');
      fs.writeFileSync(testFile, `
        async function asyncComplex(url: string): Promise<string> {
          try {                           // +1
            const response = await fetch(url);
            if (!response.ok) {           // +1
              throw new Error('Failed');
            }
            return await response.text();
          } catch (error) {               // +1
            if (error instanceof Error) { // +1
              return error.message;
            }
            return 'Unknown error';
          }
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count: 1 base + try/catch + 2 if statements
      expect(fileDetail.metrics.complexity).toBe(4);
      expect(fileDetail.metrics.functionCount).toBe(1);
    });

    it('should handle class methods correctly', () => {
      const testFile = path.join(tempDir, 'class-methods.ts');
      fs.writeFileSync(testFile, `
        class TestClass {
          private value: number = 0;
          
          constructor(initial: number) {
            this.value = initial;
          }
          
          getValue(): number {
            return this.value;
          }
          
          setValue(newValue: number): void {
            if (newValue < 0) {  // +1
              throw new Error('Negative value');
            }
            this.value = newValue;
          }
          
          get formattedValue(): string {
            return this.value.toString();
          }
          
          set formattedValue(str: string) {
            const num = parseInt(str, 10);
            if (isNaN(num)) {  // +1
              throw new Error('Invalid number');
            }
            this.value = num;
          }
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count: constructor + 2 methods + getter + setter = 5 functions
      expect(fileDetail.metrics.functionCount).toBe(5);
      // Should count: 1 base + 2 if statements
      expect(fileDetail.metrics.complexity).toBe(3);
    });

    it('should handle arrow functions and function expressions', () => {
      const testFile = path.join(tempDir, 'arrow-functions.ts');
      fs.writeFileSync(testFile, `
        const add = (a: number, b: number) => a + b;
        const multiply = function(a: number, b: number) { return a * b; };
        const complex = (arr: number[]) => {
          return arr.filter(x => x > 0).map(x => x * 2);
        };
      `);
      
      const fileDetail = parseFile(testFile);
      
      // Should count: add + multiply + complex + filter callback + map callback = 5 functions
      expect(fileDetail.metrics.functionCount).toBe(5);
      expect(fileDetail.metrics.complexity).toBe(1); // Base complexity only
    });

    it('should correctly classify different file types', () => {
      const testFile = path.join(tempDir, 'app.test.ts');
      fs.writeFileSync(testFile, 'const test = true;');
      
      const fileDetail = parseFile(testFile);
      
      // File should be classified as test type due to .test.ts extension
      expect(fileDetail.file).toContain('app.test.ts');
      // Test files have higher complexity thresholds, so no issues expected
      expect(fileDetail.issues).toHaveLength(0);
    });

    it('should handle very large files correctly', () => {
      const testFile = path.join(tempDir, 'very-large.ts');
      // Create a file with exactly 1000 lines
      const lines = Array(1000).fill(0).map((_, i) => `const var${i} = ${i};`).join('\n');
      fs.writeFileSync(testFile, lines);
      
      const fileDetail = parseFile(testFile);
      
      // Should count the generated lines correctly
      expect(fileDetail.metrics.loc).toBeGreaterThan(900);
      expect(fileDetail.metrics.loc).toBeLessThan(1100);
      expect(fileDetail.issues).toHaveLength(1);
      expect(fileDetail.issues[0].type).toBe('size');
      expect(fileDetail.issues[0].severity).toBe('high');
    });

    it('should handle files with unicode characters', () => {
      const testFile = path.join(tempDir, 'unicode.ts');
      fs.writeFileSync(testFile, `
        const émoji = '🚀';
        const 中文 = 'Chinese';
        function testUnicode(input: string): string {
          if (input === émoji) {  // +1
            return '火箭';
          }
          return input;
        }
      `);
      
      const fileDetail = parseFile(testFile);
      
      expect(fileDetail.metrics.complexity).toBe(2); // 1 base + 1 if
      expect(fileDetail.metrics.functionCount).toBe(1);
      expect(fileDetail.metrics.loc).toBe(8); // Should count lines with unicode
    });
  });
});