import { describe, it, expect, vi, beforeEach } from 'vitest';
import { analyze } from '../src/analyzer';
import { FileDetail, AnalysisResult, ThresholdConfig, Issue, IssueType, Severity } from '../src/types';
import * as dependencyAnalyzer from '../src/dependencyAnalyzer';
import * as duplication from '../src/duplication';
import * as projectInfo from '../src/projectInfo';

// Mock the dependencies of analyzer.ts
vi.mock('../src/dependencyAnalyzer');
vi.mock('../src/duplication');
vi.mock('../src/projectInfo');

// Helper to create a mock FileDetail object for testing
const createFileDetail = (overrides: Partial<FileDetail>): FileDetail => ({
    file: 'test.ts',
    metrics: {
        complexity: 1,
        loc: 10,
        functionCount: 1,
        duplicationRatio: 0
    },
    dependencies: {
        outgoingDependencies: 0,
        incomingDependencies: 0,
        cohesionScore: 0,
        instability: 0,
        percentileUsageRank: 0,
        isInCycle: false
    },
    issues: [],
    healthScore: 100,
    ...overrides,
});

// Helper to create a mock Issue
const createIssue = (overrides: Partial<Issue>): Issue => ({
    type: IssueType.Complexity,
    severity: Severity.High,
    line: 1,
    threshold: 10,
    excessRatio: 2.0,
    ...overrides,
});

// A default threshold config for tests
const MOCK_THRESHOLDS: ThresholdConfig = {
    complexity: { 
        production: { medium: 10, high: 20 }, 
        test: { medium: 15, high: 30 }, 
        utility: { medium: 20, high: 40 } 
    },
    size: { 
        production: { medium: 200, high: 300 }, 
        test: { medium: 300, high: 500 }, 
        utility: { medium: 400, high: 600 } 
    },
    duplication: { 
        production: { medium: 15, high: 30 }, 
        test: { medium: 25, high: 50 }, 
        utility: { medium: 30, high: 60 } 
    },
};

describe('Analyzer v0.7.0', () => {
    beforeEach(() => {
        // Reset mocks before each test
        vi.resetAllMocks();

        // Provide default mock implementations for the analyzer's dependencies
        const mockAnalyzer = {
            analyze: vi.fn().mockResolvedValue({
                fileAnalyses: new Map(),
                statistics: {
                    totalFiles: 0,
                    totalImports: 0,
                    averageImportsPerFile: 0,
                    maxImports: { file: '', count: 0 },
                    isolatedFiles: [],
                    hubFiles: []
                },
                circularDependencies: [],
                errors: []
            })
        };
        vi.spyOn(dependencyAnalyzer, 'UniversalDependencyAnalyzer').mockImplementation(() => mockAnalyzer);
        vi.spyOn(duplication, 'detectDuplication').mockImplementation((files, _) => files);
        vi.spyOn(projectInfo, 'getProjectInfo').mockReturnValue({
          name: 'test-project',
          path: '.',
          packageJson: undefined
        });
    });

    it('should return correct AnalysisResult structure', async () => {
        const files: FileDetail[] = [createFileDetail({ 
            metrics: { complexity: 5, loc: 50, functionCount: 2, duplicationRatio: 0.01 } 
        })];
        
        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // Check the v0.6.0+ structure
        expect(result).toHaveProperty('context');
        expect(result).toHaveProperty('overview');
        expect(result).toHaveProperty('details');

        // Check context structure
        expect(result.context).toHaveProperty('project');
        expect(result.context).toHaveProperty('analysis');
        expect(result.context.project).toHaveProperty('name');
        expect(result.context.project).toHaveProperty('path');
        expect(result.context.analysis).toHaveProperty('timestamp');
        expect(result.context.analysis).toHaveProperty('durationMs');
        expect(result.context.analysis).toHaveProperty('toolVersion');
        expect(result.context.analysis).toHaveProperty('filesAnalyzed');
        
        // Check overview structure
        expect(result.overview).toHaveProperty('grade');
        expect(result.overview).toHaveProperty('statistics');
        expect(result.overview).toHaveProperty('scores');
        expect(result.overview).toHaveProperty('summary');
        
        // Check scores structure
        expect(result.overview.scores).toHaveProperty('complexity');
        expect(result.overview.scores).toHaveProperty('duplication');
        expect(result.overview.scores).toHaveProperty('maintainability');
        expect(result.overview.scores).toHaveProperty('overall');
        
        // Recommendations removed in v0.6.0 - calculable client-side
    });

    it('should return high scores for perfect files', async () => {
        const files: FileDetail[] = [createFileDetail({ 
            metrics: { complexity: 5, loc: 50, functionCount: 2, duplicationRatio: 0.01 } 
        })];
        
        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // Test that good metrics produce good scores without forcing exact values
        expect(result.overview.scores.overall).toBeGreaterThan(85);
        expect(result.overview.scores.complexity).toBeGreaterThan(80);
        expect(result.overview.scores.duplication).toBeGreaterThan(80);
        expect(['A', 'B'].includes(result.overview.grade)).toBe(true);
        expect(['A', 'B'].includes(result.overview.grade)).toBe(true);
    });

    it('should return low scores for problematic files', async () => {
        const files: FileDetail[] = [createFileDetail({ 
            file: 'critical.ts',
            metrics: { complexity: 50, loc: 500, functionCount: 20, duplicationRatio: 0.3 },
            issues: [createIssue({ severity: Severity.Critical })]
        })];
        
        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // Test that bad metrics produce bad scores without forcing exact values
        expect(result.overview.scores.overall).toBeLessThan(70);
        expect(result.overview.scores.complexity).toBeLessThan(50);
        expect(result.overview.scores.duplication).toBeLessThan(95); // Adjusted for v0.6.0+ stricter duplication criteria
        expect(['D', 'F'].includes(result.overview.grade)).toBe(true);
        expect(['D', 'F'].includes(result.overview.grade)).toBe(true);
    });

    it('should correctly mark critical files', async () => {
        const files: FileDetail[] = [
            createFileDetail({ 
                file: 'good.ts',
                metrics: { complexity: 5, loc: 50, functionCount: 2, duplicationRatio: 0.01 }
            }),
            createFileDetail({ 
                file: 'bad.ts',
                metrics: { complexity: 50, loc: 500, functionCount: 20, duplicationRatio: 0.3 }
            }),
            createFileDetail({ 
                file: 'worse.ts',
                metrics: { complexity: 80, loc: 800, functionCount: 40, duplicationRatio: 0.5 }
            }),
        ];
        
        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        const criticalFiles = result.details.filter(f => f.healthScore < 80);
        expect(criticalFiles.length).toBeGreaterThan(0);
        expect(criticalFiles.length).toBeLessThanOrEqual(5); // Max 5 critical files
        
        // Critical files should have worse health scores
        const nonCriticalFiles = result.details.filter(f => f.healthScore >= 80);
        if (nonCriticalFiles.length > 0) {
            const avgFileCriticalHealth = criticalFiles.reduce((sum, f) => sum + f.healthScore, 0) / criticalFiles.length;
            const avgNonFileCriticalHealth = nonCriticalFiles.reduce((sum, f) => sum + f.healthScore, 0) / nonCriticalFiles.length;
            expect(avgFileCriticalHealth).toBeLessThan(avgNonFileCriticalHealth);
        }
    });

    it('should calculate correct statistics', async () => {
        const files: FileDetail[] = [
            createFileDetail({ 
                metrics: { complexity: 10, loc: 100, functionCount: 2, duplicationRatio: 0.05 } 
            }),
            createFileDetail({ 
                metrics: { complexity: 20, loc: 300, functionCount: 8, duplicationRatio: 0.15 } 
            }),
        ];

        const result = await analyze(files, '.', MOCK_THRESHOLDS);
        
        expect(result.overview.statistics.totalFiles).toBe(2);
        expect(result.overview.statistics.totalLOC).toBe(400);
        // Average complexity should be between the two input values
    expect(result.overview.statistics.avgComplexity).toBeGreaterThan(10);
    expect(result.overview.statistics.avgComplexity).toBeLessThan(20);
        expect(result.overview.statistics.avgLOC).toBe(200);
    });

    it('should enrich issues with correct context', async () => {
        const testIssue = createIssue({ 
            type: IssueType.Complexity,
            severity: Severity.High,
            threshold: 20,
            excessRatio: 2.0
        });
        
        const files: FileDetail[] = [
            createFileDetail({
                file: 'issue.ts',
                metrics: { complexity: 40, loc: 200, functionCount: 10, duplicationRatio: 0.1 },
                issues: [testIssue]
            })
        ];

        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // Excess ratio should reflect how much the value exceeds the threshold
    expect(result.details[0].issues[0].excessRatio).toBeGreaterThan(1.5);
    expect(result.details[0].issues[0].excessRatio).toBeLessThan(2.5);
        expect(result.details[0].issues[0].threshold).toBe(20);
        expect(result.details[0].issues[0].type).toBe(IssueType.Complexity);
        expect(result.details[0].issues[0].severity).toBe(Severity.High);
    });

    it('should handle empty file list gracefully', async () => {
        const result = await analyze([], '.', MOCK_THRESHOLDS);

        expect(result.overview.statistics.totalFiles).toBe(0);
        expect(result.overview.statistics.totalLOC).toBe(0);
        expect(result.overview.statistics.avgComplexity).toBe(0);
        expect(result.overview.statistics.avgLOC).toBe(0);
        expect(result.overview.scores.overall).toBe(0);
        expect(result.overview.grade).toBe('F');
        expect(result.overview.grade).toBe('F');
        expect(result.overview.summary).toBe('No files analyzed');
    });

    it('should not generate recommendations in v0.7.0', async () => {
        const files: FileDetail[] = [
            createFileDetail({ 
                file: 'critical.ts',
                metrics: { complexity: 50, loc: 500, functionCount: 20, duplicationRatio: 0.3 },
                issues: [createIssue({ severity: Severity.Critical })]
            }),
            createFileDetail({ 
                file: 'normal.ts',
                metrics: { complexity: 5, loc: 100, functionCount: 2, duplicationRatio: 0.01 }
            }),
        ];

        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // Recommendations removed in v0.6.0 - calculable client-side
        expect(result).not.toHaveProperty('recommendations');
    });

    it('should calculate file health scores correctly', async () => {
        const files: FileDetail[] = [
            createFileDetail({ 
                metrics: { complexity: 10, loc: 100, functionCount: 2, duplicationRatio: 0.05 }
            }),
            createFileDetail({ 
                metrics: { complexity: 50, loc: 500, functionCount: 20, duplicationRatio: 0.3 }
            }),
        ];

        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // File health scores should be between 0 and 100
        result.details.forEach(file => {
            expect(file.healthScore).toBeGreaterThanOrEqual(0);
            expect(file.healthScore).toBeLessThanOrEqual(100);
        });
        
        // First file should have better health than second
        expect(result.details[0].healthScore).toBeGreaterThan(result.details[1].healthScore);
    });

    it('should set usage ranks correctly', async () => {
        const files: FileDetail[] = [
            createFileDetail({ 
                file: 'low-usage.ts',
                dependencies: { 
                    outgoingDependencies: 1,
                    incomingDependencies: 1, 
                    cohesionScore: 0.5,
                    instability: 0.5,
                    percentileUsageRank: 25,
                    isInCycle: false
                }
            }),
            createFileDetail({ 
                file: 'high-usage.ts',
                dependencies: { 
                    outgoingDependencies: 2,
                    incomingDependencies: 10, 
                    cohesionScore: 0.8,
                    instability: 0.2,
                    percentileUsageRank: 85,
                    isInCycle: false
                }
            }),
        ];

        const result = await analyze(files, '.', MOCK_THRESHOLDS);

        // Usage ranks should be calculated (0-100 percentile)
        result.details.forEach(file => {
            expect(file.dependencies.percentileUsageRank).toBeGreaterThanOrEqual(0);
            expect(file.dependencies.percentileUsageRank).toBeLessThanOrEqual(100);
        });
    });
});