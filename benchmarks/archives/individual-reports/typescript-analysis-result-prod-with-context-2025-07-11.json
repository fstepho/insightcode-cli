{
  "project": "typescript",
  "repo": "https://github.com/microsoft/TypeScript.git",
  "type": "language compiler",
  "stars": "104k",
  "stableVersion": "v5.8.3",
  "description": "TypeScript language compiler",
  "category": "large",
  "emblematicFiles": {
    "coreFiles": [
      "src/compiler/checker.ts",
      "src/compiler/parser.ts",
      "src/compiler/binder.ts"
    ],
    "architecturalFiles": [
      "src/compiler/program.ts",
      "src/compiler/builder.ts",
      "src/services/services.ts"
    ],
    "performanceCriticalFiles": [
      "src/compiler/transformers/ts.ts",
      "src/compiler/emitter.ts",
      "src/compiler/scanner.ts"
    ],
    "complexAlgorithmFiles": [
      "src/compiler/types.ts",
      "src/compiler/utilities.ts"
    ]
  },
  "analysis": {
    "context": {
      "project": {
        "name": "typescript",
        "path": ".",
        "version": "5.9.0"
      },
      "analysis": {
        "timestamp": "2025-07-11T23:16:18.576Z",
        "durationMs": 15124,
        "toolVersion": "0.6.0",
        "filesAnalyzed": 697,
        "duplicationMode": "legacy"
      }
    },
    "overview": {
      "grade": "F",
      "statistics": {
        "totalFiles": 697,
        "totalLOC": 316000,
        "avgComplexity": 80.4,
        "avgLOC": 453,
        "avgDuplicationRatio": 0.04
      },
      "scores": {
        "complexity": 12,
        "duplication": 99,
        "maintainability": 12,
        "overall": 34
      },
      "summary": "278 critical files found requiring attention"
    },
    "details": [
      {
        "file": "src/deprecatedCompat/deprecate.ts",
        "metrics": {
          "complexity": 17,
          "loc": 62,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/deprecatedCompat/deprecations.ts",
        "metrics": {
          "complexity": 10,
          "loc": 77,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/jsTyping/jsTyping.ts",
        "metrics": {
          "complexity": 59,
          "loc": 294,
          "functionCount": 27,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.95
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/jsTyping/shared.ts",
        "metrics": {
          "complexity": 3,
          "loc": 46,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/jsTyping/types.ts",
        "metrics": {
          "complexity": 1,
          "loc": 99,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/binder.ts",
        "metrics": {
          "complexity": 979,
          "loc": 3256,
          "functionCount": 202,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 48.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.26
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/builder.ts",
        "metrics": {
          "complexity": 386,
          "loc": 1961,
          "functionCount": 165,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 19.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.96
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/builderPublic.ts",
        "metrics": {
          "complexity": 1,
          "loc": 155,
          "functionCount": 9,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/builderState.ts",
        "metrics": {
          "complexity": 83,
          "loc": 447,
          "functionCount": 48,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/builderStatePublic.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/checker.ts",
        "metrics": {
          "complexity": 16253,
          "loc": 43234,
          "functionCount": 3324,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 812.65
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 43.23
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/commandLineParser.ts",
        "metrics": {
          "complexity": 469,
          "loc": 3582,
          "functionCount": 187,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 23.45
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.58
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/core.ts",
        "metrics": {
          "complexity": 379,
          "loc": 1626,
          "functionCount": 275,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 18.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.63
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/corePublic.ts",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/debug.ts",
        "metrics": {
          "complexity": 279,
          "loc": 1089,
          "functionCount": 135,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/emitter.ts",
        "metrics": {
          "complexity": 1215,
          "loc": 5240,
          "functionCount": 447,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 60.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 5.24
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/executeCommandLine.ts",
        "metrics": {
          "complexity": 176,
          "loc": 1143,
          "functionCount": 97,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.8
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/expressionToTypeNode.ts",
        "metrics": {
          "complexity": 354,
          "loc": 1254,
          "functionCount": 81,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 17.7
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/moduleNameResolver.ts",
        "metrics": {
          "complexity": 709,
          "loc": 2475,
          "functionCount": 213,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 35.45
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.48
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/moduleSpecifiers.ts",
        "metrics": {
          "complexity": 346,
          "loc": 786,
          "functionCount": 75,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 17.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.62
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/parser.ts",
        "metrics": {
          "complexity": 2178,
          "loc": 6759,
          "functionCount": 756,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 108.9
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 6.76
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/path.ts",
        "metrics": {
          "complexity": 152,
          "loc": 535,
          "functionCount": 74,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.78
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/performance.ts",
        "metrics": {
          "complexity": 21,
          "loc": 120,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 50
      },
      {
        "file": "src/compiler/performanceCore.ts",
        "metrics": {
          "complexity": 14,
          "loc": 68,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 82
      },
      {
        "file": "src/compiler/program.ts",
        "metrics": {
          "complexity": 967,
          "loc": 4248,
          "functionCount": 382,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 48.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 4.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/programDiagnostics.ts",
        "metrics": {
          "complexity": 78,
          "loc": 374,
          "functionCount": 25,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/resolutionCache.ts",
        "metrics": {
          "complexity": 255,
          "loc": 1453,
          "functionCount": 100,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 12.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/scanner.ts",
        "metrics": {
          "complexity": 946,
          "loc": 3367,
          "functionCount": 164,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 47.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.37
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/semver.ts",
        "metrics": {
          "complexity": 99,
          "loc": 311,
          "functionCount": 28,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/sourcemap.ts",
        "metrics": {
          "complexity": 167,
          "loc": 654,
          "functionCount": 58,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.18
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/symbolWalker.ts",
        "metrics": {
          "complexity": 25,
          "loc": 190,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "src/compiler/sys.ts",
        "metrics": {
          "complexity": 274,
          "loc": 1627,
          "functionCount": 164,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.7
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.63
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/tracing.ts",
        "metrics": {
          "complexity": 37,
          "loc": 290,
          "functionCount": 18,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.85
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 25
      },
      {
        "file": "src/compiler/transformer.ts",
        "metrics": {
          "complexity": 67,
          "loc": 526,
          "functionCount": 50,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/tsbuild.ts",
        "metrics": {
          "complexity": 2,
          "loc": 115,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/tsbuildPublic.ts",
        "metrics": {
          "complexity": 339,
          "loc": 2119,
          "functionCount": 185,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 16.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/types.ts",
        "metrics": {
          "complexity": 2,
          "loc": 7259,
          "functionCount": 1,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 7.26
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/utilities.ts",
        "metrics": {
          "complexity": 3015,
          "loc": 9141,
          "functionCount": 975,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 150.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 9.14
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/utilitiesPublic.ts",
        "metrics": {
          "complexity": 708,
          "loc": 1951,
          "functionCount": 259,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 35.4
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.95
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/visitorPublic.ts",
        "metrics": {
          "complexity": 82,
          "loc": 1474,
          "functionCount": 173,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/watch.ts",
        "metrics": {
          "complexity": 135,
          "loc": 830,
          "functionCount": 97,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.77
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/watchPublic.ts",
        "metrics": {
          "complexity": 133,
          "loc": 979,
          "functionCount": 73,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.26
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/watchUtilities.ts",
        "metrics": {
          "complexity": 100,
          "loc": 670,
          "functionCount": 61,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.23
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/client.ts",
        "metrics": {
          "complexity": 59,
          "loc": 918,
          "functionCount": 146,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.06
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/collectionsImpl.ts",
        "metrics": {
          "complexity": 52,
          "loc": 272,
          "functionCount": 32,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.36
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/compilerImpl.ts",
        "metrics": {
          "complexity": 76,
          "loc": 251,
          "functionCount": 25,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.8
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/documentsUtil.ts",
        "metrics": {
          "complexity": 25,
          "loc": 160,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "src/harness/evaluatorImpl.ts",
        "metrics": {
          "complexity": 122,
          "loc": 636,
          "functionCount": 51,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/fakesHosts.ts",
        "metrics": {
          "complexity": 50,
          "loc": 324,
          "functionCount": 58,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/findUpDir.ts",
        "metrics": {
          "complexity": 4,
          "loc": 17,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/harnessGlobals.ts",
        "metrics": {
          "complexity": 6,
          "loc": 31,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/harnessIO.ts",
        "metrics": {
          "complexity": 313,
          "loc": 1316,
          "functionCount": 143,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 2,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.65
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/harnessLanguageService.ts",
        "metrics": {
          "complexity": 22,
          "loc": 566,
          "functionCount": 106,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 10,
          "incomingDependencies": 3,
          "instability": 0.77,
          "cohesionScore": 0.57,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.89
          }
        ],
        "healthScore": 18
      },
      {
        "file": "src/harness/harnessUtils.ts",
        "metrics": {
          "complexity": 73,
          "loc": 313,
          "functionCount": 33,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/incrementalUtils.ts",
        "metrics": {
          "complexity": 39,
          "loc": 610,
          "functionCount": 81,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 7,
          "instability": 0.13,
          "cohesionScore": 0.5,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.03
          }
        ],
        "healthScore": 2
      },
      {
        "file": "src/harness/projectServiceStateLogger.ts",
        "metrics": {
          "complexity": 74,
          "loc": 459,
          "functionCount": 37,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 2,
          "instability": 0.6,
          "cohesionScore": 0.56,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.7
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.53
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/runnerbase.ts",
        "metrics": {
          "complexity": 4,
          "loc": 42,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/sourceMapRecorder.ts",
        "metrics": {
          "complexity": 52,
          "loc": 305,
          "functionCount": 22,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/tsserverLogger.ts",
        "metrics": {
          "complexity": 9,
          "loc": 141,
          "functionCount": 22,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 12,
          "instability": 0.14,
          "cohesionScore": 0.58,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/typeWriter.ts",
        "metrics": {
          "complexity": 59,
          "loc": 292,
          "functionCount": 40,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.95
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/util.ts",
        "metrics": {
          "complexity": 38,
          "loc": 106,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.9
          }
        ],
        "healthScore": 36
      },
      {
        "file": "src/harness/vfsUtil.ts",
        "metrics": {
          "complexity": 326,
          "loc": 1222,
          "functionCount": 121,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 16.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/vpathUtil.ts",
        "metrics": {
          "complexity": 38,
          "loc": 106,
          "functionCount": 8,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.9
          }
        ],
        "healthScore": 36
      },
      {
        "file": "src/harness/watchUtils.ts",
        "metrics": {
          "complexity": 36,
          "loc": 227,
          "functionCount": 24,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.8
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 31
      },
      {
        "file": "src/server/editorServices.ts",
        "metrics": {
          "complexity": 802,
          "loc": 4403,
          "functionCount": 408,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 40.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 4.4
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/server/moduleSpecifierCache.ts",
        "metrics": {
          "complexity": 13,
          "loc": 98,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "src/server/packageJsonCache.ts",
        "metrics": {
          "complexity": 6,
          "loc": 72,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/server/project.ts",
        "metrics": {
          "complexity": 403,
          "loc": 2500,
          "functionCount": 299,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 20.15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.5
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/server/protocol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1473,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 8,
          "instability": 0.11,
          "cohesionScore": 0.5,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 52
      },
      {
        "file": "src/server/scriptInfo.ts",
        "metrics": {
          "complexity": 115,
          "loc": 545,
          "functionCount": 63,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.82
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/server/scriptVersionCache.ts",
        "metrics": {
          "complexity": 121,
          "loc": 733,
          "functionCount": 61,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.44
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/server/session.ts",
        "metrics": {
          "complexity": 467,
          "loc": 3496,
          "functionCount": 496,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 23.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.5
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/server/types.ts",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/server/typingInstallerAdapter.ts",
        "metrics": {
          "complexity": 24,
          "loc": 224,
          "functionCount": 11,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 41
      },
      {
        "file": "src/server/utilities.ts",
        "metrics": {
          "complexity": 13,
          "loc": 62,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "src/server/utilitiesPublic.ts",
        "metrics": {
          "complexity": 2,
          "loc": 115,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/compilerRunner.ts",
        "metrics": {
          "complexity": 52,
          "loc": 299,
          "functionCount": 36,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/projectsRunner.ts",
        "metrics": {
          "complexity": 71,
          "loc": 408,
          "functionCount": 50,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/runner.ts",
        "metrics": {
          "complexity": 59,
          "loc": 237,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.95
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.19
          }
        ],
        "healthScore": 1
      },
      {
        "file": "src/testRunner/tests.ts",
        "metrics": {
          "complexity": 1,
          "loc": 232,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 232,
          "incomingDependencies": 1,
          "instability": 1,
          "cohesionScore": 0.41,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 92
      },
      {
        "file": "src/testRunner/transpileRunner.ts",
        "metrics": {
          "complexity": 18,
          "loc": 121,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 64
      },
      {
        "file": "src/services/breakpoints.ts",
        "metrics": {
          "complexity": 215,
          "loc": 580,
          "functionCount": 31,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.93
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/callHierarchy.ts",
        "metrics": {
          "complexity": 182,
          "loc": 578,
          "functionCount": 43,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.93
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/classifier.ts",
        "metrics": {
          "complexity": 341,
          "loc": 471,
          "functionCount": 41,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 17.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.57
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/classifier2020.ts",
        "metrics": {
          "complexity": 84,
          "loc": 276,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.2
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codeFixProvider.ts",
        "metrics": {
          "complexity": 14,
          "loc": 111,
          "functionCount": 18,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 82
      },
      {
        "file": "src/services/completions.ts",
        "metrics": {
          "complexity": 1506,
          "loc": 5034,
          "functionCount": 278,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 75.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 5.03
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/documentHighlights.ts",
        "metrics": {
          "complexity": 136,
          "loc": 477,
          "functionCount": 57,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.59
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/documentRegistry.ts",
        "metrics": {
          "complexity": 34,
          "loc": 280,
          "functionCount": 24,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 30
      },
      {
        "file": "src/services/exportInfoMap.ts",
        "metrics": {
          "complexity": 133,
          "loc": 551,
          "functionCount": 50,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/findAllReferences.ts",
        "metrics": {
          "complexity": 713,
          "loc": 2177,
          "functionCount": 179,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 35.65
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.18
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/getEditsForFileRename.ts",
        "metrics": {
          "complexity": 72,
          "loc": 263,
          "functionCount": 29,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.6
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/goToDefinition.ts",
        "metrics": {
          "complexity": 195,
          "loc": 595,
          "functionCount": 49,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/importTracker.ts",
        "metrics": {
          "complexity": 192,
          "loc": 635,
          "functionCount": 45,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/inlayHints.ts",
        "metrics": {
          "complexity": 211,
          "loc": 875,
          "functionCount": 40,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.92
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/jsDoc.ts",
        "metrics": {
          "complexity": 146,
          "loc": 542,
          "functionCount": 42,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.81
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/mapCode.ts",
        "metrics": {
          "complexity": 38,
          "loc": 282,
          "functionCount": 27,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.9
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.41
          }
        ],
        "healthScore": 25
      },
      {
        "file": "src/services/navigateTo.ts",
        "metrics": {
          "complexity": 37,
          "loc": 153,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.85
          }
        ],
        "healthScore": 37
      },
      {
        "file": "src/services/navigationBar.ts",
        "metrics": {
          "complexity": 267,
          "loc": 916,
          "functionCount": 53,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.05
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/organizeImports.ts",
        "metrics": {
          "complexity": 170,
          "loc": 741,
          "functionCount": 73,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.47
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/outliningElementsCollector.ts",
        "metrics": {
          "complexity": 110,
          "loc": 365,
          "functionCount": 26,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/pasteEdits.ts",
        "metrics": {
          "complexity": 20,
          "loc": 163,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "src/services/patternMatcher.ts",
        "metrics": {
          "complexity": 107,
          "loc": 348,
          "functionCount": 40,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/preProcess.ts",
        "metrics": {
          "complexity": 105,
          "loc": 368,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/preparePasteEdits.ts",
        "metrics": {
          "complexity": 13,
          "loc": 44,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "src/services/refactorProvider.ts",
        "metrics": {
          "complexity": 5,
          "loc": 24,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/rename.ts",
        "metrics": {
          "complexity": 55,
          "loc": 220,
          "functionCount": 14,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.75
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 3
      },
      {
        "file": "src/services/services.ts",
        "metrics": {
          "complexity": 506,
          "loc": 2812,
          "functionCount": 318,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 25.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.81
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/signatureHelp.ts",
        "metrics": {
          "complexity": 142,
          "loc": 643,
          "functionCount": 63,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.14
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/smartSelection.ts",
        "metrics": {
          "complexity": 95,
          "loc": 263,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.75
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/sourcemaps.ts",
        "metrics": {
          "complexity": 47,
          "loc": 192,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          }
        ],
        "healthScore": 18
      },
      {
        "file": "src/services/stringCompletions.ts",
        "metrics": {
          "complexity": 286,
          "loc": 932,
          "functionCount": 101,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.11
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/suggestionDiagnostics.ts",
        "metrics": {
          "complexity": 103,
          "loc": 276,
          "functionCount": 26,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/symbolDisplay.ts",
        "metrics": {
          "complexity": 270,
          "loc": 806,
          "functionCount": 31,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.69
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/textChanges.ts",
        "metrics": {
          "complexity": 266,
          "loc": 1471,
          "functionCount": 165,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/transform.ts",
        "metrics": {
          "complexity": 2,
          "loc": 20,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/transpile.ts",
        "metrics": {
          "complexity": 28,
          "loc": 183,
          "functionCount": 19,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 47
      },
      {
        "file": "src/services/types.ts",
        "metrics": {
          "complexity": 4,
          "loc": 1162,
          "functionCount": 6,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 55
      },
      {
        "file": "src/services/utilities.ts",
        "metrics": {
          "complexity": 1037,
          "loc": 3346,
          "functionCount": 361,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 51.85
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.35
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/tsserver/common.ts",
        "metrics": {
          "complexity": 5,
          "loc": 31,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/tsserver/nodeServer.ts",
        "metrics": {
          "complexity": 134,
          "loc": 612,
          "functionCount": 61,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.7
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.04
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/tsserver/server.ts",
        "metrics": {
          "complexity": 8,
          "loc": 45,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.56,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/typescript/typescript.ts",
        "metrics": {
          "complexity": 7,
          "loc": 22,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0.5,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/tsc/tsc.ts",
        "metrics": {
          "complexity": 6,
          "loc": 16,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.5,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/decorators.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 105,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/decorators.legacy.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/dom.asynciterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/lib/dom.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15363,
          "functionCount": 168,
          "duplicationRatio": 0.27
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 15.36
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.82
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/lib/dom.iterable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 50,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/dom.iterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 300,
          "functionCount": 0,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.51
          }
        ],
        "healthScore": 31
      },
      {
        "file": "src/lib/es2015.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 60,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.core.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 128,
          "functionCount": 0,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.generator.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.iterable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 204,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 94
      },
      {
        "file": "src/lib/es2015.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 0,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.proxy.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.reflect.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 38,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.symbol.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2015.symbol.wellknown.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2016.array.include.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2016.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2016.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2016.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.arraybuffer.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.date.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0.5
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.67
          }
        ],
        "healthScore": 31
      },
      {
        "file": "src/lib/es2017.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.sharedmemory.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 30,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2017.typedarrays.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 27,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.asyncgenerator.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.asynciterable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 55,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2018.regexp.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 25,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2019.symbol.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.bigint.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 147,
          "functionCount": 0,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.date.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 195,
          "functionCount": 0,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.number.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.sharedmemory.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2020.symbol.wellknown.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2021.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2021.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2021.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 50,
          "functionCount": 0,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2021.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2021.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2021.weakref.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 19,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.error.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 46,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 1,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.regexp.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 14,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2022.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2023.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 316,
          "functionCount": 0,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 80
      },
      {
        "file": "src/lib/es2023.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2023.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2023.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2023.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 32,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.arraybuffer.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 8,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.regexp.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.sharedmemory.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es2024.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/es5.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1105,
          "functionCount": 11,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 56
      },
      {
        "file": "src/lib/es5.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.decorators.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.disposable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 54,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.float16.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 88,
          "functionCount": 0,
          "duplicationRatio": 0.52
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 16
      },
      {
        "file": "src/lib/esnext.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.iterator.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 31,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/esnext.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/header.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 0,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/scripthost.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 87,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/webworker.asynciterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/lib/webworker.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5939,
          "functionCount": 30,
          "duplicationRatio": 0.79
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 5.94
          },
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/lib/webworker.importscripts.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/lib/webworker.iterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 157,
          "functionCount": 0,
          "duplicationRatio": 0.76
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/typingsInstaller/nodeTypingsInstaller.ts",
        "metrics": {
          "complexity": 33,
          "loc": 190,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.33,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          }
        ],
        "healthScore": 42
      },
      {
        "file": "src/typingsInstallerCore/typingsInstaller.ts",
        "metrics": {
          "complexity": 84,
          "loc": 473,
          "functionCount": 33,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/watchGuard/watchGuard.ts",
        "metrics": {
          "complexity": 3,
          "loc": 11,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/deprecatedCompat/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 5,
          "instability": 0.29,
          "cohesionScore": 0.38,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/jsTyping/_namespaces/ts.JsTyping.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/jsTyping/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 8,
          "instability": 0.2,
          "cohesionScore": 0.5,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/jsTyping/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 9,
          "instability": 0.25,
          "cohesionScore": 0.58,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/_namespaces/ts.moduleSpecifiers.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/_namespaces/ts.performance.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 10,
          "instability": 0.09,
          "cohesionScore": 0.5,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 77,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 74,
          "incomingDependencies": 82,
          "instability": 0.47,
          "cohesionScore": 0.5,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/factory/baseNodeFactory.ts",
        "metrics": {
          "complexity": 6,
          "loc": 41,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/factory/emitHelpers.ts",
        "metrics": {
          "complexity": 38,
          "loc": 1112,
          "functionCount": 45,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.9
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/factory/emitNode.ts",
        "metrics": {
          "complexity": 15,
          "loc": 229,
          "functionCount": 40,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.15
          }
        ],
        "healthScore": 71
      },
      {
        "file": "src/compiler/factory/nodeChildren.ts",
        "metrics": {
          "complexity": 7,
          "loc": 45,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/factory/nodeConverters.ts",
        "metrics": {
          "complexity": 22,
          "loc": 177,
          "functionCount": 12,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 50
      },
      {
        "file": "src/compiler/factory/nodeFactory.ts",
        "metrics": {
          "complexity": 949,
          "loc": 6081,
          "functionCount": 644,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 47.45
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 6.08
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/factory/nodeTests.ts",
        "metrics": {
          "complexity": 2,
          "loc": 912,
          "functionCount": 227,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.04
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/compiler/factory/parenthesizerRules.ts",
        "metrics": {
          "complexity": 98,
          "loc": 416,
          "functionCount": 54,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.39
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/factory/utilities.ts",
        "metrics": {
          "complexity": 263,
          "loc": 1248,
          "functionCount": 117,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/factory/utilitiesPublic.ts",
        "metrics": {
          "complexity": 32,
          "loc": 49,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 44
      },
      {
        "file": "src/compiler/transformers/classFields.ts",
        "metrics": {
          "complexity": 537,
          "loc": 2583,
          "functionCount": 125,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 26.85
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.58
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/classThis.ts",
        "metrics": {
          "complexity": 11,
          "loc": 91,
          "functionCount": 5,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "src/compiler/transformers/declarations.ts",
        "metrics": {
          "complexity": 410,
          "loc": 1772,
          "functionCount": 102,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 20.5
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.77
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/destructuring.ts",
        "metrics": {
          "complexity": 91,
          "loc": 475,
          "functionCount": 28,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/es2015.ts",
        "metrics": {
          "complexity": 637,
          "loc": 3382,
          "functionCount": 179,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 31.85
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.38
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/es2016.ts",
        "metrics": {
          "complexity": 10,
          "loc": 109,
          "functionCount": 6,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/transformers/es2017.ts",
        "metrics": {
          "complexity": 154,
          "loc": 950,
          "functionCount": 51,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.7
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.17
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/es2018.ts",
        "metrics": {
          "complexity": 171,
          "loc": 1265,
          "functionCount": 60,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.26
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/es2019.ts",
        "metrics": {
          "complexity": 6,
          "loc": 45,
          "functionCount": 4,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/transformers/es2020.ts",
        "metrics": {
          "complexity": 51,
          "loc": 243,
          "functionCount": 12,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.55
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 1
      },
      {
        "file": "src/compiler/transformers/es2021.ts",
        "metrics": {
          "complexity": 10,
          "loc": 96,
          "functionCount": 4,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/transformers/esDecorators.ts",
        "metrics": {
          "complexity": 340,
          "loc": 1883,
          "functionCount": 101,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 17
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.88
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/esnext.ts",
        "metrics": {
          "complexity": 84,
          "loc": 575,
          "functionCount": 31,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.92
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/generators.ts",
        "metrics": {
          "complexity": 300,
          "loc": 2121,
          "functionCount": 131,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/jsx.ts",
        "metrics": {
          "complexity": 118,
          "loc": 803,
          "functionCount": 46,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.68
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/legacyDecorators.ts",
        "metrics": {
          "complexity": 69,
          "loc": 526,
          "functionCount": 43,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.45
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/namedEvaluation.ts",
        "metrics": {
          "complexity": 40,
          "loc": 300,
          "functionCount": 19,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 19
      },
      {
        "file": "src/compiler/transformers/taggedTemplate.ts",
        "metrics": {
          "complexity": 10,
          "loc": 95,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/transformers/ts.ts",
        "metrics": {
          "complexity": 370,
          "loc": 1876,
          "functionCount": 129,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 18.5
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.88
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/typeSerializer.ts",
        "metrics": {
          "complexity": 143,
          "loc": 438,
          "functionCount": 25,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/utilities.ts",
        "metrics": {
          "complexity": 154,
          "loc": 654,
          "functionCount": 60,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.7
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.18
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/_namespaces/FourSlash.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/FourSlashInterface.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/Harness.LanguageService.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/Harness.SourceMapRecorder.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/Harness.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 11,
          "instability": 0.31,
          "cohesionScore": 0.6,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/Utils.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 4,
          "instability": 0.43,
          "cohesionScore": 0.5,
          "percentileUsageRank": 92,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/collections.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0.5,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/compiler.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/documents.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 6,
          "instability": 0.14,
          "cohesionScore": 0.5,
          "percentileUsageRank": 94,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/evaluator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/fakes.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 5,
          "instability": 0.17,
          "cohesionScore": 0.5,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 4,
          "instability": 0.5,
          "cohesionScore": 0.31,
          "percentileUsageRank": 92,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 21,
          "instability": 0.28,
          "cohesionScore": 0.34,
          "percentileUsageRank": 98,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/harness/_namespaces/vfs.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 7,
          "instability": 0.13,
          "cohesionScore": 0.5,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/harness/_namespaces/vpath.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 7,
          "instability": 0.13,
          "cohesionScore": 0.5,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/server/_namespaces/ts.server.protocol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/server/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 14,
          "incomingDependencies": 14,
          "instability": 0.5,
          "cohesionScore": 0.48,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/server/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 15,
          "instability": 0.25,
          "cohesionScore": 0.35,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/FourSlash.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/Harness.Parallel.Host.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/Harness.Parallel.Worker.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/Harness.Parallel.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/Harness.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 49,
          "instability": 0.09,
          "cohesionScore": 0.5,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/Utils.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 67,
          "instability": 0.01,
          "cohesionScore": 0.25,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/documents.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 5,
          "instability": 0.17,
          "cohesionScore": 0.25,
          "percentileUsageRank": 93,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/evaluator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 21,
          "instability": 0.05,
          "cohesionScore": 0.25,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/fakes.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 13,
          "instability": 0.07,
          "cohesionScore": 0.25,
          "percentileUsageRank": 97,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/project.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 7,
          "instability": 0.36,
          "cohesionScore": 0.25,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 190,
          "instability": 0.04,
          "cohesionScore": 0.31,
          "percentileUsageRank": 100,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/_namespaces/vfs.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 15,
          "instability": 0.06,
          "cohesionScore": 0.25,
          "percentileUsageRank": 97,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/_namespaces/vpath.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0.25,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/parallel/host.ts",
        "metrics": {
          "complexity": 97,
          "loc": 595,
          "functionCount": 46,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/parallel/shared.ts",
        "metrics": {
          "complexity": 1,
          "loc": 72,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/parallel/worker.ts",
        "metrics": {
          "complexity": 48,
          "loc": 263,
          "functionCount": 43,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 5
      },
      {
        "file": "src/testRunner/unittests/asserts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/base64.ts",
        "metrics": {
          "complexity": 2,
          "loc": 18,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/builder.ts",
        "metrics": {
          "complexity": 6,
          "loc": 115,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.63,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/canWatch.ts",
        "metrics": {
          "complexity": 16,
          "loc": 217,
          "functionCount": 39,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 63
      },
      {
        "file": "src/testRunner/unittests/comments.ts",
        "metrics": {
          "complexity": 1,
          "loc": 25,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/compilerCore.ts",
        "metrics": {
          "complexity": 8,
          "loc": 162,
          "functionCount": 33,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/convertToBase64.ts",
        "metrics": {
          "complexity": 2,
          "loc": 27,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/customTransforms.ts",
        "metrics": {
          "complexity": 19,
          "loc": 196,
          "functionCount": 37,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 61
      },
      {
        "file": "src/testRunner/unittests/debugDeprecation.ts",
        "metrics": {
          "complexity": 1,
          "loc": 97,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/diagnosticCollection.ts",
        "metrics": {
          "complexity": 1,
          "loc": 102,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/factory.ts",
        "metrics": {
          "complexity": 2,
          "loc": 77,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers.ts",
        "metrics": {
          "complexity": 18,
          "loc": 164,
          "functionCount": 33,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 135,
          "instability": 0.01,
          "cohesionScore": 0.5,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 64
      },
      {
        "file": "src/testRunner/unittests/incrementalParser.ts",
        "metrics": {
          "complexity": 10,
          "loc": 452,
          "functionCount": 98,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.51
          }
        ],
        "healthScore": 71
      },
      {
        "file": "src/testRunner/unittests/jsDocParsing.ts",
        "metrics": {
          "complexity": 8,
          "loc": 373,
          "functionCount": 28,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.24
          }
        ],
        "healthScore": 76
      },
      {
        "file": "src/testRunner/unittests/jsonParserRecovery.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/moduleResolution.ts",
        "metrics": {
          "complexity": 44,
          "loc": 720,
          "functionCount": 129,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.4
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/parsePseudoBigInt.ts",
        "metrics": {
          "complexity": 15,
          "loc": 70,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/testRunner/unittests/paths.ts",
        "metrics": {
          "complexity": 1,
          "loc": 407,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          }
        ],
        "healthScore": 74
      },
      {
        "file": "src/testRunner/unittests/printer.ts",
        "metrics": {
          "complexity": 1,
          "loc": 316,
          "functionCount": 33,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 80
      },
      {
        "file": "src/testRunner/unittests/programApi.ts",
        "metrics": {
          "complexity": 9,
          "loc": 190,
          "functionCount": 35,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/publicApi.ts",
        "metrics": {
          "complexity": 10,
          "loc": 284,
          "functionCount": 45,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.42
          }
        ],
        "healthScore": 88
      },
      {
        "file": "src/testRunner/unittests/regExpScannerRecovery.ts",
        "metrics": {
          "complexity": 4,
          "loc": 80,
          "functionCount": 3,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 81
      },
      {
        "file": "src/testRunner/unittests/reuseProgramStructure.ts",
        "metrics": {
          "complexity": 9,
          "loc": 800,
          "functionCount": 104,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.57,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.67
          }
        ],
        "healthScore": 66
      },
      {
        "file": "src/testRunner/unittests/semver.ts",
        "metrics": {
          "complexity": 12,
          "loc": 839,
          "functionCount": 16,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.8
          }
        ],
        "healthScore": 54
      },
      {
        "file": "src/testRunner/unittests/skipJSDocParsing.ts",
        "metrics": {
          "complexity": 5,
          "loc": 54,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/transform.ts",
        "metrics": {
          "complexity": 24,
          "loc": 682,
          "functionCount": 104,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.27
          }
        ],
        "healthScore": 16
      },
      {
        "file": "src/testRunner/unittests/typeParameterIsPossiblyReferenced.ts",
        "metrics": {
          "complexity": 1,
          "loc": 38,
          "functionCount": 2,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.BreakpointResolver.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.CallHierarchy.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.Completions.StringCompletions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.Completions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.63,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.FindAllReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.5,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.GoToDefinition.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.InlayHints.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.JsDoc.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.MapCode.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.NavigateTo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.NavigationBar.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.OrganizeImports.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.OutliningElementsCollector.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.PasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.Rename.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.SignatureHelp.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.SmartSelectionRange.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.SymbolDisplay.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.classifier.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.75,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.classifier.v2020.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.codefix.ts",
        "metrics": {
          "complexity": 1,
          "loc": 74,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 74,
          "incomingDependencies": 73,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.formatting.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 8,
          "instability": 0.47,
          "cohesionScore": 0.5,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.preparePasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.addOrRemoveBracesToArrowFunction.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.convertArrowFunctionOrFunctionExpression.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.convertParamsToDestructuredObject.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.convertStringOrTemplateLiteral.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.convertToOptionalChainExpression.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.extractSymbol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.generateGetAccessorAndSetAccessor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.inferFunctionReturnType.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.refactor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 24,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 16,
          "incomingDependencies": 19,
          "instability": 0.46,
          "cohesionScore": 0.63,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.textChanges.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 62,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 39,
          "incomingDependencies": 138,
          "instability": 0.22,
          "cohesionScore": 0.63,
          "percentileUsageRank": 100,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/formatting/formatting.ts",
        "metrics": {
          "complexity": 299,
          "loc": 1096,
          "functionCount": 68,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/formatting/formattingContext.ts",
        "metrics": {
          "complexity": 8,
          "loc": 90,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/formatting/formattingScanner.ts",
        "metrics": {
          "complexity": 55,
          "loc": 267,
          "functionCount": 21,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.75
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/formatting/rule.ts",
        "metrics": {
          "complexity": 1,
          "loc": 34,
          "functionCount": 0,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/formatting/rules.ts",
        "metrics": {
          "complexity": 185,
          "loc": 731,
          "functionCount": 83,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.44
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/formatting/rulesMap.ts",
        "metrics": {
          "complexity": 24,
          "loc": 119,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 49
      },
      {
        "file": "src/services/formatting/smartIndenter.ts",
        "metrics": {
          "complexity": 213,
          "loc": 542,
          "functionCount": 32,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.81
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/addOrRemoveBracesToArrowFunction.ts",
        "metrics": {
          "complexity": 24,
          "loc": 139,
          "functionCount": 4,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 49
      },
      {
        "file": "src/services/refactors/convertArrowFunctionOrFunctionExpression.ts",
        "metrics": {
          "complexity": 58,
          "loc": 276,
          "functionCount": 18,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/convertExport.ts",
        "metrics": {
          "complexity": 73,
          "loc": 297,
          "functionCount": 14,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/convertImport.ts",
        "metrics": {
          "complexity": 47,
          "loc": 251,
          "functionCount": 23,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 9
      },
      {
        "file": "src/services/refactors/convertOverloadListToSingleSignature.ts",
        "metrics": {
          "complexity": 39,
          "loc": 252,
          "functionCount": 16,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.95
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.26
          }
        ],
        "healthScore": 25
      },
      {
        "file": "src/services/refactors/convertParamsToDestructuredObject.ts",
        "metrics": {
          "complexity": 141,
          "loc": 673,
          "functionCount": 46,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.24
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/convertStringOrTemplateLiteral.ts",
        "metrics": {
          "complexity": 46,
          "loc": 246,
          "functionCount": 23,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 11
      },
      {
        "file": "src/services/refactors/convertToOptionalChainExpression.ts",
        "metrics": {
          "complexity": 87,
          "loc": 271,
          "functionCount": 19,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/extractSymbol.ts",
        "metrics": {
          "complexity": 442,
          "loc": 1770,
          "functionCount": 74,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 22.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.77
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/extractType.ts",
        "metrics": {
          "complexity": 81,
          "loc": 395,
          "functionCount": 31,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/generateGetAccessorAndSetAccessor.ts",
        "metrics": {
          "complexity": 10,
          "loc": 58,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/refactors/helpers.ts",
        "metrics": {
          "complexity": 10,
          "loc": 60,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 2,
          "instability": 0.5,
          "cohesionScore": 0.63,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/refactors/inferFunctionReturnType.ts",
        "metrics": {
          "complexity": 34,
          "loc": 146,
          "functionCount": 8,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          }
        ],
        "healthScore": 41
      },
      {
        "file": "src/services/refactors/inlineVariable.ts",
        "metrics": {
          "complexity": 47,
          "loc": 207,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.03
          }
        ],
        "healthScore": 12
      },
      {
        "file": "src/services/refactors/moveToFile.ts",
        "metrics": {
          "complexity": 311,
          "loc": 1004,
          "functionCount": 96,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 4,
          "instability": 0.33,
          "cohesionScore": 0.5,
          "percentileUsageRank": 92,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/refactors/moveToNewFile.ts",
        "metrics": {
          "complexity": 12,
          "loc": 82,
          "functionCount": 4,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 88
      },
      {
        "file": "src/typescript/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/typescript/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/addConvertToUnknownForNonOverlappingTypes.ts",
        "metrics": {
          "complexity": 6,
          "loc": 48,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/addEmptyExportDeclaration.ts",
        "metrics": {
          "complexity": 1,
          "loc": 29,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/addMissingAsync.ts",
        "metrics": {
          "complexity": 20,
          "loc": 111,
          "functionCount": 15,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "src/services/codefixes/addMissingAwait.ts",
        "metrics": {
          "complexity": 84,
          "loc": 317,
          "functionCount": 23,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/addMissingConst.ts",
        "metrics": {
          "complexity": 34,
          "loc": 116,
          "functionCount": 14,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          }
        ],
        "healthScore": 41
      },
      {
        "file": "src/services/codefixes/addMissingDeclareProperty.ts",
        "metrics": {
          "complexity": 6,
          "loc": 46,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/addMissingInvocationForDecorator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 5,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/services/codefixes/addMissingResolutionModeImportAttribute.ts",
        "metrics": {
          "complexity": 6,
          "loc": 105,
          "functionCount": 5,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/addNameToNamelessParameter.ts",
        "metrics": {
          "complexity": 9,
          "loc": 70,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/addOptionalPropertyUndefined.ts",
        "metrics": {
          "complexity": 30,
          "loc": 118,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 46
      },
      {
        "file": "src/services/codefixes/annotateWithTypeFromJSDoc.ts",
        "metrics": {
          "complexity": 58,
          "loc": 213,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 2
      },
      {
        "file": "src/services/codefixes/convertConstToLet.ts",
        "metrics": {
          "complexity": 7,
          "loc": 67,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/convertFunctionToEs6Class.ts",
        "metrics": {
          "complexity": 72,
          "loc": 286,
          "functionCount": 22,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.6
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.43
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/convertLiteralTypeToMappedType.ts",
        "metrics": {
          "complexity": 5,
          "loc": 75,
          "functionCount": 6,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/convertToAsyncFunction.ts",
        "metrics": {
          "complexity": 164,
          "loc": 705,
          "functionCount": 56,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.35
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/convertToEsModule.ts",
        "metrics": {
          "complexity": 116,
          "loc": 561,
          "functionCount": 50,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.87
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/convertToMappedObjectType.ts",
        "metrics": {
          "complexity": 9,
          "loc": 84,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/convertToTypeOnlyExport.ts",
        "metrics": {
          "complexity": 8,
          "loc": 95,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/convertToTypeOnlyImport.ts",
        "metrics": {
          "complexity": 27,
          "loc": 141,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 48
      },
      {
        "file": "src/services/codefixes/convertTypedefToType.ts",
        "metrics": {
          "complexity": 34,
          "loc": 189,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          }
        ],
        "healthScore": 41
      },
      {
        "file": "src/services/codefixes/correctQualifiedNameToIndexedAccessType.ts",
        "metrics": {
          "complexity": 4,
          "loc": 51,
          "functionCount": 6,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/disableJsDiagnostics.ts",
        "metrics": {
          "complexity": 10,
          "loc": 72,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixAddMissingConstraint.ts",
        "metrics": {
          "complexity": 23,
          "loc": 127,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          }
        ],
        "healthScore": 50
      },
      {
        "file": "src/services/codefixes/fixAddMissingMember.ts",
        "metrics": {
          "complexity": 187,
          "loc": 703,
          "functionCount": 51,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.34
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/fixAddMissingNewOperator.ts",
        "metrics": {
          "complexity": 2,
          "loc": 42,
          "functionCount": 6,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixAddMissingParam.ts",
        "metrics": {
          "complexity": 51,
          "loc": 327,
          "functionCount": 20,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/fixAddModuleReferTypeMissingTypeof.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 6,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixAddVoidToPromise.ts",
        "metrics": {
          "complexity": 27,
          "loc": 100,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 48
      },
      {
        "file": "src/services/codefixes/fixAwaitInSyncFunction.ts",
        "metrics": {
          "complexity": 21,
          "loc": 105,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 50
      },
      {
        "file": "src/services/codefixes/fixCannotFindModule.ts",
        "metrics": {
          "complexity": 13,
          "loc": 76,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "src/services/codefixes/fixClassDoesntImplementInheritedAbstractMember.ts",
        "metrics": {
          "complexity": 4,
          "loc": 70,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixClassIncorrectlyImplementsInterface.ts",
        "metrics": {
          "complexity": 10,
          "loc": 119,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixClassSuperMustPrecedeThisAccess.ts",
        "metrics": {
          "complexity": 11,
          "loc": 68,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "src/services/codefixes/fixConstructorForDerivedNeedSuperCall.ts",
        "metrics": {
          "complexity": 1,
          "loc": 38,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixEnableJsxFlag.ts",
        "metrics": {
          "complexity": 3,
          "loc": 39,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixExpectedComma.ts",
        "metrics": {
          "complexity": 7,
          "loc": 55,
          "functionCount": 6,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixExtendsInterfaceBecomesImplements.ts",
        "metrics": {
          "complexity": 9,
          "loc": 60,
          "functionCount": 6,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixForgottenThisPropertyAccess.ts",
        "metrics": {
          "complexity": 8,
          "loc": 57,
          "functionCount": 6,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixImplicitThis.ts",
        "metrics": {
          "complexity": 11,
          "loc": 71,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "src/services/codefixes/fixImportNonExportedMember.ts",
        "metrics": {
          "complexity": 35,
          "loc": 183,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 40
      },
      {
        "file": "src/services/codefixes/fixIncorrectNamedTupleSyntax.ts",
        "metrics": {
          "complexity": 12,
          "loc": 64,
          "functionCount": 5,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 88
      },
      {
        "file": "src/services/codefixes/fixInvalidImportSyntax.ts",
        "metrics": {
          "complexity": 13,
          "loc": 115,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "src/services/codefixes/fixInvalidJsxCharacters.ts",
        "metrics": {
          "complexity": 3,
          "loc": 50,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixJSDocTypes.ts",
        "metrics": {
          "complexity": 29,
          "loc": 121,
          "functionCount": 9,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 46
      },
      {
        "file": "src/services/codefixes/fixMissingCallParentheses.ts",
        "metrics": {
          "complexity": 6,
          "loc": 53,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixMissingTypeAnnotationOnExports.ts",
        "metrics": {
          "complexity": 163,
          "loc": 1047,
          "functionCount": 60,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/fixModuleAndTargetOptions.ts",
        "metrics": {
          "complexity": 9,
          "loc": 56,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixNaNEquality.ts",
        "metrics": {
          "complexity": 16,
          "loc": 82,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 70
      },
      {
        "file": "src/services/codefixes/fixNoPropertyAccessFromIndexSignature.ts",
        "metrics": {
          "complexity": 2,
          "loc": 48,
          "functionCount": 6,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixOverrideModifier.ts",
        "metrics": {
          "complexity": 33,
          "loc": 208,
          "functionCount": 11,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 35
      },
      {
        "file": "src/services/codefixes/fixPropertyAssignment.ts",
        "metrics": {
          "complexity": 1,
          "loc": 37,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixPropertyOverrideAccessor.ts",
        "metrics": {
          "complexity": 9,
          "loc": 72,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixReturnTypeInAsyncFunction.ts",
        "metrics": {
          "complexity": 7,
          "loc": 76,
          "functionCount": 6,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/fixSpelling.ts",
        "metrics": {
          "complexity": 41,
          "loc": 172,
          "functionCount": 8,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.05
          }
        ],
        "healthScore": 30
      },
      {
        "file": "src/services/codefixes/fixStrictClassInitialization.ts",
        "metrics": {
          "complexity": 29,
          "loc": 173,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 46
      },
      {
        "file": "src/services/codefixes/fixUnmatchedParameter.ts",
        "metrics": {
          "complexity": 17,
          "loc": 120,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/services/codefixes/fixUnreachableCode.ts",
        "metrics": {
          "complexity": 15,
          "loc": 83,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/services/codefixes/fixUnreferenceableDecoratorMetadata.ts",
        "metrics": {
          "complexity": 14,
          "loc": 78,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 82
      },
      {
        "file": "src/services/codefixes/fixUnusedIdentifier.ts",
        "metrics": {
          "complexity": 121,
          "loc": 409,
          "functionCount": 41,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/fixUnusedLabel.ts",
        "metrics": {
          "complexity": 2,
          "loc": 37,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/generateAccessors.ts",
        "metrics": {
          "complexity": 56,
          "loc": 297,
          "functionCount": 18,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.8
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/helpers.ts",
        "metrics": {
          "complexity": 157,
          "loc": 828,
          "functionCount": 53,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.76
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/importFixes.ts",
        "metrics": {
          "complexity": 402,
          "loc": 1841,
          "functionCount": 134,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 20.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/inferFromUsage.ts",
        "metrics": {
          "complexity": 295,
          "loc": 1081,
          "functionCount": 96,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/removeAccidentalCallParentheses.ts",
        "metrics": {
          "complexity": 2,
          "loc": 29,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/removeUnnecessaryAwait.ts",
        "metrics": {
          "complexity": 8,
          "loc": 57,
          "functionCount": 6,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/requireInTs.ts",
        "metrics": {
          "complexity": 14,
          "loc": 103,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 82
      },
      {
        "file": "src/services/codefixes/returnValueCorrect.ts",
        "metrics": {
          "complexity": 65,
          "loc": 270,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.25
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/services/codefixes/splitTypeOnlyImport.ts",
        "metrics": {
          "complexity": 3,
          "loc": 66,
          "functionCount": 6,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/useBigintLiteral.ts",
        "metrics": {
          "complexity": 3,
          "loc": 40,
          "functionCount": 5,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/useDefaultImport.ts",
        "metrics": {
          "complexity": 8,
          "loc": 60,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/services/codefixes/wrapDecoratorInParentheses.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 5,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/services/codefixes/wrapJsxInFragment.ts",
        "metrics": {
          "complexity": 13,
          "loc": 72,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "src/tsc/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/typingsInstallerCore/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 5,
          "instability": 0.29,
          "cohesionScore": 0.5,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/typingsInstallerCore/_namespaces/ts.server.typingsInstaller.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/typingsInstallerCore/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.42,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/transformers/declarations/diagnostics.ts",
        "metrics": {
          "complexity": 217,
          "loc": 733,
          "functionCount": 34,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.44
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/module/esnextAnd2015.ts",
        "metrics": {
          "complexity": 55,
          "loc": 374,
          "functionCount": 15,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/module/impliedNodeFormatDependent.ts",
        "metrics": {
          "complexity": 10,
          "loc": 80,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/compiler/transformers/module/module.ts",
        "metrics": {
          "complexity": 311,
          "loc": 1861,
          "functionCount": 79,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.86
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/compiler/transformers/module/system.ts",
        "metrics": {
          "complexity": 215,
          "loc": 1331,
          "functionCount": 74,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/config/commandLineParsing.ts",
        "metrics": {
          "complexity": 5,
          "loc": 223,
          "functionCount": 26,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.47,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 92
      },
      {
        "file": "src/testRunner/unittests/config/configurationExtension.ts",
        "metrics": {
          "complexity": 1,
          "loc": 264,
          "functionCount": 12,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/config/convertCompilerOptionsFromJson.ts",
        "metrics": {
          "complexity": 1,
          "loc": 271,
          "functionCount": 6,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 89
      },
      {
        "file": "src/testRunner/unittests/config/convertTypeAcquisitionFromJson.ts",
        "metrics": {
          "complexity": 1,
          "loc": 71,
          "functionCount": 5,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 92
      },
      {
        "file": "src/testRunner/unittests/config/helpers.ts",
        "metrics": {
          "complexity": 6,
          "loc": 100,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 6,
          "instability": 0.4,
          "cohesionScore": 0.4,
          "percentileUsageRank": 94,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/config/initializeTSConfig.ts",
        "metrics": {
          "complexity": 1,
          "loc": 25,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/config/matchFiles.ts",
        "metrics": {
          "complexity": 3,
          "loc": 730,
          "functionCount": 20,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.43
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/testRunner/unittests/config/showConfig.ts",
        "metrics": {
          "complexity": 24,
          "loc": 64,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 49
      },
      {
        "file": "src/testRunner/unittests/config/tsconfigParsing.ts",
        "metrics": {
          "complexity": 4,
          "loc": 390,
          "functionCount": 47,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 81
      },
      {
        "file": "src/testRunner/unittests/config/tsconfigParsingWatchOptions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 121,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/arraySpread.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/asyncArrow.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/asyncGenerator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 107,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/autoAccessors.ts",
        "metrics": {
          "complexity": 2,
          "loc": 123,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/awaitUsingDeclarations.ts",
        "metrics": {
          "complexity": 2,
          "loc": 1737,
          "functionCount": 52,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.74
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 41
      },
      {
        "file": "src/testRunner/unittests/evaluation/awaiter.ts",
        "metrics": {
          "complexity": 1,
          "loc": 24,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/constEnum.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/destructuring.ts",
        "metrics": {
          "complexity": 1,
          "loc": 87,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/esDecorators.ts",
        "metrics": {
          "complexity": 3,
          "loc": 2342,
          "functionCount": 313,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.34
          }
        ],
        "healthScore": 42
      },
      {
        "file": "src/testRunner/unittests/evaluation/esDecoratorsMetadata.ts",
        "metrics": {
          "complexity": 3,
          "loc": 114,
          "functionCount": 7,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/externalModules.ts",
        "metrics": {
          "complexity": 1,
          "loc": 67,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/forAwaitOf.ts",
        "metrics": {
          "complexity": 1,
          "loc": 324,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 80
      },
      {
        "file": "src/testRunner/unittests/evaluation/forOf.ts",
        "metrics": {
          "complexity": 1,
          "loc": 117,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/generator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 61,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/objectRest.ts",
        "metrics": {
          "complexity": 1,
          "loc": 28,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/optionalCall.ts",
        "metrics": {
          "complexity": 1,
          "loc": 199,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/superInStaticInitializer.ts",
        "metrics": {
          "complexity": 1,
          "loc": 217,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 93
      },
      {
        "file": "src/testRunner/unittests/evaluation/templateLiteral.ts",
        "metrics": {
          "complexity": 1,
          "loc": 36,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/updateExpressionInModule.ts",
        "metrics": {
          "complexity": 2,
          "loc": 141,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/evaluation/usingDeclarations.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1625,
          "functionCount": 46,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.63
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 37
      },
      {
        "file": "src/testRunner/unittests/services/cancellableLanguageServiceOperations.ts",
        "metrics": {
          "complexity": 5,
          "loc": 89,
          "functionCount": 20,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/services/colorization.ts",
        "metrics": {
          "complexity": 7,
          "loc": 120,
          "functionCount": 53,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/services/convertToAsyncFunction.ts",
        "metrics": {
          "complexity": 16,
          "loc": 1843,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 18
      },
      {
        "file": "src/testRunner/unittests/services/documentRegistry.ts",
        "metrics": {
          "complexity": 1,
          "loc": 46,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/services/hostNewLineSupport.ts",
        "metrics": {
          "complexity": 8,
          "loc": 69,
          "functionCount": 19,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/services/languageService.ts",
        "metrics": {
          "complexity": 8,
          "loc": 256,
          "functionCount": 51,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.28
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/services/organizeImports.ts",
        "metrics": {
          "complexity": 21,
          "loc": 1080,
          "functionCount": 60,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 6
      },
      {
        "file": "src/testRunner/unittests/services/patternMatcher.ts",
        "metrics": {
          "complexity": 1,
          "loc": 260,
          "functionCount": 89,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/services/preProcessFile.ts",
        "metrics": {
          "complexity": 2,
          "loc": 777,
          "functionCount": 45,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.59
          }
        ],
        "healthScore": 66
      },
      {
        "file": "src/testRunner/unittests/services/textChanges.ts",
        "metrics": {
          "complexity": 12,
          "loc": 716,
          "functionCount": 101,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.49,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.39
          }
        ],
        "healthScore": 55
      },
      {
        "file": "src/testRunner/unittests/services/transpile.ts",
        "metrics": {
          "complexity": 16,
          "loc": 574,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.91
          }
        ],
        "healthScore": 38
      },
      {
        "file": "src/testRunner/unittests/services/utilities.ts",
        "metrics": {
          "complexity": 2,
          "loc": 8,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/alternateResult.ts",
        "metrics": {
          "complexity": 4,
          "loc": 190,
          "functionCount": 33,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 3,
          "instability": 0.57,
          "cohesionScore": 0.65,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/baseline.ts",
        "metrics": {
          "complexity": 77,
          "loc": 487,
          "functionCount": 48,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 19,
          "instability": 0.17,
          "cohesionScore": 0.55,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.62
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/helpers/contents.ts",
        "metrics": {
          "complexity": 2,
          "loc": 31,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 23,
          "instability": 0.08,
          "cohesionScore": 0.3,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/declarationEmit.ts",
        "metrics": {
          "complexity": 8,
          "loc": 86,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 2,
          "instability": 0.67,
          "cohesionScore": 0.55,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/demoProjectReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 113,
          "functionCount": 2,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 41,
          "functionCount": 7,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 5,
          "instability": 0.44,
          "cohesionScore": 0.65,
          "percentileUsageRank": 93,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 1,
          "loc": 27,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/libraryResolution.ts",
        "metrics": {
          "complexity": 7,
          "loc": 233,
          "functionCount": 40,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 5,
          "instability": 0.58,
          "cohesionScore": 0.66,
          "percentileUsageRank": 93,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 92
      },
      {
        "file": "src/testRunner/unittests/helpers/monorepoSymlinkedSiblingPackages.ts",
        "metrics": {
          "complexity": 14,
          "loc": 274,
          "functionCount": 27,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 2,
          "instability": 0.78,
          "cohesionScore": 0.66,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.37
          }
        ],
        "healthScore": 71
      },
      {
        "file": "src/testRunner/unittests/helpers/noCheck.ts",
        "metrics": {
          "complexity": 8,
          "loc": 90,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 2,
          "instability": 0.67,
          "cohesionScore": 0.65,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/noEmit.ts",
        "metrics": {
          "complexity": 37,
          "loc": 458,
          "functionCount": 55,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 4,
          "instability": 0.64,
          "cohesionScore": 0.66,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.53
          }
        ],
        "healthScore": 8
      },
      {
        "file": "src/testRunner/unittests/helpers/noEmitOnError.ts",
        "metrics": {
          "complexity": 10,
          "loc": 172,
          "functionCount": 22,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 4,
          "instability": 0.56,
          "cohesionScore": 0.68,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/projectRoots.ts",
        "metrics": {
          "complexity": 3,
          "loc": 49,
          "functionCount": 9,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 3,
          "instability": 0.57,
          "cohesionScore": 0.65,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/sampleProjectReferences.ts",
        "metrics": {
          "complexity": 2,
          "loc": 85,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 4,
          "instability": 0.56,
          "cohesionScore": 0.68,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/solutionBuilder.ts",
        "metrics": {
          "complexity": 3,
          "loc": 110,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 11,
          "instability": 0.31,
          "cohesionScore": 0.68,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/transitiveReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 2,
          "instability": 0.67,
          "cohesionScore": 0.65,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/helpers/tsc.ts",
        "metrics": {
          "complexity": 75,
          "loc": 459,
          "functionCount": 37,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 45,
          "instability": 0.1,
          "cohesionScore": 0.6,
          "percentileUsageRank": 98,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.53
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/helpers/tscWatch.ts",
        "metrics": {
          "complexity": 6,
          "loc": 266,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 39,
          "instability": 0.11,
          "cohesionScore": 0.52,
          "percentileUsageRank": 98,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/helpers/tsserver.ts",
        "metrics": {
          "complexity": 72,
          "loc": 593,
          "functionCount": 64,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 11,
          "incomingDependencies": 79,
          "instability": 0.12,
          "cohesionScore": 0.51,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/helpers/typingsInstaller.ts",
        "metrics": {
          "complexity": 13,
          "loc": 215,
          "functionCount": 17,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 5,
          "instability": 0.58,
          "cohesionScore": 0.57,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 78
      },
      {
        "file": "src/testRunner/unittests/helpers/virtualFileSystemWithWatch.ts",
        "metrics": {
          "complexity": 162,
          "loc": 1202,
          "functionCount": 143,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 10,
          "incomingDependencies": 163,
          "instability": 0.06,
          "cohesionScore": 0.42,
          "percentileUsageRank": 100,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/sys/symlinkWatching.ts",
        "metrics": {
          "complexity": 69,
          "loc": 789,
          "functionCount": 75,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.45
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.63
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/configFileErrors.ts",
        "metrics": {
          "complexity": 3,
          "loc": 71,
          "functionCount": 11,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.67
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/demo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 57,
          "functionCount": 7,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 223,
          "functionCount": 18,
          "duplicationRatio": 0.47
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.56
          }
        ],
        "healthScore": 33
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/noEmit.ts",
        "metrics": {
          "complexity": 2,
          "loc": 41,
          "functionCount": 7,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/programUpdates.ts",
        "metrics": {
          "complexity": 2,
          "loc": 787,
          "functionCount": 94,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.57,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.62
          }
        ],
        "healthScore": 66
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/projectsBuilding.ts",
        "metrics": {
          "complexity": 4,
          "loc": 198,
          "functionCount": 38,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/publicApi.ts",
        "metrics": {
          "complexity": 5,
          "loc": 111,
          "functionCount": 12,
          "duplicationRatio": 0.39
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 57
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/reexport.ts",
        "metrics": {
          "complexity": 1,
          "loc": 65,
          "functionCount": 6,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.76
          }
        ],
        "healthScore": 77
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/roots.ts",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/watchEnvironment.ts",
        "metrics": {
          "complexity": 2,
          "loc": 118,
          "functionCount": 16,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/amdModulesWithOut.ts",
        "metrics": {
          "complexity": 1,
          "loc": 81,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/clean.ts",
        "metrics": {
          "complexity": 1,
          "loc": 43,
          "functionCount": 3,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 84
      },
      {
        "file": "src/testRunner/unittests/tsbuild/commandLine.ts",
        "metrics": {
          "complexity": 5,
          "loc": 305,
          "functionCount": 44,
          "duplicationRatio": 0.21
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.42
          }
        ],
        "healthScore": 66
      },
      {
        "file": "src/testRunner/unittests/tsbuild/configFileErrors.ts",
        "metrics": {
          "complexity": 3,
          "loc": 96,
          "functionCount": 9,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 93
      },
      {
        "file": "src/testRunner/unittests/tsbuild/configFileExtends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 53,
          "functionCount": 2,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/containerOnlyReferenced.ts",
        "metrics": {
          "complexity": 1,
          "loc": 92,
          "functionCount": 4,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/declarationEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 138,
          "functionCount": 5,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/demo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/emitDeclarationOnly.ts",
        "metrics": {
          "complexity": 3,
          "loc": 93,
          "functionCount": 8,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/emptyFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 52,
          "functionCount": 3,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 89
      },
      {
        "file": "src/testRunner/unittests/tsbuild/exitCodeOnBogusFile.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 19,
          "functionCount": 1,
          "duplicationRatio": 0.8
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/tsbuild/fileDelete.ts",
        "metrics": {
          "complexity": 3,
          "loc": 84,
          "functionCount": 10,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/graphOrdering.ts",
        "metrics": {
          "complexity": 8,
          "loc": 82,
          "functionCount": 12,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/inferredTypeFromTransitiveModule.ts",
        "metrics": {
          "complexity": 1,
          "loc": 134,
          "functionCount": 7,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/javascriptProjectEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 160,
          "functionCount": 3,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/testRunner/unittests/tsbuild/lateBoundSymbol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 4,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 183,
          "functionCount": 8,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.74
          }
        ],
        "healthScore": 77
      },
      {
        "file": "src/testRunner/unittests/tsbuild/moduleSpecifiers.ts",
        "metrics": {
          "complexity": 1,
          "loc": 173,
          "functionCount": 4,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.34
          }
        ],
        "healthScore": 86
      },
      {
        "file": "src/testRunner/unittests/tsbuild/noCheck.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/noEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 10,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/outFile.ts",
        "metrics": {
          "complexity": 1,
          "loc": 267,
          "functionCount": 19,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/tsbuild/outputPaths.ts",
        "metrics": {
          "complexity": 1,
          "loc": 117,
          "functionCount": 8,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/publicApi.ts",
        "metrics": {
          "complexity": 5,
          "loc": 96,
          "functionCount": 13,
          "duplicationRatio": 0.38
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 60
      },
      {
        "file": "src/testRunner/unittests/tsbuild/referencesWithRootDirInParent.ts",
        "metrics": {
          "complexity": 1,
          "loc": 153,
          "functionCount": 7,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/resolveJsonModule.ts",
        "metrics": {
          "complexity": 2,
          "loc": 186,
          "functionCount": 10,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/roots.ts",
        "metrics": {
          "complexity": 1,
          "loc": 132,
          "functionCount": 11,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsbuild/sample.ts",
        "metrics": {
          "complexity": 3,
          "loc": 565,
          "functionCount": 53,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 9,
          "incomingDependencies": 1,
          "instability": 0.9,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.88
          }
        ],
        "healthScore": 68
      },
      {
        "file": "src/testRunner/unittests/tsbuild/transitiveReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 44,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/consoleClearing.ts",
        "metrics": {
          "complexity": 2,
          "loc": 77,
          "functionCount": 9,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/emit.ts",
        "metrics": {
          "complexity": 5,
          "loc": 513,
          "functionCount": 70,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.71
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 62
      },
      {
        "file": "src/testRunner/unittests/tscWatch/emitAndErrorUpdates.ts",
        "metrics": {
          "complexity": 1,
          "loc": 321,
          "functionCount": 33,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 80
      },
      {
        "file": "src/testRunner/unittests/tscWatch/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 24,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 1,
          "loc": 408,
          "functionCount": 30,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          }
        ],
        "healthScore": 74
      },
      {
        "file": "src/testRunner/unittests/tscWatch/incremental.ts",
        "metrics": {
          "complexity": 8,
          "loc": 375,
          "functionCount": 41,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 76
      },
      {
        "file": "src/testRunner/unittests/tscWatch/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 66,
          "functionCount": 12,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 84
      },
      {
        "file": "src/testRunner/unittests/tscWatch/listFilesOnly.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 721,
          "functionCount": 54,
          "duplicationRatio": 0.21
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.37
          }
        ],
        "healthScore": 52
      },
      {
        "file": "src/testRunner/unittests/tscWatch/noEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/nodeNextWatch.ts",
        "metrics": {
          "complexity": 1,
          "loc": 66,
          "functionCount": 4,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 91
      },
      {
        "file": "src/testRunner/unittests/tscWatch/programUpdates.ts",
        "metrics": {
          "complexity": 3,
          "loc": 1011,
          "functionCount": 218,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 57
      },
      {
        "file": "src/testRunner/unittests/tscWatch/projectsWithReferences.ts",
        "metrics": {
          "complexity": 3,
          "loc": 134,
          "functionCount": 72,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 1,
          "instability": 0.89,
          "cohesionScore": 0.57,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/resolutionCache.ts",
        "metrics": {
          "complexity": 7,
          "loc": 734,
          "functionCount": 71,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.45
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/testRunner/unittests/tscWatch/resolveJsonModuleWithIncremental.ts",
        "metrics": {
          "complexity": 1,
          "loc": 22,
          "functionCount": 4,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts",
        "metrics": {
          "complexity": 7,
          "loc": 184,
          "functionCount": 24,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.57,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.28
          }
        ],
        "healthScore": 88
      },
      {
        "file": "src/testRunner/unittests/tscWatch/symlinks.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tscWatch/watchApi.ts",
        "metrics": {
          "complexity": 12,
          "loc": 792,
          "functionCount": 102,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 1,
          "instability": 0.89,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.64
          }
        ],
        "healthScore": 54
      },
      {
        "file": "src/testRunner/unittests/tscWatch/watchEnvironment.ts",
        "metrics": {
          "complexity": 9,
          "loc": 793,
          "functionCount": 96,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.64
          }
        ],
        "healthScore": 66
      },
      {
        "file": "src/testRunner/unittests/tsc/cancellationToken.ts",
        "metrics": {
          "complexity": 4,
          "loc": 161,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.51,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/commandLine.ts",
        "metrics": {
          "complexity": 1,
          "loc": 47,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/composite.ts",
        "metrics": {
          "complexity": 1,
          "loc": 158,
          "functionCount": 9,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 64
      },
      {
        "file": "src/testRunner/unittests/tsc/declarationEmit.ts",
        "metrics": {
          "complexity": 5,
          "loc": 353,
          "functionCount": 22,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 78
      },
      {
        "file": "src/testRunner/unittests/tsc/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 31,
          "functionCount": 1,
          "duplicationRatio": 0.44
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.48
          }
        ],
        "healthScore": 46
      },
      {
        "file": "src/testRunner/unittests/tsc/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/incremental.ts",
        "metrics": {
          "complexity": 8,
          "loc": 629,
          "functionCount": 64,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.1
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/testRunner/unittests/tsc/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 76,
          "functionCount": 5,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/listFilesOnly.ts",
        "metrics": {
          "complexity": 1,
          "loc": 37,
          "functionCount": 3,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.73
          }
        ],
        "healthScore": 78
      },
      {
        "file": "src/testRunner/unittests/tsc/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 189,
          "functionCount": 5,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/noCheck.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/noEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 119,
          "functionCount": 13,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/projectReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 152,
          "functionCount": 6,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.65
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/testRunner/unittests/tsc/projectReferencesConfig.ts",
        "metrics": {
          "complexity": 3,
          "loc": 200,
          "functionCount": 22,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsc/redirect.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 2,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/applyChangesToOpenFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 145,
          "functionCount": 5,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/autoImportProvider.ts",
        "metrics": {
          "complexity": 4,
          "loc": 384,
          "functionCount": 33,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.28
          }
        ],
        "healthScore": 76
      },
      {
        "file": "src/testRunner/unittests/tsserver/auxiliaryProject.ts",
        "metrics": {
          "complexity": 1,
          "loc": 148,
          "functionCount": 5,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/cachingFileSystemInformation.ts",
        "metrics": {
          "complexity": 8,
          "loc": 200,
          "functionCount": 38,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/cancellationToken.ts",
        "metrics": {
          "complexity": 3,
          "loc": 168,
          "functionCount": 7,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/codeFix.ts",
        "metrics": {
          "complexity": 1,
          "loc": 57,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/compileOnSave.ts",
        "metrics": {
          "complexity": 6,
          "loc": 959,
          "functionCount": 51,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.48,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.2
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/testRunner/unittests/tsserver/completions.ts",
        "metrics": {
          "complexity": 8,
          "loc": 331,
          "functionCount": 9,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/testRunner/unittests/tsserver/completionsIncomplete.ts",
        "metrics": {
          "complexity": 3,
          "loc": 253,
          "functionCount": 48,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.26
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/tsserver/configFileSearch.ts",
        "metrics": {
          "complexity": 1,
          "loc": 122,
          "functionCount": 11,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 93
      },
      {
        "file": "src/testRunner/unittests/tsserver/configuredProjects.ts",
        "metrics": {
          "complexity": 12,
          "loc": 1128,
          "functionCount": 53,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.57,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 44
      },
      {
        "file": "src/testRunner/unittests/tsserver/declarationFileMaps.ts",
        "metrics": {
          "complexity": 3,
          "loc": 368,
          "functionCount": 27,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 77
      },
      {
        "file": "src/testRunner/unittests/tsserver/documentRegistry.ts",
        "metrics": {
          "complexity": 1,
          "loc": 139,
          "functionCount": 10,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.48,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/duplicatePackages.ts",
        "metrics": {
          "complexity": 2,
          "loc": 45,
          "functionCount": 2,
          "duplicationRatio": 0.23
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 82
      },
      {
        "file": "src/testRunner/unittests/tsserver/dynamicFiles.ts",
        "metrics": {
          "complexity": 4,
          "loc": 243,
          "functionCount": 14,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 91
      },
      {
        "file": "src/testRunner/unittests/tsserver/exportMapCache.ts",
        "metrics": {
          "complexity": 6,
          "loc": 325,
          "functionCount": 19,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.08
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 72
      },
      {
        "file": "src/testRunner/unittests/tsserver/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 36,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/externalProjects.ts",
        "metrics": {
          "complexity": 9,
          "loc": 614,
          "functionCount": 44,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.05
          }
        ],
        "healthScore": 68
      },
      {
        "file": "src/testRunner/unittests/tsserver/findAllReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 135,
          "functionCount": 3,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 88
      },
      {
        "file": "src/testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 1,
          "loc": 347,
          "functionCount": 17,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 78
      },
      {
        "file": "src/testRunner/unittests/tsserver/formatSettings.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 2,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 92
      },
      {
        "file": "src/testRunner/unittests/tsserver/getApplicableRefactors.ts",
        "metrics": {
          "complexity": 1,
          "loc": 84,
          "functionCount": 5,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/getEditsForFileRename.ts",
        "metrics": {
          "complexity": 22,
          "loc": 121,
          "functionCount": 21,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 50
      },
      {
        "file": "src/testRunner/unittests/tsserver/getExportReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 75,
          "functionCount": 7,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/getFileReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 64,
          "functionCount": 4,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/getMoveToRefactoringFileSuggestions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 171,
          "functionCount": 7,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/goToDefinition.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 3,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.73
          }
        ],
        "healthScore": 78
      },
      {
        "file": "src/testRunner/unittests/tsserver/importHelpers.ts",
        "metrics": {
          "complexity": 1,
          "loc": 84,
          "functionCount": 3,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/tsserver/inconsistentErrorInEditor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 67,
          "functionCount": 3,
          "duplicationRatio": 0.23
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 82
      },
      {
        "file": "src/testRunner/unittests/tsserver/inferredProjects.ts",
        "metrics": {
          "complexity": 1,
          "loc": 307,
          "functionCount": 17,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 81
      },
      {
        "file": "src/testRunner/unittests/tsserver/inlayHints.ts",
        "metrics": {
          "complexity": 1,
          "loc": 69,
          "functionCount": 3,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.21
          }
        ],
        "healthScore": 89
      },
      {
        "file": "src/testRunner/unittests/tsserver/jsdocTag.ts",
        "metrics": {
          "complexity": 1,
          "loc": 186,
          "functionCount": 7,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/languageService.ts",
        "metrics": {
          "complexity": 1,
          "loc": 78,
          "functionCount": 3,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 93
      },
      {
        "file": "src/testRunner/unittests/tsserver/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 22,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts",
        "metrics": {
          "complexity": 1,
          "loc": 73,
          "functionCount": 4,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.96
          }
        ],
        "healthScore": 72
      },
      {
        "file": "src/testRunner/unittests/tsserver/metadataInResponse.ts",
        "metrics": {
          "complexity": 2,
          "loc": 83,
          "functionCount": 10,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/moduleResolution.ts",
        "metrics": {
          "complexity": 3,
          "loc": 263,
          "functionCount": 15,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.54,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/tsserver/moduleSpecifierCache.ts",
        "metrics": {
          "complexity": 1,
          "loc": 146,
          "functionCount": 12,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/navTo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 136,
          "functionCount": 5,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 88
      },
      {
        "file": "src/testRunner/unittests/tsserver/occurences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 34,
          "functionCount": 2,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/testRunner/unittests/tsserver/openFile.ts",
        "metrics": {
          "complexity": 1,
          "loc": 236,
          "functionCount": 15,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 92
      },
      {
        "file": "src/testRunner/unittests/tsserver/packageJsonInfo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 122,
          "functionCount": 8,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/partialSemanticServer.ts",
        "metrics": {
          "complexity": 3,
          "loc": 210,
          "functionCount": 11,
          "duplicationRatio": 0.34
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 57
      },
      {
        "file": "src/testRunner/unittests/tsserver/pasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 84,
          "functionCount": 3,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 90
      },
      {
        "file": "src/testRunner/unittests/tsserver/plugins.ts",
        "metrics": {
          "complexity": 11,
          "loc": 393,
          "functionCount": 39,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 66
      },
      {
        "file": "src/testRunner/unittests/tsserver/pluginsAsync.ts",
        "metrics": {
          "complexity": 3,
          "loc": 190,
          "functionCount": 27,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectErrors.ts",
        "metrics": {
          "complexity": 9,
          "loc": 659,
          "functionCount": 55,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.2
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1430,
          "functionCount": 55,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.56,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.43
          }
        ],
        "healthScore": 53
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferenceErrors.ts",
        "metrics": {
          "complexity": 1,
          "loc": 172,
          "functionCount": 19,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferences.ts",
        "metrics": {
          "complexity": 30,
          "loc": 1335,
          "functionCount": 91,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 0
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferencesSourcemap.ts",
        "metrics": {
          "complexity": 21,
          "loc": 501,
          "functionCount": 51,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.67
          }
        ],
        "healthScore": 18
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectRootFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/projects.ts",
        "metrics": {
          "complexity": 5,
          "loc": 1381,
          "functionCount": 63,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.38
          }
        ],
        "healthScore": 53
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectsWithReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 46,
          "functionCount": 16,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/refactors.ts",
        "metrics": {
          "complexity": 1,
          "loc": 184,
          "functionCount": 7,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 94
      },
      {
        "file": "src/testRunner/unittests/tsserver/regionDiagnostics.ts",
        "metrics": {
          "complexity": 1,
          "loc": 222,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 93
      },
      {
        "file": "src/testRunner/unittests/tsserver/reload.ts",
        "metrics": {
          "complexity": 1,
          "loc": 92,
          "functionCount": 5,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/reloadProjects.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 6,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/rename.ts",
        "metrics": {
          "complexity": 1,
          "loc": 180,
          "functionCount": 7,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.52,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/resolutionCache.ts",
        "metrics": {
          "complexity": 5,
          "loc": 675,
          "functionCount": 47,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.25
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/testRunner/unittests/tsserver/session.ts",
        "metrics": {
          "complexity": 10,
          "loc": 608,
          "functionCount": 77,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.3,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.03
          }
        ],
        "healthScore": 68
      },
      {
        "file": "src/testRunner/unittests/tsserver/skipLibCheck.ts",
        "metrics": {
          "complexity": 1,
          "loc": 198,
          "functionCount": 8,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/smartSelection.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 2,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/symLinks.ts",
        "metrics": {
          "complexity": 8,
          "loc": 102,
          "functionCount": 14,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/symlinkCache.ts",
        "metrics": {
          "complexity": 1,
          "loc": 82,
          "functionCount": 3,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/syntacticServer.ts",
        "metrics": {
          "complexity": 3,
          "loc": 147,
          "functionCount": 10,
          "duplicationRatio": 0.37
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.24
          }
        ],
        "healthScore": 60
      },
      {
        "file": "src/testRunner/unittests/tsserver/syntaxOperations.ts",
        "metrics": {
          "complexity": 1,
          "loc": 72,
          "functionCount": 2,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/telemetry.ts",
        "metrics": {
          "complexity": 2,
          "loc": 191,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.55,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/textStorage.ts",
        "metrics": {
          "complexity": 5,
          "loc": 109,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/typeAquisition.ts",
        "metrics": {
          "complexity": 1,
          "loc": 56,
          "functionCount": 4,
          "duplicationRatio": 0.52
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 15
      },
      {
        "file": "src/testRunner/unittests/tsserver/typeOnlyImportChains.ts",
        "metrics": {
          "complexity": 1,
          "loc": 154,
          "functionCount": 10,
          "duplicationRatio": 0.34
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.53,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 63
      },
      {
        "file": "src/testRunner/unittests/tsserver/typeReferenceDirectives.ts",
        "metrics": {
          "complexity": 1,
          "loc": 87,
          "functionCount": 3,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.6,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/typingsInstaller.ts",
        "metrics": {
          "complexity": 5,
          "loc": 2394,
          "functionCount": 83,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 1,
          "instability": 0.89,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.39
          }
        ],
        "healthScore": 42
      },
      {
        "file": "src/testRunner/unittests/tsserver/versionCache.ts",
        "metrics": {
          "complexity": 14,
          "loc": 268,
          "functionCount": 47,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.34
          }
        ],
        "healthScore": 71
      },
      {
        "file": "src/testRunner/unittests/tsserver/watchEnvironment.ts",
        "metrics": {
          "complexity": 4,
          "loc": 553,
          "functionCount": 43,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.48,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 68
      },
      {
        "file": "src/testRunner/unittests/services/extract/constants.ts",
        "metrics": {
          "complexity": 1,
          "loc": 334,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/testRunner/unittests/services/extract/functions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 651,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.17
          }
        ],
        "healthScore": 67
      },
      {
        "file": "src/testRunner/unittests/services/extract/helpers.ts",
        "metrics": {
          "complexity": 19,
          "loc": 188,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 6,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 94,
          "isInCycle": true
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 61
      },
      {
        "file": "src/testRunner/unittests/services/extract/ranges.ts",
        "metrics": {
          "complexity": 5,
          "loc": 457,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.58,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 71
      },
      {
        "file": "src/testRunner/unittests/services/extract/symbolWalker.ts",
        "metrics": {
          "complexity": 3,
          "loc": 54,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/largeFileReferenced.ts",
        "metrics": {
          "complexity": 2,
          "loc": 62,
          "functionCount": 9,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/projectLanguageServiceState.ts",
        "metrics": {
          "complexity": 2,
          "loc": 68,
          "functionCount": 4,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 65
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/projectLoading.ts",
        "metrics": {
          "complexity": 3,
          "loc": 159,
          "functionCount": 16,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts",
        "metrics": {
          "complexity": 6,
          "loc": 332,
          "functionCount": 37,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 79
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/watchEvents.ts",
        "metrics": {
          "complexity": 6,
          "loc": 59,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      }
    ],
    "codeContext": [
      {
        "file": "src/deprecatedCompat/deprecate.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/jsTyping/jsTyping.ts",
        "criticalFunctions": [
          {
            "name": "discoverTypings",
            "complexity": 38,
            "lineCount": 218,
            "parameterCount": 10,
            "snippet": "export function discoverTypings(\r\n    host: TypingResolutionHost,\r\n    log: ((message: string) => void) | undefined,\r\n    fileNames: string[],\r\n    projectRootPath: Path,\r\n    safeList: SafeList,\r\n    packageNameToTypingLocation: ReadonlyMap<string, CachedTyping>,\r\n    typeAcquisition: TypeAcquisition,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 38 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 218 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTypingNames",
            "complexity": 16,
            "lineCount": 92,
            "parameterCount": 4,
            "snippet": "function getTypingNames(projectRootPath: string, manifestName: string, modulesDirName: string, filesToWatch: string[]): void {\r\n        const manifestPath = combinePaths(projectRootPath, manifestName);\r\n        let manifest;\r\n        let manifestTypingNames;\r\n        if (host.fileExists(manifestPath)) {\r\n            filesToWatch.push(manifestPath);\r\n            manifest = readConfigFile(manifestPath, path => host.readFile(path)).config;\r\n            manifestTypingNames = flatMap([manifest.dependencies, manifest.devDependencies, manifest.optionalDependencies, manifest.peerDependencies], getOwnKeys);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/compiler/binder.ts",
        "criticalFunctions": [
          {
            "name": "createBinder",
            "complexity": 850,
            "lineCount": 3327,
            "parameterCount": 0,
            "snippet": "function createBinder(): (file: SourceFile, options: CompilerOptions) => void {\r\n    /* eslint-disable no-var */\r\n    var file: SourceFile;\r\n    var options: CompilerOptions;\r\n    var languageVersion: ScriptTarget;\r\n    var parent: Node;\r\n    var container: IsContainer | EntityNameExpression;\r\n    var thisParentContainer: IsContainer | EntityNameExpression; // Container one level up\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 850 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 3327 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "bindWorker",
            "complexity": 114,
            "lineCount": 247,
            "parameterCount": 1,
            "snippet": "function bindWorker(node: Node) {\r\n        switch (node.kind) {\r\n            /* Strict mode checks */\r\n            case SyntaxKind.Identifier:\r\n                if (node.flags & NodeFlags.IdentifierIsInJSDocNamespace) {\r\n                    let parentNode = node.parent;\r\n                    while (parentNode && !isJSDocTypeAlias(parentNode)) {\r\n                        parentNode = parentNode.parent;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 114 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 247 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "bindChildren",
            "complexity": 48,
            "lineCount": 134,
            "parameterCount": 1,
            "snippet": "function bindChildren(node: Node): void {\r\n        const saveInAssignmentPattern = inAssignmentPattern;\r\n        inAssignmentPattern = false;\r\n        if (checkUnreachable(node)) {\r\n            if (canHaveFlowNode(node) && node.flowNode) {\r\n                node.flowNode = undefined;\r\n            }\r\n            bindEachChild(node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getContainerFlags",
            "complexity": 42,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "export function getContainerFlags(node: Node): ContainerFlags {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ClassExpression:\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.EnumDeclaration:\r\n        case SyntaxKind.ObjectLiteralExpression:\r\n        case SyntaxKind.TypeLiteral:\r\n        case SyntaxKind.JSDocTypeLiteral:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          },
          {
            "name": "declareSymbol",
            "complexity": 39,
            "lineCount": 137,
            "parameterCount": 7,
            "snippet": "function declareSymbol(symbolTable: SymbolTable, parent: Symbol | undefined, node: Declaration, includes: SymbolFlags, excludes: SymbolFlags, isReplaceableByMethod?: boolean, isComputedName?: boolean): Symbol {\r\n        Debug.assert(isComputedName || !hasDynamicName(node));\r\n        const isDefaultExport = hasSyntacticModifier(node, ModifierFlags.Default) || isExportSpecifier(node) && moduleExportNameIsDefault(node.name);\r\n        const name = isComputedName ? InternalSymbolName.Computed\r\n            : isDefaultExport && parent ? InternalSymbolName.Default\r\n            : getDeclarationName(node);\r\n        let symbol: Symbol | undefined;\r\n        if (name === undefined) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/builder.ts",
        "criticalFunctions": [
          {
            "name": "createBuilderProgram",
            "complexity": 98,
            "lineCount": 544,
            "parameterCount": 2,
            "snippet": "export function createBuilderProgram(\r\n    kind: BuilderProgramKind,\r\n    { newProgram, host, oldProgram, configFileParsingDiagnostics }: BuilderCreationParameters,\r\n) {\r\n    let oldState = oldProgram && oldProgram.state;\r\n    if (oldState && newProgram === oldState.program && configFileParsingDiagnostics === newProgram.getConfigFileParsingDiagnostics()) {\r\n        newProgram = undefined!;\r\n        oldState = undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 98 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 544 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getBuildInfo",
            "complexity": 72,
            "lineCount": 333,
            "parameterCount": 1,
            "snippet": "function getBuildInfo(state: BuilderProgramStateWithDefinedProgram): BuildInfo {\r\n    const currentDirectory = state.program.getCurrentDirectory();\r\n    const buildInfoDirectory = getDirectoryPath(getNormalizedAbsolutePath(getTsBuildInfoEmitOutputFilePath(state.compilerOptions)!, currentDirectory));\r\n    const latestChangedDtsFile = state.latestChangedDtsFile ? relativeToBuildInfoEnsuringAbsolutePath(state.latestChangedDtsFile) : undefined;\r\n    const fileNames: string[] = [];\r\n    const fileNameToFileId = new Map<string, IncrementalBuildInfoFileId>();\r\n    const rootFileNames = new Set(state.program.getRootFileNames().map(f => toPath(f, currentDirectory, state.program.getCanonicalFileName)));\r\n    ensureHasErrorsForState(state);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 72 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 333 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createBuilderProgramState",
            "complexity": 60,
            "lineCount": 183,
            "parameterCount": 2,
            "snippet": "function createBuilderProgramState(\r\n    newProgram: Program,\r\n    oldState: Readonly<ReusableBuilderProgramState> | undefined,\r\n): BuilderProgramState {\r\n    const state = BuilderState.create(newProgram, oldState, /*disableUseFileVersionAsSignature*/ false) as BuilderProgramState;\r\n    state.program = newProgram;\r\n    const compilerOptions = newProgram.getCompilerOptions();\r\n    state.compilerOptions = compilerOptions;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 60 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 183 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitNextAffectedFileOrDtsErrors",
            "complexity": 32,
            "lineCount": 134,
            "parameterCount": 5,
            "snippet": "function emitNextAffectedFileOrDtsErrors(\r\n        writeFile: WriteFileCallback | undefined,\r\n        cancellationToken: CancellationToken | undefined,\r\n        emitOnlyDtsFiles: boolean | undefined,\r\n        customTransformers: CustomTransformers | undefined,\r\n        isForDtsErrors: boolean,\r\n    ): AffectedFileResult<EmitResult> {\r\n        Debug.assert(isBuilderProgramStateWithDefinedProgram(state));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getWriteFileCallback",
            "complexity": 24,
            "lineCount": 84,
            "parameterCount": 2,
            "snippet": "function getWriteFileCallback(\r\n        writeFile: WriteFileCallback | undefined,\r\n        customTransformers: CustomTransformers | undefined,\r\n    ): WriteFileCallback | undefined {\r\n        Debug.assert(isBuilderProgramStateWithDefinedProgram(state));\r\n        if (!getEmitDeclarations(state.compilerOptions)) return writeFile || maybeBind(host, host.writeFile);\r\n        return (fileName, text, writeByteOrderMark, onError, sourceFiles, data) => {\r\n            if (isDeclarationFileName(fileName)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/builderState.ts",
        "criticalFunctions": [
          {
            "name": "getReferencedFiles",
            "complexity": 20,
            "lineCount": 76,
            "parameterCount": 3,
            "snippet": "function getReferencedFiles(program: Program, sourceFile: SourceFile, getCanonicalFileName: GetCanonicalFileName): Set<Path> | undefined {\r\n        let referencedFiles: Set<Path> | undefined;\r\n        if (sourceFile.imports && sourceFile.imports.length > 0) {\r\n            const checker: TypeChecker = program.getTypeChecker();\r\n            for (const importName of sourceFile.imports) {\r\n                const declarationSourceFilePaths = getReferencedFilesFromImportLiteral(checker, importName);\r\n                declarationSourceFilePaths?.forEach(addReferencedFile);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/checker.ts",
        "criticalFunctions": [
          {
            "name": "createTypeChecker",
            "complexity": 16081,
            "lineCount": 51349,
            "parameterCount": 1,
            "snippet": "export function createTypeChecker(host: TypeCheckerHost): TypeChecker {\r\n    /* eslint-disable no-var */\r\n    var deferredDiagnosticsCallbacks: (() => void)[] = [];\r\n    var addLazyDiagnostic = (arg: () => void) => {\r\n        deferredDiagnosticsCallbacks.push(arg);\r\n    };\r\n    var cancellationToken: CancellationToken | undefined;\r\n    var scanner: Scanner | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 16081 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51349 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createNodeBuilder",
            "complexity": 1228,
            "lineCount": 4410,
            "parameterCount": 0,
            "snippet": "function createNodeBuilder() {\r\n        const syntacticBuilderResolver: SyntacticTypeNodeBuilderResolver = {\r\n            evaluateEntityNameExpression,\r\n            isExpandoFunctionDeclaration,\r\n            hasLateBindableName,\r\n            shouldRemoveDeclaration(context: SyntacticTypeNodeBuilderContext, node: DynamicNamedDeclaration) {\r\n                return !((context as NodeBuilderContext).internalFlags & InternalNodeBuilderFlags.AllowUnresolvedNames && isEntityNameExpression(node.name.expression) && checkComputedPropertyName(node.name).flags & TypeFlags.Any);\r\n            },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 1228 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 4410 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkTypeRelatedTo",
            "complexity": 871,
            "lineCount": 2492,
            "parameterCount": 7,
            "snippet": "function checkTypeRelatedTo(\r\n        source: Type,\r\n        target: Type,\r\n        relation: Map<string, RelationComparisonResult>,\r\n        errorNode: Node | undefined,\r\n        headMessage?: DiagnosticMessage,\r\n        containingMessageChain?: () => DiagnosticMessageChain | undefined,\r\n        errorOutputContainer?: ErrorOutputContainer,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 871 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2492 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFlowTypeOfReference",
            "complexity": 459,
            "lineCount": 1219,
            "parameterCount": 5,
            "snippet": "function getFlowTypeOfReference(reference: Node, declaredType: Type, initialType = declaredType, flowContainer?: Node, flowNode = tryCast(reference, canHaveFlowNode)?.flowNode) {\r\n        let key: string | undefined;\r\n        let isKeySet = false;\r\n        let flowDepth = 0;\r\n        if (flowAnalysisDisabled) {\r\n            return errorType;\r\n        }\r\n        if (!flowNode) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 459 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1219 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "symbolTableToDeclarationStatements",
            "complexity": 452,
            "lineCount": 1595,
            "parameterCount": 2,
            "snippet": "function symbolTableToDeclarationStatements(symbolTable: SymbolTable, context: NodeBuilderContext): Statement[] {\r\n            const serializePropertySymbolForClass = makeSerializePropertySymbol<ClassElement>(factory.createPropertyDeclaration, SyntaxKind.MethodDeclaration, /*useAccessors*/ true);\r\n            const serializePropertySymbolForInterfaceWorker = makeSerializePropertySymbol<TypeElement>((mods, name, question, type) => factory.createPropertySignature(mods, name, question, type), SyntaxKind.MethodSignature, /*useAccessors*/ false);\r\n            const enclosingDeclaration = context.enclosingDeclaration!;\r\n            let results: Statement[] = [];\r\n            const visitedSymbols = new Set<number>();\r\n            const deferredPrivatesStack: Map<SymbolId, Symbol>[] = [];\r\n            const oldcontext = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 452 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1595 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/commandLineParser.ts",
        "criticalFunctions": [
          {
            "name": "parseJsonConfigFileContentWorker",
            "complexity": 43,
            "lineCount": 192,
            "parameterCount": 10,
            "snippet": "function parseJsonConfigFileContentWorker(\r\n    json: any,\r\n    sourceFile: TsConfigSourceFile | undefined,\r\n    host: ParseConfigHost,\r\n    basePath: string,\r\n    existingOptions: CompilerOptions = {},\r\n    existingWatchOptions: WatchOptions | undefined,\r\n    configFileName?: string,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 192 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "parseConfig",
            "complexity": 29,
            "lineCount": 90,
            "parameterCount": 8,
            "snippet": "function parseConfig(\r\n    json: any,\r\n    sourceFile: TsConfigSourceFile | undefined,\r\n    host: ParseConfigHost,\r\n    basePath: string,\r\n    configFileName: string | undefined,\r\n    resolutionStack: string[],\r\n    errors: Diagnostic[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "convertToJson",
            "complexity": 28,
            "lineCount": 119,
            "parameterCount": 5,
            "snippet": "export function convertToJson(\r\n    sourceFile: JsonSourceFile,\r\n    rootExpression: Expression | undefined,\r\n    errors: Diagnostic[],\r\n    returnValue: boolean,\r\n    jsonConversionNotifier: JsonConversionNotifier | undefined,\r\n): any {\r\n    if (!rootExpression) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 119 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "parseOptionValue",
            "complexity": 21,
            "lineCount": 78,
            "parameterCount": 6,
            "snippet": "function parseOptionValue(\r\n    args: readonly string[],\r\n    i: number,\r\n    diagnostics: ParseCommandLineWorkerDiagnostics,\r\n    opt: CommandLineOption,\r\n    options: OptionsBase,\r\n    errors: Diagnostic[],\r\n) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getConfigFileSpecs",
            "complexity": 20,
            "lineCount": 80,
            "parameterCount": 0,
            "snippet": "function getConfigFileSpecs(): ConfigFileSpecs {\r\n        const referencesOfRaw = getPropFromRaw<ProjectReference>(\"references\", element => typeof element === \"object\", \"object\");\r\n        const filesSpecs = toPropValue(getSpecsFromRaw(\"files\"));\r\n        if (filesSpecs) {\r\n            const hasZeroOrNoReferences = referencesOfRaw === \"no-prop\" || isArray(referencesOfRaw) && referencesOfRaw.length === 0;\r\n            const hasExtends = hasProperty(raw, \"extends\");\r\n            if (filesSpecs.length === 0 && hasZeroOrNoReferences && !hasExtends) {\r\n                if (sourceFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/core.ts",
        "criticalFunctions": [
          {
            "name": "createSet",
            "complexity": 20,
            "lineCount": 122,
            "parameterCount": 2,
            "snippet": "export function createSet<TElement, THash = number>(getHashCode: (element: TElement) => THash, equals: EqualityComparer<TElement>): Set<TElement> {\r\n    const multiMap = new Map<THash, TElement | TElement[]>();\r\n    let size = 0;\r\n    function* getElementIterator(): IterableIterator<TElement> {\r\n        for (const value of multiMap.values()) {\r\n            if (isArray(value)) {\r\n                yield* value;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 122 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "removeMinAndVersionNumbers",
            "complexity": 17,
            "lineCount": 48,
            "parameterCount": 1,
            "snippet": "export function removeMinAndVersionNumbers(fileName: string): string {\r\n    let end: number = fileName.length;\r\n    for (let pos = end - 1; pos > 0; pos--) {\r\n        let ch: number = fileName.charCodeAt(pos);\r\n        if (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) {\r\n            do {\r\n                --pos;\r\n                ch = fileName.charCodeAt(pos);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/debug.ts",
        "criticalFunctions": [
          {
            "name": "formatControlFlowGraph",
            "complexity": 81,
            "lineCount": 386,
            "parameterCount": 1,
            "snippet": "export function formatControlFlowGraph(flowNode: FlowNode): string {\r\n        let nextDebugFlowId = -1;\r\n        function getDebugFlowNodeId(f: FlowNode) {\r\n            if (!f.id) {\r\n                f.id = nextDebugFlowId;\r\n                nextDebugFlowId--;\r\n            }\r\n            return f.id;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 81 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 386 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "enableDebugInfo",
            "complexity": 76,
            "lineCount": 195,
            "parameterCount": 0,
            "snippet": "export function enableDebugInfo(): void {\r\n        if (isDebugInfoEnabled) return;\r\n        const weakTypeTextMap = new WeakMap<Type, string>();\r\n        const weakNodeTextMap = new WeakMap<Node, string>();\r\n        Object.defineProperties(objectAllocator.getSymbolConstructor().prototype, {\r\n            __tsDebuggerDisplay: {\r\n                value(this: Symbol) {\r\n                    const symbolHeader = this.flags & SymbolFlags.Transient ? \"TransientSymbol\" :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 76 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 195 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "value",
            "complexity": 39,
            "lineCount": 40,
            "parameterCount": 1,
            "snippet": "value(this: Node) {\r\n                            const nodeHeader = isGeneratedIdentifier(this) ? \"GeneratedIdentifier\" :\r\n                                isIdentifier(this) ? `Identifier '${idText(this)}'` :\r\n                                isPrivateIdentifier(this) ? `PrivateIdentifier '${idText(this)}'` :\r\n                                isStringLiteral(this) ? `StringLiteral ${JSON.stringify(this.text.length < 10 ? this.text : this.text.slice(10) + \"...\")}` :\r\n                                isNumericLiteral(this) ? `NumericLiteral ${this.text}` :\r\n                                isBigIntLiteral(this) ? `BigIntLiteral ${this.text}n` :\r\n                                isTypeParameterDeclaration(this) ? \"TypeParameterDeclaration\" :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "value",
            "complexity": 27,
            "lineCount": 27,
            "parameterCount": 1,
            "snippet": "value(this: Type) {\r\n                    const typeHeader = this.flags & TypeFlags.Intrinsic ? `IntrinsicType ${(this as IntrinsicType).intrinsicName}${(this as IntrinsicType).debugIntrinsicName ? ` (${(this as IntrinsicType).debugIntrinsicName})` : \"\"}` :\r\n                        this.flags & TypeFlags.Nullable ? \"NullableType\" :\r\n                        this.flags & TypeFlags.StringOrNumberLiteral ? `LiteralType ${JSON.stringify((this as LiteralType).value)}` :\r\n                        this.flags & TypeFlags.BigIntLiteral ? `LiteralType ${(this as BigIntLiteralType).value.negative ? \"-\" : \"\"}${(this as BigIntLiteralType).value.base10Value}n` :\r\n                        this.flags & TypeFlags.UniqueESSymbol ? \"UniqueESSymbolType\" :\r\n                        this.flags & TypeFlags.Enum ? \"EnumType\" :\r\n                        this.flags & TypeFlags.Union ? \"UnionType\" :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "renderGraph",
            "complexity": 26,
            "lineCount": 74,
            "parameterCount": 0,
            "snippet": "function renderGraph() {\r\n            const columnCount = columnWidths.length;\r\n            const laneCount = maxBy(nodes, 0, n => n.lane) + 1;\r\n            const lanes: string[] = fill(Array(laneCount), \"\");\r\n            const grid: (FlowGraphNode | undefined)[][] = columnWidths.map(() => Array(laneCount));\r\n            const connectors: Connection[][] = columnWidths.map(() => fill(Array(laneCount), 0));\r\n            for (const node of nodes) {\r\n                grid[node.level][node.lane] = node;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/emitter.ts",
        "criticalFunctions": [
          {
            "name": "createPrinter",
            "complexity": 1051,
            "lineCount": 5119,
            "parameterCount": 2,
            "snippet": "export function createPrinter(printerOptions: PrinterOptions = {}, handlers: PrintHandlers = {}): Printer {\r\n    /* eslint-disable no-var */\r\n    var {\r\n        hasGlobalName,\r\n        onEmitNode = noEmitNotification,\r\n        isEmitNotificationEnabled,\r\n        substituteNode = noEmitSubstitution,\r\n        onBeforeEmitNode,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 1051 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 5119 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "pipelineEmitWithHintWorker",
            "complexity": 220,
            "lineCount": 475,
            "parameterCount": 3,
            "snippet": "function pipelineEmitWithHintWorker(hint: EmitHint, node: Node, allowSnippets = true): void {\r\n        if (allowSnippets) {\r\n            const snippet = getSnippetElement(node);\r\n            if (snippet) {\r\n                return emitSnippetNode(hint, node, snippet);\r\n            }\r\n        }\r\n        if (hint === EmitHint.SourceFile) return emitSourceFile(cast(node, isSourceFile));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 220 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 475 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitFiles",
            "complexity": 76,
            "lineCount": 383,
            "parameterCount": 8,
            "snippet": "export function emitFiles(\r\n    resolver: EmitResolver,\r\n    host: EmitHost,\r\n    targetSourceFile: SourceFile | undefined,\r\n    { scriptTransformers, declarationTransformers }: EmitTransformers,\r\n    emitOnly: boolean | EmitOnly | undefined,\r\n    onlyBuildInfo: boolean,\r\n    forceDtsEmit?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 76 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 383 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitNodeListItems",
            "complexity": 37,
            "lineCount": 129,
            "parameterCount": 9,
            "snippet": "function emitNodeListItems<Child extends Node>(emit: EmitFunction, parentNode: Node | undefined, children: readonly Child[], format: ListFormat, parenthesizerRule: ParenthesizerRuleOrSelector<Child> | undefined, start: number, count: number, hasTrailingComma: boolean, childrenTextRange: TextRange | undefined) {\r\n        const mayEmitInterveningComments = (format & ListFormat.NoInterveningComments) === 0;\r\n        let shouldEmitInterveningComments = mayEmitInterveningComments;\r\n        const leadingLineTerminatorCount = getLeadingLineTerminatorCount(parentNode, children[start], format);\r\n        if (leadingLineTerminatorCount) {\r\n            writeLine(leadingLineTerminatorCount);\r\n            shouldEmitInterveningComments = false;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 129 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateNames",
            "complexity": 34,
            "lineCount": 85,
            "parameterCount": 1,
            "snippet": "function generateNames(node: Node | undefined) {\r\n        if (!node) return;\r\n        switch (node.kind) {\r\n            case SyntaxKind.Block:\r\n                forEach((node as Block).statements, generateNames);\r\n                break;\r\n            case SyntaxKind.LabeledStatement:\r\n            case SyntaxKind.WithStatement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/executeCommandLine.ts",
        "criticalFunctions": [
          {
            "name": "generateOptionOutput",
            "complexity": 34,
            "lineCount": 175,
            "parameterCount": 4,
            "snippet": "function generateOptionOutput(sys: System, option: CommandLineOption, rightAlignOfLeft: number, leftAlignOfRight: number) {\r\n    interface ValueCandidate {\r\n        valueType: string;\r\n        possibleValues: string;\r\n    }\r\n    const text: string[] = [];\r\n    const colors = createColors(sys);\r\n    const name = getDisplayNameTextOfOption(option);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 175 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "executeCommandLineWorker",
            "complexity": 29,
            "lineCount": 173,
            "parameterCount": 3,
            "snippet": "function executeCommandLineWorker(\r\n    sys: System,\r\n    cb: ExecuteCommandLineCallbacks,\r\n    commandLine: ParsedCommandLine,\r\n) {\r\n    let reportDiagnostic = createDiagnosticReporter(sys);\r\n    let configFileName: string | undefined;\r\n    if (commandLine.options.locale) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 173 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reportStatistics",
            "complexity": 21,
            "lineCount": 96,
            "parameterCount": 3,
            "snippet": "function reportStatistics(sys: System, program: Program, solutionPerformance: SolutionPerformance | undefined) {\r\n    const compilerOptions = program.getCompilerOptions();\r\n    if (canTrace(sys, compilerOptions)) {\r\n        tracing?.stopTracing();\r\n    }\r\n    let statistics: Statistic[];\r\n    if (canReportDiagnostics(sys, compilerOptions)) {\r\n        statistics = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "performBuild",
            "complexity": 15,
            "lineCount": 89,
            "parameterCount": 6,
            "snippet": "function performBuild(\r\n    sys: System,\r\n    cb: ExecuteCommandLineCallbacks,\r\n    buildOptions: BuildOptions,\r\n    watchOptions: WatchOptions | undefined,\r\n    projects: string[],\r\n    errors: Diagnostic[],\r\n) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getValueCandidate",
            "complexity": 13,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "function getValueCandidate(option: CommandLineOption): ValueCandidate | undefined {\r\n        if (option.type === \"object\") {\r\n            return undefined;\r\n        }\r\n        return {\r\n            valueType: getValueType(option),\r\n            possibleValues: getPossibleValues(option),\r\n        };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/expressionToTypeNode.ts",
        "criticalFunctions": [
          {
            "name": "createSyntacticTypeNodeBuilder",
            "complexity": 348,
            "lineCount": 1157,
            "parameterCount": 2,
            "snippet": "export function createSyntacticTypeNodeBuilder(\r\n    options: CompilerOptions,\r\n    resolver: SyntacticTypeNodeBuilderResolver,\r\n): SyntacticNodeBuilder {\r\n    const strictNullChecks = getStrictOptionValue(options, \"strictNullChecks\");\r\n    return {\r\n        serializeTypeOfDeclaration,\r\n        serializeReturnTypeForSignature,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 348 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1157 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryReuseExistingTypeNode",
            "complexity": 127,
            "lineCount": 423,
            "parameterCount": 2,
            "snippet": "function tryReuseExistingTypeNode(context: SyntacticTypeNodeBuilderContext, existing: TypeNode): TypeNode | undefined {\r\n        const { finalizeBoundary, startRecoveryScope, hadError, markError } = resolver.createRecoveryBoundary(context);\r\n        const transformed = visitNode(existing, visitExistingNodeTreeSymbols, isTypeNode);\r\n        if (!finalizeBoundary()) {\r\n            return undefined;\r\n        }\r\n        context.approximateLength += existing.end - existing.pos;\r\n        return transformed;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 127 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 423 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitExistingNodeTreeSymbolsWorker",
            "complexity": 108,
            "lineCount": 314,
            "parameterCount": 1,
            "snippet": "function visitExistingNodeTreeSymbolsWorker(node: Node): Node | undefined {\r\n            if (isJSDocTypeExpression(node)) {\r\n                return visitNode(node.type, visitExistingNodeTreeSymbols, isTypeNode);\r\n            }\r\n            if (isJSDocAllType(node) || node.kind === SyntaxKind.JSDocNamepathType) {\r\n                return factory.createKeywordTypeNode(SyntaxKind.AnyKeyword);\r\n            }\r\n            if (isJSDocUnknownType(node)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 108 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 314 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "typeFromExpression",
            "complexity": 30,
            "lineCount": 78,
            "parameterCount": 5,
            "snippet": "function typeFromExpression(node: Expression | JsxAttributeValue, context: SyntacticTypeNodeBuilderContext, isConstContext = false, requiresAddingUndefined = false, preserveLiterals = false): SyntacticResult {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ParenthesizedExpression:\r\n                if (isJSDocTypeAssertion(node)) {\r\n                    return typeFromTypeAssertion(node.expression, getJSDocTypeAssertionType(node), context, requiresAddingUndefined);\r\n                }\r\n                return typeFromExpression((node as ParenthesizedExpression).expression, context, isConstContext, requiresAddingUndefined);\r\n            case SyntaxKind.Identifier:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              }
            ]
          },
          {
            "name": "serializeReturnTypeForSignature",
            "complexity": 16,
            "lineCount": 23,
            "parameterCount": 3,
            "snippet": "function serializeReturnTypeForSignature(node: SignatureDeclaration | JSDocSignature, symbol: Symbol, context: SyntacticTypeNodeBuilderContext) {\r\n        switch (node.kind) {\r\n            case SyntaxKind.GetAccessor:\r\n                return serializeTypeOfAccessor(node, symbol, context);\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.ConstructSignature:\r\n            case SyntaxKind.MethodSignature:\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/moduleNameResolver.ts",
        "criticalFunctions": [
          {
            "name": "getLoadModuleFromTargetExportOrImport",
            "complexity": 75,
            "lineCount": 234,
            "parameterCount": 7,
            "snippet": "function getLoadModuleFromTargetExportOrImport(extensions: Extensions, state: ModuleResolutionState, cache: ModuleResolutionCache | undefined, redirectedReference: ResolvedProjectReference | undefined, moduleName: string, scope: PackageJsonInfo, isImports: boolean) {\r\n    return loadModuleFromTargetExportOrImport;\r\n    function loadModuleFromTargetExportOrImport(target: unknown, subpath: string, pattern: boolean, key: string): SearchResult<Resolved> | undefined {\r\n        if (typeof target === \"string\") {\r\n            if (!pattern && subpath.length > 0 && !endsWith(target, \"/\")) {\r\n                if (state.traceEnabled) {\r\n                    trace(state.host, Diagnostics.package_json_scope_0_has_invalid_type_for_target_of_specifier_1, scope.packageDirectory, moduleName);\r\n                }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 75 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 234 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "loadModuleFromTargetExportOrImport",
            "complexity": 75,
            "lineCount": 231,
            "parameterCount": 4,
            "snippet": "function loadModuleFromTargetExportOrImport(target: unknown, subpath: string, pattern: boolean, key: string): SearchResult<Resolved> | undefined {\r\n        if (typeof target === \"string\") {\r\n            if (!pattern && subpath.length > 0 && !endsWith(target, \"/\")) {\r\n                if (state.traceEnabled) {\r\n                    trace(state.host, Diagnostics.package_json_scope_0_has_invalid_type_for_target_of_specifier_1, scope.packageDirectory, moduleName);\r\n                }\r\n                return toSearchResult(/*value*/ undefined);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 75 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 231 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryAddingExtensions",
            "complexity": 62,
            "lineCount": 56,
            "parameterCount": 5,
            "snippet": "function tryAddingExtensions(candidate: string, extensions: Extensions, originalExtension: string, onlyRecordFailures: boolean, state: ModuleResolutionState): PathAndExtension | undefined {\r\n    if (!onlyRecordFailures) {\r\n        const directory = getDirectoryPath(candidate);\r\n        if (directory) {\r\n            onlyRecordFailures = !directoryProbablyExists(directory, state.host);\r\n        }\r\n    }\r\n    switch (originalExtension) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 62 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveTypeReferenceDirective",
            "complexity": 48,
            "lineCount": 187,
            "parameterCount": 7,
            "snippet": "export function resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, cache?: TypeReferenceDirectiveResolutionCache, resolutionMode?: ResolutionMode): ResolvedTypeReferenceDirectiveWithFailedLookupLocations {\r\n    Debug.assert(typeof typeReferenceDirectiveName === \"string\", \"Non-string value passed to `ts.resolveTypeReferenceDirective`, likely by a wrapping package working with an outdated `resolveTypeReferenceDirectives` signature. This is probably not a problem in TS itself.\");\r\n    const traceEnabled = isTraceEnabled(options, host);\r\n    if (redirectedReference) {\r\n        options = redirectedReference.commandLine.options;\r\n    }\r\n    const containingDirectory = containingFile ? getDirectoryPath(containingFile) : undefined;\r\n    let result = containingDirectory ? cache?.getFromDirectoryCache(typeReferenceDirectiveName, resolutionMode, containingDirectory, redirectedReference) : undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 187 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "nodeModuleNameResolverWorker",
            "complexity": 42,
            "lineCount": 157,
            "parameterCount": 10,
            "snippet": "function nodeModuleNameResolverWorker(\r\n    features: NodeResolutionFeatures,\r\n    moduleName: string,\r\n    containingDirectory: string,\r\n    compilerOptions: CompilerOptions,\r\n    host: ModuleResolutionHost,\r\n    cache: ModuleResolutionCache | undefined,\r\n    extensions: Extensions,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 157 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/moduleSpecifiers.ts",
        "criticalFunctions": [
          {
            "name": "tryGetModuleNameFromExportsOrImports",
            "complexity": 50,
            "lineCount": 101,
            "parameterCount": 10,
            "snippet": "function tryGetModuleNameFromExportsOrImports(\r\n    options: CompilerOptions,\r\n    host: ModuleSpecifierResolutionHost,\r\n    targetFilePath: string,\r\n    packageDirectory: string,\r\n    packageName: string,\r\n    exports: unknown,\r\n    conditions: string[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 101 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryGetModuleNameAsNodeModule",
            "complexity": 48,
            "lineCount": 158,
            "parameterCount": 8,
            "snippet": "function tryGetModuleNameAsNodeModule({ path, isRedirect }: ModulePath, { getCanonicalFileName, canonicalSourceDirectory }: Info, importingSourceFile: SourceFile | FutureSourceFile, host: ModuleSpecifierResolutionHost, options: CompilerOptions, userPreferences: UserPreferences, packageNameOnly?: boolean, overrideMode?: ResolutionMode): string | undefined {\r\n    if (!host.fileExists || !host.readFile) {\r\n        return undefined;\r\n    }\r\n    const parts: NodeModulePathParts = getNodeModulePathParts(path)!;\r\n    if (!parts) {\r\n        return undefined;\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 158 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getLocalModuleSpecifier",
            "complexity": 37,
            "lineCount": 95,
            "parameterCount": 7,
            "snippet": "function getLocalModuleSpecifier(moduleFileName: string, info: Info, compilerOptions: CompilerOptions, host: ModuleSpecifierResolutionHost, importMode: ResolutionMode, { getAllowedEndingsInPreferredOrder: getAllowedEndingsInPrefererredOrder, relativePreference, excludeRegexes }: ModuleSpecifierPreferences, pathsOnly?: boolean): string | undefined {\r\n    const { baseUrl, paths, rootDirs } = compilerOptions;\r\n    if (pathsOnly && !paths) {\r\n        return undefined;\r\n    }\r\n    const { sourceDirectory, canonicalSourceDirectory, getCanonicalFileName } = info;\r\n    const allowedEndings = getAllowedEndingsInPrefererredOrder(importMode);\r\n    const relativePath = rootDirs && tryGetModuleNameFromRootDirs(rootDirs, moduleFileName, sourceDirectory, getCanonicalFileName, allowedEndings, compilerOptions) ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "computeModuleSpecifiers",
            "complexity": 30,
            "lineCount": 104,
            "parameterCount": 7,
            "snippet": "function computeModuleSpecifiers(\r\n    modulePaths: readonly ModulePath[],\r\n    compilerOptions: CompilerOptions,\r\n    importingSourceFile: SourceFile | FutureSourceFile,\r\n    host: ModuleSpecifierResolutionHost,\r\n    userPreferences: UserPreferences,\r\n    options: ModuleSpecifierOptions = {},\r\n    forAutoImport: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryDirectoryWithPackageJson",
            "complexity": 29,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "function tryDirectoryWithPackageJson(packageRootIndex: number): { moduleFileToTry: string; packageRootPath?: string; blockedByExports?: true; verbatimFromExports?: true; } {\r\n        const packageRootPath = path.substring(0, packageRootIndex);\r\n        const packageJsonPath = combinePaths(packageRootPath, \"package.json\");\r\n        let moduleFileToTry = path;\r\n        let maybeBlockedByTypesVersions = false;\r\n        const cachedPackageJson = host.getPackageJsonInfoCache?.()?.getPackageJsonInfo(packageJsonPath);\r\n        if (isPackageJsonInfo(cachedPackageJson) || cachedPackageJson === undefined && host.fileExists(packageJsonPath)) {\r\n            const packageJsonContent: Record<string, any> | undefined = cachedPackageJson?.contents.packageJsonContent || tryParseJson(host.readFile!(packageJsonPath)!);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/parser.ts",
        "criticalFunctions": [
          {
            "name": "parseJSDocCommentWorker",
            "complexity": 243,
            "lineCount": 1039,
            "parameterCount": 2,
            "snippet": "function parseJSDocCommentWorker(start = 0, length: number | undefined): JSDoc | undefined {\r\n            const content = sourceText;\r\n            const end = length === undefined ? content.length : start + length;\r\n            length = end - start;\r\n            Debug.assert(start >= 0);\r\n            Debug.assert(start <= end);\r\n            Debug.assert(end <= content.length);\r\n            if (!isJSDocLikeText(content, start)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 243 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1039 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isListElement",
            "complexity": 57,
            "lineCount": 109,
            "parameterCount": 2,
            "snippet": "function isListElement(parsingContext: ParsingContext, inErrorRecovery: boolean): boolean {\r\n        const node = currentNode(parsingContext);\r\n        if (node) {\r\n            return true;\r\n        }\r\n        switch (parsingContext) {\r\n            case ParsingContext.SourceElements:\r\n            case ParsingContext.BlockStatements:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 57 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              }
            ]
          },
          {
            "name": "parseStatement",
            "complexity": 46,
            "lineCount": 82,
            "parameterCount": 0,
            "snippet": "function parseStatement(): Statement {\r\n        switch (token()) {\r\n            case SyntaxKind.SemicolonToken:\r\n                return parseEmptyStatement();\r\n            case SyntaxKind.OpenBraceToken:\r\n                return parseBlock(/*ignoreMissingOpenBrace*/ false);\r\n            case SyntaxKind.VarKeyword:\r\n                return parseVariableStatement(getNodePos(), hasPrecedingJSDocComment(), /*modifiers*/ undefined);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isStartOfType",
            "complexity": 42,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function isStartOfType(inStartOfParameter?: boolean): boolean {\r\n        switch (token()) {\r\n            case SyntaxKind.AnyKeyword:\r\n            case SyntaxKind.UnknownKeyword:\r\n            case SyntaxKind.StringKeyword:\r\n            case SyntaxKind.NumberKeyword:\r\n            case SyntaxKind.BigIntKeyword:\r\n            case SyntaxKind.BooleanKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isStartOfStatement",
            "complexity": 42,
            "lineCount": 61,
            "parameterCount": 0,
            "snippet": "function isStartOfStatement(): boolean {\r\n        switch (token()) {\r\n            case SyntaxKind.AtToken:\r\n            case SyntaxKind.SemicolonToken:\r\n            case SyntaxKind.OpenBraceToken:\r\n            case SyntaxKind.VarKeyword:\r\n            case SyntaxKind.LetKeyword:\r\n            case SyntaxKind.UsingKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/path.ts",
        "criticalFunctions": [
          {
            "name": "getNormalizedAbsolutePath",
            "complexity": 25,
            "lineCount": 93,
            "parameterCount": 2,
            "snippet": "export function getNormalizedAbsolutePath(path: string, currentDirectory: string | undefined): string {\r\n    let rootLength = getRootLength(path);\r\n    if (rootLength === 0 && currentDirectory) {\r\n        path = combinePaths(currentDirectory, path);\r\n        rootLength = getRootLength(path);\r\n    }\r\n    else {\r\n        path = normalizeSlashes(path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getEncodedRootLength",
            "complexity": 21,
            "lineCount": 57,
            "parameterCount": 1,
            "snippet": "function getEncodedRootLength(path: string): number {\r\n    if (!path) return 0;\r\n    const ch0 = path.charCodeAt(0);\r\n    if (ch0 === CharacterCodes.slash || ch0 === CharacterCodes.backslash) {\r\n        if (path.charCodeAt(1) !== ch0) return 1; // POSIX: \"/\" (or non-normalized \"\\\")\r\n        const p1 = path.indexOf(ch0 === CharacterCodes.slash ? directorySeparator : altDirectorySeparator, 2);\r\n        if (p1 < 0) return path.length; // UNC: \"//server\" or \"\\\\server\"\r\n        return p1 + 1; // UNC: \"//server/\" or \"\\\\server\\\"\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/performance.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/compiler/program.ts",
        "criticalFunctions": [
          {
            "name": "createProgram",
            "complexity": 715,
            "lineCount": 3338,
            "parameterCount": 5,
            "snippet": "export function createProgram(_rootNamesOrOptions: readonly string[] | CreateProgramOptions, _options?: CompilerOptions, _host?: CompilerHost, _oldProgram?: Program, _configFileParsingDiagnostics?: readonly Diagnostic[]): Program {\r\n    let _createProgramOptions = isArray(_rootNamesOrOptions) ? createCreateProgramOptions(_rootNamesOrOptions, _options!, _host, _oldProgram, _configFileParsingDiagnostics) : _rootNamesOrOptions; // TODO: GH#18217\r\n    const { rootNames, options, configFileParsingDiagnostics, projectReferences, typeScriptVersion, host: createProgramOptionsHost } = _createProgramOptions;\r\n    let { oldProgram } = _createProgramOptions;\r\n    _createProgramOptions = undefined!;\r\n    _rootNamesOrOptions = undefined!;\r\n    for (const option of commandLineOptionOfCustomType) {\r\n        if (hasProperty(options, option.name)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 715 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 3338 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyCompilerOptions",
            "complexity": 144,
            "lineCount": 326,
            "parameterCount": 0,
            "snippet": "function verifyCompilerOptions() {\r\n        if (options.strictPropertyInitialization && !getStrictOptionValue(options, \"strictNullChecks\")) {\r\n            createDiagnosticForOptionName(Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"strictPropertyInitialization\", \"strictNullChecks\");\r\n        }\r\n        if (options.exactOptionalPropertyTypes && !getStrictOptionValue(options, \"strictNullChecks\")) {\r\n            createDiagnosticForOptionName(Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"exactOptionalPropertyTypes\", \"strictNullChecks\");\r\n        }\r\n        if (options.isolatedModules || options.verbatimModuleSyntax) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 144 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 326 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getJSSyntacticDiagnosticsForFile",
            "complexity": 99,
            "lineCount": 251,
            "parameterCount": 1,
            "snippet": "function getJSSyntacticDiagnosticsForFile(sourceFile: SourceFile): DiagnosticWithLocation[] {\r\n        return runWithCancellationToken(() => {\r\n            const diagnostics: DiagnosticWithLocation[] = [];\r\n            walk(sourceFile, sourceFile);\r\n            forEachChildRecursively(sourceFile, walk, walkArray);\r\n            return diagnostics;\r\n            function walk(node: Node, parent: Node) {\r\n                switch (parent.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 99 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 251 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 99,
            "lineCount": 249,
            "parameterCount": 0,
            "snippet": "() => {\r\n            const diagnostics: DiagnosticWithLocation[] = [];\r\n            walk(sourceFile, sourceFile);\r\n            forEachChildRecursively(sourceFile, walk, walkArray);\r\n            return diagnostics;\r\n            function walk(node: Node, parent: Node) {\r\n                switch (parent.kind) {\r\n                    case SyntaxKind.Parameter:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 99 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 249 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryReuseStructureFromOldProgram",
            "complexity": 49,
            "lineCount": 254,
            "parameterCount": 0,
            "snippet": "function tryReuseStructureFromOldProgram(): StructureIsReused {\r\n        if (!oldProgram) {\r\n            return StructureIsReused.Not;\r\n        }\r\n        const oldOptions = oldProgram.getCompilerOptions();\r\n        if (changesAffectModuleResolution(oldOptions, options)) {\r\n            return StructureIsReused.Not;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 49 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 254 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/programDiagnostics.ts",
        "criticalFunctions": [
          {
            "name": "createProgramDiagnostics",
            "complexity": 75,
            "lineCount": 339,
            "parameterCount": 1,
            "snippet": "export function createProgramDiagnostics(getCompilerOptionsObjectLiteralSyntax: () => ObjectLiteralExpression | undefined): ProgramDiagnostics {\r\n    let computedDiagnostics: DiagnosticCollection | undefined;\r\n    let fileReasons = createMultiMap<Path, FileIncludeReason>();\r\n    let fileProcessingDiagnostics: FilePreprocessingDiagnostics[] | undefined;\r\n    let commonSourceDirectory: string | undefined;\r\n    let configDiagnostics: DiagnosticCollection | undefined;\r\n    let lazyConfigDiagnostics: LazyConfigDiagnostic[] | undefined;\r\n    let fileReasonsToChain: Map<Path, FileReasonToChainCache> | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 75 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 339 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDiagnosticExplainingFile",
            "complexity": 38,
            "lineCount": 115,
            "parameterCount": 5,
            "snippet": "function createDiagnosticExplainingFile(program: Program, file: SourceFile | undefined, fileProcessingReason: FileIncludeReason | undefined, diagnostic: DiagnosticMessage, args: DiagnosticArguments): Diagnostic {\r\n        let seenReasons: Set<FileIncludeReason> | undefined;\r\n        let fileIncludeReasons: DiagnosticMessageChain[] | undefined;\r\n        let relatedInfo: DiagnosticWithLocation[] | undefined;\r\n        let fileIncludeReasonDetails: DiagnosticMessageChain | undefined;\r\n        let redirectInfo: DiagnosticMessageChain[] | undefined;\r\n        let chain: DiagnosticMessageChain | undefined;\r\n        const reasons = file && fileReasons.get(file.path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 38 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fileIncludeReasonToRelatedInformation",
            "complexity": 28,
            "lineCount": 99,
            "parameterCount": 2,
            "snippet": "function fileIncludeReasonToRelatedInformation(program: Program, reason: FileIncludeReason): DiagnosticWithLocation | undefined {\r\n        if (isReferencedFile(reason)) {\r\n            const referenceLocation = getReferencedFileLocation(program, reason);\r\n            let message: DiagnosticMessage;\r\n            switch (reason.kind) {\r\n                case FileIncludeKind.Import:\r\n                    message = Diagnostics.File_is_included_via_import_here;\r\n                    break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/compiler/resolutionCache.ts",
        "criticalFunctions": [
          {
            "name": "createResolutionCache",
            "complexity": 208,
            "lineCount": 1121,
            "parameterCount": 3,
            "snippet": "export function createResolutionCache(resolutionHost: ResolutionCacheHost, rootDirForResolution: string, logChangesWhenResolvingModule: boolean): ResolutionCache {\r\n    let filesWithChangedSetOfUnresolvedImports: Path[] | undefined;\r\n    let filesWithInvalidatedResolutions: Set<Path> | undefined;\r\n    let filesWithInvalidatedNonRelativeUnresolvedImports: ReadonlyMap<Path, readonly string[]> | undefined;\r\n    const nonRelativeExternalModuleResolutions = new Set<ResolutionWithFailedLookupLocations>();\r\n    const resolutionsWithFailedLookups = new Set<ResolutionWithFailedLookupLocations>();\r\n    const resolutionsWithOnlyAffectingLocations = new Set<ResolutionWithFailedLookupLocations>();\r\n    const resolvedFileToResolution = new Map<Path, Set<ResolutionWithFailedLookupLocations>>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 208 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveNamesWithLocalCache",
            "complexity": 41,
            "lineCount": 121,
            "parameterCount": 1,
            "snippet": "function resolveNamesWithLocalCache<Entry, SourceFile, T extends ResolutionWithFailedLookupLocations, R extends ResolutionWithResolvedFileName>({\r\n        entries,\r\n        containingFile,\r\n        containingSourceFile,\r\n        redirectedReference,\r\n        options,\r\n        perFileCache,\r\n        reusedNames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createFileWatcherOfAffectingLocation",
            "complexity": 18,
            "lineCount": 56,
            "parameterCount": 2,
            "snippet": "function createFileWatcherOfAffectingLocation(affectingLocation: string, forResolution: boolean) {\r\n        const fileWatcher = fileWatchesOfAffectingLocations.get(affectingLocation);\r\n        if (fileWatcher) {\r\n            if (forResolution) fileWatcher.resolutions++;\r\n            else fileWatcher.files++;\r\n            return;\r\n        }\r\n        let locationToWatch = affectingLocation;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scheduleInvalidateResolutionOfFailedLookupLocation",
            "complexity": 11,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "function scheduleInvalidateResolutionOfFailedLookupLocation(fileOrDirectoryPath: Path, isCreatingWatchedDirectory: boolean) {\r\n        if (isCreatingWatchedDirectory) {\r\n            (isInDirectoryChecks ||= new Set()).add(fileOrDirectoryPath);\r\n        }\r\n        else {\r\n            const updatedPath = removeIgnoredPath(fileOrDirectoryPath);\r\n            if (!updatedPath) return false;\r\n            fileOrDirectoryPath = updatedPath;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDirectoryWatcherForPackageDir",
            "complexity": 9,
            "lineCount": 55,
            "parameterCount": 5,
            "snippet": "function createDirectoryWatcherForPackageDir(\r\n        dir: string,\r\n        dirPath: Path,\r\n        packageDir: string,\r\n        packageDirPath: Path,\r\n        nonRecursive: boolean | undefined,\r\n    ) {\r\n        Debug.assert(!nonRecursive);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/scanner.ts",
        "criticalFunctions": [
          {
            "name": "createScanner",
            "complexity": 747,
            "lineCount": 3011,
            "parameterCount": 7,
            "snippet": "export function createScanner(\r\n    languageVersion: ScriptTarget,\r\n    skipTrivia: boolean,\r\n    languageVariant: LanguageVariant = LanguageVariant.Standard,\r\n    textInitial?: string,\r\n    onError?: ErrorCallback,\r\n    start?: number,\r\n    length?: number,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 747 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 3011 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scanRegularExpressionWorker",
            "complexity": 256,
            "lineCount": 997,
            "parameterCount": 3,
            "snippet": "function scanRegularExpressionWorker(regExpFlags: RegularExpressionFlags, annexB: boolean, namedCaptureGroups: boolean) {\r\n        /* eslint-disable no-var */\r\n        /** Grammar parameter */\r\n        var unicodeSetsMode = !!(regExpFlags & RegularExpressionFlags.UnicodeSets);\r\n        /** Grammar parameter */\r\n        var anyUnicodeMode = !!(regExpFlags & RegularExpressionFlags.AnyUnicodeMode);\r\n        var anyUnicodeModeOrNonAnnexB = anyUnicodeMode || !annexB;\r\n        /** @see {scanClassSetExpression} */\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 256 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 997 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scan",
            "complexity": 166,
            "lineCount": 498,
            "parameterCount": 0,
            "snippet": "function scan(): SyntaxKind {\r\n        fullStartPos = pos;\r\n        tokenFlags = TokenFlags.None;\r\n        while (true) {\r\n            tokenStart = pos;\r\n            if (pos >= end) {\r\n                return token = SyntaxKind.EndOfFileToken;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 166 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 498 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scanEscapeSequence",
            "complexity": 67,
            "lineCount": 164,
            "parameterCount": 1,
            "snippet": "function scanEscapeSequence(flags: EscapeSequenceScanningFlags): string {\r\n        const start = pos;\r\n        pos++;\r\n        if (pos >= end) {\r\n            error(Diagnostics.Unexpected_end_of_text);\r\n            return \"\";\r\n        }\r\n        const ch = charCodeUnchecked(pos);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 67 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scanAlternative",
            "complexity": 49,
            "lineCount": 176,
            "parameterCount": 1,
            "snippet": "function scanAlternative(isInGroup: boolean) {\r\n            let isPreviousTermQuantifiable = false;\r\n            while (true) {\r\n                const start = pos;\r\n                const ch = charCodeChecked(pos);\r\n                switch (ch) {\r\n                    case CharacterCodes.EOF:\r\n                        return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 49 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 176 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/semver.ts",
        "criticalFunctions": [
          {
            "name": "parseComparator",
            "complexity": 27,
            "lineCount": 64,
            "parameterCount": 3,
            "snippet": "function parseComparator(operator: string, text: string, comparators: Comparator[]) {\r\n    const result = parsePartial(text);\r\n    if (!result) return false;\r\n    const { version, major, minor, patch } = result;\r\n    if (!isWildcard(major)) {\r\n        switch (operator) {\r\n            case \"~\":\r\n                comparators.push(createComparator(\">=\", version));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/sourcemap.ts",
        "criticalFunctions": [
          {
            "name": "createSourceMapGenerator",
            "complexity": 65,
            "lineCount": 324,
            "parameterCount": 5,
            "snippet": "export function createSourceMapGenerator(host: EmitHost, file: string, sourceRoot: string, sourcesDirectoryPath: string, generatorOptions: SourceMapGeneratorOptions): SourceMapGenerator {\r\n    /* eslint-disable no-var */\r\n    var { enter, exit } = generatorOptions.extendedDiagnostics\r\n        ? performance.createTimer(\"Source Map\", \"beforeSourcemap\", \"afterSourcemap\")\r\n        : performance.nullTimer;\r\n    var rawSources: string[] = [];\r\n    var sources: string[] = [];\r\n    var sourceToSourceIndexMap = new Map<string, number>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 324 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "decodeMappings",
            "complexity": 31,
            "lineCount": 156,
            "parameterCount": 1,
            "snippet": "export function decodeMappings(mappings: string): MappingsDecoder {\r\n    let done = false;\r\n    let pos = 0;\r\n    let generatedLine = 0;\r\n    let generatedCharacter = 0;\r\n    let sourceIndex = 0;\r\n    let sourceLine = 0;\r\n    let sourceCharacter = 0;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 156 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "appendSourceMap",
            "complexity": 23,
            "lineCount": 63,
            "parameterCount": 6,
            "snippet": "function appendSourceMap(generatedLine: number, generatedCharacter: number, map: RawSourceMap, sourceMapPath: string, start?: LineAndCharacter, end?: LineAndCharacter) {\r\n        Debug.assert(generatedLine >= pendingGeneratedLine, \"generatedLine cannot backtrack\");\r\n        Debug.assert(generatedCharacter >= 0, \"generatedCharacter cannot be negative\");\r\n        enter();\r\n        const sourceIndexToNewSourceIndexMap: number[] = [];\r\n        let nameIndexToNewNameIndexMap: number[] | undefined;\r\n        const mappingIterator = decodeMappings(map.mappings);\r\n        for (const raw of mappingIterator) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDocumentPositionMapper",
            "complexity": 23,
            "lineCount": 119,
            "parameterCount": 3,
            "snippet": "export function createDocumentPositionMapper(host: DocumentPositionMapperHost, map: RawSourceMap, mapPath: string): DocumentPositionMapper {\r\n    const mapDirectory = getDirectoryPath(mapPath);\r\n    const sourceRoot = map.sourceRoot ? getNormalizedAbsolutePath(map.sourceRoot, mapDirectory) : mapDirectory;\r\n    const generatedAbsoluteFilePath = getNormalizedAbsolutePath(map.file, mapDirectory);\r\n    const generatedFile = host.getSourceFileLike(generatedAbsoluteFilePath);\r\n    const sourceFileAbsolutePaths = map.sources.map(source => getNormalizedAbsolutePath(source, sourceRoot));\r\n    const sourceToSourceIndexMap = new Map(sourceFileAbsolutePaths.map((source, i) => [host.getCanonicalFileName(source), i]));\r\n    let decodedMappings: readonly MappedPosition[] | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 119 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "next",
            "complexity": 20,
            "lineCount": 56,
            "parameterCount": 0,
            "snippet": "next() {\r\n            while (!done && pos < mappings.length) {\r\n                const ch = mappings.charCodeAt(pos);\r\n                if (ch === CharacterCodes.semicolon) {\r\n                    generatedLine++;\r\n                    generatedCharacter = 0;\r\n                    pos++;\r\n                    continue;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/symbolWalker.ts",
        "criticalFunctions": [
          {
            "name": "createGetSymbolWalker",
            "complexity": 25,
            "lineCount": 187,
            "parameterCount": 10,
            "snippet": "export function createGetSymbolWalker(\r\n    getRestTypeOfSignature: (sig: Signature) => Type,\r\n    getTypePredicateOfSignature: (sig: Signature) => TypePredicate | undefined,\r\n    getReturnTypeOfSignature: (sig: Signature) => Type,\r\n    getBaseTypes: (type: InterfaceType) => BaseType[],\r\n    resolveStructuredTypeMembers: (type: ObjectType) => ResolvedType,\r\n    getTypeOfSymbol: (sym: Symbol) => Type,\r\n    getResolvedSymbol: (node: Identifier) => Symbol,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 187 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSymbolWalker",
            "complexity": 25,
            "lineCount": 172,
            "parameterCount": 1,
            "snippet": "function getSymbolWalker(accept: (symbol: Symbol) => boolean = () => true): SymbolWalker {\r\n        const visitedTypes: Type[] = []; // Sparse array from id to type\r\n        const visitedSymbols: Symbol[] = []; // Sparse array from id to symbol\r\n        return {\r\n            walkType: type => {\r\n                try {\r\n                    visitType(type);\r\n                    return { visitedTypes: getOwnValues(visitedTypes), visitedSymbols: getOwnValues(visitedSymbols) };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 172 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/compiler/sys.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 82,
            "lineCount": 503,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const byteOrderMarkIndicator = \"\\uFEFF\";\r\n    function getNodeSystem(): System {\r\n        const nativePattern = /^native |^\\([^)]+\\)$|^(?:internal[\\\\/]|[\\w\\s]+(?:\\.js)?$)/;\r\n        const _fs: typeof import(\"fs\") = require(\"fs\");\r\n        const _path: typeof import(\"path\") = require(\"path\");\r\n        const _os = require(\"os\");\r\n        let _crypto: typeof import(\"crypto\") | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 82 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 503 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNodeSystem",
            "complexity": 80,
            "lineCount": 486,
            "parameterCount": 0,
            "snippet": "function getNodeSystem(): System {\r\n        const nativePattern = /^native |^\\([^)]+\\)$|^(?:internal[\\\\/]|[\\w\\s]+(?:\\.js)?$)/;\r\n        const _fs: typeof import(\"fs\") = require(\"fs\");\r\n        const _path: typeof import(\"path\") = require(\"path\");\r\n        const _os = require(\"os\");\r\n        let _crypto: typeof import(\"crypto\") | undefined;\r\n        try {\r\n            _crypto = require(\"crypto\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 80 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 486 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSystemWatchFunctions",
            "complexity": 60,
            "lineCount": 382,
            "parameterCount": 1,
            "snippet": "export function createSystemWatchFunctions({\r\n    pollingWatchFileWorker,\r\n    getModifiedTime,\r\n    setTimeout,\r\n    clearTimeout,\r\n    fsWatchWorker,\r\n    fileSystemEntryExists,\r\n    useCaseSensitiveFileNames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 60 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 382 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDirectoryWatcherSupportingRecursive",
            "complexity": 47,
            "lineCount": 297,
            "parameterCount": 1,
            "snippet": "function createDirectoryWatcherSupportingRecursive({\r\n    watchDirectory,\r\n    useCaseSensitiveFileNames,\r\n    getCurrentDirectory,\r\n    getAccessibleSortedChildDirectories,\r\n    fileSystemEntryExists,\r\n    realpath,\r\n    setTimeout,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 47 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 297 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fsWatchHandlingExistenceOnHost",
            "complexity": 26,
            "lineCount": 144,
            "parameterCount": 6,
            "snippet": "function fsWatchHandlingExistenceOnHost(\r\n        fileOrDirectory: string,\r\n        entryKind: FileSystemEntryKind,\r\n        callback: FsWatchCallback,\r\n        recursive: boolean,\r\n        fallbackPollingInterval: PollingInterval,\r\n        fallbackOptions: WatchOptions | undefined,\r\n    ): FileWatcher {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 144 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/tracing.ts",
        "criticalFunctions": [
          {
            "name": "dumpTypes",
            "complexity": 18,
            "lineCount": 133,
            "parameterCount": 1,
            "snippet": "function dumpTypes(types: readonly Type[]) {\r\n        performance.mark(\"beginDumpTypes\");\r\n        const typesPath = legend[legend.length - 1].typesPath!;\r\n        const typesFd = fs.openSync(typesPath, \"w\");\r\n        const recursionIdentityMap = new Map<object, number>();\r\n        fs.writeSync(typesFd, \"[\");\r\n        const numTypes = types.length;\r\n        for (let i = 0; i < numTypes; i++) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformer.ts",
        "criticalFunctions": [
          {
            "name": "transformNodes",
            "complexity": 37,
            "lineCount": 419,
            "parameterCount": 7,
            "snippet": "export function transformNodes<T extends Node>(resolver: EmitResolver | undefined, host: EmitHost | undefined, factory: NodeFactory, options: CompilerOptions, nodes: readonly T[], transformers: readonly TransformerFactory<T>[], allowDtsFiles: boolean): TransformationResult<T> {\r\n    const enabledSyntaxKindFeatures = new Array<SyntaxKindFeatureFlags>(SyntaxKind.Count);\r\n    let lexicalEnvironmentVariableDeclarations: VariableDeclaration[];\r\n    let lexicalEnvironmentFunctionDeclarations: FunctionDeclaration[];\r\n    let lexicalEnvironmentStatements: Statement[];\r\n    let lexicalEnvironmentFlags = LexicalEnvironmentFlags.None;\r\n    let lexicalEnvironmentVariableDeclarationsStack: VariableDeclaration[][] = [];\r\n    let lexicalEnvironmentFunctionDeclarationsStack: FunctionDeclaration[][] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 419 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getScriptTransformers",
            "complexity": 17,
            "lineCount": 64,
            "parameterCount": 3,
            "snippet": "function getScriptTransformers(compilerOptions: CompilerOptions, customTransformers?: CustomTransformers, emitOnly?: boolean | EmitOnly) {\r\n    if (emitOnly) return emptyArray;\r\n    const languageVersion = getEmitScriptTarget(compilerOptions);\r\n    const moduleKind = getEmitModuleKind(compilerOptions);\r\n    const useDefineForClassFields = getUseDefineForClassFields(compilerOptions);\r\n    const transformers: TransformerFactory<SourceFile | Bundle>[] = [];\r\n    addRange(transformers, customTransformers && map(customTransformers.before, wrapScriptTransformerFactory));\r\n    transformers.push(transformTypeScript);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              }
            ]
          },
          {
            "name": "endLexicalEnvironment",
            "complexity": 10,
            "lineCount": 55,
            "parameterCount": 0,
            "snippet": "function endLexicalEnvironment(): Statement[] | undefined {\r\n        Debug.assert(state > TransformationState.Uninitialized, \"Cannot modify the lexical environment during initialization.\");\r\n        Debug.assert(state < TransformationState.Completed, \"Cannot modify the lexical environment after transformation has completed.\");\r\n        Debug.assert(!lexicalEnvironmentSuspended, \"Lexical environment is suspended.\");\r\n        let statements: Statement[] | undefined;\r\n        if (\r\n            lexicalEnvironmentVariableDeclarations ||\r\n            lexicalEnvironmentFunctionDeclarations ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/tsbuildPublic.ts",
        "criticalFunctions": [
          {
            "name": "getUpToDateStatusWorker",
            "complexity": 76,
            "lineCount": 323,
            "parameterCount": 3,
            "snippet": "function getUpToDateStatusWorker<T extends BuilderProgram>(state: SolutionBuilderState<T>, project: ParsedCommandLine, resolvedPath: ResolvedConfigFilePath): UpToDateStatus {\r\n    if (isSolutionConfig(project)) return { type: UpToDateStatusType.ContainerOnly };\r\n    let referenceStatuses;\r\n    const force = !!state.options.force;\r\n    if (project.projectReferences) {\r\n        state.projectStatus.set(resolvedPath, { type: UpToDateStatusType.ComputingUpstream });\r\n        for (const ref of project.projectReferences) {\r\n            const resolvedRef = resolveProjectReferencePath(ref);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 76 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 323 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createBuildOrUpdateInvalidedProject",
            "complexity": 37,
            "lineCount": 261,
            "parameterCount": 7,
            "snippet": "function createBuildOrUpdateInvalidedProject<T extends BuilderProgram>(\r\n    state: SolutionBuilderState<T>,\r\n    project: ResolvedConfigFileName,\r\n    projectPath: ResolvedConfigFilePath,\r\n    projectIndex: number,\r\n    config: ParsedCommandLine,\r\n    status: UpToDateStatus,\r\n    buildOrder: readonly ResolvedConfigFileName[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 261 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reportUpToDateStatus",
            "complexity": 23,
            "lineCount": 132,
            "parameterCount": 3,
            "snippet": "function reportUpToDateStatus<T extends BuilderProgram>(state: SolutionBuilderState<T>, configFileName: string, status: UpToDateStatus) {\r\n    switch (status.type) {\r\n        case UpToDateStatusType.OutOfDateWithSelf:\r\n            return reportStatus(\r\n                state,\r\n                Diagnostics.Project_0_is_out_of_date_because_output_1_is_older_than_input_2,\r\n                relName(state, configFileName),\r\n                relName(state, status.outOfDateOutputFileName),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 132 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getNextInvalidatedProjectCreateInfo",
            "complexity": 18,
            "lineCount": 112,
            "parameterCount": 3,
            "snippet": "function getNextInvalidatedProjectCreateInfo<T extends BuilderProgram>(\r\n    state: SolutionBuilderState<T>,\r\n    buildOrder: AnyBuildOrder,\r\n    reportQueue: boolean,\r\n): InvalidateProjectCreateInfo | undefined {\r\n    if (!state.projectPendingBuild.size) return undefined;\r\n    if (isCircularBuildOrder(buildOrder)) return undefined;\r\n    const { options, projectPendingBuild } = state;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "queueReferencingProjects",
            "complexity": 18,
            "lineCount": 59,
            "parameterCount": 7,
            "snippet": "function queueReferencingProjects<T extends BuilderProgram>(\r\n    state: SolutionBuilderState<T>,\r\n    project: ResolvedConfigFileName,\r\n    projectPath: ResolvedConfigFilePath,\r\n    projectIndex: number,\r\n    config: ParsedCommandLine,\r\n    buildOrder: readonly ResolvedConfigFileName[],\r\n    buildResult: BuildResultFlags,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/types.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/utilities.ts",
        "criticalFunctions": [
          {
            "name": "createNameResolver",
            "complexity": 214,
            "lineCount": 537,
            "parameterCount": 1,
            "snippet": "export function createNameResolver({\r\n    compilerOptions,\r\n    requireSymbol,\r\n    argumentsSymbol,\r\n    error,\r\n    getSymbolOfDeclaration,\r\n    globals,\r\n    lookup,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 214 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 537 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveNameHelper",
            "complexity": 161,
            "lineCount": 394,
            "parameterCount": 6,
            "snippet": "function resolveNameHelper(\r\n        location: Node | undefined,\r\n        nameArg: __String | Identifier,\r\n        meaning: SymbolFlags,\r\n        nameNotFoundMessage: DiagnosticMessage | undefined,\r\n        isUse: boolean,\r\n        excludeGlobals?: boolean,\r\n    ): Symbol | undefined {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 161 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 394 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isSourceElement",
            "complexity": 94,
            "lineCount": 99,
            "parameterCount": 1,
            "snippet": "export function isSourceElement(node: Node): boolean {\r\n    switch (node.kind) {\r\n        case SyntaxKind.TypeParameter:\r\n        case SyntaxKind.Parameter:\r\n        case SyntaxKind.PropertyDeclaration:\r\n        case SyntaxKind.PropertySignature:\r\n        case SyntaxKind.ConstructorType:\r\n        case SyntaxKind.FunctionType:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 94 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          },
          {
            "name": "canHaveJSDoc",
            "complexity": 67,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "export function canHaveJSDoc(node: Node): node is HasJSDoc {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ArrowFunction:\r\n        case SyntaxKind.BinaryExpression:\r\n        case SyntaxKind.Block:\r\n        case SyntaxKind.BreakStatement:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.CaseClause:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 67 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isExpressionNode",
            "complexity": 65,
            "lineCount": 69,
            "parameterCount": 1,
            "snippet": "export function isExpressionNode(node: Node): boolean {\r\n    switch (node.kind) {\r\n        case SyntaxKind.SuperKeyword:\r\n        case SyntaxKind.NullKeyword:\r\n        case SyntaxKind.TrueKeyword:\r\n        case SyntaxKind.FalseKeyword:\r\n        case SyntaxKind.RegularExpressionLiteral:\r\n        case SyntaxKind.ArrayLiteralExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/utilitiesPublic.ts",
        "criticalFunctions": [
          {
            "name": "canHaveSymbol",
            "complexity": 65,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "export function canHaveSymbol(node: Node): node is Declaration {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ArrowFunction:\r\n        case SyntaxKind.BinaryExpression:\r\n        case SyntaxKind.BindingElement:\r\n        case SyntaxKind.CallExpression:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.ClassDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isDeclarationKind",
            "complexity": 36,
            "lineCount": 38,
            "parameterCount": 1,
            "snippet": "function isDeclarationKind(kind: SyntaxKind) {\r\n    return kind === SyntaxKind.ArrowFunction\r\n        || kind === SyntaxKind.BindingElement\r\n        || kind === SyntaxKind.ClassDeclaration\r\n        || kind === SyntaxKind.ClassExpression\r\n        || kind === SyntaxKind.ClassStaticBlockDeclaration\r\n        || kind === SyntaxKind.Constructor\r\n        || kind === SyntaxKind.EnumDeclaration\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "isLeftHandSideExpressionKind",
            "complexity": 32,
            "lineCount": 38,
            "parameterCount": 1,
            "snippet": "function isLeftHandSideExpressionKind(kind: SyntaxKind): boolean {\r\n    switch (kind) {\r\n        case SyntaxKind.PropertyAccessExpression:\r\n        case SyntaxKind.ElementAccessExpression:\r\n        case SyntaxKind.NewExpression:\r\n        case SyntaxKind.CallExpression:\r\n        case SyntaxKind.JsxElement:\r\n        case SyntaxKind.JsxSelfClosingElement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "canHaveLocals",
            "complexity": 31,
            "lineCount": 37,
            "parameterCount": 1,
            "snippet": "export function canHaveLocals(node: Node): node is HasLocals {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ArrowFunction:\r\n        case SyntaxKind.Block:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.CaseBlock:\r\n        case SyntaxKind.CatchClause:\r\n        case SyntaxKind.ClassStaticBlockDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getNonAssignedNameOfDeclaration",
            "complexity": 20,
            "lineCount": 45,
            "parameterCount": 1,
            "snippet": "export function getNonAssignedNameOfDeclaration(declaration: Declaration | Expression): DeclarationName | undefined {\r\n    switch (declaration.kind) {\r\n        case SyntaxKind.Identifier:\r\n            return declaration as Identifier;\r\n        case SyntaxKind.JSDocPropertyTag:\r\n        case SyntaxKind.JSDocParameterTag: {\r\n            const { name } = declaration as JSDocPropertyLikeTag;\r\n            if (name.kind === SyntaxKind.QualifiedName) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/visitorPublic.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/watch.ts",
        "criticalFunctions": [
          {
            "name": "fileIncludeReasonToDiagnostics",
            "complexity": 33,
            "lineCount": 107,
            "parameterCount": 3,
            "snippet": "export function fileIncludeReasonToDiagnostics(program: Program, reason: FileIncludeReason, fileNameConvertor?: (fileName: string) => string): DiagnosticMessageChain {\r\n    const options = program.getCompilerOptions();\r\n    if (isReferencedFile(reason)) {\r\n        const referenceLocation = getReferencedFileLocation(program, reason);\r\n        const referenceText = isReferenceFileLocation(referenceLocation) ? referenceLocation.file.text.substring(referenceLocation.pos, referenceLocation.end) : `\"${referenceLocation.text}\"`;\r\n        let message: DiagnosticMessage;\r\n        Debug.assert(isReferenceFileLocation(referenceLocation) || reason.kind === FileIncludeKind.Import, \"Only synthetic references are imports\");\r\n        switch (reason.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "explainIfFileIsRedirectAndImpliedFormat",
            "complexity": 10,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "export function explainIfFileIsRedirectAndImpliedFormat(\r\n    file: SourceFile,\r\n    options: CompilerOptions,\r\n    fileNameConvertor?: (fileName: string) => string,\r\n): DiagnosticMessageChain[] | undefined {\r\n    let result: DiagnosticMessageChain[] | undefined;\r\n    if (file.path !== file.resolvedPath) {\r\n        (result ??= []).push(chainDiagnosticMessages(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitFilesAndReportErrors",
            "complexity": 10,
            "lineCount": 68,
            "parameterCount": 8,
            "snippet": "export function emitFilesAndReportErrors<T extends BuilderProgram>(\r\n    program: Program | T,\r\n    reportDiagnostic: DiagnosticReporter,\r\n    write?: (s: string) => void,\r\n    reportSummary?: ReportEmitErrorSummary,\r\n    writeFile?: WriteFileCallback,\r\n    cancellationToken?: CancellationToken,\r\n    emitOnlyDtsFiles?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitFilesAndReportErrorsAndGetExitStatus",
            "complexity": 4,
            "lineCount": 32,
            "parameterCount": 8,
            "snippet": "export function emitFilesAndReportErrorsAndGetExitStatus<T extends BuilderProgram>(\r\n    program: Program | T,\r\n    reportDiagnostic: DiagnosticReporter,\r\n    write?: (s: string) => void,\r\n    reportSummary?: ReportEmitErrorSummary,\r\n    writeFile?: WriteFileCallback,\r\n    cancellationToken?: CancellationToken,\r\n    emitOnlyDtsFiles?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/watchPublic.ts",
        "criticalFunctions": [
          {
            "name": "createWatchProgram",
            "complexity": 123,
            "lineCount": 844,
            "parameterCount": 1,
            "snippet": "export function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfFilesAndCompilerOptionsOrConfigFile<T>): WatchOfFilesAndCompilerOptions<T> | WatchOfConfigFile<T> {\r\n    interface FilePresentOnHost {\r\n        version: string;\r\n        sourceFile: SourceFile;\r\n        fileWatcher: FileWatcher;\r\n    }\r\n    type FileMissingOnHost = false;\r\n    interface FilePresenceUnknownOnHost {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 123 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 844 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "synchronizeProgram",
            "complexity": 13,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "function synchronizeProgram() {\r\n        writeLog(`Synchronizing program`);\r\n        Debug.assert(compilerOptions);\r\n        Debug.assert(rootFileNames);\r\n        clearInvalidateResolutionsOfFailedLookupLocations();\r\n        const program = getCurrentBuilderProgram();\r\n        if (hasChangedCompilerOptions) {\r\n            newLine = updateNewLine();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "watchReferencedProject",
            "complexity": 9,
            "lineCount": 68,
            "parameterCount": 3,
            "snippet": "function watchReferencedProject(configFileName: string, configPath: Path, commandLine: ParsedConfig) {\r\n        commandLine.watcher ||= watchFile(\r\n            configFileName,\r\n            (_fileName, eventKind) => {\r\n                updateCachedSystemWithFile(configFileName, configPath, eventKind);\r\n                const config = parsedConfigs?.get(configPath);\r\n                if (config) config.updateLevel = ProgramUpdateLevel.Full;\r\n                resolutionCache.removeResolutionsFromProjectReferenceRedirects(configPath);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createWatchCompilerHost",
            "complexity": 2,
            "lineCount": 26,
            "parameterCount": 8,
            "snippet": "export function createWatchCompilerHost<T extends BuilderProgram>(rootFilesOrConfigFileName: string | string[], options: CompilerOptions | undefined, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, projectReferencesOrWatchOptionsToExtend?: readonly ProjectReference[] | WatchOptions, watchOptionsOrExtraFileExtensions?: WatchOptions | readonly FileExtensionInfo[]): WatchCompilerHostOfFilesAndCompilerOptions<T> | WatchCompilerHostOfConfigFile<T> {\r\n    if (isArray(rootFilesOrConfigFileName)) {\r\n        return createWatchCompilerHostOfFilesAndCompilerOptions({\r\n            rootFiles: rootFilesOrConfigFileName,\r\n            options: options!,\r\n            watchOptions: watchOptionsOrExtraFileExtensions as WatchOptions,\r\n            projectReferences: projectReferencesOrWatchOptionsToExtend as readonly ProjectReference[],\r\n            system,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "createWatchCompilerHost",
            "complexity": 1,
            "lineCount": 1,
            "parameterCount": 8,
            "snippet": "export function createWatchCompilerHost<T extends BuilderProgram>(configFileName: string, optionsToExtend: CompilerOptions | undefined, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, watchOptionsToExtend?: WatchOptions, extraFileExtensions?: readonly FileExtensionInfo[]): WatchCompilerHostOfConfigFile<T>;",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/watchUtilities.ts",
        "criticalFunctions": [
          {
            "name": "createCachedDirectoryStructureHost",
            "complexity": 45,
            "lineCount": 262,
            "parameterCount": 3,
            "snippet": "export function createCachedDirectoryStructureHost(host: DirectoryStructureHost, currentDirectory: string, useCaseSensitiveFileNames: boolean): CachedDirectoryStructureHost | undefined {\r\n    if (!host.getDirectories || !host.readDirectory) {\r\n        return undefined;\r\n    }\r\n    const cachedReadDirectoryResult = new Map<string, MutableFileSystemEntries | false>();\r\n    const getCanonicalFileName = createGetCanonicalFileName(useCaseSensitiveFileNames) as ((name: string) => Canonicalized);\r\n    return {\r\n        useCaseSensitiveFileNames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 45 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 262 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isIgnoredFileFromWildCardWatching",
            "complexity": 30,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "export function isIgnoredFileFromWildCardWatching({\r\n    watchedDirPath,\r\n    fileOrDirectory,\r\n    fileOrDirectoryPath,\r\n    configFileName,\r\n    options,\r\n    program,\r\n    extraFileExtensions,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getWatchFactory",
            "complexity": 14,
            "lineCount": 133,
            "parameterCount": 4,
            "snippet": "export function getWatchFactory<X, Y = undefined>(host: WatchFactoryHost, watchLogLevel: WatchLogLevel, log: (s: string) => void, getDetailWatchInfo?: GetDetailWatchInfo<X, Y>): WatchFactory<X, Y> {\r\n    setSysLog(watchLogLevel === WatchLogLevel.Verbose ? log : noop);\r\n    const plainInvokeFactory: WatchFactory<X, Y> = {\r\n        watchFile: (file, callback, pollingInterval, options) => host.watchFile(file, callback, pollingInterval, options),\r\n        watchDirectory: (directory, callback, flags, options) => host.watchDirectory(directory, callback, (flags & WatchDirectoryFlags.Recursive) !== 0, options),\r\n    };\r\n    const triggerInvokingFactory: WatchFactory<X, Y> | undefined = watchLogLevel !== WatchLogLevel.None ?\r\n        {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/client.ts",
        "criticalFunctions": [
          {
            "name": "getEditsForRefactor",
            "complexity": 6,
            "lineCount": 44,
            "parameterCount": 7,
            "snippet": "getEditsForRefactor(\r\n        fileName: string,\r\n        _formatOptions: FormatCodeSettings,\r\n        positionOrRange: number | TextRange,\r\n        refactorName: string,\r\n        actionName: string,\r\n        preferences: UserPreferences | undefined,\r\n        interactiveRefactorArguments?: InteractiveRefactorArguments,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "getCompletionEntryDetails",
            "complexity": 1,
            "lineCount": 8,
            "parameterCount": 7,
            "snippet": "getCompletionEntryDetails(fileName: string, position: number, entryName: string, _options: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, _preferences: UserPreferences | undefined, data: unknown): CompletionEntryDetails {\r\n        const args: protocol.CompletionDetailsRequestArgs = { ...this.createFileLocationRequestArgs(fileName, position), entryNames: [{ name: entryName, source, data }] };\r\n        const request = this.processRequest<protocol.CompletionDetailsRequest>(protocol.CommandTypes.CompletionDetailsFull, args);\r\n        const response = this.processResponse<protocol.Response>(request);\r\n        Debug.assert(response.body.length === 1, \"Unexpected length of completion details response body.\");\r\n        return response.body[0];\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/harness/collectionsImpl.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/harness/compilerImpl.ts",
        "criticalFunctions": [
          {
            "name": "compileFiles",
            "complexity": 24,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "export function compileFiles(host: fakes.CompilerHost, rootFiles: string[] | undefined, compilerOptions: ts.CompilerOptions, typeScriptVersion?: string, captureSuggestions?: boolean): CompilationResult {\r\n    if (compilerOptions.project || !rootFiles || rootFiles.length === 0) {\r\n        const project = readProject(host.parseConfigHost, compilerOptions.project, compilerOptions);\r\n        if (project) {\r\n            if (project.errors && project.errors.length > 0) {\r\n                return new CompilationResult(host, compilerOptions, /*program*/ undefined, /*result*/ undefined, project.errors);\r\n            }\r\n            if (project.config) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/documentsUtil.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/harness/evaluatorImpl.ts",
        "criticalFunctions": [
          {
            "name": "linkModule",
            "complexity": 22,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "private linkModule(module: SystemModule) {\r\n        try {\r\n            for (;;) {\r\n                switch (module.state) {\r\n                    case SystemModuleState.Uninstantiated: {\r\n                        throw new Error(\"Module not yet instantiated\");\r\n                    }\r\n                    case SystemModuleState.Instantiated: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "linkModule",
            "complexity": 21,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "private linkModule(module: AmdModule) {\r\n        try {\r\n            for (;;) {\r\n                switch (module.state) {\r\n                    case AmdModuleState.Uninstantiated: {\r\n                        throw new Error(\"Module not yet instantiated\");\r\n                    }\r\n                    case AmdModuleState.Instantiated: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/harness/fakesHosts.ts",
        "criticalFunctions": [
          {
            "name": "getSourceFile",
            "complexity": 18,
            "lineCount": 69,
            "parameterCount": 2,
            "snippet": "public getSourceFile(fileName: string, languageVersionOrOptions: ts.ScriptTarget | ts.CreateSourceFileOptions): ts.SourceFile | undefined {\r\n        const canonicalFileName = this.getCanonicalFileName(vpath.resolve(this.getCurrentDirectory(), fileName));\r\n        const existing = this._sourceFiles.get(canonicalFileName);\r\n        if (existing) return existing;\r\n        const content = this.readFile(canonicalFileName);\r\n        if (content === undefined) return undefined;\r\n        const cacheKey = this.vfs.shadowRoot && `SourceFile[languageVersionOrOptions=${languageVersionOrOptions},setParentNodes=${this._setParentNodes}]`;\r\n        if (cacheKey) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/harnessIO.ts",
        "criticalFunctions": [
          {
            "name": "doTypeAndSymbolBaseline",
            "complexity": 39,
            "lineCount": 200,
            "parameterCount": 9,
            "snippet": "export function doTypeAndSymbolBaseline(\r\n        baselinePath: string,\r\n        header: string,\r\n        program: ts.Program,\r\n        allFiles: { unitName: string; content: string; }[],\r\n        opts?: Baseline.BaselineOptions,\r\n        multifile?: boolean,\r\n        skipTypeBaselines?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 200 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "iterateErrorBaseline",
            "complexity": 37,
            "lineCount": 159,
            "parameterCount": 3,
            "snippet": "export function* iterateErrorBaseline(inputFiles: readonly TestFile[], diagnostics: readonly ts.Diagnostic[], options?: { pretty?: boolean; caseSensitive?: boolean; currentDirectory?: string; }): IterableIterator<[string, string, number]> {\r\n        diagnostics = ts.toSorted(diagnostics, ts.compareDiagnostics);\r\n        let outputLines = \"\";\r\n        let totalErrorsReportedInNonLibraryNonTsconfigFiles = 0;\r\n        let errorsReported = 0;\r\n        let firstLine = true;\r\n        function newLine() {\r\n            if (firstLine) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 159 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runMultifileBaseline",
            "complexity": 29,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "export function runMultifileBaseline(relativeFileBase: string, extension: string, generateContent: () => IterableIterator<[string, string, number]> | IterableIterator<[string, string]> | null, opts?: BaselineOptions, referencedExtensions?: string[]): void { // eslint-disable-line no-restricted-syntax\r\n        const gen = generateContent();\r\n        const writtenFiles = new Map<string, true>();\r\n        const errors: Error[] = [];\r\n        if (gen !== null) {\r\n            for (const value of gen) {\r\n                const [name, content, count] = value as [string, string, number | undefined];\r\n                if (count === 0) continue; // Allow error reporter to skip writing files without errors\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "splitVaryBySettingValue",
            "complexity": 24,
            "lineCount": 60,
            "parameterCount": 2,
            "snippet": "function splitVaryBySettingValue(text: string, varyBy: string): string[] | undefined {\r\n    if (!text) return undefined;\r\n    let star = false;\r\n    const includes: string[] = [];\r\n    const excludes: string[] = [];\r\n    for (let s of text.split(/,/)) {\r\n        s = s.trim().toLowerCase();\r\n        if (s.length === 0) continue;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "prepareDeclarationCompilationContext",
            "complexity": 23,
            "lineCount": 74,
            "parameterCount": 6,
            "snippet": "export function prepareDeclarationCompilationContext(\r\n        inputFiles: readonly TestFile[],\r\n        otherFiles: readonly TestFile[],\r\n        result: compiler.CompilationResult,\r\n        harnessSettings: TestCaseParser.CompilerSettings & HarnessOptions,\r\n        options: ts.CompilerOptions,\r\n        currentDirectory: string | undefined,\r\n    ): DeclarationCompilationContext | undefined {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/harnessLanguageService.ts",
        "criticalFunctions": [
          {
            "name": "require",
            "complexity": 6,
            "lineCount": 100,
            "parameterCount": 2,
            "snippet": "require(_initialDir: string, _moduleName: string): ts.ModuleImportResult {\r\n        switch (_moduleName) {\r\n            case \"quickinfo-augmeneter\":\r\n                return {\r\n                    module: () => ({\r\n                        create(info: ts.server.PluginCreateInfo) {\r\n                            const proxy = makeDefaultProxy(info);\r\n                            const langSvc: any = info.languageService;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/harnessUtils.ts",
        "criticalFunctions": [
          {
            "name": "sourceFileToJSON",
            "complexity": 28,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "export function sourceFileToJSON(file: ts.Node): string {\r\n    return JSON.stringify(file, (_, v) => isNodeOrArray(v) ? serializeNode(v) : v, \"    \");\r\n    function getKindName(k: number | string | undefined): string | undefined {\r\n        if (k === undefined || ts.isString(k)) {\r\n            return k;\r\n        }\r\n        return ts.Debug.formatSyntaxKind(k);\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "serializeNode",
            "complexity": 25,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "function serializeNode(n: ts.Node): any {\r\n        const o: any = { kind: getKindName(n.kind) };\r\n        if (ts.containsParseError(n)) {\r\n            o.containsParseError = true;\r\n        }\r\n        for (const propertyName of Object.getOwnPropertyNames(n) as readonly (keyof ts.SourceFile | keyof ts.Identifier | keyof ts.StringLiteral)[]) {\r\n            switch (propertyName) {\r\n                case \"parent\":\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "assertInvariants",
            "complexity": 22,
            "lineCount": 78,
            "parameterCount": 2,
            "snippet": "export function assertInvariants(node: ts.Node | undefined, parent: ts.Node | undefined): void {\r\n    const queue: [ts.Node | undefined, ts.Node | undefined][] = [[node, parent]];\r\n    for (const [node, parent] of queue) {\r\n        assertInvariantsWorker(node, parent);\r\n    }\r\n    function assertInvariantsWorker(node: ts.Node | undefined, parent: ts.Node | undefined): void {\r\n        if (node) {\r\n            assert.isFalse(node.pos < 0, \"node.pos < 0\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "assertInvariantsWorker",
            "complexity": 21,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function assertInvariantsWorker(node: ts.Node | undefined, parent: ts.Node | undefined): void {\r\n        if (node) {\r\n            assert.isFalse(node.pos < 0, \"node.pos < 0\");\r\n            assert.isFalse(node.end < 0, \"node.end < 0\");\r\n            assert.isFalse(node.end < node.pos, \"node.end < node.pos\");\r\n            assert.equal(node.parent, parent, \"node.parent !== parent\");\r\n            if (parent) {\r\n                assert.isFalse(node.pos < parent.pos, \"node.pos < parent.pos\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/incrementalUtils.ts",
        "criticalFunctions": [
          {
            "name": "verifyProgram",
            "complexity": 18,
            "lineCount": 112,
            "parameterCount": 2,
            "snippet": "function verifyProgram(service: ts.server.ProjectService, project: ts.server.Project) {\r\n    if (service.serverMode === ts.LanguageServiceMode.Syntactic) return;\r\n    const options = project.getCompilerOptions();\r\n    const compilerHost = ts.createCompilerHostWorker(options, /*setParentNodes*/ undefined, service.host);\r\n    compilerHost.useSourceOfProjectReferenceRedirect = project.useSourceOfProjectReferenceRedirect?.bind(project);\r\n    compilerHost.getCurrentDirectory = project.getCurrentDirectory.bind(project);\r\n    const getDefaultLibLocation = compilerHost.getDefaultLibLocation!;\r\n    compilerHost.getDefaultLibLocation = () => ts.getNormalizedAbsolutePath(getDefaultLibLocation(), service.host.getCurrentDirectory());\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyDocumentRegistryStats",
            "complexity": 4,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function verifyDocumentRegistryStats(\r\n    documentRegistry: ts.DocumentRegistry,\r\n    stats: DocumentRegistryExpectedStats,\r\n) {\r\n    documentRegistry.getBuckets().forEach((bucketEntries, key) => {\r\n        const statsByPath = stats.get(key);\r\n        bucketEntries.forEach((entry, path) => {\r\n            const expected = statsByPath?.get(path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyResolutionCache",
            "complexity": 4,
            "lineCount": 230,
            "parameterCount": 4,
            "snippet": "export function verifyResolutionCache(\r\n    actual: ts.ResolutionCache,\r\n    actualProgram: ts.Program,\r\n    resolutionHostCacheHost: ts.ResolutionCacheHost,\r\n    projectName: string,\r\n): void {\r\n    const currentDirectory = resolutionHostCacheHost.getCurrentDirectory!();\r\n    const expected = ts.createResolutionCache(resolutionHostCacheHost, actual.rootDirForResolution, /*logChangesWhenResolvingModule*/ false);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 230 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectResolution",
            "complexity": 2,
            "lineCount": 30,
            "parameterCount": 7,
            "snippet": "function collectResolution<T extends ts.ResolutionWithFailedLookupLocations>(\r\n        cacheType: string,\r\n        fileName: ts.Path,\r\n        resolved: T,\r\n        resolvedFileName: string | undefined,\r\n        name: string,\r\n        mode: ts.ResolutionMode,\r\n        deferWatchingNonRelativeResolution: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/projectServiceStateLogger.ts",
        "criticalFunctions": [
          {
            "name": "patchServiceForStateBaseline",
            "complexity": 73,
            "lineCount": 413,
            "parameterCount": 1,
            "snippet": "export function patchServiceForStateBaseline(service: ProjectService): void {\r\n    if (!service.logger.isTestLogger || !service.logger.hasLevel(LogLevel.verbose)) return;\r\n    if (service.baseline !== noop) return; // Already patched\r\n    const projects = new Map<Project, ProjectData>();\r\n    const scriptInfos = new Map<ScriptInfo, ScriptInfoData>();\r\n    const documentPositionMappers = new Map<DocumentPositionMapper, DocumentPositionMapper>();\r\n    let nextDocumentPositionMapperId = 1;\r\n    const mapperToId = new Map<DocumentPositionMapper, number>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 73 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 413 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "baselineProjects",
            "complexity": 13,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function baselineProjects(currentMappers: Set<DocumentPositionMapper>) {\r\n        const autoImportProviderProjects = [] as AutoImportProviderProject[];\r\n        const auxiliaryProjects = [] as AuxiliaryProject[];\r\n        const orphanConfiguredProjects = service.getOrphanConfiguredProjects(\r\n            /*toRetainConfiguredProjects*/ undefined,\r\n            /*openFilesWithRetainedConfiguredProject*/ undefined,\r\n            /*externalProjectsRetainingConfiguredProjects*/ undefined,\r\n        );\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          },
          {
            "name": "baselineScriptInfos",
            "complexity": 12,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function baselineScriptInfos(currentMappers: Set<DocumentPositionMapper>) {\r\n        return baselineState(\r\n            [service.filenameToScriptInfo],\r\n            scriptInfos,\r\n            (logs, info, data) => {\r\n                let infoDiff = newOrDeleted(info, scriptInfos, data);\r\n                if (infoDiff !== Diff.Deleted && info.documentPositionMapper) currentMappers.add(info.documentPositionMapper);\r\n                const infoPropertyLogs = [] as string[];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "printMapOrSetPropertyValueWorker",
            "complexity": 6,
            "lineCount": 39,
            "parameterCount": 8,
            "snippet": "function printMapOrSetPropertyValueWorker<T extends Map<string, any> | Set<any>>(\r\n        printWhen: PrintPropertyWhen.Always | PrintPropertyWhen.DefinedOrChangedOrNew | PrintPropertyWhen.Changed,\r\n        dataValue: T | undefined,\r\n        propertyName: string,\r\n        propertyValue: T | undefined,\r\n        dataDiff: Diff,\r\n        propertyLogs: StatePropertyLog[],\r\n        getPropertyDiff: (value: MapOrSetPropertyValue<T>, key: MapOrSetPropertyKey<T>) => Diff,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "printProperty",
            "complexity": 4,
            "lineCount": 18,
            "parameterCount": 7,
            "snippet": "function printProperty<Data, Key extends keyof Data & string>(\r\n        printWhen: PrintPropertyWhen,\r\n        data: Data | undefined,\r\n        key: Key,\r\n        value: Data[Key],\r\n        dataDiff: Diff,\r\n        propertyLogs: StatePropertyLog[],\r\n        stringValue?: Data[Key] | string,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/harness/sourceMapRecorder.ts",
        "criticalFunctions": [
          {
            "name": "writeRecordedSpans",
            "complexity": 15,
            "lineCount": 107,
            "parameterCount": 0,
            "snippet": "function writeRecordedSpans() {\r\n        const markerIds: string[] = [];\r\n        function getMarkerId(markerIndex: number) {\r\n            let markerId = \"\";\r\n            if (spanMarkerContinues) {\r\n                assert.isTrue(markerIndex === 0);\r\n                markerId = \"1->\";\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/harness/typeWriter.ts",
        "criticalFunctions": [
          {
            "name": "writeTypeOrSymbol",
            "complexity": 33,
            "lineCount": 102,
            "parameterCount": 2,
            "snippet": "private writeTypeOrSymbol(node: ts.Node, isSymbolWalk: boolean): TypeWriterResult | undefined {\r\n        const actualPos = ts.skipTrivia(this.currentSourceFile.text, node.pos);\r\n        const lineAndCharacter = this.currentSourceFile.getLineAndCharacterOfPosition(actualPos);\r\n        const sourceText = ts.getSourceTextOfNodeFromSourceFile(this.currentSourceFile, node);\r\n        if (!isSymbolWalk) {\r\n            if (ts.isPartOfTypeNode(node) || ts.isIdentifier(node) && !(ts.getMeaningFromDeclaration(node.parent) & ts.SemanticMeaning.Value) && !(ts.isTypeAliasDeclaration(node.parent) && node.parent.name === node)) {\r\n                return undefined;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 127,
            "parameterCount": 0,
            "snippet": "(): { printer: ts.Printer; writer: ts.EmitTextWriter; underliner: ts.EmitTextWriter; reset(): void; } => {\r\n    let underlining = false;\r\n    const printer = createPrinter({ removeComments: true }, {\r\n        onEmitNode: (hint, node, cb) => {\r\n            if (nodeIsFullySynthetic(node) !== underlining) {\r\n                underlining = !underlining;\r\n                const result = cb(hint, node);\r\n                underlining = !underlining;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/util.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/vfsUtil.ts",
        "criticalFunctions": [
          {
            "name": "fileDiff",
            "complexity": 23,
            "lineCount": 50,
            "parameterCount": 7,
            "snippet": "private static fileDiff(container: FileSet, basename: string, changed: FileSystem, changedNode: FileInode, base: FileSystem, baseNode: FileInode, options: DiffOptions) {\r\n        changedNode = walkSameNodes(changedNode);\r\n        baseNode = walkSameNodes(baseNode);\r\n        if (changedNode === baseNode) return false;\r\n        if (isEmptyNonShadowedFile(changedNode) && isEmptyNonShadowedFile(baseNode)) return false;\r\n        if (\r\n            !changedNode.buffer && !baseNode.buffer &&\r\n            changedNode.resolver && changedNode.source !== undefined &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "diffWorker",
            "complexity": 20,
            "lineCount": 32,
            "parameterCount": 6,
            "snippet": "private static diffWorker(container: FileSet, changed: FileSystem, changedLinks: ReadonlyMap<string, Inode> | undefined, base: FileSystem, baseLinks: ReadonlyMap<string, Inode> | undefined, options: DiffOptions) {\r\n        if (changedLinks && !baseLinks) return FileSystem.trackCreatedInodes(container, changed, changedLinks);\r\n        if (baseLinks && !changedLinks) return FileSystem.trackDeletedInodes(container, baseLinks);\r\n        if (changedLinks && baseLinks) {\r\n            let hasChanges = false;\r\n            baseLinks.forEach((node, basename) => {\r\n                if (!changedLinks.has(basename)) {\r\n                    container[basename] = isDirectory(node) ? new Rmdir() : new Unlink();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "_scan",
            "complexity": 19,
            "lineCount": 31,
            "parameterCount": 6,
            "snippet": "private _scan(path: string, stats: Stats, axis: Axis, traversal: Traversal, noFollow: boolean, results: string[]) {\r\n        if (axis === \"ancestors-or-self\" || axis === \"self\" || axis === \"descendants-or-self\") {\r\n            if (!traversal.accept || traversal.accept(path, stats)) {\r\n                results.push(path);\r\n            }\r\n        }\r\n        if (axis === \"ancestors-or-self\" || axis === \"ancestors\") {\r\n            const dirname = vpath.dirname(path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "_walk",
            "complexity": 16,
            "lineCount": 57,
            "parameterCount": 3,
            "snippet": "private _walk(path: string, noFollow?: boolean, onError?: (error: NodeJS.ErrnoException, fragment: WalkResult) => \"stop\" | \"retry\" | \"throw\"): WalkResult | undefined {\r\n        let links = this._getRootLinks();\r\n        let parent: DirectoryInode | undefined;\r\n        let components = vpath.parse(path);\r\n        let step = 0;\r\n        let depth = 0;\r\n        let retry = false;\r\n        while (true) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "directoryDiff",
            "complexity": 15,
            "lineCount": 26,
            "parameterCount": 7,
            "snippet": "private static directoryDiff(container: FileSet, basename: string, changed: FileSystem, changedNode: DirectoryInode, base: FileSystem, baseNode: DirectoryInode, options: DiffOptions) {\r\n        while (!changedNode.links && changedNode.shadowRoot) changedNode = changedNode.shadowRoot;\r\n        while (!baseNode.links && baseNode.shadowRoot) baseNode = baseNode.shadowRoot;\r\n        if (changedNode === baseNode) return false;\r\n        if (isEmptyNonShadowedDirectory(changedNode) && isEmptyNonShadowedDirectory(baseNode)) return false;\r\n        if (\r\n            !changedNode.links && !baseNode.links &&\r\n            changedNode.resolver && changedNode.source !== undefined &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "too-many-params",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/vpathUtil.ts",
        "criticalFunctions": [
          {
            "name": "validateComponents",
            "complexity": 33,
            "lineCount": 38,
            "parameterCount": 3,
            "snippet": "function validateComponents(components: string[], flags: ValidationFlags, hasTrailingSeparator: boolean) {\r\n    const hasRoot = !!components[0];\r\n    const hasDirname = components.length > 2;\r\n    const hasBasename = components.length > 1;\r\n    const hasExtname = hasBasename && extRegExp.test(components[components.length - 1]);\r\n    const invalidComponentRegExp = flags & ValidationFlags.AllowNavigation\r\n        ? flags & ValidationFlags.AllowWildcard ? invalidNavigableComponentWithWildcardsRegExp : invalidNavigableComponentRegExp\r\n        : flags & ValidationFlags.AllowWildcard ? invalidNonNavigableComponentWithWildcardsRegExp : invalidNonNavigableComponentRegExp;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/watchUtils.ts",
        "criticalFunctions": [
          {
            "name": "createWatchUtils",
            "complexity": 19,
            "lineCount": 145,
            "parameterCount": 4,
            "snippet": "export function createWatchUtils<PollingWatcherData, FsWatcherData>(\r\n    pollingWatchesName: string,\r\n    fsWatchesName: string,\r\n    getCanonicalFileName: GetCanonicalFileName,\r\n    system: Required<Pick<System, \"realpath\">>,\r\n): WatchUtils<PollingWatcherData, FsWatcherData> {\r\n    const pollingWatches = initializeWatches<PollingWatcherData>(pollingWatchesName);\r\n    const fsWatches = initializeWatches<FsWatcherData>(fsWatchesName);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 145 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "initializeWatches",
            "complexity": 17,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "function initializeWatches<Data>(name: string): Watches<Data> {\r\n        const actuals = createMultiMap<string, Data>();\r\n        let serialized: Map<string, Data[]> | undefined;\r\n        let canonicalPathsToStrings: Map<string, Set<string>> | undefined;\r\n        let realToLinked: MultiMap<string, string> | undefined;\r\n        let pathToReal: Map<string, string> | undefined;\r\n        return {\r\n            add,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "diffMap",
            "complexity": 16,
            "lineCount": 39,
            "parameterCount": 5,
            "snippet": "function diffMap<T>(\r\n    baseline: string[],\r\n    caption: string,\r\n    map: Map<string, T[]> | undefined,\r\n    old: Map<string, T[]> | undefined,\r\n    deleted: boolean,\r\n) {\r\n    let captionAdded = false;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/server/editorServices.ts",
        "criticalFunctions": [
          {
            "name": "applySafeListWorker",
            "complexity": 25,
            "lineCount": 112,
            "parameterCount": 3,
            "snippet": "private applySafeListWorker(proj: protocol.ExternalProject, rootFiles: protocol.ExternalFile[], typeAcquisition: TypeAcquisition) {\r\n        if (typeAcquisition.enable === false || typeAcquisition.disableFilenameBasedTypeAcquisition) {\r\n            return undefined;\r\n        }\r\n        const typeAcqInclude = typeAcquisition.include || (typeAcquisition.include = []);\r\n        const excludeRules: string[] = [];\r\n        const normalizedNames = rootFiles.map(f => normalizeSlashes(f.fileName)) as NormalizedPath[];\r\n        for (const name of Object.keys(this.safelist)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "forEachResolvedProjectReferenceProjectLoad",
            "complexity": 24,
            "lineCount": 92,
            "parameterCount": 8,
            "snippet": "function forEachResolvedProjectReferenceProjectLoad<T>(\r\n    project: ConfiguredProject,\r\n    parentConfig: ParsedCommandLine,\r\n    cb: (\r\n        childConfigFileExistenceInfo: ConfigFileExistenceInfo,\r\n        childProject: ConfiguredProject | undefined,\r\n        childConfigName: NormalizedPath,\r\n        reason: string,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getOrCreateScriptInfoWorker",
            "complexity": 24,
            "lineCount": 52,
            "parameterCount": 8,
            "snippet": "private getOrCreateScriptInfoWorker(\r\n        fileName: NormalizedPath,\r\n        currentDirectory: string,\r\n        openedByClient: boolean,\r\n        fileContent: string | undefined,\r\n        scriptKind: ScriptKind | undefined,\r\n        hasMixedContent: boolean,\r\n        hostToQueryFileExistsOn: { fileExists(path: string): boolean; } | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "onWildCardDirectoryWatcherInvoke",
            "complexity": 22,
            "lineCount": 82,
            "parameterCount": 5,
            "snippet": "private onWildCardDirectoryWatcherInvoke(\r\n        directory: string,\r\n        configFileName: NormalizedPath,\r\n        config: ParsedConfig,\r\n        wildCardWatcher: WildcardWatcher,\r\n        fileOrDirectory: string,\r\n    ) {\r\n        const fileOrDirectoryPath = this.toPath(fileOrDirectory);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 21,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "ref => {\r\n            const childConfigName = toNormalizedPath(resolveProjectReferencePath(ref));\r\n            const childCanonicalConfigPath = asNormalizedPath(project.projectService.toCanonicalFileName(childConfigName));\r\n            const seenValue = seenResolvedRefs?.get(childCanonicalConfigPath);\r\n            if (seenValue !== undefined && seenValue >= loadKind) return undefined;\r\n            const configFileExistenceInfo = project.projectService.configFileExistenceInfoCache.get(childCanonicalConfigPath);\r\n            let childConfig = loadKind === ConfiguredProjectLoadKind.FindOptimized ?\r\n                configFileExistenceInfo?.exists || project.resolvedChildConfigs?.has(childCanonicalConfigPath) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "async-heavy",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/server/project.ts",
        "criticalFunctions": [
          {
            "name": "updateGraphWorker",
            "complexity": 40,
            "lineCount": 156,
            "parameterCount": 0,
            "snippet": "private updateGraphWorker() {\r\n        const oldProgram = this.languageService.getCurrentProgram();\r\n        Debug.assert(oldProgram === this.program);\r\n        Debug.assert(!this.isClosed(), \"Called update graph worker of closed project\");\r\n        this.writeLog(`Starting updateGraphWorker: Project: ${this.getProjectName()}`);\r\n        const start = timestamp();\r\n        const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = this.resolutionCache.createHasInvalidatedResolutions(returnFalse, returnFalse);\r\n        this.hasInvalidatedResolutions = hasInvalidatedResolutions;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 40 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 156 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getRootFileNames",
            "complexity": 37,
            "lineCount": 164,
            "parameterCount": 4,
            "snippet": "static getRootFileNames(dependencySelection: PackageJsonAutoImportPreference, hostProject: Project, host: GetPackageJsonEntrypointsHost, compilerOptions: CompilerOptions): string[] {\r\n        if (!dependencySelection) {\r\n            return ts.emptyArray;\r\n        }\r\n        const program = hostProject.getCurrentProgram();\r\n        if (!program) {\r\n            return ts.emptyArray;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "watchTypingLocations",
            "complexity": 18,
            "lineCount": 96,
            "parameterCount": 1,
            "snippet": "watchTypingLocations(files: readonly string[] | undefined): void {\r\n        if (!files) {\r\n            this.typingWatchers!.isInvoked = false;\r\n            return;\r\n        }\r\n        if (!files.length) {\r\n            this.closeWatchingTypingLocations();\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getChangesSinceVersion",
            "complexity": 17,
            "lineCount": 103,
            "parameterCount": 2,
            "snippet": "getChangesSinceVersion(lastKnownVersion?: number, includeProjectReferenceRedirectInfo?: boolean): ProjectFilesWithTSDiagnostics {\r\n        const includeProjectReferenceRedirectInfoIfRequested = includeProjectReferenceRedirectInfo\r\n            ? (files: Map<string, boolean>) =>\r\n                arrayFrom(files.entries(), ([fileName, isSourceOfProjectReferenceRedirect]): protocol.FileWithProjectReferenceRedirectInfo => ({\r\n                    fileName,\r\n                    isSourceOfProjectReferenceRedirect,\r\n                }))\r\n            : (files: Map<string, boolean>) => arrayFrom(files.keys());\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "close",
            "complexity": 5,
            "lineCount": 53,
            "parameterCount": 0,
            "snippet": "close(): void {\r\n        if (this.typingsCache) this.projectService.typingsInstaller.onProjectClosed(this);\r\n        this.typingsCache = undefined;\r\n        this.closeWatchingTypingLocations();\r\n        this.cleanupProgram();\r\n        forEach(this.externalFiles, externalFile => this.detachScriptInfoIfNotRoot(externalFile));\r\n        this.rootFilesMap.forEach(root => root.info?.detachFromProject(this));\r\n        this.projectService.pendingEnsureProjectForOpenFiles = true;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/server/protocol.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/server/scriptInfo.ts",
        "criticalFunctions": [
          {
            "name": "getDefaultProject",
            "complexity": 21,
            "lineCount": 50,
            "parameterCount": 0,
            "snippet": "getDefaultProject(): Project {\r\n        switch (this.containingProjects.length) {\r\n            case 0:\r\n                return Errors.ThrowNoProject();\r\n            case 1:\r\n                return isProjectDeferredClose(this.containingProjects[0]) || isBackgroundProject(this.containingProjects[0]) ?\r\n                    Errors.ThrowNoProject() :\r\n                    this.containingProjects[0];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/server/scriptVersionCache.ts",
        "criticalFunctions": [
          {
            "name": "pre",
            "complexity": 18,
            "lineCount": 75,
            "parameterCount": 5,
            "snippet": "pre(_relativeStart: number, _relativeLength: number, lineCollection: LineCollection, _parent: LineCollection, nodeType: CharRangeSection): void {\r\n        const currentNode = this.stack[this.stack.length - 1];\r\n        if ((this.state === CharRangeSection.Entire) && (nodeType === CharRangeSection.Start)) {\r\n            this.state = CharRangeSection.Start;\r\n            this.branchNode = currentNode;\r\n            this.lineCollectionAtBranch = lineCollection;\r\n        }\r\n        let child: LineCollection | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "insertLines",
            "complexity": 16,
            "lineCount": 80,
            "parameterCount": 2,
            "snippet": "insertLines(insertedText: string | undefined, suppressTrailingText: boolean) {\r\n        if (suppressTrailingText) {\r\n            this.trailingText = \"\";\r\n        }\r\n        if (insertedText) {\r\n            insertedText = this.initialText + insertedText + this.trailingText;\r\n        }\r\n        else {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "insertAt",
            "complexity": 14,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "insertAt(child: LineCollection, nodes: LineCollection[]): LineNode[] {\r\n        let childIndex = this.findChildIndex(child);\r\n        const clen = this.children.length;\r\n        const nodeCount = nodes.length;\r\n        if ((clen < lineCollectionCapacity) && (childIndex === (clen - 1)) && (nodeCount === 1)) {\r\n            this.add(nodes[0]);\r\n            this.updateCounts();\r\n            return [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "walk",
            "complexity": 13,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "walk(rangeStart: number, rangeLength: number, walkFns: LineIndexWalker): void {\r\n        if (this.children.length === 0) return;\r\n        let childIndex = 0;\r\n        let childCharCount = this.children[childIndex].charCount();\r\n        let adjustedStart = rangeStart;\r\n        while (adjustedStart >= childCharCount) {\r\n            this.skipChild(adjustedStart, rangeLength, childIndex, walkFns, CharRangeSection.PreStart);\r\n            adjustedStart -= childCharCount;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "edit",
            "complexity": 10,
            "lineCount": 53,
            "parameterCount": 3,
            "snippet": "edit(pos: number, deleteLength: number, newText?: string): LineIndex {\r\n        if (this.root.charCount() === 0) {\r\n            Debug.assert(deleteLength === 0); // Can't delete from empty document\r\n            if (newText !== undefined) {\r\n                this.load(LineIndex.linesFromText(newText).lines);\r\n                return this;\r\n            }\r\n            return undefined!; // TODO: GH#18217\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/server/session.ts",
        "criticalFunctions": [
          {
            "name": "findSourceDefinition",
            "complexity": 37,
            "lineCount": 155,
            "parameterCount": 1,
            "snippet": "private findSourceDefinition(args: protocol.FileLocationRequestArgs): readonly protocol.DefinitionInfo[] {\r\n        const { file, project } = this.getFileAndProject(args);\r\n        const position = this.getPositionInFile(args, file);\r\n        const unmappedDefinitions = project.getLanguageService().getDefinitionAtPosition(file, position);\r\n        let definitions: readonly DefinitionInfo[] = this.mapDefinitionInfoLocations(unmappedDefinitions || emptyArray, project).slice();\r\n        const needsJsResolution = this.projectService.serverMode === LanguageServiceMode.Semantic && (\r\n            !some(definitions, d => toNormalizedPath(d.fileName) !== file && !d.isAmbient) ||\r\n            some(definitions, d => !!d.failedAliasResolution)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 155 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getPerProjectReferences",
            "complexity": 25,
            "lineCount": 131,
            "parameterCount": 7,
            "snippet": "function getPerProjectReferences<TResult>(\r\n    projects: Projects,\r\n    defaultProject: Project,\r\n    initialLocation: DocumentPosition,\r\n    defaultDefinition: DocumentPosition | undefined,\r\n    mapDefinitionInProject: (\r\n        definition: DocumentPosition,\r\n        project: Project,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 131 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getReferencesWorker",
            "complexity": 22,
            "lineCount": 120,
            "parameterCount": 5,
            "snippet": "function getReferencesWorker(\r\n    projects: Projects,\r\n    defaultProject: Project,\r\n    initialLocation: DocumentPosition,\r\n    useCaseSensitiveFileNames: boolean,\r\n    logger: Logger,\r\n): readonly ReferencedSymbol[] {\r\n    const perProjectResults = getPerProjectReferences(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 120 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFullNavigateToItems",
            "complexity": 21,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "private getFullNavigateToItems(args: protocol.NavtoRequestArgs): ProjectNavigateToItems[] {\r\n        const { currentFileOnly, searchValue, maxResultCount, projectFileName } = args;\r\n        if (currentFileOnly) {\r\n            Debug.assertIsDefined(args.file);\r\n            const { file, project } = this.getFileAndProject(args as protocol.FileRequestArgs);\r\n            return [{ project, navigateToItems: project.getLanguageService().getNavigateToItems(searchValue, maxResultCount, file) }];\r\n        }\r\n        const preferences = this.getHostPreferences();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "updateErrorCheck",
            "complexity": 17,
            "lineCount": 95,
            "parameterCount": 4,
            "snippet": "private updateErrorCheck(\r\n        next: NextStep,\r\n        checkList: PendingErrorCheck[] | (string | protocol.FileRangesRequestArgs)[],\r\n        ms: number,\r\n        requireOpen = true,\r\n    ) {\r\n        if (checkList.length === 0) {\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/server/typingInstallerAdapter.ts",
        "criticalFunctions": [
          {
            "name": "handleMessage",
            "complexity": 16,
            "lineCount": 102,
            "parameterCount": 1,
            "snippet": "handleMessage(response: TypesRegistryResponse | PackageInstalledResponse | SetTypings | InvalidateCachedTypings | BeginInstallTypes | EndInstallTypes | InitializationFailedResponse | server.WatchTypingLocations): void {\r\n        if (this.logger.hasLevel(LogLevel.verbose)) {\r\n            this.logger.info(`TIAdapter:: Received response:${stringifyIndented(response)}`);\r\n        }\r\n        switch (response.kind) {\r\n            case EventTypesRegistry:\r\n                this.typesRegistryCache = new Map(Object.entries(response.typesRegistry));\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/compilerRunner.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/projectsRunner.ts",
        "criticalFunctions": [
          {
            "name": "compileDeclarations",
            "complexity": 11,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "private compileDeclarations(compilerResult: BatchCompileProjectTestCaseResult) {\r\n        if (!compilerResult.program) {\r\n            return;\r\n        }\r\n        const compilerOptions = compilerResult.program.getCompilerOptions();\r\n        const allInputFiles: documents.TextDocument[] = [];\r\n        const rootFiles: string[] = [];\r\n        ts.forEach(compilerResult.program.getSourceFiles(), sourceFile => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/runner.ts",
        "criticalFunctions": [
          {
            "name": "handleTestConfig",
            "complexity": 30,
            "lineCount": 109,
            "parameterCount": 0,
            "snippet": "function handleTestConfig() {\r\n    if (testConfigContent !== \"\") {\r\n        const testConfig = JSON.parse(testConfigContent) as TestConfig;\r\n        if (testConfig.light) {\r\n            setLightMode(true);\r\n        }\r\n        if (testConfig.timeout) {\r\n            globalTimeout = testConfig.timeout;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/transpileRunner.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/breakpoints.ts",
        "criticalFunctions": [
          {
            "name": "spanInSourceFileAtLocation",
            "complexity": 207,
            "lineCount": 739,
            "parameterCount": 2,
            "snippet": "export function spanInSourceFileAtLocation(sourceFile: SourceFile, position: number): TextSpan | undefined {\r\n    if (sourceFile.isDeclarationFile) {\r\n        return undefined;\r\n    }\r\n    let tokenAtLocation = getTokenAtPosition(sourceFile, position);\r\n    const lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;\r\n    if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {\r\n        const preceding = findPrecedingToken(tokenAtLocation.pos, sourceFile);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 207 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 739 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "spanInNode",
            "complexity": 191,
            "lineCount": 666,
            "parameterCount": 1,
            "snippet": "function spanInNode(node: Node | undefined): TextSpan | undefined {\r\n        if (node) {\r\n            const { parent } = node;\r\n            switch (node.kind) {\r\n                case SyntaxKind.VariableStatement:\r\n                    return spanInVariableDeclaration((node as VariableStatement).declarationList.declarations[0]);\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.PropertyDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 191 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 666 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "spanInCloseParenToken",
            "complexity": 16,
            "lineCount": 25,
            "parameterCount": 1,
            "snippet": "function spanInCloseParenToken(node: Node): TextSpan | undefined {\r\n            switch (node.parent.kind) {\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.GetAccessor:\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/callHierarchy.ts",
        "criticalFunctions": [
          {
            "name": "createCallSiteCollector",
            "complexity": 36,
            "lineCount": 112,
            "parameterCount": 2,
            "snippet": "function createCallSiteCollector(program: Program, callSites: CallSite[]): (node: Node | undefined) => void {\r\n    function recordCallSite(node: CallExpression | NewExpression | TaggedTemplateExpression | PropertyAccessExpression | ElementAccessExpression | Decorator | JsxOpeningLikeElement | ClassStaticBlockDeclaration) {\r\n        const target = isTaggedTemplateExpression(node) ? node.tag :\r\n            isJsxOpeningLikeElement(node) ? node.tagName :\r\n            isAccessExpression(node) ? node :\r\n            isClassStaticBlockDeclaration(node) ? node :\r\n            node.expression;\r\n        const declaration = resolveCallHierarchyDeclaration(program, target);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collect",
            "complexity": 29,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "function collect(node: Node | undefined) {\r\n        if (!node) return;\r\n        if (node.flags & NodeFlags.Ambient) {\r\n            return;\r\n        }\r\n        if (isValidCallHierarchyDeclaration(node)) {\r\n            if (isClassLike(node)) {\r\n                for (const member of node.members) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveCallHierarchyDeclaration",
            "complexity": 23,
            "lineCount": 68,
            "parameterCount": 2,
            "snippet": "export function resolveCallHierarchyDeclaration(program: Program, location: Node): CallHierarchyDeclaration | CallHierarchyDeclaration[] | undefined {\r\n    const typeChecker = program.getTypeChecker();\r\n    let followingSymbol = false;\r\n    while (true) {\r\n        if (isValidCallHierarchyDeclaration(location)) {\r\n            return findImplementationOrAllInitialDeclarations(typeChecker, location);\r\n        }\r\n        if (isPossibleCallHierarchyDeclaration(location)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCallHierarchyItemName",
            "complexity": 17,
            "lineCount": 45,
            "parameterCount": 2,
            "snippet": "function getCallHierarchyItemName(program: Program, node: CallHierarchyDeclaration): { text: string; pos: number; end: number; } {\r\n    if (isSourceFile(node)) {\r\n        return { text: node.fileName, pos: 0, end: 0 };\r\n    }\r\n    if ((isFunctionDeclaration(node) || isClassDeclaration(node)) && !isNamedDeclaration(node)) {\r\n        const defaultModifier = node.modifiers && find(node.modifiers, isDefaultModifier);\r\n        if (defaultModifier) {\r\n            return { text: \"default\", pos: defaultModifier.getStart(), end: defaultModifier.getEnd() };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCallHierarchItemContainerName",
            "complexity": 16,
            "lineCount": 27,
            "parameterCount": 1,
            "snippet": "function getCallHierarchItemContainerName(node: CallHierarchyDeclaration): string | undefined {\r\n    if (isAssignedExpression(node)) {\r\n        if (isPropertyDeclaration(node.parent) && isClassLike(node.parent.parent)) {\r\n            return isClassExpression(node.parent.parent) ? getAssignedName(node.parent.parent)?.getText() : node.parent.parent.name?.getText();\r\n        }\r\n        if (isModuleBlock(node.parent.parent.parent.parent) && isIdentifier(node.parent.parent.parent.parent.parent.name)) {\r\n            return node.parent.parent.parent.parent.parent.name.getText();\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/classifier.ts",
        "criticalFunctions": [
          {
            "name": "getEncodedSyntacticClassifications",
            "complexity": 128,
            "lineCount": 511,
            "parameterCount": 3,
            "snippet": "export function getEncodedSyntacticClassifications(cancellationToken: CancellationToken, sourceFile: SourceFile, span: TextSpan): Classifications {\r\n    const spanStart = span.start;\r\n    const spanLength = span.length;\r\n    const triviaScanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ false, sourceFile.languageVariant, sourceFile.text);\r\n    const mergeConflictScanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ false, sourceFile.languageVariant, sourceFile.text);\r\n    const result: number[] = [];\r\n    processElement(sourceFile);\r\n    return { spans: result, endOfLineState: EndOfLineState.None };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 128 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 511 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isBinaryExpressionOperatorToken",
            "complexity": 43,
            "lineCount": 49,
            "parameterCount": 1,
            "snippet": "function isBinaryExpressionOperatorToken(token: SyntaxKind): boolean {\r\n    switch (token) {\r\n        case SyntaxKind.AsteriskToken:\r\n        case SyntaxKind.SlashToken:\r\n        case SyntaxKind.PercentToken:\r\n        case SyntaxKind.PlusToken:\r\n        case SyntaxKind.MinusToken:\r\n        case SyntaxKind.LessThanLessThanToken:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "classifyTokenType",
            "complexity": 41,
            "lineCount": 104,
            "parameterCount": 2,
            "snippet": "function classifyTokenType(tokenKind: SyntaxKind, token?: Node): ClassificationType | undefined {\r\n        if (isKeyword(tokenKind)) {\r\n            return ClassificationType.keyword;\r\n        }\r\n        if (tokenKind === SyntaxKind.LessThanToken || tokenKind === SyntaxKind.GreaterThanToken) {\r\n            if (token && getTypeArgumentOrTypeParameterList(token.parent)) {\r\n                return ClassificationType.punctuation;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createClassifier",
            "complexity": 33,
            "lineCount": 175,
            "parameterCount": 0,
            "snippet": "export function createClassifier(): Classifier {\r\n    const scanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ false);\r\n    function getClassificationsForLine(text: string, lexState: EndOfLineState, syntacticClassifierAbsent: boolean): ClassificationResult {\r\n        return convertClassificationsToResult(getEncodedLexicalClassifications(text, lexState, syntacticClassifierAbsent), text);\r\n    }\r\n    function getEncodedLexicalClassifications(text: string, lexState: EndOfLineState, syntacticClassifierAbsent: boolean): Classifications {\r\n        let token = SyntaxKind.Unknown;\r\n        let lastNonTriviaToken = SyntaxKind.Unknown;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 175 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getEncodedLexicalClassifications",
            "complexity": 33,
            "lineCount": 163,
            "parameterCount": 3,
            "snippet": "function getEncodedLexicalClassifications(text: string, lexState: EndOfLineState, syntacticClassifierAbsent: boolean): Classifications {\r\n        let token = SyntaxKind.Unknown;\r\n        let lastNonTriviaToken = SyntaxKind.Unknown;\r\n        const templateStack: SyntaxKind[] = [];\r\n        const { prefix, pushTemplate } = getPrefixFromLexState(lexState);\r\n        text = prefix + text;\r\n        const offset = prefix.length;\r\n        if (pushTemplate) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 163 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/classifier2020.ts",
        "criticalFunctions": [
          {
            "name": "collectTokens",
            "complexity": 41,
            "lineCount": 87,
            "parameterCount": 5,
            "snippet": "function collectTokens(program: Program, sourceFile: SourceFile, span: TextSpan, collector: (node: Node, tokenType: number, tokenModifier: number) => void, cancellationToken: CancellationToken) {\r\n    const typeChecker = program.getTypeChecker();\r\n    let inJSXElement = false;\r\n    function visit(node: Node) {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visit",
            "complexity": 41,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "function visit(node: Node) {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.FunctionExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/completions.ts",
        "criticalFunctions": [
          {
            "name": "getCompletionData",
            "complexity": 615,
            "lineCount": 2012,
            "parameterCount": 10,
            "snippet": "function getCompletionData(\r\n    program: Program,\r\n    log: (message: string) => void,\r\n    sourceFile: SourceFile,\r\n    compilerOptions: CompilerOptions,\r\n    position: number,\r\n    preferences: UserPreferences,\r\n    detailsEntryId: CompletionEntryIdentifier | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 615 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2012 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isSolelyIdentifierDefinitionLocation",
            "complexity": 94,
            "lineCount": 183,
            "parameterCount": 1,
            "snippet": "function isSolelyIdentifierDefinitionLocation(contextToken: Node): boolean {\r\n        const parent = contextToken.parent;\r\n        const containingNodeKind = parent.kind;\r\n        switch (contextToken.kind) {\r\n            case SyntaxKind.CommaToken:\r\n                return containingNodeKind === SyntaxKind.VariableDeclaration ||\r\n                    isVariableDeclarationListButNotTypeArgument(contextToken) ||\r\n                    containingNodeKind === SyntaxKind.VariableStatement ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 94 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 183 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCompletionEntry",
            "complexity": 91,
            "lineCount": 257,
            "parameterCount": 24,
            "snippet": "function createCompletionEntry(\r\n    symbol: Symbol,\r\n    sortText: SortText,\r\n    replacementToken: Node | undefined,\r\n    contextToken: Node | undefined,\r\n    location: Node,\r\n    position: number,\r\n    sourceFile: SourceFile,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 91 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 257 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "24 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCompletionEntriesFromSymbols",
            "complexity": 48,
            "lineCount": 184,
            "parameterCount": 26,
            "snippet": "export function getCompletionEntriesFromSymbols(\r\n    symbols: readonly Symbol[],\r\n    entries: SortedArray<CompletionEntry>,\r\n    replacementToken: Node | undefined,\r\n    contextToken: Node | undefined,\r\n    location: Node,\r\n    position: number,\r\n    sourceFile: SourceFile,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 184 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "26 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "computeCommitCharactersAndIsNewIdentifier",
            "complexity": 42,
            "lineCount": 121,
            "parameterCount": 0,
            "snippet": "function computeCommitCharactersAndIsNewIdentifier(): { defaultCommitCharacters: string[]; isNewIdentifierLocation: boolean; } {\r\n        if (contextToken) {\r\n            const containingNodeKind = contextToken.parent.kind;\r\n            const tokenKind = keywordForNode(contextToken);\r\n            switch (tokenKind) {\r\n                case SyntaxKind.CommaToken:\r\n                    switch (containingNodeKind) {\r\n                        case SyntaxKind.CallExpression:                                               // func( a, |\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/documentHighlights.ts",
        "criticalFunctions": [
          {
            "name": "getHighlightSpans",
            "complexity": 34,
            "lineCount": 62,
            "parameterCount": 2,
            "snippet": "function getHighlightSpans(node: Node, sourceFile: SourceFile): HighlightSpan[] | undefined {\r\n        switch (node.kind) {\r\n            case SyntaxKind.IfKeyword:\r\n            case SyntaxKind.ElseKeyword:\r\n                return isIfStatement(node.parent) ? getIfElseOccurrences(node.parent, sourceFile) : undefined;\r\n            case SyntaxKind.ReturnKeyword:\r\n                return useParent(node.parent, isReturnStatement, getReturnOccurrences);\r\n            case SyntaxKind.ThrowKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNodesToSearchForModifier",
            "complexity": 19,
            "lineCount": 44,
            "parameterCount": 2,
            "snippet": "function getNodesToSearchForModifier(declaration: Node, modifierFlag: ModifierFlags): readonly Node[] | undefined {\r\n        const container = declaration.parent as ModuleBlock | SourceFile | Block | CaseClause | DefaultClause | ConstructorDeclaration | MethodDeclaration | FunctionDeclaration | ObjectTypeDeclaration;\r\n        switch (container.kind) {\r\n            case SyntaxKind.ModuleBlock:\r\n            case SyntaxKind.SourceFile:\r\n            case SyntaxKind.Block:\r\n            case SyntaxKind.CaseClause:\r\n            case SyntaxKind.DefaultClause:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/documentRegistry.ts",
        "criticalFunctions": [
          {
            "name": "createDocumentRegistryInternal",
            "complexity": 33,
            "lineCount": 215,
            "parameterCount": 4,
            "snippet": "export function createDocumentRegistryInternal(useCaseSensitiveFileNames?: boolean, currentDirectory = \"\", jsDocParsingMode?: JSDocParsingMode, externalCache?: ExternalDocumentCache): DocumentRegistry {\r\n    const buckets = new Map<DocumentRegistryBucketKeyWithMode, Map<Path, BucketEntry>>();\r\n    const getCanonicalFileName = createGetCanonicalFileName(!!useCaseSensitiveFileNames);\r\n    function reportStats() {\r\n        const bucketInfoArray = arrayFrom(buckets.keys()).filter(name => name && name.charAt(0) === \"_\").map(name => {\r\n            const entries = buckets.get(name)!;\r\n            const sourceFiles: { name: string; scriptKind: ScriptKind; refCount: number; }[] = [];\r\n            entries.forEach((entry, name) => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 215 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "acquireOrUpdateDocument",
            "complexity": 24,
            "lineCount": 111,
            "parameterCount": 9,
            "snippet": "function acquireOrUpdateDocument(\r\n        fileName: string,\r\n        path: Path,\r\n        compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost,\r\n        key: DocumentRegistryBucketKey,\r\n        scriptSnapshot: IScriptSnapshot,\r\n        version: string,\r\n        acquiring: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "acquireDocumentWithKey",
            "complexity": 1,
            "lineCount": 3,
            "parameterCount": 8,
            "snippet": "function acquireDocumentWithKey(fileName: string, path: Path, compilationSettings: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, languageVersionOrOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile {\r\n        return acquireOrUpdateDocument(fileName, path, compilationSettings, key, scriptSnapshot, version, /*acquiring*/ true, scriptKind, languageVersionOrOptions);\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "updateDocumentWithKey",
            "complexity": 1,
            "lineCount": 3,
            "parameterCount": 8,
            "snippet": "function updateDocumentWithKey(fileName: string, path: Path, compilationSettings: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, languageVersionOrOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile {\r\n        return acquireOrUpdateDocument(fileName, path, getCompilationSettings(compilationSettings), key, scriptSnapshot, version, /*acquiring*/ false, scriptKind, languageVersionOrOptions);\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/exportInfoMap.ts",
        "criticalFunctions": [
          {
            "name": "createCacheableExportInfoMap",
            "complexity": 60,
            "lineCount": 227,
            "parameterCount": 1,
            "snippet": "export function createCacheableExportInfoMap(host: CacheableExportInfoMapHost): ExportInfoMap {\r\n    let exportInfoId = 1;\r\n    const exportInfo = createMultiMap<ExportMapInfoKey, CachedSymbolExportInfo>();\r\n    const symbols = new Map<number, [symbol: Symbol, moduleSymbol: Symbol]>();\r\n    /**\r\n     * Key: node_modules package name (no @types).\r\n     * Value: path to deepest node_modules folder seen that is\r\n     * both visible to `usableByFileName` and contains the package.\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 60 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 227 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "add",
            "complexity": 18,
            "lineCount": 67,
            "parameterCount": 8,
            "snippet": "(importingFile, symbol, symbolTableKey, moduleSymbol, moduleFile, exportKind, isFromPackageJson, checker) => {\r\n            if (importingFile !== usableByFileName) {\r\n                cache.clear();\r\n                usableByFileName = importingFile;\r\n            }\r\n            let packageName;\r\n            if (moduleFile) {\r\n                const nodeModulesPathParts = getNodeModulePathParts(moduleFile.fileName);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isImportable",
            "complexity": 17,
            "lineCount": 59,
            "parameterCount": 8,
            "snippet": "export function isImportable(\r\n    program: Program,\r\n    fromFile: SourceFile,\r\n    toFile: SourceFile | undefined,\r\n    toModule: Symbol,\r\n    preferences: UserPreferences,\r\n    packageJsonFilter: PackageJsonImportFilter | undefined,\r\n    moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getExportInfoMap",
            "complexity": 11,
            "lineCount": 64,
            "parameterCount": 5,
            "snippet": "export function getExportInfoMap(importingFile: SourceFile | FutureSourceFile, host: LanguageServiceHost, program: Program, preferences: UserPreferences, cancellationToken: CancellationToken | undefined): ExportInfoMap {\r\n    const start = timestamp();\r\n    host.getPackageJsonAutoImportProvider?.();\r\n    const cache = host.getCachedExportInfoMap?.() || createCacheableExportInfoMap({\r\n        getCurrentProgram: () => program,\r\n        getPackageJsonAutoImportProvider: () => host.getPackageJsonAutoImportProvider?.(),\r\n        getGlobalTypingsCacheLocation: () => host.getGlobalTypingsCacheLocation?.(),\r\n    });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/findAllReferences.ts",
        "criticalFunctions": [
          {
            "name": "declarationIsWriteAccess",
            "complexity": 39,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function declarationIsWriteAccess(decl: Declaration): boolean {\r\n    if (!!(decl.flags & NodeFlags.Ambient)) return true;\r\n    switch (decl.kind) {\r\n        case SyntaxKind.BinaryExpression:\r\n        case SyntaxKind.BindingElement:\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.ClassExpression:\r\n        case SyntaxKind.DefaultKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          },
          {
            "name": "forEachRelatedSymbol",
            "complexity": 36,
            "lineCount": 123,
            "parameterCount": 7,
            "snippet": "function forEachRelatedSymbol<T>(\r\n        symbol: Symbol,\r\n        location: Node,\r\n        checker: TypeChecker,\r\n        isForRenamePopulateSearchSymbolSet: boolean,\r\n        onlyIncludeBindingElementAtReferenceLocation: boolean,\r\n        /**\r\n         * @param baseSymbol This symbol means one property/mehtod from base class or interface when it is not null or undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getReferencesForThisKeyword",
            "complexity": 34,
            "lineCount": 70,
            "parameterCount": 3,
            "snippet": "function getReferencesForThisKeyword(thisOrSuperKeyword: Node, sourceFiles: readonly SourceFile[], cancellationToken: CancellationToken): SymbolAndEntries[] | undefined {\r\n        let searchSpaceNode: Node = getThisContainer(thisOrSuperKeyword, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);\r\n        let staticFlag = ModifierFlags.Static;\r\n        switch (searchSpaceNode.kind) {\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.MethodSignature:\r\n                if (isObjectLiteralMethod(searchSpaceNode)) {\r\n                    staticFlag &= getSyntacticModifierFlags(searchSpaceNode);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getContextNodeForNodeEntry",
            "complexity": 31,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "function getContextNodeForNodeEntry(node: Node): ContextNode | undefined {\r\n    if (isDeclaration(node)) {\r\n        return getContextNode(node);\r\n    }\r\n    if (!node.parent) return undefined;\r\n    if (!isDeclaration(node.parent) && !isExportAssignment(node.parent)) {\r\n        if (isInJSFile(node)) {\r\n            const binaryExpression = isBinaryExpression(node.parent) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getReferencesAtLocation",
            "complexity": 28,
            "lineCount": 80,
            "parameterCount": 5,
            "snippet": "function getReferencesAtLocation(sourceFile: SourceFile, position: number, search: Search, state: State, addReferencesHere: boolean): void {\r\n        const referenceLocation = getTouchingPropertyName(sourceFile, position);\r\n        if (!isValidReferencePosition(referenceLocation, search.text)) {\r\n            if (!state.options.implementations && (state.options.findInStrings && isInString(sourceFile, position) || state.options.findInComments && isInNonReferenceComment(sourceFile, position))) {\r\n                state.addStringOrCommentReference(sourceFile.fileName, createTextSpan(position, search.text.length));\r\n            }\r\n            return;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/getEditsForFileRename.ts",
        "criticalFunctions": [
          {
            "name": "updateTsconfigFiles",
            "complexity": 26,
            "lineCount": 72,
            "parameterCount": 7,
            "snippet": "function updateTsconfigFiles(program: Program, changeTracker: textChanges.ChangeTracker, oldToNew: PathUpdater, oldFileOrDirPath: string, newFileOrDirPath: string, currentDirectory: string, useCaseSensitiveFileNames: boolean): void {\r\n    const { configFile } = program.getCompilerOptions();\r\n    if (!configFile) return;\r\n    const configDir = getDirectoryPath(configFile.fileName);\r\n    const jsonObjectLiteral = getTsConfigObjectLiteralExpression(configFile);\r\n    if (!jsonObjectLiteral) return;\r\n    forEachProperty(jsonObjectLiteral, (property, propertyName) => {\r\n        switch (propertyName) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 19,
            "lineCount": 38,
            "parameterCount": 2,
            "snippet": "(property, propertyName) => {\r\n        switch (propertyName) {\r\n            case \"files\":\r\n            case \"include\":\r\n            case \"exclude\": {\r\n                const foundExactMatch = updatePaths(property);\r\n                if (foundExactMatch || propertyName !== \"include\" || !isArrayLiteralExpression(property.initializer)) return;\r\n                const includes = mapDefined(property.initializer.elements, e => isStringLiteral(e) ? e.text : undefined);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getEditsForFileRename",
            "complexity": 1,
            "lineCount": 18,
            "parameterCount": 7,
            "snippet": "export function getEditsForFileRename(\r\n    program: Program,\r\n    oldFileOrDirPath: string,\r\n    newFileOrDirPath: string,\r\n    host: LanguageServiceHost,\r\n    formatContext: formatting.FormatContext,\r\n    preferences: UserPreferences,\r\n    sourceMapper: SourceMapper,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/goToDefinition.ts",
        "criticalFunctions": [
          {
            "name": "getDefinitionAtPosition",
            "complexity": 59,
            "lineCount": 170,
            "parameterCount": 5,
            "snippet": "export function getDefinitionAtPosition(program: Program, sourceFile: SourceFile, position: number, searchOtherFilesOnly?: boolean, stopAtAlias?: boolean): readonly DefinitionInfo[] | undefined {\r\n    const resolvedRef = getReferenceAtPosition(sourceFile, position, program);\r\n    const fileReferenceDefinition = resolvedRef && [getDefinitionInfoForFileReference(resolvedRef.reference.fileName, resolvedRef.fileName, resolvedRef.unverified)] || emptyArray;\r\n    if (resolvedRef?.file) {\r\n        return fileReferenceDefinition;\r\n    }\r\n    const node = getTouchingPropertyName(sourceFile, position);\r\n    if (node === sourceFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 59 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 170 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDefinitionFromSymbol",
            "complexity": 17,
            "lineCount": 41,
            "parameterCount": 5,
            "snippet": "function getDefinitionFromSymbol(typeChecker: TypeChecker, symbol: Symbol, node: Node, failedAliasResolution?: boolean, declarationFilter?: (d: Declaration) => boolean): DefinitionInfo[] | undefined {\r\n    const filteredDeclarations = declarationFilter !== undefined ? filter(symbol.declarations, declarationFilter) : symbol.declarations;\r\n    const signatureDefinition = !declarationFilter && (getConstructSignatureDefinition() || getCallSignatureDefinition());\r\n    if (signatureDefinition) {\r\n        return signatureDefinition;\r\n    }\r\n    const withoutExpandos = filter(filteredDeclarations, d => !isExpandoDeclaration(d));\r\n    const results = some(withoutExpandos) ? withoutExpandos : filteredDeclarations;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isDefinitionVisible",
            "complexity": 17,
            "lineCount": 30,
            "parameterCount": 2,
            "snippet": "function isDefinitionVisible(checker: TypeChecker, declaration: Declaration): boolean {\r\n    if (checker.isDeclarationVisible(declaration)) return true;\r\n    if (!declaration.parent) return false;\r\n    if (hasInitializer(declaration.parent) && declaration.parent.initializer === declaration) return isDefinitionVisible(checker, declaration.parent as Declaration);\r\n    switch (declaration.kind) {\r\n        case SyntaxKind.PropertyDeclaration:\r\n        case SyntaxKind.GetAccessor:\r\n        case SyntaxKind.SetAccessor:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "createDefinitionInfoFromName",
            "complexity": 3,
            "lineCount": 24,
            "parameterCount": 8,
            "snippet": "function createDefinitionInfoFromName(checker: TypeChecker, declaration: Declaration, symbolKind: ScriptElementKind, symbolName: string, containerName: string, unverified?: boolean, failedAliasResolution?: boolean, textSpan?: TextSpan): DefinitionInfo {\r\n    const sourceFile = declaration.getSourceFile();\r\n    if (!textSpan) {\r\n        const name = getNameOfDeclaration(declaration) || declaration;\r\n        textSpan = createTextSpanFromNode(name, sourceFile);\r\n    }\r\n    return {\r\n        fileName: sourceFile.fileName,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/importTracker.ts",
        "criticalFunctions": [
          {
            "name": "getImportersForExport",
            "complexity": 50,
            "lineCount": 168,
            "parameterCount": 6,
            "snippet": "function getImportersForExport(\r\n    sourceFiles: readonly SourceFile[],\r\n    sourceFilesSet: ReadonlySet<string>,\r\n    allDirectImports: Map<string, ImporterOrCallExpression[]>,\r\n    { exportingModuleSymbol, exportKind }: ExportInfo,\r\n    checker: TypeChecker,\r\n    cancellationToken: CancellationToken | undefined,\r\n): { directImports: Importer[]; indirectUsers: readonly SourceFile[]; } {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 168 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSearchesFromDirectImports",
            "complexity": 39,
            "lineCount": 127,
            "parameterCount": 5,
            "snippet": "function getSearchesFromDirectImports(directImports: Importer[], exportSymbol: Symbol, exportKind: ExportKind, checker: TypeChecker, isForRename: boolean): Pick<ImportsResult, \"importSearches\" | \"singleReferences\"> {\r\n    const importSearches: [ModuleExportName, Symbol][] = [];\r\n    const singleReferences: (Identifier | StringLiteral)[] = [];\r\n    function addSearch(location: ModuleExportName, symbol: Symbol): void {\r\n        importSearches.push([location, symbol]);\r\n    }\r\n    if (directImports) {\r\n        for (const decl of directImports) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getImportOrExportSymbol",
            "complexity": 34,
            "lineCount": 118,
            "parameterCount": 4,
            "snippet": "export function getImportOrExportSymbol(node: Node, symbol: Symbol, checker: TypeChecker, comingFromExport: boolean): ImportedSymbol | ExportedSymbol | undefined {\r\n    return comingFromExport ? getExport() : getExport() || getImport();\r\n    function getExport(): ExportedSymbol | ImportedSymbol | undefined {\r\n        const { parent } = node;\r\n        const grandparent = parent.parent;\r\n        if (symbol.exportSymbol) {\r\n            if (parent.kind === SyntaxKind.PropertyAccessExpression) {\r\n                return symbol.declarations?.some(d => d === parent) && isBinaryExpression(grandparent)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "handleDirectImports",
            "complexity": 28,
            "lineCount": 76,
            "parameterCount": 1,
            "snippet": "function handleDirectImports(exportingModuleSymbol: Symbol): void {\r\n        const theseDirectImports = getDirectImports(exportingModuleSymbol);\r\n        if (theseDirectImports) {\r\n            for (const direct of theseDirectImports) {\r\n                if (!markSeenDirectImport(direct)) {\r\n                    continue;\r\n                }\r\n                if (cancellationToken) cancellationToken.throwIfCancellationRequested();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "handleImport",
            "complexity": 23,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "function handleImport(decl: Importer): void {\r\n        if (decl.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n            if (isExternalModuleImportEquals(decl)) {\r\n                handleNamespaceImportLike(decl.name);\r\n            }\r\n            return;\r\n        }\r\n        if (decl.kind === SyntaxKind.Identifier) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/inlayHints.ts",
        "criticalFunctions": [
          {
            "name": "provideInlayHints",
            "complexity": 205,
            "lineCount": 807,
            "parameterCount": 1,
            "snippet": "export function provideInlayHints(context: InlayHintsContext): InlayHint[] {\r\n    const { file, program, span, cancellationToken, preferences } = context;\r\n    const sourceFileText = file.text;\r\n    const compilerOptions = program.getCompilerOptions();\r\n    const quotePreference = getQuotePreference(file, preferences);\r\n    const checker = program.getTypeChecker();\r\n    const result: InlayHint[] = [];\r\n    visitor(file);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 205 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 807 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getInlayHintDisplayParts",
            "complexity": 92,
            "lineCount": 411,
            "parameterCount": 1,
            "snippet": "function getInlayHintDisplayParts(node: Node) {\r\n        const parts: InlayHintDisplayPart[] = [];\r\n        visitForDisplayParts(node);\r\n        return parts;\r\n        function visitForDisplayParts(node: Node) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 92 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 411 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitForDisplayParts",
            "complexity": 82,
            "lineCount": 358,
            "parameterCount": 1,
            "snippet": "function visitForDisplayParts(node: Node) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n            const tokenString = tokenToString(node.kind);\r\n            if (tokenString) {\r\n                parts.push({ text: tokenString });\r\n                return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 82 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 358 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 28,
            "lineCount": 47,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): true | undefined {\r\n        if (!node || node.getFullWidth() === 0) {\r\n            return;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitCallOrNewExpression",
            "complexity": 19,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function visitCallOrNewExpression(expr: CallExpression | NewExpression) {\r\n        const args = expr.arguments;\r\n        if (!args || !args.length) {\r\n            return;\r\n        }\r\n        const signature = checker.getResolvedSignature(expr);\r\n        if (signature === undefined) return;\r\n        let signatureParamPos = 0;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/jsDoc.ts",
        "criticalFunctions": [
          {
            "name": "getCommentOwnerInfoWorker",
            "complexity": 31,
            "lineCount": 66,
            "parameterCount": 2,
            "snippet": "function getCommentOwnerInfoWorker(commentOwner: Node, options: DocCommentTemplateOptions | undefined): CommentOwnerInfo | undefined | \"quit\" {\r\n    switch (commentOwner.kind) {\r\n        case SyntaxKind.FunctionDeclaration:\r\n        case SyntaxKind.FunctionExpression:\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.Constructor:\r\n        case SyntaxKind.MethodSignature:\r\n        case SyntaxKind.ArrowFunction:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCommentDisplayParts",
            "complexity": 24,
            "lineCount": 68,
            "parameterCount": 2,
            "snippet": "function getCommentDisplayParts(tag: JSDocTag, checker?: TypeChecker): SymbolDisplayPart[] | undefined {\r\n    const { comment, kind } = tag;\r\n    const namePart = getTagNameDisplayPart(kind);\r\n    switch (kind) {\r\n        case SyntaxKind.JSDocThrowsTag:\r\n            const typeExpression = (tag as JSDocThrowsTag).typeExpression;\r\n            return typeExpression ? withNode(typeExpression) :\r\n                comment === undefined ? undefined : getDisplayPartsFromComment(comment, checker);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getJsDocCommentsFromDeclarations",
            "complexity": 20,
            "lineCount": 36,
            "parameterCount": 2,
            "snippet": "export function getJsDocCommentsFromDeclarations(declarations: readonly Declaration[], checker?: TypeChecker): SymbolDisplayPart[] {\r\n    const parts: SymbolDisplayPart[][] = [];\r\n    forEachUnique(declarations, declaration => {\r\n        for (const jsdoc of getCommentHavingNodes(declaration)) {\r\n            const inheritDoc = isJSDoc(jsdoc) && jsdoc.tags && find(jsdoc.tags, t => t.kind === SyntaxKind.JSDocTag && (t.tagName.escapedText === \"inheritDoc\" || t.tagName.escapedText === \"inheritdoc\"));\r\n            if (\r\n                jsdoc.comment === undefined && !inheritDoc\r\n                || isJSDoc(jsdoc)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 20,
            "lineCount": 26,
            "parameterCount": 1,
            "snippet": "declaration => {\r\n        for (const jsdoc of getCommentHavingNodes(declaration)) {\r\n            const inheritDoc = isJSDoc(jsdoc) && jsdoc.tags && find(jsdoc.tags, t => t.kind === SyntaxKind.JSDocTag && (t.tagName.escapedText === \"inheritDoc\" || t.tagName.escapedText === \"inheritdoc\"));\r\n            if (\r\n                jsdoc.comment === undefined && !inheritDoc\r\n                || isJSDoc(jsdoc)\r\n                    && declaration.kind !== SyntaxKind.JSDocTypedefTag && declaration.kind !== SyntaxKind.JSDocCallbackTag\r\n                    && jsdoc.tags\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDocCommentTemplateAtPosition",
            "complexity": 19,
            "lineCount": 56,
            "parameterCount": 4,
            "snippet": "export function getDocCommentTemplateAtPosition(newLine: string, sourceFile: SourceFile, position: number, options?: DocCommentTemplateOptions): TextInsertion | undefined {\r\n    const tokenAtPos = getTokenAtPosition(sourceFile, position);\r\n    const existingDocComment = findAncestor(tokenAtPos, isJSDoc);\r\n    if (existingDocComment && (existingDocComment.comment !== undefined || length(existingDocComment.tags))) {\r\n        return undefined;\r\n    }\r\n    const tokenStart = tokenAtPos.getStart(sourceFile);\r\n    if (!existingDocComment && tokenStart < position) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/mapCode.ts",
        "criticalFunctions": [
          {
            "name": "matchNode",
            "complexity": 19,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function matchNode(a: Node, b: Node): boolean {\r\n    if (a.kind !== b.kind) {\r\n        return false;\r\n    }\r\n    if (a.kind === SyntaxKind.Constructor) {\r\n        return a.kind === b.kind;\r\n    }\r\n    if (isNamedDeclaration(a) && isNamedDeclaration(b)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "placeStatements",
            "complexity": 8,
            "lineCount": 57,
            "parameterCount": 4,
            "snippet": "function placeStatements(\r\n    originalFile: SourceFile,\r\n    changeTracker: ChangeTracker,\r\n    changes: NodeArray<Statement>,\r\n    focusLocations?: TextSpan[],\r\n) {\r\n    if (!focusLocations?.length) {\r\n        changeTracker.insertNodesAtEndOfFile(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "parse",
            "complexity": 5,
            "lineCount": 52,
            "parameterCount": 2,
            "snippet": "function parse(sourceFile: SourceFile, content: string): NodeArray<Node> {\r\n    const nodeKinds = [\r\n        {\r\n            parse: () =>\r\n                createSourceFile(\r\n                    \"__mapcode_content_nodes.ts\",\r\n                    content,\r\n                    sourceFile.languageVersion,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/navigateTo.ts",
        "criticalFunctions": [
          {
            "name": "getNavigateToItems",
            "complexity": 8,
            "lineCount": 25,
            "parameterCount": 7,
            "snippet": "export function getNavigateToItems(sourceFiles: readonly SourceFile[], checker: TypeChecker, cancellationToken: CancellationToken, searchValue: string, maxResultCount: number | undefined, excludeDtsFiles: boolean, excludeLibFiles?: boolean): NavigateToItem[] {\r\n    const patternMatcher = createPatternMatcher(searchValue);\r\n    if (!patternMatcher) return emptyArray;\r\n    const rawItems: RawNavigateToItem[] = [];\r\n    const singleCurrentFile = sourceFiles.length === 1 ? sourceFiles[0] : undefined;\r\n    for (const sourceFile of sourceFiles) {\r\n        cancellationToken.throwIfCancellationRequested();\r\n        if (excludeDtsFiles && sourceFile.isDeclarationFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getItemsFromNamedDeclaration",
            "complexity": 6,
            "lineCount": 32,
            "parameterCount": 8,
            "snippet": "function getItemsFromNamedDeclaration(\r\n    patternMatcher: PatternMatcher,\r\n    name: string,\r\n    declarations: readonly Declaration[],\r\n    checker: TypeChecker,\r\n    fileName: string,\r\n    excludeLibFiles: boolean,\r\n    singleCurrentFile: SourceFile | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/navigationBar.ts",
        "criticalFunctions": [
          {
            "name": "addChildrenRecursively",
            "complexity": 81,
            "lineCount": 254,
            "parameterCount": 1,
            "snippet": "function addChildrenRecursively(node: Node | undefined): void {\r\n    curCancellationToken.throwIfCancellationRequested();\r\n    if (!node || isToken(node)) {\r\n        return;\r\n    }\r\n    switch (node.kind) {\r\n        case SyntaxKind.Constructor:\r\n            const ctr = node as ConstructorDeclaration;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 81 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 254 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryMergeEs5Class",
            "complexity": 48,
            "lineCount": 97,
            "parameterCount": 4,
            "snippet": "function tryMergeEs5Class(a: NavigationBarNode, b: NavigationBarNode, bIndex: number, parent: NavigationBarNode): boolean | undefined {\r\n    function isPossibleConstructor(node: Node) {\r\n        return isFunctionExpression(node) || isFunctionDeclaration(node) || isVariableDeclaration(node);\r\n    }\r\n    const bAssignmentDeclarationKind = isBinaryExpression(b.node) || isCallExpression(b.node) ?\r\n        getAssignmentDeclarationKind(b.node) :\r\n        AssignmentDeclarationKind.None;\r\n    const aAssignmentDeclarationKind = isBinaryExpression(a.node) || isCallExpression(a.node) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "primaryNavBarMenuItems",
            "complexity": 22,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function primaryNavBarMenuItems(root: NavigationBarNode): NavigationBarNode[] {\r\n    const primaryNavBarMenuItems: NavigationBarNode[] = [];\r\n    function recur(item: NavigationBarNode) {\r\n        if (shouldAppearInPrimaryNavBarMenu(item)) {\r\n            primaryNavBarMenuItems.push(item);\r\n            if (item.children) {\r\n                for (const child of item.children) {\r\n                    recur(child);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getItemName",
            "complexity": 21,
            "lineCount": 47,
            "parameterCount": 2,
            "snippet": "function getItemName(node: Node, name: Node | undefined): string {\r\n    if (node.kind === SyntaxKind.ModuleDeclaration) {\r\n        return cleanText(getModuleName(node as ModuleDeclaration));\r\n    }\r\n    if (name) {\r\n        const text = isIdentifier(name) ? name.text\r\n            : isElementAccessExpression(name) ? `[${nodeText(name.argumentExpression)}]`\r\n            : nodeText(name);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "shouldAppearInPrimaryNavBarMenu",
            "complexity": 19,
            "lineCount": 43,
            "parameterCount": 1,
            "snippet": "function shouldAppearInPrimaryNavBarMenu(item: NavigationBarNode): boolean {\r\n        if (item.children) {\r\n            return true;\r\n        }\r\n        switch (navigationBarNodeKind(item)) {\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.EnumDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/organizeImports.ts",
        "criticalFunctions": [
          {
            "name": "coalesceImportsWorker",
            "complexity": 26,
            "lineCount": 115,
            "parameterCount": 4,
            "snippet": "function coalesceImportsWorker(importGroup: readonly ImportDeclaration[], comparer: Comparer<string>, specifierComparer: Comparer<ImportSpecifier>, sourceFile?: SourceFile): readonly ImportDeclaration[] {\r\n    if (importGroup.length === 0) {\r\n        return importGroup;\r\n    }\r\n    const importGroupsByAttributes = groupBy(importGroup, decl => {\r\n        if (decl.attributes) {\r\n            let attrs = decl.attributes.token + \" \";\r\n            for (const x of toSorted(decl.attributes.elements, (x, y) => compareStringsCaseSensitive(x.name.text, y.name.text))) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "organizeImports",
            "complexity": 22,
            "lineCount": 137,
            "parameterCount": 6,
            "snippet": "export function organizeImports(\r\n    sourceFile: SourceFile,\r\n    formatContext: formatting.FormatContext,\r\n    host: LanguageServiceHost,\r\n    program: Program,\r\n    preferences: UserPreferences,\r\n    mode: OrganizeImportsMode,\r\n): FileTextChanges[] {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "removeUnusedImports",
            "complexity": 19,
            "lineCount": 74,
            "parameterCount": 3,
            "snippet": "function removeUnusedImports(oldImports: readonly ImportDeclaration[], sourceFile: SourceFile, program: Program) {\r\n    const typeChecker = program.getTypeChecker();\r\n    const compilerOptions = program.getCompilerOptions();\r\n    const jsxNamespace = typeChecker.getJsxNamespace(sourceFile);\r\n    const jsxFragmentFactory = typeChecker.getJsxFragmentFactory(sourceFile);\r\n    const jsxElementsPresent = !!(sourceFile.transformFlags & TransformFlags.ContainsJsx);\r\n    const usedImports: ImportDeclaration[] = [];\r\n    for (const importDecl of oldImports) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "detectNamedImportOrganizationBySort",
            "complexity": 17,
            "lineCount": 61,
            "parameterCount": 3,
            "snippet": "function detectNamedImportOrganizationBySort(originalGroups: readonly (ImportDeclaration | JSDocImportTag)[], comparersToTest: Comparer<string>[], typesToTest: OrganizeImportsTypeOrder[]): { namedImportComparer: Comparer<string>; typeOrder: OrganizeImportsTypeOrder | undefined; isSorted: boolean; } | undefined {\r\n    let bothNamedImports = false;\r\n    const importDeclsWithNamed = originalGroups.filter(i => {\r\n        const namedImports = tryCast(i.importClause?.namedBindings, isNamedImports)?.elements;\r\n        if (!namedImports?.length) return false;\r\n        if (!bothNamedImports && namedImports.some(n => n.isTypeOnly) && namedImports.some(n => !n.isTypeOnly)) {\r\n            bothNamedImports = true;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "coalesceExportsWorker",
            "complexity": 13,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function coalesceExportsWorker(exportGroup: readonly ExportDeclaration[], specifierComparer: Comparer<ExportSpecifier>) {\r\n    if (exportGroup.length === 0) {\r\n        return exportGroup;\r\n    }\r\n    const { exportWithoutClause, namedExports, typeOnlyExports } = getCategorizedExports(exportGroup);\r\n    const coalescedExports: ExportDeclaration[] = [];\r\n    if (exportWithoutClause) {\r\n        coalescedExports.push(exportWithoutClause);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/outliningElementsCollector.ts",
        "criticalFunctions": [
          {
            "name": "getOutliningSpanForNode",
            "complexity": 61,
            "lineCount": 163,
            "parameterCount": 2,
            "snippet": "function getOutliningSpanForNode(n: Node, sourceFile: SourceFile): OutliningSpan | undefined {\r\n    switch (n.kind) {\r\n        case SyntaxKind.Block:\r\n            if (isFunctionLike(n.parent)) {\r\n                return functionSpan(n.parent, n as Block, sourceFile);\r\n            }\r\n            switch (n.parent.kind) {\r\n                case SyntaxKind.DoStatement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 61 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 163 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addNodeOutliningSpans",
            "complexity": 26,
            "lineCount": 68,
            "parameterCount": 3,
            "snippet": "function addNodeOutliningSpans(sourceFile: SourceFile, cancellationToken: CancellationToken, out: OutliningSpan[]): void {\r\n    let depthRemaining = 40;\r\n    let current = 0;\r\n    const statements = [...sourceFile.statements, sourceFile.endOfFileToken];\r\n    const n = statements.length;\r\n    while (current < n) {\r\n        while (current < n && !isAnyImportSyntax(statements[current])) {\r\n            visitNode(statements[current]);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitNode",
            "complexity": 19,
            "lineCount": 44,
            "parameterCount": 1,
            "snippet": "function visitNode(n: Node) {\r\n        if (depthRemaining === 0) return;\r\n        cancellationToken.throwIfCancellationRequested();\r\n        if (isDeclaration(n) || isVariableStatement(n) || isReturnStatement(n) || isCallOrNewExpression(n) || n.kind === SyntaxKind.EndOfFileToken) {\r\n            addOutliningForLeadingCommentsForNode(n, sourceFile, cancellationToken, out);\r\n        }\r\n        if (isFunctionLike(n) && isBinaryExpression(n.parent) && isPropertyAccessExpression(n.parent.left)) {\r\n            addOutliningForLeadingCommentsForNode(n.parent.left, sourceFile, cancellationToken, out);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/pasteEdits.ts",
        "criticalFunctions": [
          {
            "name": "pasteEdits",
            "complexity": 16,
            "lineCount": 119,
            "parameterCount": 9,
            "snippet": "function pasteEdits(\r\n    targetFile: SourceFile,\r\n    pastedText: string[],\r\n    pasteLocations: TextRange[],\r\n    copiedFrom: CopiedFromInfo | undefined,\r\n    host: LanguageServiceHost,\r\n    preferences: UserPreferences,\r\n    formatContext: formatting.FormatContext,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 119 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 11,
            "lineCount": 80,
            "parameterCount": 3,
            "snippet": "(updatedProgram: Program, originalProgram: Program | undefined, updatedFile: SourceFile) => {\r\n        importAdder = codefix.createImportAdder(updatedFile, updatedProgram, preferences, host);\r\n        if (copiedFrom?.range) {\r\n            Debug.assert(copiedFrom.range.length === pastedText.length);\r\n            copiedFrom.range.forEach(copy => {\r\n                const statementsInSourceFile = copiedFrom.file.statements;\r\n                const startNodeIndex = findIndex(statementsInSourceFile, s => s.end > copy.pos);\r\n                if (startNodeIndex === -1) return undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "pasteEditsProvider",
            "complexity": 1,
            "lineCount": 13,
            "parameterCount": 8,
            "snippet": "export function pasteEditsProvider(\r\n    targetFile: SourceFile,\r\n    pastedText: string[],\r\n    pasteLocations: TextRange[],\r\n    copiedFrom: { file: SourceFile; range: TextRange[]; } | undefined,\r\n    host: LanguageServiceHost,\r\n    preferences: UserPreferences,\r\n    formatContext: formatting.FormatContext,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/patternMatcher.ts",
        "criticalFunctions": [
          {
            "name": "charIsPunctuation",
            "complexity": 24,
            "lineCount": 30,
            "parameterCount": 1,
            "snippet": "function charIsPunctuation(ch: number) {\r\n    switch (ch) {\r\n        case CharacterCodes.exclamation:\r\n        case CharacterCodes.doubleQuote:\r\n        case CharacterCodes.hash:\r\n        case CharacterCodes.percent:\r\n        case CharacterCodes.ampersand:\r\n        case CharacterCodes.singleQuote:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "matchTextChunk",
            "complexity": 14,
            "lineCount": 51,
            "parameterCount": 3,
            "snippet": "function matchTextChunk(candidate: string, chunk: TextChunk, stringToWordSpans: Map<string, TextSpan[]>): PatternMatch | undefined {\r\n    const index = indexOfIgnoringCase(candidate, chunk.textLowerCase);\r\n    if (index === 0) {\r\n        return createPatternMatch(chunk.text.length === candidate.length ? PatternMatchKind.exact : PatternMatchKind.prefix, /*isCaseSensitive:*/ startsWith(candidate, chunk.text));\r\n    }\r\n    if (chunk.isLowerCase) {\r\n        if (index === -1) return undefined;\r\n        const wordSpans = getWordSpans(candidate, stringToWordSpans);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryCamelCaseMatch",
            "complexity": 13,
            "lineCount": 73,
            "parameterCount": 4,
            "snippet": "function tryCamelCaseMatch(candidate: string, candidateParts: TextSpan[], chunk: TextChunk, ignoreCase: boolean): boolean {\r\n    const chunkCharacterSpans = chunk.characterSpans;\r\n    let currentCandidate = 0;\r\n    let currentChunkSpan = 0;\r\n    let firstMatch: number | undefined;\r\n    let contiguous: boolean | undefined;\r\n    while (true) {\r\n        if (currentChunkSpan === chunkCharacterSpans.length) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "matchSegment",
            "complexity": 5,
            "lineCount": 56,
            "parameterCount": 3,
            "snippet": "function matchSegment(candidate: string, segment: Segment, stringToWordSpans: Map<string, TextSpan[]>): PatternMatch | undefined {\r\n    if (every(segment.totalTextChunk.text, ch => ch !== CharacterCodes.space && ch !== CharacterCodes.asterisk)) {\r\n        const match = matchTextChunk(candidate, segment.totalTextChunk, stringToWordSpans);\r\n        if (match) return match;\r\n    }\r\n    const subWordTextChunks = segment.subWordTextChunks;\r\n    let bestMatch: PatternMatch | undefined;\r\n    for (const subWordTextChunk of subWordTextChunks) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/preProcess.ts",
        "criticalFunctions": [
          {
            "name": "preProcessFile",
            "complexity": 104,
            "lineCount": 437,
            "parameterCount": 3,
            "snippet": "export function preProcessFile(sourceText: string, readImportFiles = true, detectJavaScriptImports = false): PreProcessedFileInfo {\r\n    const pragmaContext: PragmaContext = {\r\n        languageVersion: ScriptTarget.ES5, // controls whether the token scanner considers unicode identifiers or not - shouldn't matter, since we're only using it for trivia\r\n        pragmas: undefined,\r\n        checkJsDirective: undefined,\r\n        referencedFiles: [],\r\n        typeReferenceDirectives: [],\r\n        libReferenceDirectives: [],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 104 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 437 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryConsumeImport",
            "complexity": 32,
            "lineCount": 105,
            "parameterCount": 0,
            "snippet": "function tryConsumeImport(): boolean {\r\n        if (lastToken === SyntaxKind.DotToken) {\r\n            return false;\r\n        }\r\n        let token = scanner.getToken();\r\n        if (token === SyntaxKind.ImportKeyword) {\r\n            token = nextToken();\r\n            if (token === SyntaxKind.OpenParenToken) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryConsumeExport",
            "complexity": 22,
            "lineCount": 72,
            "parameterCount": 0,
            "snippet": "function tryConsumeExport(): boolean {\r\n        let token = scanner.getToken();\r\n        if (token === SyntaxKind.ExportKeyword) {\r\n            markAsExternalModuleIfTopLevel();\r\n            token = nextToken();\r\n            if (token === SyntaxKind.TypeKeyword) {\r\n                const skipTypeKeyword = scanner.lookAhead(() => {\r\n                    const token = scanner.scan();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processImports",
            "complexity": 20,
            "lineCount": 81,
            "parameterCount": 0,
            "snippet": "function processImports(): void {\r\n        scanner.setText(sourceText);\r\n        nextToken();\r\n        while (true) {\r\n            if (scanner.getToken() === SyntaxKind.EndOfFileToken) {\r\n                break;\r\n            }\r\n            if (scanner.getToken() === SyntaxKind.TemplateHead) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/rename.ts",
        "criticalFunctions": [
          {
            "name": "getRenameInfoForNode",
            "complexity": 24,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "function getRenameInfoForNode(\r\n    node: Node,\r\n    typeChecker: TypeChecker,\r\n    sourceFile: SourceFile,\r\n    program: Program,\r\n    preferences: UserPreferences,\r\n): RenameInfo | undefined {\r\n    const symbol = typeChecker.getSymbolAtLocation(node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/services.ts",
        "criticalFunctions": [
          {
            "name": "createLanguageService",
            "complexity": 288,
            "lineCount": 1838,
            "parameterCount": 3,
            "snippet": "export function createLanguageService(\r\n    host: LanguageServiceHost,\r\n    documentRegistry: DocumentRegistry = createDocumentRegistry(host.useCaseSensitiveFileNames && host.useCaseSensitiveFileNames(), host.getCurrentDirectory(), host.jsDocParsingMode),\r\n    syntaxOnlyOrLanguageServiceMode?: boolean | LanguageServiceMode,\r\n): LanguageService {\r\n    let languageServiceMode: LanguageServiceMode;\r\n    if (syntaxOnlyOrLanguageServiceMode === undefined) {\r\n        languageServiceMode = LanguageServiceMode.Semantic;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 288 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1838 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "computeNamedDeclarations",
            "complexity": 50,
            "lineCount": 147,
            "parameterCount": 0,
            "snippet": "private computeNamedDeclarations(): Map<string, Declaration[]> {\r\n        const result = createMultiMap<string, Declaration>();\r\n        this.forEachChild(visit);\r\n        return result;\r\n        function addDeclaration(declaration: Declaration) {\r\n            const name = getDeclarationName(declaration);\r\n            if (name) {\r\n                result.add(name, declaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 147 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visit",
            "complexity": 44,
            "lineCount": 118,
            "parameterCount": 1,
            "snippet": "function visit(node: Node): void {\r\n            switch (node.kind) {\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    const functionDeclaration = node as FunctionLikeDeclaration;\r\n                    const declarationName = getDeclarationName(functionDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 44 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "toggleMultilineComment",
            "complexity": 27,
            "lineCount": 120,
            "parameterCount": 4,
            "snippet": "function toggleMultilineComment(fileName: string, textRange: TextRange, insertComment?: boolean, isInsideJsx?: boolean): TextChange[] {\r\n        const sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\r\n        const textChanges: TextChange[] = [];\r\n        const { text } = sourceFile;\r\n        let hasComment = false;\r\n        let isCommenting = insertComment || false;\r\n        const positions = [] as number[] as SortedArray<number>;\r\n        let { pos } = textRange;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 120 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "synchronizeHostDataWorker",
            "complexity": 26,
            "lineCount": 261,
            "parameterCount": 0,
            "snippet": "function synchronizeHostDataWorker(): void {\r\n        Debug.assert(languageServiceMode !== LanguageServiceMode.Syntactic);\r\n        if (host.getProjectVersion) {\r\n            const hostProjectVersion = host.getProjectVersion();\r\n            if (hostProjectVersion) {\r\n                if (lastProjectVersion === hostProjectVersion && !host.hasChangedAutomaticTypeDirectiveNames?.()) {\r\n                    return;\r\n                }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 261 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/signatureHelp.ts",
        "criticalFunctions": [
          {
            "name": "getImmediatelyContainingArgumentInfo",
            "complexity": 16,
            "lineCount": 83,
            "parameterCount": 4,
            "snippet": "function getImmediatelyContainingArgumentInfo(node: Node, position: number, sourceFile: SourceFile, checker: TypeChecker): ArgumentListInfo | undefined {\r\n    const { parent } = node;\r\n    if (isCallOrNewExpression(parent)) {\r\n        const invocation = parent;\r\n        const info = getArgumentOrParameterListInfo(node, position, sourceFile, checker);\r\n        if (!info) return undefined;\r\n        const { list, argumentIndex, argumentCount, argumentsSpan } = info;\r\n        const isTypeParameterList = !!parent.typeArguments && parent.typeArguments.pos === list.pos;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/smartSelection.ts",
        "criticalFunctions": [
          {
            "name": "getSmartSelectionRange",
            "complexity": 51,
            "lineCount": 129,
            "parameterCount": 2,
            "snippet": "export function getSmartSelectionRange(pos: number, sourceFile: SourceFile): SelectionRange {\r\n    let selectionRange: SelectionRange = {\r\n        textSpan: createTextSpanFromBounds(sourceFile.getFullStart(), sourceFile.getEnd()),\r\n    };\r\n    let parentNode: Node = sourceFile;\r\n    outer:\r\n    while (true) {\r\n        const children = getSelectionChildren(parentNode);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 51 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 129 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSelectionChildren",
            "complexity": 17,
            "lineCount": 61,
            "parameterCount": 1,
            "snippet": "function getSelectionChildren(node: Node): readonly Node[] {\r\n    if (isSourceFile(node)) {\r\n        return groupChildren(node.getChildAt(0).getChildren(), isImport);\r\n    }\r\n    if (isMappedTypeNode(node)) {\r\n        const [openBraceToken, ...children] = node.getChildren();\r\n        const closeBraceToken = Debug.checkDefined(children.pop());\r\n        Debug.assertEqual(openBraceToken.kind, SyntaxKind.OpenBraceToken);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/sourcemaps.ts",
        "criticalFunctions": [
          {
            "name": "getSourceMapper",
            "complexity": 32,
            "lineCount": 117,
            "parameterCount": 1,
            "snippet": "export function getSourceMapper(host: SourceMapperHost): SourceMapper {\r\n    const getCanonicalFileName = createGetCanonicalFileName(host.useCaseSensitiveFileNames());\r\n    const currentDirectory = host.getCurrentDirectory();\r\n    const sourceFileLike = new Map<string, SourceFileLike | false>();\r\n    const documentPositionMappers = new Map<string, DocumentPositionMapper>();\r\n    return {\r\n        tryGetSourcePosition,\r\n        tryGetGeneratedPosition,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 117 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/stringCompletions.ts",
        "criticalFunctions": [
          {
            "name": "getStringLiteralCompletionEntries",
            "complexity": 46,
            "lineCount": 154,
            "parameterCount": 6,
            "snippet": "function getStringLiteralCompletionEntries(sourceFile: SourceFile, node: StringLiteralLike, position: number, program: Program, host: LanguageServiceHost, preferences: UserPreferences): StringLiteralCompletion | undefined {\r\n    const typeChecker = program.getTypeChecker();\r\n    const parent = walkUpParentheses(node.parent);\r\n    switch (parent.kind) {\r\n        case SyntaxKind.LiteralType: {\r\n            const grandParent = walkUpParentheses(parent.parent);\r\n            if (grandParent.kind === SyntaxKind.ImportType) {\r\n                return { kind: StringLiteralCompletionKind.Paths, paths: getStringLiteralCompletionsFromModuleNames(sourceFile, node, program, host, preferences) };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 154 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getModulesForPathsPattern",
            "complexity": 30,
            "lineCount": 112,
            "parameterCount": 9,
            "snippet": "function getModulesForPathsPattern(\r\n    fragment: string,\r\n    packageDirectory: string,\r\n    pattern: string,\r\n    extensionOptions: ExtensionOptions,\r\n    isExports: boolean,\r\n    isImports: boolean,\r\n    program: Program,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCompletionEntriesForNonRelativeModules",
            "complexity": 28,
            "lineCount": 132,
            "parameterCount": 7,
            "snippet": "function getCompletionEntriesForNonRelativeModules(\r\n    fragment: string,\r\n    scriptPath: string,\r\n    mode: ResolutionMode,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n    moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost,\r\n    extensionOptions: ExtensionOptions,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 132 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCompletionEntriesForDirectoryFragment",
            "complexity": 19,
            "lineCount": 87,
            "parameterCount": 9,
            "snippet": "function getCompletionEntriesForDirectoryFragment(\r\n    fragment: string,\r\n    scriptDirectory: string,\r\n    extensionOptions: ExtensionOptions,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n    moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost,\r\n    moduleSpecifierIsRelative: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addCompletionEntriesFromPathsOrExportsOrImports",
            "complexity": 15,
            "lineCount": 55,
            "parameterCount": 12,
            "snippet": "function addCompletionEntriesFromPathsOrExportsOrImports(\r\n    result: NameAndKindSet,\r\n    isExports: boolean,\r\n    isImports: boolean,\r\n    fragment: string,\r\n    baseDirectory: string,\r\n    extensionOptions: ExtensionOptions,\r\n    program: Program,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "12 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/suggestionDiagnostics.ts",
        "criticalFunctions": [
          {
            "name": "computeSuggestionDiagnostics",
            "complexity": 31,
            "lineCount": 74,
            "parameterCount": 3,
            "snippet": "export function computeSuggestionDiagnostics(sourceFile: SourceFile, program: Program, cancellationToken: CancellationToken): DiagnosticWithLocation[] {\r\n    program.getSemanticDiagnostics(sourceFile, cancellationToken);\r\n    const diags: DiagnosticWithLocation[] = [];\r\n    const checker = program.getTypeChecker();\r\n    const isCommonJSFile = program.getImpliedNodeFormatForEmit(sourceFile) === ModuleKind.CommonJS || fileExtensionIsOneOf(sourceFile.fileName, [Extension.Cts, Extension.Cjs]);\r\n    if (\r\n        !isCommonJSFile &&\r\n        sourceFile.commonJsModuleIndicator &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/symbolDisplay.ts",
        "criticalFunctions": [
          {
            "name": "getSymbolDisplayPartsDocumentationAndSymbolKindWorker",
            "complexity": 207,
            "lineCount": 614,
            "parameterCount": 8,
            "snippet": "function getSymbolDisplayPartsDocumentationAndSymbolKindWorker(typeChecker: TypeChecker, symbol: Symbol, sourceFile: SourceFile, enclosingDeclaration: Node | undefined, location: Node, type: Type | undefined, semanticMeaning: SemanticMeaning, alias?: Symbol): SymbolDisplayPartsDocumentationAndSymbolKind {\r\n    const displayParts: SymbolDisplayPart[] = [];\r\n    let documentation: SymbolDisplayPart[] = [];\r\n    let tags: JSDocTagInfo[] = [];\r\n    const symbolFlags = getCombinedLocalAndExportSymbolFlags(symbol);\r\n    let symbolKind = semanticMeaning & SemanticMeaning.Value ? getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(typeChecker, symbol, location) : ScriptElementKind.unknown;\r\n    let hasAddedSymbolInfo = false;\r\n    const isThisExpression = location.kind === SyntaxKind.ThisKeyword && isInExpressionContext(location) || isThisInTypeQuery(location);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 207 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 614 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar",
            "complexity": 32,
            "lineCount": 75,
            "parameterCount": 3,
            "snippet": "function getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(typeChecker: TypeChecker, symbol: Symbol, location: Node): ScriptElementKind {\r\n    const roots = typeChecker.getRootSymbols(symbol);\r\n    if (\r\n        roots.length === 1\r\n        && first(roots).flags & SymbolFlags.Method\r\n        && typeChecker.getTypeOfSymbolAtLocation(symbol, location).getNonNullableType().getCallSignatures().length !== 0\r\n    ) {\r\n        return ScriptElementKind.memberFunctionElement;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSymbolDisplayPartsDocumentationAndSymbolKind",
            "complexity": 1,
            "lineCount": 11,
            "parameterCount": 7,
            "snippet": "export function getSymbolDisplayPartsDocumentationAndSymbolKind(\r\n    typeChecker: TypeChecker,\r\n    symbol: Symbol,\r\n    sourceFile: SourceFile,\r\n    enclosingDeclaration: Node | undefined,\r\n    location: Node,\r\n    semanticMeaning: SemanticMeaning = getMeaningFromLocation(location),\r\n    alias?: Symbol,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/textChanges.ts",
        "criticalFunctions": [
          {
            "name": "deleteDeclaration",
            "complexity": 29,
            "lineCount": 91,
            "parameterCount": 4,
            "snippet": "export function deleteDeclaration(changes: ChangeTracker, deletedNodesInLists: Set<Node>, sourceFile: SourceFile, node: Node): void {\r\n        switch (node.kind) {\r\n            case SyntaxKind.Parameter: {\r\n                const oldFunction = node.parent;\r\n                if (\r\n                    isArrowFunction(oldFunction) &&\r\n                    oldFunction.parameters.length === 1 &&\r\n                    !findChildOfKind(oldFunction, SyntaxKind.OpenParenToken, sourceFile)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getInsertionPositionAtSourceFileTop",
            "complexity": 22,
            "lineCount": 81,
            "parameterCount": 1,
            "snippet": "function getInsertionPositionAtSourceFileTop(sourceFile: SourceFile): number {\r\n    let lastPrologue: PrologueDirective | undefined;\r\n    for (const node of sourceFile.statements) {\r\n        if (isPrologueDirective(node)) {\r\n            lastPrologue = node;\r\n        }\r\n        else {\r\n            break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getAdjustedStartPosition",
            "complexity": 13,
            "lineCount": 52,
            "parameterCount": 4,
            "snippet": "function getAdjustedStartPosition(sourceFile: SourceFile, node: Node, options: ConfigurableStartEnd, hasTrailingComment = false): number {\r\n    const { leadingTriviaOption } = options;\r\n    if (leadingTriviaOption === LeadingTriviaOption.Exclude) {\r\n        return node.getStart(sourceFile);\r\n    }\r\n    if (leadingTriviaOption === LeadingTriviaOption.StartLine) {\r\n        const startPos = node.getStart(sourceFile);\r\n        const pos = getLineStartPositionForPosition(startPos, sourceFile);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "insertNodeInListAfter",
            "complexity": 13,
            "lineCount": 89,
            "parameterCount": 4,
            "snippet": "public insertNodeInListAfter(sourceFile: SourceFile, after: Node, newNode: Node, containingList: NodeArray<Node> | undefined = formatting.SmartIndenter.getContainingList(after, sourceFile)): void {\r\n        if (!containingList) {\r\n            Debug.fail(\"node is not a list element\");\r\n            return;\r\n        }\r\n        const index = indexOfNode(containingList, after);\r\n        if (index < 0) {\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createWriter",
            "complexity": 10,
            "lineCount": 164,
            "parameterCount": 1,
            "snippet": "export function createWriter(newLine: string): TextChangesWriter {\r\n    let lastNonTriviaPosition = 0;\r\n    const writer = createTextWriter(newLine);\r\n    const onBeforeEmitNode: PrintHandlers[\"onBeforeEmitNode\"] = node => {\r\n        if (node) {\r\n            setPos(node, lastNonTriviaPosition);\r\n        }\r\n    };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/transpile.ts",
        "criticalFunctions": [
          {
            "name": "transpileWorker",
            "complexity": 22,
            "lineCount": 105,
            "parameterCount": 3,
            "snippet": "function transpileWorker(input: string, transpileOptions: TranspileOptions, declaration?: boolean): TranspileOutput {\r\n    barebonesLibSourceFile ??= createSourceFile(barebonesLibName, barebonesLibContent, { languageVersion: ScriptTarget.Latest });\r\n    const diagnostics: Diagnostic[] = [];\r\n    const options: CompilerOptions = transpileOptions.compilerOptions ? fixupCompilerOptions(transpileOptions.compilerOptions, diagnostics) : {};\r\n    const defaultOptions = getDefaultCompilerOptions();\r\n    for (const key in defaultOptions) {\r\n        if (hasProperty(defaultOptions, key) && options[key] === undefined) {\r\n            options[key] = defaultOptions[key];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/types.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/utilities.ts",
        "criticalFunctions": [
          {
            "name": "getAdjustedLocation",
            "complexity": 105,
            "lineCount": 199,
            "parameterCount": 2,
            "snippet": "function getAdjustedLocation(node: Node, forRename: boolean): Node {\r\n    const { parent } = node;\r\n    if (\r\n        isModifier(node) && (forRename || node.kind !== SyntaxKind.DefaultKeyword) ? canHaveModifiers(parent) && contains(parent.modifiers, node) :\r\n            node.kind === SyntaxKind.ClassKeyword ? isClassDeclaration(parent) || isClassExpression(node) :\r\n            node.kind === SyntaxKind.FunctionKeyword ? isFunctionDeclaration(parent) || isFunctionExpression(node) :\r\n            node.kind === SyntaxKind.InterfaceKeyword ? isInterfaceDeclaration(parent) :\r\n            node.kind === SyntaxKind.EnumKeyword ? isEnumDeclaration(parent) :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 105 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 199 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isCompletedNode",
            "complexity": 69,
            "lineCount": 134,
            "parameterCount": 2,
            "snippet": "function isCompletedNode(n: Node | undefined, sourceFile: SourceFile): boolean {\r\n    if (n === undefined || nodeIsMissing(n)) {\r\n        return false;\r\n    }\r\n    switch (n.kind) {\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.InterfaceDeclaration:\r\n        case SyntaxKind.EnumDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 69 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getNodeKind",
            "complexity": 60,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "export function getNodeKind(node: Node): ScriptElementKind {\r\n    switch (node.kind) {\r\n        case SyntaxKind.SourceFile:\r\n            return isExternalModule(node as SourceFile) ? ScriptElementKind.moduleElement : ScriptElementKind.scriptElement;\r\n        case SyntaxKind.ModuleDeclaration:\r\n            return ScriptElementKind.moduleElement;\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.ClassExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 60 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getMeaningFromDeclaration",
            "complexity": 39,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "export function getMeaningFromDeclaration(node: Node): SemanticMeaning {\r\n    switch (node.kind) {\r\n        case SyntaxKind.VariableDeclaration:\r\n            return isInJSFile(node) && getJSDocEnumTag(node) ? SemanticMeaning.All : SemanticMeaning.Value;\r\n        case SyntaxKind.Parameter:\r\n        case SyntaxKind.BindingElement:\r\n        case SyntaxKind.PropertyDeclaration:\r\n        case SyntaxKind.PropertySignature:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getPossibleTypeArgumentsInfo",
            "complexity": 36,
            "lineCount": 101,
            "parameterCount": 2,
            "snippet": "export function getPossibleTypeArgumentsInfo(tokenIn: Node | undefined, sourceFile: SourceFile): PossibleTypeArgumentInfo | undefined {\r\n    if (sourceFile.text.lastIndexOf(\"<\", tokenIn ? tokenIn.pos : sourceFile.text.length) === -1) {\r\n        return undefined;\r\n    }\r\n    let token: Node | undefined = tokenIn;\r\n    let remainingLessThanTokens = 0;\r\n    let nTypeArguments = 0;\r\n    while (token) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 101 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/tsserver/nodeServer.ts",
        "criticalFunctions": [
          {
            "name": "startNodeSession",
            "complexity": 53,
            "lineCount": 279,
            "parameterCount": 3,
            "snippet": "function startNodeSession(options: StartSessionOptions, logger: ts.server.Logger, cancellationToken: ts.server.ServerCancellationToken) {\r\n    const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout,\r\n        terminal: false,\r\n    });\r\n    class NodeTypingsInstallerAdapter extends ts.server.TypingsInstallerAdapter {\r\n        protected override installer!: childProcess.ChildProcess;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 53 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 279 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "initializeNodeSystem",
            "complexity": 50,
            "lineCount": 270,
            "parameterCount": 0,
            "snippet": "export function initializeNodeSystem(): StartInput {\r\n    const sys = Debug.checkDefined(ts.sys) as ts.server.ServerHost;\r\n    class Logger implements Logger {\r\n        private seq = 0;\r\n        private inGroup = false;\r\n        private firstInGroup = true;\r\n        private fd = -1;\r\n        constructor(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 270 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getGlobalTypingsCacheLocation",
            "complexity": 16,
            "lineCount": 24,
            "parameterCount": 0,
            "snippet": "function getGlobalTypingsCacheLocation() {\r\n        switch (process.platform) {\r\n            case \"win32\": {\r\n                const basePath = process.env.LOCALAPPDATA ||\r\n                    process.env.APPDATA ||\r\n                    (os.homedir && os.homedir()) ||\r\n                    process.env.USERPROFILE ||\r\n                    (process.env.HOMEDRIVE && process.env.HOMEPATH && normalizeSlashes(process.env.HOMEDRIVE + process.env.HOMEPATH)) ||\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "createInstallerProcess",
            "complexity": 13,
            "lineCount": 54,
            "parameterCount": 0,
            "snippet": "createInstallerProcess() {\r\n            if (this.logger.hasLevel(ts.server.LogLevel.requestTime)) {\r\n                this.logger.info(\"Binding...\");\r\n            }\r\n            const args: string[] = [ts.server.Arguments.GlobalCacheLocation, this.globalTypingsCacheLocation];\r\n            if (this.telemetryEnabled) {\r\n                args.push(ts.server.Arguments.EnableTelemetry);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/lib/dom.asynciterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/lib/dom.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/lib/dom.iterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/lib/es2017.date.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/lib/es5.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/lib/esnext.float16.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/lib/webworker.asynciterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/lib/webworker.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/lib/webworker.iterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/typingsInstaller/nodeTypingsInstaller.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/typingsInstallerCore/typingsInstaller.ts",
        "criticalFunctions": [
          {
            "name": "processCacheLocation",
            "complexity": 21,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "private processCacheLocation(cacheLocation: string) {\r\n        if (this.log.isEnabled()) {\r\n            this.log.writeLine(`Processing cache location '${cacheLocation}'`);\r\n        }\r\n        if (this.knownCachesSet.has(cacheLocation)) {\r\n            if (this.log.isEnabled()) {\r\n                this.log.writeLine(`Cache location was already processed...`);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "installTypings",
            "complexity": 12,
            "lineCount": 77,
            "parameterCount": 4,
            "snippet": "private installTypings(req: DiscoverTypings, cachePath: string, currentlyCachedTypings: string[], typingsToInstall: string[]) {\r\n        if (this.log.isEnabled()) {\r\n            this.log.writeLine(`Installing typings ${JSON.stringify(typingsToInstall)}`);\r\n        }\r\n        const filteredTypings = this.filterTypings(typingsToInstall);\r\n        if (filteredTypings.length === 0) {\r\n            if (this.log.isEnabled()) {\r\n                this.log.writeLine(`All typings are known to be missing or invalid - no need to install more typings`);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/factory/emitHelpers.ts",
        "criticalFunctions": [
          {
            "name": "createEmitHelperFactory",
            "complexity": 30,
            "lineCount": 554,
            "parameterCount": 1,
            "snippet": "export function createEmitHelperFactory(context: TransformationContext): EmitHelperFactory {\r\n    const factory = context.factory;\r\n    const immutableTrue = memoize(() => setInternalEmitFlags(factory.createTrue(), InternalEmitFlags.Immutable));\r\n    const immutableFalse = memoize(() => setInternalEmitFlags(factory.createFalse(), InternalEmitFlags.Immutable));\r\n    return {\r\n        getUnscopedHelperName,\r\n        createDecorateHelper,\r\n        createMetadataHelper,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 554 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/factory/emitNode.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/compiler/factory/nodeConverters.ts",
        "criticalFunctions": [
          {
            "name": "createNodeConverters",
            "complexity": 21,
            "lineCount": 140,
            "parameterCount": 1,
            "snippet": "export function createNodeConverters(factory: NodeFactory): NodeConverters {\r\n    return {\r\n        convertToFunctionBlock,\r\n        convertToFunctionExpression,\r\n        convertToClassExpression,\r\n        convertToArrayAssignmentElement,\r\n        convertToObjectAssignmentElement,\r\n        convertToAssignmentPattern,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 140 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/compiler/factory/nodeFactory.ts",
        "criticalFunctions": [
          {
            "name": "createNodeFactory",
            "complexity": 830,
            "lineCount": 6690,
            "parameterCount": 2,
            "snippet": "export function createNodeFactory(flags: NodeFactoryFlags, baseFactory: BaseNodeFactory): NodeFactory {\r\n    const setOriginal = flags & NodeFactoryFlags.NoOriginalNode ? identity : setOriginalNode;\r\n    const parenthesizerRules = memoize(() => flags & NodeFactoryFlags.NoParenthesizerRules ? nullParenthesizerRules : createParenthesizerRules(factory));\r\n    const converters = memoize(() => flags & NodeFactoryFlags.NoNodeConverters ? nullNodeConverters : createNodeConverters(factory));\r\n    const getBinaryCreateFunction = memoizeOne((operator: BinaryOperator) => (left: Expression, right: Expression) => createBinaryExpression(left, operator, right));\r\n    const getPrefixUnaryCreateFunction = memoizeOne((operator: PrefixUnaryOperator) => (operand: Expression) => createPrefixUnaryExpression(operator, operand));\r\n    const getPostfixUnaryCreateFunction = memoizeOne((operator: PostfixUnaryOperator) => (operand: Expression) => createPostfixUnaryExpression(operand, operator));\r\n    const getJSDocPrimaryTypeCreateFunction = memoizeOne(<T extends JSDocType>(kind: T[\"kind\"]) => () => createJSDocPrimaryTypeWorker(kind));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 830 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 6690 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTransformFlagsSubtreeExclusions",
            "complexity": 48,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "function getTransformFlagsSubtreeExclusions(kind: SyntaxKind) {\r\n    if (kind >= SyntaxKind.FirstTypeNode && kind <= SyntaxKind.LastTypeNode) {\r\n        return TransformFlags.TypeExcludes;\r\n    }\r\n    switch (kind) {\r\n        case SyntaxKind.CallExpression:\r\n        case SyntaxKind.NewExpression:\r\n        case SyntaxKind.ArrayLiteralExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createToken",
            "complexity": 32,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "function createToken<TKind extends SyntaxKind>(token: TKind) {\r\n        Debug.assert(token >= SyntaxKind.FirstToken && token <= SyntaxKind.LastToken, \"Invalid token\");\r\n        Debug.assert(token <= SyntaxKind.FirstTemplateToken || token >= SyntaxKind.LastTemplateToken, \"Invalid token. Use 'createTemplateLiteralLikeNode' to create template literals.\");\r\n        Debug.assert(token <= SyntaxKind.FirstLiteralToken || token >= SyntaxKind.LastLiteralToken, \"Invalid token. Use 'createLiteralLikeNode' to create literals.\");\r\n        Debug.assert(token !== SyntaxKind.Identifier, \"Invalid token. Use 'createIdentifier' to create identifiers\");\r\n        const node = createBaseToken<Token<TKind>>(token);\r\n        let transformFlags = TransformFlags.None;\r\n        switch (token) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          },
          {
            "name": "replaceModifiers",
            "complexity": 27,
            "lineCount": 35,
            "parameterCount": 2,
            "snippet": "function replaceModifiers(node: HasModifiers, modifiers: readonly Modifier[] | ModifierFlags) {\r\n        let modifierArray;\r\n        if (typeof modifiers === \"number\") {\r\n            modifierArray = createModifiersFromModifierFlags(modifiers);\r\n        }\r\n        else {\r\n            modifierArray = modifiers;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getDefaultTagNameForKind",
            "complexity": 21,
            "lineCount": 46,
            "parameterCount": 1,
            "snippet": "function getDefaultTagNameForKind(kind: JSDocTag[\"kind\"]): string {\r\n    switch (kind) {\r\n        case SyntaxKind.JSDocTypeTag:\r\n            return \"type\";\r\n        case SyntaxKind.JSDocReturnTag:\r\n            return \"returns\";\r\n        case SyntaxKind.JSDocThisTag:\r\n            return \"this\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/factory/nodeTests.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/compiler/factory/parenthesizerRules.ts",
        "criticalFunctions": [
          {
            "name": "createParenthesizerRules",
            "complexity": 87,
            "lineCount": 606,
            "parameterCount": 1,
            "snippet": "export function createParenthesizerRules(factory: NodeFactory): ParenthesizerRules {\r\n    interface BinaryPlusExpression extends BinaryExpression {\r\n        cachedLiteralKind: SyntaxKind;\r\n    }\r\n    let binaryLeftOperandParenthesizerCache: Map<BinaryOperator, (node: Expression) => Expression> | undefined;\r\n    let binaryRightOperandParenthesizerCache: Map<BinaryOperator, (node: Expression) => Expression> | undefined;\r\n    return {\r\n        getParenthesizeLeftSideOfBinaryForOperator,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 87 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 606 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "binaryOperandNeedsParentheses",
            "complexity": 18,
            "lineCount": 100,
            "parameterCount": 4,
            "snippet": "function binaryOperandNeedsParentheses(binaryOperator: SyntaxKind, operand: Expression, isLeftSideOfBinary: boolean, leftOperand: Expression | undefined) {\r\n        const binaryOperatorPrecedence = getOperatorPrecedence(SyntaxKind.BinaryExpression, binaryOperator);\r\n        const binaryOperatorAssociativity = getOperatorAssociativity(SyntaxKind.BinaryExpression, binaryOperator);\r\n        const emittedOperand = skipPartiallyEmittedExpressions(operand);\r\n        if (!isLeftSideOfBinary && operand.kind === SyntaxKind.ArrowFunction && binaryOperatorPrecedence > OperatorPrecedence.Assignment) {\r\n            return true;\r\n        }\r\n        const operandPrecedence = getExpressionPrecedence(emittedOperand);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/factory/utilities.ts",
        "criticalFunctions": [
          {
            "name": "canHaveIllegalDecorators",
            "complexity": 17,
            "lineCount": 20,
            "parameterCount": 1,
            "snippet": "export function canHaveIllegalDecorators(node: Node): node is HasIllegalDecorators {\r\n    const kind = node.kind;\r\n    return kind === SyntaxKind.PropertyAssignment\r\n        || kind === SyntaxKind.ShorthandPropertyAssignment\r\n        || kind === SyntaxKind.FunctionDeclaration\r\n        || kind === SyntaxKind.Constructor\r\n        || kind === SyntaxKind.IndexSignature\r\n        || kind === SyntaxKind.ClassStaticBlockDeclaration\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "tryGetPropertyNameOfBindingOrAssignmentElement",
            "complexity": 16,
            "lineCount": 49,
            "parameterCount": 1,
            "snippet": "export function tryGetPropertyNameOfBindingOrAssignmentElement(bindingElement: BindingOrAssignmentElement): Exclude<PropertyName, PrivateIdentifier> | undefined {\r\n    switch (bindingElement.kind) {\r\n        case SyntaxKind.BindingElement:\r\n            if (bindingElement.propertyName) {\r\n                const propertyName = bindingElement.propertyName;\r\n                if (isPrivateIdentifier(propertyName)) {\r\n                    return Debug.failBadSyntaxKind(propertyName);\r\n                }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createExternalHelpersImportDeclarationIfNeeded",
            "complexity": 15,
            "lineCount": 61,
            "parameterCount": 7,
            "snippet": "export function createExternalHelpersImportDeclarationIfNeeded(nodeFactory: NodeFactory, helperFactory: EmitHelperFactory, sourceFile: SourceFile, compilerOptions: CompilerOptions, hasExportStarsToExportValues?: boolean, hasImportStar?: boolean, hasImportDefault?: boolean): ImportDeclaration | ImportEqualsDeclaration | undefined {\r\n    if (compilerOptions.importHelpers && isEffectiveExternalModule(sourceFile, compilerOptions)) {\r\n        const moduleKind = getEmitModuleKind(compilerOptions);\r\n        const impliedModuleKind = getImpliedNodeFormatForEmitWorker(sourceFile, compilerOptions);\r\n        const helpers = getImportedHelpers(sourceFile);\r\n        if (\r\n            (moduleKind >= ModuleKind.ES2015 && moduleKind <= ModuleKind.ESNext) ||\r\n            impliedModuleKind === ModuleKind.ESNext ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTargetOfBindingOrAssignmentElement",
            "complexity": 8,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "export function getTargetOfBindingOrAssignmentElement(bindingElement: BindingOrAssignmentElement): BindingOrAssignmentElementTarget | undefined {\r\n    if (isDeclarationBindingElement(bindingElement)) {\r\n        return bindingElement.name;\r\n    }\r\n    if (isObjectLiteralElementLike(bindingElement)) {\r\n        switch (bindingElement.kind) {\r\n            case SyntaxKind.PropertyAssignment:\r\n                return getTargetOfBindingOrAssignmentElement(bindingElement.initializer as BindingOrAssignmentElement);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createExpressionForJsxFragment",
            "complexity": 5,
            "lineCount": 25,
            "parameterCount": 7,
            "snippet": "export function createExpressionForJsxFragment(factory: NodeFactory, jsxFactoryEntity: EntityName | undefined, jsxFragmentFactoryEntity: EntityName | undefined, reactNamespace: string, children: readonly Expression[], parentElement: JsxOpeningFragment, location: TextRange): LeftHandSideExpression {\r\n    const tagName = createJsxFragmentFactoryExpression(factory, jsxFragmentFactoryEntity, reactNamespace, parentElement);\r\n    const argumentsList = [tagName, factory.createNull()];\r\n    if (children && children.length > 0) {\r\n        if (children.length > 1) {\r\n            for (const child of children) {\r\n                startOnNewLine(child);\r\n                argumentsList.push(child);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/factory/utilitiesPublic.ts",
        "criticalFunctions": [
          {
            "name": "canHaveModifiers",
            "complexity": 25,
            "lineCount": 28,
            "parameterCount": 1,
            "snippet": "export function canHaveModifiers(node: Node): node is HasModifiers {\r\n    const kind = node.kind;\r\n    return kind === SyntaxKind.TypeParameter\r\n        || kind === SyntaxKind.Parameter\r\n        || kind === SyntaxKind.PropertySignature\r\n        || kind === SyntaxKind.PropertyDeclaration\r\n        || kind === SyntaxKind.MethodSignature\r\n        || kind === SyntaxKind.MethodDeclaration\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/compiler/transformers/classFields.ts",
        "criticalFunctions": [
          {
            "name": "transformClassFields",
            "complexity": 519,
            "lineCount": 2963,
            "parameterCount": 1,
            "snippet": "export function transformClassFields(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        hoistVariableDeclaration,\r\n        endLexicalEnvironment,\r\n        startLexicalEnvironment,\r\n        resumeLexicalEnvironment,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 519 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2963 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getClassFacts",
            "complexity": 38,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "function getClassFacts(node: ClassLikeDeclaration) {\r\n        let facts = ClassFacts.None;\r\n        const original = getOriginalNode(node);\r\n        if (isClassLike(original) && classOrConstructorParameterIsDecorated(legacyDecorators, original)) {\r\n            facts |= ClassFacts.ClassWasDecorated;\r\n        }\r\n        if (shouldTransformPrivateElementsOrClassStaticBlocks && (classHasClassThisAssignment(node) || classHasExplicitlyAssignedName(node))) {\r\n            facts |= ClassFacts.NeedsClassConstructorReference;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 38 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 31,
            "lineCount": 74,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): VisitResult<Node> {\r\n        if (\r\n            !(node.transformFlags & TransformFlags.ContainsClassFields) &&\r\n            !(node.transformFlags & TransformFlags.ContainsLexicalThisOrSuper)\r\n        ) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformPropertyWorker",
            "complexity": 27,
            "lineCount": 99,
            "parameterCount": 2,
            "snippet": "function transformPropertyWorker(property: PropertyDeclaration, receiver: LeftHandSideExpression) {\r\n        const emitAssignment = !useDefineForClassFields;\r\n        if (isNamedEvaluation(property, isAnonymousClassNeedingAssignedName)) {\r\n            property = transformNamedEvaluation(context, property);\r\n        }\r\n        const propertyName = hasAccessorModifier(property) ?\r\n            factory.getGeneratedPrivateNameForNode(property.name) :\r\n            isComputedPropertyName(property.name) && !isSimpleInlineableExpression(property.name.expression) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitPreOrPostfixUnaryExpression",
            "complexity": 25,
            "lineCount": 91,
            "parameterCount": 2,
            "snippet": "function visitPreOrPostfixUnaryExpression(node: PrefixUnaryExpression | PostfixUnaryExpression, discarded: boolean) {\r\n        if (\r\n            node.operator === SyntaxKind.PlusPlusToken ||\r\n            node.operator === SyntaxKind.MinusMinusToken\r\n        ) {\r\n            const operand = skipParentheses(node.operand);\r\n            if (isPrivateIdentifierPropertyAccessExpression(operand)) {\r\n                let info: PrivateIdentifierInfo | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/declarations.ts",
        "criticalFunctions": [
          {
            "name": "transformDeclarations",
            "complexity": 363,
            "lineCount": 1601,
            "parameterCount": 1,
            "snippet": "export function transformDeclarations(context: TransformationContext): Transformer<SourceFile | Bundle> {\r\n    const throwDiagnostic = () => Debug.fail(\"Diagnostic emitted without context\");\r\n    let getSymbolAccessibilityDiagnostic: GetSymbolAccessibilityDiagnostic = throwDiagnostic;\r\n    let needsDeclare = true;\r\n    let isBundledEmit = false;\r\n    let resultHasExternalModuleIndicator = false;\r\n    let needsScopeFixMarker = false;\r\n    let resultHasScopeMarker = false;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 363 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1601 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitDeclarationSubtree",
            "complexity": 74,
            "lineCount": 283,
            "parameterCount": 1,
            "snippet": "function visitDeclarationSubtree(input: Node): VisitResult<Node | undefined> {\r\n        if (shouldStripInternal(input)) return;\r\n        if (isDeclaration(input)) {\r\n            if (isDeclarationAndNotVisible(input)) return;\r\n            if (hasDynamicName(input)) {\r\n                if (isolatedDeclarations) {\r\n                    if (!resolver.isDefinitelyReferenceToGlobalSymbolObject(input.name.expression)) {\r\n                        if (isClassDeclaration(input.parent) || isObjectLiteralExpression(input.parent)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 74 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 283 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformTopLevelDeclaration",
            "complexity": 71,
            "lineCount": 371,
            "parameterCount": 1,
            "snippet": "function transformTopLevelDeclaration(input: LateVisibilityPaintedStatement) {\r\n        if (lateMarkedStatements) {\r\n            while (orderedRemoveItem(lateMarkedStatements, input));\r\n        }\r\n        if (shouldStripInternal(input)) return;\r\n        switch (input.kind) {\r\n            case SyntaxKind.ImportEqualsDeclaration: {\r\n                return transformImportEqualsDeclaration(input);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 71 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 371 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformRoot",
            "complexity": 25,
            "lineCount": 148,
            "parameterCount": 1,
            "snippet": "function transformRoot(node: SourceFile | Bundle): SourceFile | Bundle {\r\n        if (node.kind === SyntaxKind.SourceFile && node.isDeclarationFile) {\r\n            return node;\r\n        }\r\n        if (node.kind === SyntaxKind.Bundle) {\r\n            isBundledEmit = true;\r\n            rawReferencedFiles = [];\r\n            rawTypeReferenceDirectives = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformImportDeclaration",
            "complexity": 19,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "function transformImportDeclaration(decl: ImportDeclaration) {\r\n        if (!decl.importClause) {\r\n            return factory.updateImportDeclaration(\r\n                decl,\r\n                decl.modifiers,\r\n                decl.importClause,\r\n                rewriteModuleSpecifier(decl, decl.moduleSpecifier),\r\n                tryGetResolutionModeOverride(decl.attributes),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/destructuring.ts",
        "criticalFunctions": [
          {
            "name": "flattenArrayBindingOrAssignmentPattern",
            "complexity": 22,
            "lineCount": 75,
            "parameterCount": 5,
            "snippet": "function flattenArrayBindingOrAssignmentPattern(flattenContext: FlattenContext, parent: BindingOrAssignmentElement, pattern: ArrayBindingOrAssignmentPattern, value: Expression, location: TextRange) {\r\n    const elements = getElementsOfBindingOrAssignmentPattern(pattern);\r\n    const numElements = elements.length;\r\n    if (flattenContext.level < FlattenLevel.ObjectRest && flattenContext.downlevelIteration) {\r\n        value = ensureIdentifier(\r\n            flattenContext,\r\n            setTextRange(\r\n                flattenContext.context.getEmitHelperFactory().createReadHelper(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "flattenDestructuringAssignment",
            "complexity": 17,
            "lineCount": 97,
            "parameterCount": 6,
            "snippet": "export function flattenDestructuringAssignment(\r\n    node: VariableDeclaration | DestructuringAssignment,\r\n    visitor: (node: Node) => VisitResult<Node | undefined>,\r\n    context: TransformationContext,\r\n    level: FlattenLevel,\r\n    needsValue?: boolean,\r\n    createAssignmentCallback?: (name: Identifier, value: Expression, location?: TextRange) => Expression,\r\n): Expression {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "flattenDestructuringBinding",
            "complexity": 11,
            "lineCount": 83,
            "parameterCount": 7,
            "snippet": "export function flattenDestructuringBinding(\r\n    node: VariableDeclaration | ParameterDeclaration,\r\n    visitor: (node: Node) => VisitResult<Node | undefined>,\r\n    context: TransformationContext,\r\n    level: FlattenLevel,\r\n    rval?: Expression,\r\n    hoistTempVariables = false,\r\n    skipInitializer?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/es2015.ts",
        "criticalFunctions": [
          {
            "name": "transformES2015",
            "complexity": 625,
            "lineCount": 4578,
            "parameterCount": 1,
            "snippet": "export function transformES2015(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        startLexicalEnvironment,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 625 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 4578 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitorWorker",
            "complexity": 52,
            "lineCount": 147,
            "parameterCount": 2,
            "snippet": "function visitorWorker(node: Node, expressionResultIsUnused: boolean): VisitResult<Node | undefined> {\r\n        switch (node.kind) {\r\n            case SyntaxKind.StaticKeyword:\r\n                return undefined; // elide static keyword\r\n            case SyntaxKind.ClassDeclaration:\r\n                return visitClassDeclaration(node as ClassDeclaration);\r\n            case SyntaxKind.ClassExpression:\r\n                return visitClassExpression(node as ClassExpression);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 52 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 147 lines, consider splitting"
              }
            ]
          },
          {
            "name": "addExtraDeclarationsForConvertedLoop",
            "complexity": 17,
            "lineCount": 86,
            "parameterCount": 3,
            "snippet": "function addExtraDeclarationsForConvertedLoop(statements: Statement[], state: ConvertedLoopState, outerState: ConvertedLoopState | undefined) {\r\n        let extraVariableDeclarations: VariableDeclaration[] | undefined;\r\n        if (state.argumentsName) {\r\n            if (outerState) {\r\n                outerState.argumentsName = state.argumentsName;\r\n            }\r\n            else {\r\n                (extraVariableDeclarations || (extraVariableDeclarations = [])).push(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "simplifyConstructorInlineSuperReturn",
            "complexity": 16,
            "lineCount": 83,
            "parameterCount": 2,
            "snippet": "function simplifyConstructorInlineSuperReturn(body: Block, original: Block) {\r\n        for (const statement of original.statements) {\r\n            if (statement.transformFlags & TransformFlags.ContainsLexicalSuper && !getSuperCallFromStatement(statement)) {\r\n                return body;\r\n            }\r\n        }\r\n        const canElideThisCapturingVariable = !(original.transformFlags & TransformFlags.ContainsLexicalThis) &&\r\n            !(hierarchyFacts & HierarchyFacts.LexicalThis) &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformFunctionBody",
            "complexity": 16,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "function transformFunctionBody(node: FunctionLikeDeclaration) {\r\n        let multiLine = false; // indicates whether the block *must* be emitted as multiple lines\r\n        let singleLine = false; // indicates whether the block *may* be emitted as a single line\r\n        let statementsLocation: TextRange;\r\n        let closeBraceLocation: TextRange | undefined;\r\n        const prologue: Statement[] = [];\r\n        const statements: Statement[] = [];\r\n        const body = node.body!;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/es2017.ts",
        "criticalFunctions": [
          {
            "name": "transformES2017",
            "complexity": 149,
            "lineCount": 934,
            "parameterCount": 1,
            "snippet": "export function transformES2017(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 149 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 934 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformAsyncFunctionBody",
            "complexity": 24,
            "lineCount": 135,
            "parameterCount": 2,
            "snippet": "function transformAsyncFunctionBody(node: FunctionLikeDeclaration, outerParameters: NodeArray<ParameterDeclaration>): ConciseBody {\r\n        const innerParameters = !isSimpleParameterList(node.parameters) ? visitParameterList(node.parameters, visitor, context) : undefined;\r\n        resumeLexicalEnvironment();\r\n        const original = getOriginalNode(node, isFunctionLike);\r\n        const nodeType = original.type;\r\n        const promiseConstructor = languageVersion < ScriptTarget.ES2015 ? getPromiseConstructor(nodeType) : undefined;\r\n        const isArrowFunction = node.kind === SyntaxKind.ArrowFunction;\r\n        const savedLexicalArgumentsBinding = lexicalArgumentsBinding;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 135 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 21,
            "lineCount": 50,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): VisitResult<Node | undefined> {\r\n        if ((node.transformFlags & TransformFlags.ContainsES2017) === 0) {\r\n            return lexicalArgumentsBinding ? argumentsVisitor(node) : node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.AsyncKeyword:\r\n                return undefined;\r\n            case SyntaxKind.AwaitExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "asyncBodyVisitor",
            "complexity": 18,
            "lineCount": 31,
            "parameterCount": 1,
            "snippet": "function asyncBodyVisitor(node: Node): VisitResult<Node | undefined> {\r\n        if (isNodeWithPossibleHoistedDeclaration(node)) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.VariableStatement:\r\n                    return visitVariableStatementInAsyncBody(node);\r\n                case SyntaxKind.ForStatement:\r\n                    return visitForStatementInAsyncBody(node);\r\n                case SyntaxKind.ForInStatement:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "createSuperAccessVariableStatement",
            "complexity": 2,
            "lineCount": 96,
            "parameterCount": 4,
            "snippet": "export function createSuperAccessVariableStatement(factory: NodeFactory, resolver: EmitResolver, node: FunctionLikeDeclaration, names: Set<__String>): VariableStatement {\r\n    const hasBinding = resolver.hasNodeCheckFlag(node, NodeCheckFlags.MethodWithSuperPropertyAssignmentInAsync);\r\n    const accessors: PropertyAssignment[] = [];\r\n    names.forEach((_, key) => {\r\n        const name = unescapeLeadingUnderscores(key);\r\n        const getterAndSetter: PropertyAssignment[] = [];\r\n        getterAndSetter.push(factory.createPropertyAssignment(\r\n            \"get\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/es2018.ts",
        "criticalFunctions": [
          {
            "name": "transformES2018",
            "complexity": 169,
            "lineCount": 1333,
            "parameterCount": 1,
            "snippet": "export function transformES2018(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 169 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1333 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitorWorker",
            "complexity": 38,
            "lineCount": 124,
            "parameterCount": 2,
            "snippet": "function visitorWorker(node: Node, expressionResultIsUnused: boolean): VisitResult<Node> {\r\n        if ((node.transformFlags & TransformFlags.ContainsES2018) === 0) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.AwaitExpression:\r\n                return visitAwaitExpression(node as AwaitExpression);\r\n            case SyntaxKind.YieldExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 38 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 124 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformAsyncGeneratorFunctionBody",
            "complexity": 10,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "function transformAsyncGeneratorFunctionBody(node: MethodDeclaration | AccessorDeclaration | FunctionDeclaration | FunctionExpression): FunctionBody {\r\n        const innerParameters = !isSimpleParameterList(node.parameters) ? visitParameterList(node.parameters, visitor, context) : undefined;\r\n        resumeLexicalEnvironment();\r\n        const savedCapturedSuperProperties = capturedSuperProperties;\r\n        const savedHasSuperElementAccess = hasSuperElementAccess;\r\n        capturedSuperProperties = new Set();\r\n        hasSuperElementAccess = false;\r\n        const outerStatements: Statement[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "appendObjectRestAssignmentsIfNeeded",
            "complexity": 10,
            "lineCount": 89,
            "parameterCount": 2,
            "snippet": "function appendObjectRestAssignmentsIfNeeded(statements: Statement[] | undefined, node: FunctionLikeDeclaration): Statement[] | undefined {\r\n        let containsPrecedingObjectRestOrSpread = false;\r\n        for (const parameter of node.parameters) {\r\n            if (containsPrecedingObjectRestOrSpread) {\r\n                if (isBindingPattern(parameter.name)) {\r\n                    if (parameter.name.elements.length > 0) {\r\n                        const declarations = flattenDestructuringBinding(\r\n                            parameter,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformForAwaitOfStatement",
            "complexity": 4,
            "lineCount": 113,
            "parameterCount": 3,
            "snippet": "function transformForAwaitOfStatement(node: ForOfStatement, outermostLabeledStatement: LabeledStatement | undefined, ancestorFacts: HierarchyFacts) {\r\n        const expression = visitNode(node.expression, visitor, isExpression);\r\n        const iterator = isIdentifier(expression) ? factory.getGeneratedNameForNode(expression) : factory.createTempVariable(/*recordTempVariable*/ undefined);\r\n        const result = isIdentifier(expression) ? factory.getGeneratedNameForNode(iterator) : factory.createTempVariable(/*recordTempVariable*/ undefined);\r\n        const nonUserCode = factory.createTempVariable(/*recordTempVariable*/ undefined);\r\n        const done = factory.createTempVariable(hoistVariableDeclaration);\r\n        const errorRecord = factory.createUniqueName(\"e\");\r\n        const catchVariable = factory.getGeneratedNameForNode(errorRecord);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 113 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/es2020.ts",
        "criticalFunctions": [
          {
            "name": "transformES2020",
            "complexity": 48,
            "lineCount": 226,
            "parameterCount": 1,
            "snippet": "export function transformES2020(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    return chainBundle(context, transformSourceFile);\r\n    function transformSourceFile(node: SourceFile) {\r\n        if (node.isDeclarationFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 226 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitOptionalExpression",
            "complexity": 18,
            "lineCount": 60,
            "parameterCount": 3,
            "snippet": "function visitOptionalExpression(node: OptionalChain, captureThisArg: boolean, isDelete: boolean): Expression {\r\n        const { expression, chain } = flattenChain(node);\r\n        const left = visitNonOptionalExpression(skipPartiallyEmittedExpressions(expression), isCallChain(chain[0]), /*isDelete*/ false);\r\n        let leftThisArg = isSyntheticReference(left) ? left.thisArg : undefined;\r\n        let capturedLeft = isSyntheticReference(left) ? left.expression : left;\r\n        let leftExpression = factory.restoreOuterExpressions(expression, capturedLeft, OuterExpressionKinds.PartiallyEmittedExpressions);\r\n        if (!isSimpleCopiableExpression(capturedLeft)) {\r\n            capturedLeft = factory.createTempVariable(hoistVariableDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/esDecorators.ts",
        "criticalFunctions": [
          {
            "name": "transformESDecorators",
            "complexity": 333,
            "lineCount": 2239,
            "parameterCount": 1,
            "snippet": "export function transformESDecorators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        startLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 333 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2239 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformClassLike",
            "complexity": 65,
            "lineCount": 378,
            "parameterCount": 1,
            "snippet": "function transformClassLike(node: ClassLikeDeclaration) {\r\n        startLexicalEnvironment();\r\n        if (!classHasDeclaredOrExplicitlyAssignedName(node) && classOrConstructorParameterIsDecorated(/*useLegacyDecorators*/ false, node)) {\r\n            node = injectClassNamedEvaluationHelperBlockIfMissing(context, node, factory.createStringLiteral(\"\"));\r\n        }\r\n        const classReference = factory.getLocalName(node, /*allowComments*/ false, /*allowSourceMaps*/ false, /*ignoreAssignedName*/ true);\r\n        const classInfo = createClassInfo(node);\r\n        const classDefinitionStatements: Statement[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 378 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "partialTransformClassElement",
            "complexity": 36,
            "lineCount": 173,
            "parameterCount": 3,
            "snippet": "function partialTransformClassElement<\r\n        TNode extends MethodDeclaration | PropertyDeclaration | GetAccessorDeclaration | SetAccessorDeclaration,\r\n    >(\r\n        member: TNode,\r\n        classInfo: ClassInfo | undefined,\r\n        createDescriptor?: (node: TNode & { readonly name: PrivateIdentifier; }, modifiers: ModifiersArray | undefined) => Expression,\r\n    ) {\r\n        let referencedName: Expression | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 173 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 32,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): VisitResult<Node> {\r\n        if (!shouldVisitNode(node)) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.Decorator: // elided, will be emitted as part of `visitClassDeclaration`\r\n                return Debug.fail(\"Use `modifierVisitor` instead.\");\r\n            case SyntaxKind.ClassDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createClassInfo",
            "complexity": 24,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "function createClassInfo(node: ClassLikeDeclaration): ClassInfo {\r\n        const metadataReference = factory.createUniqueName(\"_metadata\", GeneratedIdentifierFlags.Optimistic | GeneratedIdentifierFlags.FileLevel);\r\n        let instanceMethodExtraInitializersName: Identifier | undefined;\r\n        let staticMethodExtraInitializersName: Identifier | undefined;\r\n        let hasStaticInitializers = false;\r\n        let hasNonAmbientInstanceFields = false;\r\n        let hasStaticPrivateClassElements = false;\r\n        let classThis: Identifier | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/esnext.ts",
        "criticalFunctions": [
          {
            "name": "transformESNext",
            "complexity": 69,
            "lineCount": 762,
            "parameterCount": 1,
            "snippet": "export function transformESNext(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        hoistVariableDeclaration,\r\n        startLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 69 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 762 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformUsingDeclarations",
            "complexity": 17,
            "lineCount": 81,
            "parameterCount": 5,
            "snippet": "function transformUsingDeclarations(statementsIn: readonly Statement[], start: number, end: number, envBinding: Identifier, topLevelStatements: Statement[] | undefined) {\r\n        const statements: Statement[] = [];\r\n        for (let i = start; i < end; i++) {\r\n            const statement = statementsIn[i];\r\n            const usingKind = getUsingKind(statement);\r\n            if (usingKind) {\r\n                Debug.assertNode(statement, isVariableStatement);\r\n                const declarations: VariableDeclaration[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "hoistClassDeclaration",
            "complexity": 9,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "function hoistClassDeclaration(node: ClassDeclaration) {\r\n        if (!node.name && defaultExportBinding) {\r\n            return node;\r\n        }\r\n        const isExported = hasSyntacticModifier(node, ModifierFlags.Export);\r\n        const isDefault = hasSyntacticModifier(node, ModifierFlags.Default);\r\n        let expression: Expression = factory.converters.convertToClassExpression(node);\r\n        if (node.name) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitSourceFile",
            "complexity": 8,
            "lineCount": 107,
            "parameterCount": 1,
            "snippet": "function visitSourceFile(node: SourceFile): SourceFile {\r\n        const usingKind = getUsingKindOfStatements(node.statements);\r\n        if (usingKind) {\r\n            startLexicalEnvironment();\r\n            exportBindings = new IdentifierNameMap();\r\n            exportVars = [];\r\n            const prologueCount = countPrologueStatements(node.statements);\r\n            const topLevelStatements: Statement[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDownlevelUsingStatements",
            "complexity": 2,
            "lineCount": 99,
            "parameterCount": 3,
            "snippet": "function createDownlevelUsingStatements(bodyStatements: readonly Statement[], envBinding: Identifier, async: boolean) {\r\n        const statements: Statement[] = [];\r\n        const envObject = factory.createObjectLiteralExpression([\r\n            factory.createPropertyAssignment(\"stack\", factory.createArrayLiteralExpression()),\r\n            factory.createPropertyAssignment(\"error\", factory.createVoidZero()),\r\n            factory.createPropertyAssignment(\"hasError\", factory.createFalse()),\r\n        ]);\r\n        const envVar = factory.createVariableDeclaration(envBinding, /*exclamationToken*/ undefined, /*type*/ undefined, envObject);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/generators.ts",
        "criticalFunctions": [
          {
            "name": "transformGenerators",
            "complexity": 285,
            "lineCount": 2949,
            "parameterCount": 1,
            "snippet": "export function transformGenerators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistFunctionDeclaration,\r\n        hoistVariableDeclaration,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 285 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2949 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformAndEmitStatementWorker",
            "complexity": 16,
            "lineCount": 36,
            "parameterCount": 1,
            "snippet": "function transformAndEmitStatementWorker(node: Statement): void {\r\n        switch (node.kind) {\r\n            case SyntaxKind.Block:\r\n                return transformAndEmitBlock(node as Block);\r\n            case SyntaxKind.ExpressionStatement:\r\n                return transformAndEmitExpressionStatement(node as ExpressionStatement);\r\n            case SyntaxKind.IfStatement:\r\n                return transformAndEmitIfStatement(node as IfStatement);\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "transformAndEmitSwitchStatement",
            "complexity": 14,
            "lineCount": 108,
            "parameterCount": 1,
            "snippet": "function transformAndEmitSwitchStatement(node: SwitchStatement) {\r\n        if (containsYield(node.caseBlock)) {\r\n            const caseBlock = node.caseBlock;\r\n            const numClauses = caseBlock.clauses.length;\r\n            const endLabel = beginSwitchBlock();\r\n            const expression = cacheExpression(Debug.checkDefined(visitNode(node.expression, visitor, isExpression)));\r\n            const clauseLabels: Label[] = [];\r\n            let defaultClauseIndex = -1;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitElements",
            "complexity": 10,
            "lineCount": 63,
            "parameterCount": 4,
            "snippet": "function visitElements(elements: NodeArray<Expression>, leadingElement?: Expression, location?: TextRange, multiLine?: boolean) {\r\n        const numInitialElements = countInitialNodesWithoutYield(elements);\r\n        let temp: Identifier | undefined;\r\n        if (numInitialElements > 0) {\r\n            temp = declareLocal();\r\n            const initialElements = visitNodes(elements, visitor, isExpression, 0, numInitialElements);\r\n            emitAssignment(\r\n                temp,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "appendLabel",
            "complexity": 8,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function appendLabel(markLabelEnd: boolean): void {\r\n        if (!clauses) {\r\n            clauses = [];\r\n        }\r\n        if (statements) {\r\n            if (withBlockStack) {\r\n                for (let i = withBlockStack.length - 1; i >= 0; i--) {\r\n                    const withBlock = withBlockStack[i];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/compiler/transformers/jsx.ts",
        "criticalFunctions": [
          {
            "name": "transformJsx",
            "complexity": 116,
            "lineCount": 590,
            "parameterCount": 1,
            "snippet": "export function transformJsx(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    interface PerFileState {\r\n        importSpecifier?: string;\r\n        filenameDeclaration?: VariableDeclaration & { name: Identifier; };\r\n        utilizedImplicitRuntimeImports?: Map<string, Map<string, ImportSpecifier>>;\r\n    }\r\n    const {\r\n        factory,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 116 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 590 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 13,
            "parameterCount": 7,
            "snippet": "(match, _all, _number, _digits, decimal, hex, word) => {\r\n            if (decimal) {\r\n                return utf16EncodeAsString(parseInt(decimal, 10));\r\n            }\r\n            else if (hex) {\r\n                return utf16EncodeAsString(parseInt(hex, 16));\r\n            }\r\n            else {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/legacyDecorators.ts",
        "criticalFunctions": [
          {
            "name": "transformLegacyDecorators",
            "complexity": 67,
            "lineCount": 759,
            "parameterCount": 1,
            "snippet": "export function transformLegacyDecorators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 67 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 759 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformClassDeclarationWithClassDecorators",
            "complexity": 15,
            "lineCount": 172,
            "parameterCount": 2,
            "snippet": "function transformClassDeclarationWithClassDecorators(node: ClassDeclaration, name: Identifier | undefined) {\r\n        const isExport = hasSyntacticModifier(node, ModifierFlags.Export);\r\n        const isDefault = hasSyntacticModifier(node, ModifierFlags.Default);\r\n        const modifiers = visitNodes(node.modifiers, node => isExportOrDefaultModifier(node) || isDecorator(node) ? undefined : node, isModifierLike);\r\n        const location = moveRangePastModifiers(node);\r\n        const classAlias = getClassAliasIfNeeded(node);\r\n        const declName = languageVersion < ScriptTarget.ES2015 ?\r\n            factory.getInternalName(node, /*allowComments*/ false, /*allowSourceMaps*/ true) :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 172 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateClassElementDecorationExpression",
            "complexity": 4,
            "lineCount": 59,
            "parameterCount": 2,
            "snippet": "function generateClassElementDecorationExpression(node: ClassExpression | ClassDeclaration, member: ClassElement) {\r\n        const allDecorators = getAllDecoratorsOfClassElement(member, node, /*useLegacyDecorators*/ true);\r\n        const decoratorExpressions = transformAllDecoratorsOfDeclaration(allDecorators);\r\n        if (!decoratorExpressions) {\r\n            return undefined;\r\n        }\r\n        const prefix = getClassMemberPrefix(node, member);\r\n        const memberName = getExpressionForPropertyName(member, /*generateNameForComputedPropertyName*/ !hasSyntacticModifier(member, ModifierFlags.Ambient));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/namedEvaluation.ts",
        "criticalFunctions": [
          {
            "name": "injectClassNamedEvaluationHelperBlockIfMissing",
            "complexity": 4,
            "lineCount": 56,
            "parameterCount": 4,
            "snippet": "export function injectClassNamedEvaluationHelperBlockIfMissing(\r\n    context: TransformationContext,\r\n    node: ClassLikeDeclaration,\r\n    assignedName: Expression,\r\n    thisExpression?: Expression,\r\n) {\r\n    if (classHasExplicitlyAssignedName(node)) {\r\n        return node;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/compiler/transformers/ts.ts",
        "criticalFunctions": [
          {
            "name": "transformTypeScript",
            "complexity": 361,
            "lineCount": 2512,
            "parameterCount": 1,
            "snippet": "export function transformTypeScript(context: TransformationContext): Transformer<SourceFile | Bundle> {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        startLexicalEnvironment,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 361 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2512 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitTypeScript",
            "complexity": 78,
            "lineCount": 195,
            "parameterCount": 1,
            "snippet": "function visitTypeScript(node: Node): VisitResult<Node | undefined> {\r\n        if (isStatement(node) && hasSyntacticModifier(node, ModifierFlags.Ambient)) {\r\n            return factory.createNotEmittedStatement(node);\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.ExportKeyword:\r\n            case SyntaxKind.DefaultKeyword:\r\n                return currentNamespace ? undefined : node;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 78 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 195 lines, consider splitting"
              }
            ]
          },
          {
            "name": "visitClassDeclaration",
            "complexity": 19,
            "lineCount": 146,
            "parameterCount": 1,
            "snippet": "function visitClassDeclaration(node: ClassDeclaration): VisitResult<Statement> {\r\n        const facts = getClassFacts(node);\r\n        const promoteToIIFE = languageVersion <= ScriptTarget.ES5 &&\r\n            !!(facts & ClassFacts.MayNeedImmediatelyInvokedFunctionExpression);\r\n        if (\r\n            !isClassLikeDeclarationWithTypeScriptSyntax(node) &&\r\n            !classOrConstructorParameterIsDecorated(legacyDecorators, node) &&\r\n            !isExportOfNamespace(node)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 146 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isElisionBlocked",
            "complexity": 17,
            "lineCount": 46,
            "parameterCount": 1,
            "snippet": "function isElisionBlocked(node: ImportDeclaration | ImportEqualsDeclaration | ExportAssignment | ExportDeclaration) {\r\n        const parsed = getParseTreeNode(node);\r\n        if (parsed === node || isExportAssignment(node)) {\r\n            return false;\r\n        }\r\n        if (!parsed || parsed.kind !== node.kind) {\r\n            return true;\r\n        }\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "visitEnumDeclaration",
            "complexity": 8,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "function visitEnumDeclaration(node: EnumDeclaration): VisitResult<Statement> {\r\n        if (!shouldEmitEnumDeclaration(node)) {\r\n            return factory.createNotEmittedStatement(node);\r\n        }\r\n        const statements: Statement[] = [];\r\n        let emitFlags = EmitFlags.AdviseOnEmitNode;\r\n        const varAdded = addVarForEnumOrModuleDeclaration(statements, node);\r\n        if (varAdded) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/typeSerializer.ts",
        "criticalFunctions": [
          {
            "name": "createRuntimeTypeSerializer",
            "complexity": 137,
            "lineCount": 502,
            "parameterCount": 1,
            "snippet": "export function createRuntimeTypeSerializer(context: TransformationContext): RuntimeTypeSerializer {\r\n    const {\r\n        factory,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n    const languageVersion = getEmitScriptTarget(compilerOptions);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 137 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 502 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "serializeTypeNode",
            "complexity": 41,
            "lineCount": 95,
            "parameterCount": 1,
            "snippet": "function serializeTypeNode(node: TypeNode | undefined): SerializedTypeNode {\r\n        if (node === undefined) {\r\n            return factory.createIdentifier(\"Object\");\r\n        }\r\n        node = skipTypeParentheses(node);\r\n        switch (node.kind) {\r\n            case SyntaxKind.VoidKeyword:\r\n            case SyntaxKind.UndefinedKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              }
            ]
          },
          {
            "name": "equateSerializedTypeNodes",
            "complexity": 26,
            "lineCount": 36,
            "parameterCount": 2,
            "snippet": "function equateSerializedTypeNodes(left: Expression, right: Expression): boolean {\r\n        return (\r\n            isGeneratedIdentifier(left) ? isGeneratedIdentifier(right) :\r\n                isIdentifier(left) ? isIdentifier(right)\r\n                    && left.escapedText === right.escapedText :\r\n                isPropertyAccessExpression(left) ? isPropertyAccessExpression(right)\r\n                    && equateSerializedTypeNodes(left.expression, right.expression)\r\n                    && equateSerializedTypeNodes(left.name, right.name) :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "serializeTypeReferenceNode",
            "complexity": 17,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function serializeTypeReferenceNode(node: TypeReferenceNode): SerializedTypeNode {\r\n        const kind = resolver.getTypeReferenceSerializationKind(node.typeName, currentNameScope ?? currentLexicalScope);\r\n        switch (kind) {\r\n            case TypeReferenceSerializationKind.Unknown:\r\n                if (findAncestor(node, n => n.parent && isConditionalTypeNode(n.parent) && (n.parent.trueType === n || n.parent.falseType === n))) {\r\n                    return factory.createIdentifier(\"Object\");\r\n                }\r\n                const serialized = serializeEntityNameAsExpressionFallback(node.typeName);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/utilities.ts",
        "criticalFunctions": [
          {
            "name": "collectExternalModuleInfo",
            "complexity": 40,
            "lineCount": 175,
            "parameterCount": 2,
            "snippet": "export function collectExternalModuleInfo(context: TransformationContext, sourceFile: SourceFile): ExternalModuleInfo {\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n    const externalImports: (ImportDeclaration | ImportEqualsDeclaration | ExportDeclaration)[] = [];\r\n    const exportSpecifiers = new IdentifierNameMultiMap<ExportSpecifier>();\r\n    const exportedBindings: Identifier[][] = [];\r\n    const uniqueExports = new Map<string, boolean>();\r\n    const exportedFunctions = new Set<FunctionDeclaration>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 40 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 175 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNonAssignmentOperatorForCompoundAssignment",
            "complexity": 16,
            "lineCount": 34,
            "parameterCount": 1,
            "snippet": "export function getNonAssignmentOperatorForCompoundAssignment(kind: CompoundAssignmentOperator): LogicalOperatorOrHigher | SyntaxKind.QuestionQuestionToken {\r\n    switch (kind) {\r\n        case SyntaxKind.PlusEqualsToken:\r\n            return SyntaxKind.PlusToken;\r\n        case SyntaxKind.MinusEqualsToken:\r\n            return SyntaxKind.MinusToken;\r\n        case SyntaxKind.AsteriskEqualsToken:\r\n            return SyntaxKind.AsteriskToken;\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/harness/_namespaces/ts.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/testRunner/_namespaces/ts.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/testRunner/parallel/host.ts",
        "criticalFunctions": [
          {
            "name": "start",
            "complexity": 96,
            "lineCount": 625,
            "parameterCount": 1,
            "snippet": "export function start(importTests: () => Promise<unknown>): void {\r\n    const Base = Mocha.reporters.Base;\r\n    const color = Base.color;\r\n    const cursor = Base.cursor;\r\n    const isatty = tty.isatty(1) && tty.isatty(2);\r\n    const FailedTestReporter = require(Utils.findUpFile(\"scripts/failed-tests.cjs\")) as typeof import(\"../../../scripts/failed-tests.cjs\");\r\n    const perfdataFileNameFragment = \".parallelperf\";\r\n    const perfData = readSavedPerfData(configOption);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 96 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 625 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "startDelayed",
            "complexity": 63,
            "lineCount": 398,
            "parameterCount": 2,
            "snippet": "function startDelayed(perfData: { [testHash: string]: number; } | undefined, totalCost: number) {\r\n        console.log(`Discovered ${tasks.length} unittest suites` + (newTasks.length ? ` and ${newTasks.length} new suites.` : \".\"));\r\n        console.log(\"Discovering runner-based tests...\");\r\n        const discoverStart = +(new Date());\r\n        for (const runner of runners) {\r\n            for (const file of runner.getTestFiles()) {\r\n                let size: number;\r\n                if (!perfData) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 63 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 398 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 20,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "(data: ParallelClientMessage) => {\r\n                switch (data.type) {\r\n                    case \"error\": {\r\n                        console.error(`Test worker encountered unexpected error${data.payload.name ? ` during the execution of test ${data.payload.name}` : \"\"} and was forced to close:\r\n            Message: ${data.payload.error}\r\n            Stack: ${data.payload.stack}`);\r\n                        return process.exit(2);\r\n                    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "outputFinalResult",
            "complexity": 13,
            "lineCount": 128,
            "parameterCount": 0,
            "snippet": "function outputFinalResult() {\r\n            function patchStats(stats: Mocha.Stats) {\r\n                Object.defineProperties(stats, {\r\n                    start: {\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        get() {\r\n                            return startDate;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 128 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/parallel/worker.ts",
        "criticalFunctions": [
          {
            "name": "start",
            "complexity": 46,
            "lineCount": 325,
            "parameterCount": 1,
            "snippet": "export function start(importTests: () => Promise<unknown>): void {\r\n    const importTestsPromise = importTests();\r\n    function hookUncaughtExceptions() {\r\n        if (!exceptionsHooked) {\r\n            process.on(\"uncaughtException\", handleUncaughtException);\r\n            process.on(\"unhandledRejection\", handleUncaughtException);\r\n            exceptionsHooked = true;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 325 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/canWatch.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 226,
            "parameterCount": 0,
            "snippet": "() => {\r\n    baselineCanWatch(\r\n        \"canWatchDirectoryOrFile\",\r\n        () => `Determines if given directory or file can be watched`,\r\n        (paths, longestPathLength, baseline) => {\r\n            const testType = \"canWatchDirectoryOrFile\";\r\n            const maxLengths = [longestPathLength + \"/package.json\".length, testType.length] as const;\r\n            pushHeader(baseline, [\"Directory\", testType], maxLengths);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 226 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/customTransforms.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 209,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function emitsCorrectly(name: string, sources: { file: string; text: string; }[], customTransformers: ts.CustomTransformers, options: ts.CompilerOptions = {}) {\r\n        it(name, () => {\r\n            const roots = sources.map(source => ts.createSourceFile(source.file, source.text, ts.ScriptTarget.ES2015));\r\n            const fileMap = ts.arrayToMap(roots, file => file.fileName);\r\n            const outputs = new Map<string, string>();\r\n            const host: ts.CompilerHost = {\r\n                getSourceFile: fileName => fileMap.get(fileName),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 209 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers.ts",
        "criticalFunctions": [
          {
            "name": "updateProgram",
            "complexity": 2,
            "lineCount": 13,
            "parameterCount": 7,
            "snippet": "export function updateProgram(oldProgram: ProgramWithSourceTexts, rootNames: readonly string[], options: ts.CompilerOptions, updater: (files: NamedSourceText[]) => void, newTexts?: NamedSourceText[], useGetSourceFileByPath?: boolean, useCaseSensitiveFileNames?: boolean): ProgramWithSourceTexts {\r\n    if (!newTexts) {\r\n        newTexts = oldProgram.sourceTexts!.slice(0);\r\n    }\r\n    updater(newTexts);\r\n    const host = createTestCompilerHost(newTexts, options.target!, oldProgram, useGetSourceFileByPath, useCaseSensitiveFileNames);\r\n    return programToProgramWithSourceTexts(\r\n        ts.createProgram(rootNames, options, host, oldProgram),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/testRunner/unittests/incrementalParser.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 877,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"Inserting into method\", () => {\r\n        const source = \"class C {\\r\\n\" +\r\n            \"    public foo1() { }\\r\\n\" +\r\n            \"    public foo2() {\\r\\n\" +\r\n            \"        return 1;\\r\\n\" +\r\n            \"    }\\r\\n\" +\r\n            \"    public foo3() { }\\r\\n\" +\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 877 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 151,
            "parameterCount": 0,
            "snippet": "() => {\r\n            const textWithIgnoreComment = `const x = 10;\r\n    function foo() {\r\n        ${tsIgnoreComment}\r\n        let y: string = x;\r\n        return y;\r\n    }\r\n    function bar() {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 151 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/jsDocParsing.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 577,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"TypeExpressions\", () => {\r\n        function parsesCorrectly(name: string, content: string) {\r\n            it(name, () => {\r\n                const typeAndDiagnostics = ts.parseJSDocTypeExpressionForTests(content);\r\n                assert.isTrue(typeAndDiagnostics && typeAndDiagnostics.diagnostics.length === 0, \"no errors issued\");\r\n                Harness.Baseline.runBaseline(\"JSDocParsing/TypeExpressions.parsesCorrectly.\" + name + \".json\", Utils.sourceFileToJSON(typeAndDiagnostics!.jsDocTypeExpression.type));\r\n            });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 577 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 425,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function parsesCorrectly(name: string, content: string) {\r\n            it(name, () => {\r\n                const comment = ts.parseIsolatedJSDocComment(content)!;\r\n                if (!comment) {\r\n                    ts.Debug.fail(\"Comment failed to parse entirely\");\r\n                }\r\n                if (comment.diagnostics.length > 0) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 425 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 83,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function parsesCorrectly(name: string, content: string) {\r\n            it(name, () => {\r\n                const typeAndDiagnostics = ts.parseJSDocTypeExpressionForTests(content);\r\n                assert.isTrue(typeAndDiagnostics && typeAndDiagnostics.diagnostics.length === 0, \"no errors issued\");\r\n                Harness.Baseline.runBaseline(\"JSDocParsing/TypeExpressions.parsesCorrectly.\" + name + \".json\", Utils.sourceFileToJSON(typeAndDiagnostics!.jsDocTypeExpression.type));\r\n            });\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 54,
            "parameterCount": 0,
            "snippet": "() => {\r\n            parsesIncorrectly(\r\n                \"multipleTypes\",\r\n                `/**\r\n  * @type {number}\r\n  * @type {string}\r\n  */`,\r\n            );\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 347,
            "parameterCount": 0,
            "snippet": "() => {\r\n            parsesCorrectly(\"threeAsterisks\", \"/*** */\");\r\n            parsesCorrectly(\"emptyComment\", \"/***/\");\r\n            parsesCorrectly(\r\n                \"noLeadingAsterisk\",\r\n                `/**\r\n    @type {number}\r\n  */`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 347 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/moduleResolution.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 12,
            "lineCount": 280,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"module resolution without path mappings/rootDirs\", () => {\r\n        const baselines: string[] = [];\r\n        test(/*hasDirectoryExists*/ true);\r\n        test(/*hasDirectoryExists*/ false);\r\n        runBaseline(\"baseUrl without path mappings or rootDirs\", baselines);\r\n        function test(hasDirectoryExists: boolean) {\r\n            const file1: File = { name: \"/root/folder1/file1.ts\" };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 280 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 10,
            "lineCount": 195,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function testWorker(baselines: string[], hasDirectoryExists: boolean, typesRoot: string | undefined, typeDirective: string, initialFile: File, targetFile: File, ...otherFiles: File[]) {\r\n        const host = createModuleResolutionHost(baselines, hasDirectoryExists, ...[initialFile, targetFile].concat(...otherFiles));\r\n        baselines.push(`Resolving \"${typeDirective}\" from ${initialFile.name} typesRoots: ${typesRoot ? `[${typesRoot}]` : undefined}${hasDirectoryExists ? \"\" : \" with host that doesnt have directoryExists\"}`);\r\n        const result = ts.resolveTypeReferenceDirective(typeDirective, initialFile.name, typesRoot ? { typeRoots: [typesRoot] } : {}, host);\r\n        baselines.push(`Resolution:: ${jsonToReadableText(result)}`);\r\n        baselines.push(\"\");\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 195 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 98,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const nonImplicitExtensions = [ts.Extension.Mts, ts.Extension.Dmts, ts.Extension.Mjs, ts.Extension.Cts, ts.Extension.Dcts, ts.Extension.Cjs];\r\n    const autoExtensions = ts.filter(ts.supportedTSExtensionsFlat, e => !nonImplicitExtensions.includes(e));\r\n    it(\"load as file\", () => {\r\n        const baselines: string[] = [];\r\n        testLoadAsFile(\"load as file with relative name in current directory\", \"/foo/bar/baz.ts\", \"/foo/bar/foo\", \"./foo\");\r\n        testLoadAsFile(\"load as file with relative name in parent directory\", \"/foo/bar/baz.ts\", \"/foo/foo\", \"../foo\");\r\n        testLoadAsFile(\"load as file with name starting with directory seperator\", \"/foo/bar/baz.ts\", \"/foo\", \"/foo\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 98 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 169,
            "parameterCount": 0,
            "snippet": "() => {\r\n    let library: ts.SourceFile;\r\n    function test(\r\n        scenario: string,\r\n        filesMapLike: ts.MapLike<string>,\r\n        options: ts.CompilerOptions,\r\n        currentDirectory: string,\r\n        useCaseSensitiveFileNames: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 169 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "test",
            "complexity": 5,
            "lineCount": 53,
            "parameterCount": 6,
            "snippet": "function test(\r\n        scenario: string,\r\n        filesMapLike: ts.MapLike<string>,\r\n        options: ts.CompilerOptions,\r\n        currentDirectory: string,\r\n        useCaseSensitiveFileNames: boolean,\r\n        rootFiles: string[],\r\n    ): void {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/parsePseudoBigInt.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 69,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"parsePseudoBigInt\", () => {\r\n        const testNumbers: number[] = [];\r\n        for (let i = 0; i < 1e3; i++) testNumbers.push(i);\r\n        for (let bits = 0; bits <= 52; bits++) {\r\n            testNumbers.push(2 ** bits, 2 ** bits - 1);\r\n        }\r\n        it(\"can strip base-10 strings\", () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 67,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const testNumbers: number[] = [];\r\n        for (let i = 0; i < 1e3; i++) testNumbers.push(i);\r\n        for (let bits = 0; bits <= 52; bits++) {\r\n            testNumbers.push(2 ** bits, 2 ** bits - 1);\r\n        }\r\n        it(\"can strip base-10 strings\", () => {\r\n            for (const testNumber of testNumbers) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/paths.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 429,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"normalizeSlashes\", () => {\r\n        assert.strictEqual(ts.normalizeSlashes(\"a\"), \"a\");\r\n        assert.strictEqual(ts.normalizeSlashes(\"a/b\"), \"a/b\");\r\n        assert.strictEqual(ts.normalizeSlashes(\"a\\\\b\"), \"a/b\");\r\n        assert.strictEqual(ts.normalizeSlashes(\"\\\\\\\\server\\\\path\"), \"//server/path\");\r\n    });\r\n    it(\"getRootLength\", () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 429 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 119,
            "parameterCount": 0,
            "snippet": "() => {\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/\", \"\"), \"/\");\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/.\", \"\"), \"/\");\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/./\", \"\"), \"/\");\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/../\", \"\"), \"/\");\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/a\", \"\"), \"/a\");\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/a/\", \"\"), \"/a\");\r\n        assert.strictEqual(ts.getNormalizedAbsolutePath(\"/a/.\", \"\"), \"/a\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 119 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/reuseProgramStructure.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 754,
            "parameterCount": 0,
            "snippet": "() => {\r\n    type ProgramToBaseline = ts.Program & Pick<ProgramWithSourceTexts, \"version\">;\r\n    function baselineCache<File, T>(\r\n        baselines: string[],\r\n        cacheType: string,\r\n        file: File,\r\n        forEach: (\r\n            callback: (resolvedModule: T, moduleName: string, mode: ts.ResolutionMode) => void,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 754 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 111,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const axIndex = \"/home/src/workspaces/project/node_modules/a/node_modules/x/index.d.ts\";\r\n        const axPackage = \"/home/src/workspaces/project/node_modules/a/node_modules/x/package.json\";\r\n        const bxIndex = \"/home/src/workspaces/project/node_modules/b/node_modules/x/index.d.ts\";\r\n        const bxPackage = \"/home/src/workspaces/project/node_modules/b/node_modules/x/package.json\";\r\n        const root = \"/home/src/workspaces/project/a.ts\";\r\n        const compilerOptions = { target, moduleResolution: ts.ModuleResolutionKind.Node10 };\r\n        function createRedirectProgram(useGetSourceFileByPath: boolean, options?: { bText: string; bVersion: string; }): ProgramWithSourceTexts {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const files = [\r\n            { name: \"a1.ts\", text: SourceText.New(\"\", \"\", \"let x = 1;\") },\r\n            { name: \"a2.ts\", text: SourceText.New(\"\", \"\", \"let x = 1;\") },\r\n            { name: \"b1.ts\", text: SourceText.New(\"\", \"export class B { x: number; }\", \"\") },\r\n            { name: \"b2.ts\", text: SourceText.New(\"\", \"export class B { x: number; }\", \"\") },\r\n            { name: \"node_modules/@types/typerefs1/index.d.ts\", text: SourceText.New(\"\", \"\", \"declare let z: string;\") },\r\n            { name: \"node_modules/@types/typerefs2/index.d.ts\", text: SourceText.New(\"\", \"\", \"declare let z: string;\") },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyRedirects",
            "complexity": 1,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function verifyRedirects(useGetSourceFileByPath: boolean) {\r\n            it(\"No changes -> redirect not broken\", () => {\r\n                const program1 = createRedirectProgram(useGetSourceFileByPath);\r\n                const baselines: string[] = [];\r\n                baselineProgram(baselines, program1);\r\n                const program2 = updateRedirectProgram(program1, files => {\r\n                    updateProgramText(files, root, \"const x = 1;\");\r\n                }, useGetSourceFileByPath);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 84,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const files = [\r\n            {\r\n                name: \"/home/src/workspaces/project/src/project/src/struct.d.ts\",\r\n                text: SourceText.New(\r\n                    \"\",\r\n                    \"\",\r\n                    Utils.dedent`\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/semver.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 12,
            "lineCount": 923,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"Version\", () => {\r\n        function assertVersion(version: ts.Version, [major, minor, patch, prerelease, build]: [number, number, number, string[]?, string[]?]) {\r\n            assert.strictEqual(version.major, major);\r\n            assert.strictEqual(version.minor, minor);\r\n            assert.strictEqual(version.patch, patch);\r\n            assert.deepEqual(version.prerelease, prerelease || ts.emptyArray);\r\n            assert.deepEqual(version.build, build || ts.emptyArray);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 923 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 10,
            "lineCount": 825,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"major wildcard types treated the same\", () => {\r\n            const versionStrings = [\r\n                \"\",\r\n                \"*\",\r\n                \"*.*\",\r\n                \"*.*.*\",\r\n                \"x\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 825 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 96,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function assertVersion(version: ts.Version, [major, minor, patch, prerelease, build]: [number, number, number, string[]?, string[]?]) {\r\n            assert.strictEqual(version.major, major);\r\n            assert.strictEqual(version.minor, minor);\r\n            assert.strictEqual(version.patch, patch);\r\n            assert.deepEqual(version.prerelease, prerelease || ts.emptyArray);\r\n            assert.deepEqual(version.build, build || ts.emptyArray);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 62,
            "parameterCount": 0,
            "snippet": "() => {\r\n            assert.strictEqual(new ts.Version(\"1.0.0\").compareTo(new ts.Version(\"2.0.0\")), ts.Comparison.LessThan);\r\n            assert.strictEqual(new ts.Version(\"1.0.0\").compareTo(new ts.Version(\"1.1.0\")), ts.Comparison.LessThan);\r\n            assert.strictEqual(new ts.Version(\"1.0.0\").compareTo(new ts.Version(\"1.0.1\")), ts.Comparison.LessThan);\r\n            assert.strictEqual(new ts.Version(\"2.0.0\").compareTo(new ts.Version(\"1.0.0\")), ts.Comparison.GreaterThan);\r\n            assert.strictEqual(new ts.Version(\"1.1.0\").compareTo(new ts.Version(\"1.0.0\")), ts.Comparison.GreaterThan);\r\n            assert.strictEqual(new ts.Version(\"1.0.1\").compareTo(new ts.Version(\"1.0.0\")), ts.Comparison.GreaterThan);\r\n            assert.strictEqual(new ts.Version(\"1.0.0\").compareTo(new ts.Version(\"1.0.0\")), ts.Comparison.EqualTo);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/transform.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 24,
            "lineCount": 742,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function replaceUndefinedWithVoid0(context: ts.TransformationContext) {\r\n        const previousOnSubstituteNode = context.onSubstituteNode;\r\n        context.enableSubstitution(ts.SyntaxKind.Identifier);\r\n        context.onSubstituteNode = (hint, node) => {\r\n            node = previousOnSubstituteNode(hint, node);\r\n            if (hint === ts.EmitHint.Expression && ts.isIdentifier(node) && node.escapedText === \"undefined\") {\r\n                node = ts.factory.createPartiallyEmittedExpression(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 742 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/formatting/formatting.ts",
        "criticalFunctions": [
          {
            "name": "formatSpanWorker",
            "complexity": 197,
            "lineCount": 877,
            "parameterCount": 9,
            "snippet": "function formatSpanWorker(\r\n    originalRange: TextRange,\r\n    enclosingNode: Node,\r\n    initialIndentation: number,\r\n    delta: number,\r\n    formattingScanner: FormattingScanner,\r\n    { options, getRules, host }: FormatContext,\r\n    requestKind: FormattingRequestKind,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 197 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 877 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processNode",
            "complexity": 57,
            "lineCount": 275,
            "parameterCount": 6,
            "snippet": "function processNode(node: Node, contextNode: Node, nodeStartLine: number, undecoratedNodeStartLine: number, indentation: number, delta: number) {\r\n        if (!rangeOverlapsWithStartEnd(originalRange, node.getStart(sourceFile), node.getEnd())) {\r\n            return;\r\n        }\r\n        const nodeDynamicIndentation = getDynamicIndentation(node, nodeStartLine, indentation, delta);\r\n        let childContextNode = contextNode;\r\n        forEachChild(\r\n            node,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 57 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 275 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getOpenTokenForList",
            "complexity": 31,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "function getOpenTokenForList(node: Node, list: readonly Node[]) {\r\n    switch (node.kind) {\r\n        case SyntaxKind.Constructor:\r\n        case SyntaxKind.FunctionDeclaration:\r\n        case SyntaxKind.FunctionExpression:\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.MethodSignature:\r\n        case SyntaxKind.ArrowFunction:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDynamicIndentation",
            "complexity": 27,
            "lineCount": 73,
            "parameterCount": 4,
            "snippet": "function getDynamicIndentation(node: Node, nodeStartLine: number, indentation: number, delta: number): DynamicIndentation {\r\n        return {\r\n            getIndentationForComment: (kind, tokenIndentation, container) => {\r\n                switch (kind) {\r\n                    case SyntaxKind.CloseBraceToken:\r\n                    case SyntaxKind.CloseBracketToken:\r\n                    case SyntaxKind.CloseParenToken:\r\n                        return indentation + getDelta(container);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processChildNode",
            "complexity": 23,
            "lineCount": 92,
            "parameterCount": 8,
            "snippet": "function processChildNode(\r\n            child: Node,\r\n            inheritedIndentation: number,\r\n            parent: Node,\r\n            parentDynamicIndentation: DynamicIndentation,\r\n            parentStartLine: number,\r\n            undecoratedParentStartLine: number,\r\n            isListItem: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/formatting/formattingScanner.ts",
        "criticalFunctions": [
          {
            "name": "getFormattingScanner",
            "complexity": 52,
            "lineCount": 281,
            "parameterCount": 5,
            "snippet": "export function getFormattingScanner<T>(text: string, languageVariant: LanguageVariant, startPos: number, endPos: number, cb: (scanner: FormattingScanner) => T): T {\r\n    const scanner = languageVariant === LanguageVariant.JSX ? jsxScanner : standardScanner;\r\n    scanner.setText(text);\r\n    scanner.resetTokenState(startPos);\r\n    let wasNewLine = true;\r\n    let leadingTrivia: TextRangeWithTriviaKind[] | undefined;\r\n    let trailingTrivia: TextRangeWithTriviaKind[] | undefined;\r\n    let savedPos: number;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 52 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 281 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "readTokenInfo",
            "complexity": 15,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function readTokenInfo(n: Node): TokenInfo {\r\n        Debug.assert(isOnToken());\r\n        const expectedScanAction = shouldRescanGreaterThanToken(n) ? ScanAction.RescanGreaterThanToken :\r\n            shouldRescanSlashToken(n) ? ScanAction.RescanSlashToken :\r\n            shouldRescanTemplateToken(n) ? ScanAction.RescanTemplateToken :\r\n            shouldRescanJsxIdentifier(n) ? ScanAction.RescanJsxIdentifier :\r\n            shouldRescanJsxText(n) ? ScanAction.RescanJsxText :\r\n            shouldRescanJsxAttributeValue(n) ? ScanAction.RescanJsxAttributeValue :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/formatting/rules.ts",
        "criticalFunctions": [
          {
            "name": "isBinaryOpContext",
            "complexity": 28,
            "lineCount": 48,
            "parameterCount": 1,
            "snippet": "function isBinaryOpContext(context: FormattingContext): boolean {\r\n    switch (context.contextNode.kind) {\r\n        case SyntaxKind.BinaryExpression:\r\n            return (context.contextNode as BinaryExpression).operatorToken.kind !== SyntaxKind.CommaToken;\r\n        case SyntaxKind.ConditionalExpression:\r\n        case SyntaxKind.ConditionalType:\r\n        case SyntaxKind.AsExpression:\r\n        case SyntaxKind.ExportSpecifier:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "isSemicolonDeletionContext",
            "complexity": 28,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "function isSemicolonDeletionContext(context: FormattingContext): boolean {\r\n    let nextTokenKind = context.nextTokenSpan.kind;\r\n    let nextTokenStart = context.nextTokenSpan.pos;\r\n    if (isTrivia(nextTokenKind)) {\r\n        const nextRealToken = context.nextTokenParent === context.currentTokenParent\r\n            ? findNextToken(\r\n                context.currentTokenParent,\r\n                findAncestor(context.currentTokenParent, a => !a.parent)!,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isTypeArgumentOrParameterOrAssertion",
            "complexity": 19,
            "lineCount": 26,
            "parameterCount": 2,
            "snippet": "function isTypeArgumentOrParameterOrAssertion(token: TextRangeWithKind, parent: Node): boolean {\r\n    if (token.kind !== SyntaxKind.LessThanToken && token.kind !== SyntaxKind.GreaterThanToken) {\r\n        return false;\r\n    }\r\n    switch (parent.kind) {\r\n        case SyntaxKind.TypeReference:\r\n        case SyntaxKind.TypeAssertionExpression:\r\n        case SyntaxKind.TypeAliasDeclaration:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "getAllRules",
            "complexity": 3,
            "lineCount": 379,
            "parameterCount": 0,
            "snippet": "export function getAllRules(): RuleSpec[] {\r\n    const allTokens: SyntaxKind[] = [];\r\n    for (let token = SyntaxKind.FirstToken; token <= SyntaxKind.LastToken; token++) {\r\n        if (token !== SyntaxKind.EndOfFileToken) {\r\n            allTokens.push(token);\r\n        }\r\n    }\r\n    function anyTokenExcept(...tokens: SyntaxKind[]): TokenRange {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 379 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/formatting/rulesMap.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/formatting/smartIndenter.ts",
        "criticalFunctions": [
          {
            "name": "nodeWillIndentChild",
            "complexity": 86,
            "lineCount": 108,
            "parameterCount": 5,
            "snippet": "export function nodeWillIndentChild(settings: FormatCodeSettings, parent: TextRangeWithKind, child: TextRangeWithKind | undefined, sourceFile: SourceFileLike | undefined, indentByDefault: boolean): boolean {\r\n        const childKind = child ? child.kind : SyntaxKind.Unknown;\r\n        switch (parent.kind) {\r\n            case SyntaxKind.ExpressionStatement:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n            case SyntaxKind.EnumDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 86 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getListByRange",
            "complexity": 31,
            "lineCount": 45,
            "parameterCount": 4,
            "snippet": "function getListByRange(start: number, end: number, node: Node, sourceFile: SourceFile): NodeArray<Node> | undefined {\r\n        switch (node.kind) {\r\n            case SyntaxKind.TypeReference:\r\n                return getList((node as TypeReferenceNode).typeArguments);\r\n            case SyntaxKind.ObjectLiteralExpression:\r\n                return getList((node as ObjectLiteralExpression).properties);\r\n            case SyntaxKind.ArrayLiteralExpression:\r\n                return getList((node as ArrayLiteralExpression).elements);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getIndentation",
            "complexity": 19,
            "lineCount": 78,
            "parameterCount": 4,
            "snippet": "export function getIndentation(position: number, sourceFile: SourceFile, options: EditorSettings, assumeNewLineBeforeCloseBrace = false): number {\r\n        if (position > sourceFile.text.length) {\r\n            return getBaseIndentation(options); // past EOF\r\n        }\r\n        if (options.indentStyle === IndentStyle.None) {\r\n            return 0;\r\n        }\r\n        const precedingToken = findPrecedingToken(position, sourceFile, /*startNode*/ undefined, /*excludeJsdoc*/ true);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getIndentationForNodeWorker",
            "complexity": 12,
            "lineCount": 80,
            "parameterCount": 7,
            "snippet": "function getIndentationForNodeWorker(\r\n        current: Node,\r\n        currentStart: LineAndCharacter,\r\n        ignoreActualIndentationRange: TextRange | undefined,\r\n        indentationDelta: number,\r\n        sourceFile: SourceFile,\r\n        isNextChild: boolean,\r\n        options: EditorSettings,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/addOrRemoveBracesToArrowFunction.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/refactors/convertArrowFunctionOrFunctionExpression.ts",
        "criticalFunctions": [
          {
            "name": "getRefactorActionsToConvertFunctionExpressions",
            "complexity": 16,
            "lineCount": 47,
            "parameterCount": 1,
            "snippet": "function getRefactorActionsToConvertFunctionExpressions(context: RefactorContext): readonly ApplicableRefactorInfo[] {\r\n    const { file, startPosition, program, kind } = context;\r\n    const info = getFunctionInfo(file, startPosition, program);\r\n    if (!info) return emptyArray;\r\n    const { selectedVariableDeclaration, func } = info;\r\n    const possibleActions: RefactorActionInfo[] = [];\r\n    const errors: RefactorActionInfo[] = [];\r\n    if (refactorKindBeginsWith(toNamedFunctionAction.kind, kind)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/refactors/convertExport.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 32,
            "lineCount": 57,
            "parameterCount": 2,
            "snippet": "function getInfo(context: RefactorContext, considerPartialSpans = true): ExportInfo | RefactorErrorInfo | undefined {\r\n    const { file, program } = context;\r\n    const span = getRefactorContextSpan(context);\r\n    const token = getTokenAtPosition(file, span.start);\r\n    const exportNode = !!(token.parent && getSyntacticModifierFlags(token.parent) & ModifierFlags.Export) && considerPartialSpans ? token.parent : getParentNodeInSpan(token, file, span);\r\n    if (!exportNode || (!isSourceFile(exportNode.parent) && !(isModuleBlock(exportNode.parent) && isAmbientModule(exportNode.parent.parent)))) {\r\n        return { error: getLocaleSpecificMessage(Diagnostics.Could_not_find_export_statement) };\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/refactors/convertImport.ts",
        "criticalFunctions": [
          {
            "name": "doChangeNamedToNamespaceOrDefault",
            "complexity": 16,
            "lineCount": 67,
            "parameterCount": 5,
            "snippet": "export function doChangeNamedToNamespaceOrDefault(sourceFile: SourceFile, program: Program, changes: textChanges.ChangeTracker, toConvert: NamedImports, shouldUseDefault: boolean = getShouldUseDefault(program, toConvert.parent)): void {\r\n    const checker = program.getTypeChecker();\r\n    const importDecl = toConvert.parent.parent;\r\n    const { moduleSpecifier } = importDecl;\r\n    const toConvertSymbols = new Set<Symbol>();\r\n    toConvert.elements.forEach(namedImport => {\r\n        const symbol = checker.getSymbolAtLocation(namedImport.name);\r\n        if (symbol) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/convertOverloadListToSingleSignature.ts",
        "criticalFunctions": [
          {
            "name": "getRefactorEditsToConvertOverloadsToOneSignature",
            "complexity": 16,
            "lineCount": 142,
            "parameterCount": 1,
            "snippet": "function getRefactorEditsToConvertOverloadsToOneSignature(context: RefactorContext): RefactorEditInfo | undefined {\r\n    const { file, startPosition, program } = context;\r\n    const signatureDecls = getConvertableOverloadListAtPosition(file, startPosition, program);\r\n    if (!signatureDecls) return undefined;\r\n    const checker = program.getTypeChecker();\r\n    const lastDeclaration = signatureDecls[signatureDecls.length - 1];\r\n    let updated = lastDeclaration;\r\n    switch (lastDeclaration.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 142 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/refactors/convertParamsToDestructuredObject.ts",
        "criticalFunctions": [
          {
            "name": "getGroupedReferences",
            "complexity": 24,
            "lineCount": 124,
            "parameterCount": 3,
            "snippet": "function getGroupedReferences(functionDeclaration: ValidFunctionDeclaration, program: Program, cancellationToken: CancellationToken): GroupedReferences {\r\n    const functionNames = getFunctionNames(functionDeclaration);\r\n    const classNames = isConstructorDeclaration(functionDeclaration) ? getClassNames(functionDeclaration) : [];\r\n    const names = deduplicate([...functionNames, ...classNames], equateValues);\r\n    const checker = program.getTypeChecker();\r\n    const references = flatMap(names, /*mapfn*/ name => FindAllReferences.getReferenceEntriesForNode(-1, name, program, program.getSourceFiles(), cancellationToken));\r\n    const groupedReferences = groupReferences(references);\r\n    if (!every(groupedReferences.declarations, /*callback*/ decl => contains(names, decl))) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 124 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "groupReferences",
            "complexity": 21,
            "lineCount": 103,
            "parameterCount": 1,
            "snippet": "function groupReferences(referenceEntries: readonly FindAllReferences.Entry[]): GroupedReferences {\r\n        const classReferences: ClassReferences = { accessExpressions: [], typeUsages: [] };\r\n        const groupedReferences: GroupedReferences = { functionCalls: [], declarations: [], classReferences, valid: true };\r\n        const functionSymbols = map(functionNames, getSymbolTargetAtLocation);\r\n        const classSymbols = map(classNames, getSymbolTargetAtLocation);\r\n        const isConstructor = isConstructorDeclaration(functionDeclaration);\r\n        const contextualSymbols = map(functionNames, name => getSymbolForContextualType(name, checker));\r\n        for (const entry of referenceEntries) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "entryToFunctionCall",
            "complexity": 18,
            "lineCount": 37,
            "parameterCount": 1,
            "snippet": "function entryToFunctionCall(entry: FindAllReferences.NodeEntry): CallExpression | NewExpression | undefined {\r\n    if (entry.node.parent) {\r\n        const functionReference = entry.node;\r\n        const parent = functionReference.parent;\r\n        switch (parent.kind) {\r\n            case SyntaxKind.CallExpression:\r\n            case SyntaxKind.NewExpression:\r\n                const callOrNewExpression = tryCast(parent, isCallOrNewExpression);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createNewParameters",
            "complexity": 15,
            "lineCount": 99,
            "parameterCount": 3,
            "snippet": "function createNewParameters(functionDeclaration: ValidFunctionDeclaration | ValidMethodSignature, program: Program, host: LanguageServiceHost): NodeArray<ParameterDeclaration> {\r\n    const checker = program.getTypeChecker();\r\n    const refactorableParameters = getRefactorableParameters(functionDeclaration.parameters);\r\n    const bindingElements = map(refactorableParameters, createBindingElementFromParameterDeclaration);\r\n    const objectParameterName = factory.createObjectBindingPattern(bindingElements);\r\n    const objectParameterType = createParameterTypeNode(refactorableParameters);\r\n    let objectInitializer: Expression | undefined;\r\n    if (every(refactorableParameters, isOptionalParameter)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/convertStringOrTemplateLiteral.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/convertToOptionalChainExpression.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/extractSymbol.ts",
        "criticalFunctions": [
          {
            "name": "getRangeToExtract",
            "complexity": 104,
            "lineCount": 353,
            "parameterCount": 3,
            "snippet": "export function getRangeToExtract(sourceFile: SourceFile, span: TextSpan, invoked = true): RangeToExtract {\r\n    const { length } = span;\r\n    if (length === 0 && !invoked) {\r\n        return { errors: [createFileDiagnostic(sourceFile, span.start, length, Messages.cannotExtractEmpty)] };\r\n    }\r\n    const cursorRequest = length === 0 && invoked;\r\n    const startToken = findFirstNonJsxWhitespaceToken(sourceFile, span.start);\r\n    const endToken = findTokenOnLeftOfPosition(sourceFile, textSpanEnd(span));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 104 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 353 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectReadsAndWrites",
            "complexity": 99,
            "lineCount": 371,
            "parameterCount": 6,
            "snippet": "function collectReadsAndWrites(\r\n    targetRange: TargetRange,\r\n    scopes: Scope[],\r\n    enclosingTextRange: TextRange,\r\n    sourceFile: SourceFile,\r\n    checker: TypeChecker,\r\n    cancellationToken: CancellationToken,\r\n): ReadsAndWrites {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 99 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 371 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkNode",
            "complexity": 61,
            "lineCount": 200,
            "parameterCount": 1,
            "snippet": "function checkNode(nodeToCheck: Node): Diagnostic[] | undefined {\r\n        const enum PermittedJumps {\r\n            None = 0,\r\n            Break = 1 << 0,\r\n            Continue = 1 << 1,\r\n            Return = 1 << 2,\r\n        }\r\n        Debug.assert(nodeToCheck.pos <= nodeToCheck.end, \"This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809 (1)\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 61 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 200 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visit",
            "complexity": 50,
            "lineCount": 152,
            "parameterCount": 1,
            "snippet": "function visit(node: Node) {\r\n            if (errors) {\r\n                return true;\r\n            }\r\n            if (isDeclaration(node)) {\r\n                const declaringNode = (node.kind === SyntaxKind.VariableDeclaration) ? node.parent.parent : node;\r\n                if (hasSyntacticModifier(declaringNode, ModifierFlags.Export)) {\r\n                    (errors ||= []).push(createDiagnosticForNode(node, Messages.cannotExtractExportedEntity));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 152 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "extractFunctionInScope",
            "complexity": 50,
            "lineCount": 326,
            "parameterCount": 6,
            "snippet": "function extractFunctionInScope(\r\n    node: Statement | Expression | Block,\r\n    scope: Scope,\r\n    { usages: usagesInScope, typeParameterUsages, substitutions }: ScopeUsages,\r\n    exposedVariableDeclarations: readonly VariableDeclaration[],\r\n    range: TargetRange,\r\n    context: RefactorContext,\r\n): RefactorEditInfo {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 326 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/extractType.ts",
        "criticalFunctions": [
          {
            "name": "collectTypeParameters",
            "complexity": 33,
            "lineCount": 63,
            "parameterCount": 4,
            "snippet": "function collectTypeParameters(checker: TypeChecker, selection: TypeNode | TypeNode[], enclosingNode: Node, file: SourceFile): { typeParameters: TypeParameterDeclaration[] | undefined; affectedTextRange: TextRange | undefined; } {\r\n    const result: TypeParameterDeclaration[] = [];\r\n    const selectionArray = toArray(selection);\r\n    const selectionRange = { pos: selectionArray[0].getStart(file), end: selectionArray[selectionArray.length - 1].end };\r\n    for (const t of selectionArray) {\r\n        if (visitor(t)) return { typeParameters: undefined, affectedTextRange: undefined };\r\n    }\r\n    return { typeParameters: result, affectedTextRange: selectionRange };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 31,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): true | undefined {\r\n        if (isTypeReferenceNode(node)) {\r\n            if (isIdentifier(node.typeName)) {\r\n                const typeName = node.typeName;\r\n                const symbol = checker.resolveName(typeName.text, typeName, SymbolFlags.TypeParameter, /*excludeGlobals*/ true);\r\n                for (const decl of symbol?.declarations || emptyArray) {\r\n                    if (isTypeParameterDeclaration(decl) && decl.getSourceFile() === file) {\r\n                        if (decl.name.escapedText === typeName.escapedText && rangeContainsSkipTrivia(decl, selectionRange, file)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/refactors/inferFunctionReturnType.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 20,
            "lineCount": 46,
            "parameterCount": 1,
            "snippet": "function getInfo(context: RefactorContext): FunctionInfo | RefactorErrorInfo | undefined {\r\n    if (isInJSFile(context.file) || !refactorKindBeginsWith(inferReturnTypeAction.kind, context.kind)) return;\r\n    const token = getTouchingPropertyName(context.file, context.startPosition);\r\n    const declaration = findAncestor(token, n =>\r\n        isBlock(n) || n.parent && isArrowFunction(n.parent) && (n.kind === SyntaxKind.EqualsGreaterThanToken || n.parent.body === n) ? \"quit\" :\r\n            isConvertibleDeclaration(n)) as ConvertibleDeclaration | undefined;\r\n    if (!declaration || !declaration.body || declaration.type) {\r\n        return { error: getLocaleSpecificMessage(Diagnostics.Return_type_must_be_inferred_from_a_function) };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/refactors/inlineVariable.ts",
        "criticalFunctions": [
          {
            "name": "getInliningInfo",
            "complexity": 16,
            "lineCount": 54,
            "parameterCount": 4,
            "snippet": "function getInliningInfo(file: SourceFile, startPosition: number, tryWithReferenceToken: boolean, program: Program): InliningInfo | RefactorErrorInfo | undefined {\r\n    const checker = program.getTypeChecker();\r\n    const token = getTouchingPropertyName(file, startPosition);\r\n    const parent = token.parent;\r\n    if (!isIdentifier(token)) {\r\n        return undefined;\r\n    }\r\n    if (isInitializedVariable(parent) && isVariableDeclarationInVariableStatement(parent) && isIdentifier(parent.name)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/refactors/moveToFile.ts",
        "criticalFunctions": [
          {
            "name": "getUsageInfo",
            "complexity": 32,
            "lineCount": 79,
            "parameterCount": 5,
            "snippet": "export function getUsageInfo(oldFile: SourceFile, toMove: readonly Statement[], checker: TypeChecker, existingTargetLocals: ReadonlySet<Symbol> = new Set(), enclosingRange?: TextRange): UsageInfo {\r\n    const movedSymbols = new Set<Symbol>();\r\n    const oldImportsNeededByTargetFile = new Map<Symbol, [/*isValidTypeOnlyUseSite*/ boolean, codefix.ImportOrRequireAliasDeclaration | undefined]>();\r\n    const targetFileImportsFromOldFile = new Map<Symbol, /*isValidTypeOnlyUseSite*/ boolean>();\r\n    const jsxNamespaceSymbol = getJsxNamespaceSymbol(containsJsx(toMove));\r\n    if (jsxNamespaceSymbol) { // Might not exist (e.g. in non-compiling code)\r\n        oldImportsNeededByTargetFile.set(jsxNamespaceSymbol, [false, tryCast(jsxNamespaceSymbol.declarations?.[0], (d): d is codefix.ImportOrRequireAliasDeclaration => isImportSpecifier(d) || isImportClause(d) || isNamespaceImport(d) || isImportEqualsDeclaration(d) || isBindingElement(d) || isVariableDeclaration(d))]);\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "moveStatementsToTargetFile",
            "complexity": 21,
            "lineCount": 47,
            "parameterCount": 5,
            "snippet": "function moveStatementsToTargetFile(changes: textChanges.ChangeTracker, program: Program, statements: readonly Statement[], targetFile: SourceFile, toMove: ToMove) {\r\n    const removedExports = new Set<ExportDeclaration>();\r\n    const targetExports = targetFile.symbol?.exports;\r\n    if (targetExports) {\r\n        const checker = program.getTypeChecker();\r\n        const targetToSourceExports = new Map<ExportDeclaration, Set<TopLevelDeclaration>>();\r\n        for (const node of toMove.all) {\r\n            if (isTopLevelDeclarationStatement(node) && hasSyntacticModifier(node, ModifierFlags.Export)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getExistingLocals",
            "complexity": 17,
            "lineCount": 35,
            "parameterCount": 3,
            "snippet": "export function getExistingLocals(sourceFile: SourceFile, statements: readonly Statement[], checker: TypeChecker): Set<Symbol> {\r\n    const existingLocals = new Set<Symbol>();\r\n    for (const moduleSpecifier of sourceFile.imports) {\r\n        const declaration = importFromModuleSpecifier(moduleSpecifier);\r\n        if (\r\n            isImportDeclaration(declaration) && declaration.importClause &&\r\n            declaration.importClause.namedBindings && isNamedImports(declaration.importClause.namedBindings)\r\n        ) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "updateImportsInOtherFiles",
            "complexity": 10,
            "lineCount": 40,
            "parameterCount": 7,
            "snippet": "function updateImportsInOtherFiles(\r\n    changes: textChanges.ChangeTracker,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n    oldFile: SourceFile,\r\n    movedSymbols: Set<Symbol>,\r\n    targetFileName: string,\r\n    quotePreference: QuotePreference,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNewStatementsAndRemoveFromOldFile",
            "complexity": 7,
            "lineCount": 40,
            "parameterCount": 10,
            "snippet": "export function getNewStatementsAndRemoveFromOldFile(\r\n    oldFile: SourceFile,\r\n    targetFile: SourceFile | FutureSourceFile,\r\n    usage: UsageInfo,\r\n    changes: textChanges.ChangeTracker,\r\n    toMove: ToMove,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/addMissingAsync.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/addMissingAwait.ts",
        "criticalFunctions": [
          {
            "name": "makeChange",
            "complexity": 29,
            "lineCount": 57,
            "parameterCount": 6,
            "snippet": "function makeChange(changeTracker: textChanges.ChangeTracker, errorCode: number, sourceFile: SourceFile, checker: TypeChecker, insertionSite: Expression, fixedDeclarations?: Set<number>) {\r\n    if (isForOfStatement(insertionSite.parent) && !insertionSite.parent.awaitModifier) {\r\n        const exprType = checker.getTypeAtLocation(insertionSite);\r\n        const asyncIter = checker.getAnyAsyncIterableType();\r\n        if (asyncIter && checker.isTypeAssignableTo(exprType, asyncIter)) {\r\n            const forOf = insertionSite.parent;\r\n            changeTracker.replaceNode(sourceFile, forOf, factory.updateForOfStatement(forOf, factory.createToken(SyntaxKind.AwaitKeyword), forOf.initializer, forOf.expression, forOf.statement));\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "findAwaitableInitializers",
            "complexity": 17,
            "lineCount": 56,
            "parameterCount": 5,
            "snippet": "function findAwaitableInitializers(\r\n    expression: Node,\r\n    sourceFile: SourceFile,\r\n    cancellationToken: CancellationToken,\r\n    program: Program,\r\n    checker: TypeChecker,\r\n): AwaitableInitializers | undefined {\r\n    const identifiers = getIdentifiersFromErrorSpanExpression(expression, checker);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/addMissingConst.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/addMissingInvocationForDecorator.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/addOptionalPropertyUndefined.ts",
        "criticalFunctions": [
          {
            "name": "getSourceTarget",
            "complexity": 18,
            "lineCount": 35,
            "parameterCount": 2,
            "snippet": "function getSourceTarget(errorNode: Node | undefined, checker: TypeChecker): { source: Node; target: Node; } | undefined {\r\n    if (!errorNode) {\r\n        return undefined;\r\n    }\r\n    else if (isBinaryExpression(errorNode.parent) && errorNode.parent.operatorToken.kind === SyntaxKind.EqualsToken) {\r\n        return { source: errorNode.parent.right, target: errorNode.parent.left };\r\n    }\r\n    else if (isVariableDeclaration(errorNode.parent) && errorNode.parent.initializer) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/annotateWithTypeFromJSDoc.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/convertFunctionToEs6Class.ts",
        "criticalFunctions": [
          {
            "name": "doChange",
            "complexity": 63,
            "lineCount": 230,
            "parameterCount": 6,
            "snippet": "function doChange(changes: textChanges.ChangeTracker, sourceFile: SourceFile, position: number, checker: TypeChecker, preferences: UserPreferences, compilerOptions: CompilerOptions): void {\r\n    const ctorSymbol = checker.getSymbolAtLocation(getTokenAtPosition(sourceFile, position))!;\r\n    if (!ctorSymbol || !ctorSymbol.valueDeclaration || !(ctorSymbol.flags & (SymbolFlags.Function | SymbolFlags.Variable))) {\r\n        return undefined;\r\n    }\r\n    const ctorDeclaration = ctorSymbol.valueDeclaration;\r\n    if (isFunctionDeclaration(ctorDeclaration) || isFunctionExpression(ctorDeclaration)) {\r\n        changes.replaceNode(sourceFile, ctorDeclaration, createClassFromFunction(ctorDeclaration));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 63 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 230 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createClassElementsFromSymbol",
            "complexity": 49,
            "lineCount": 173,
            "parameterCount": 1,
            "snippet": "function createClassElementsFromSymbol(symbol: Symbol) {\r\n        const memberElements: ClassElement[] = [];\r\n        if (symbol.exports) {\r\n            symbol.exports.forEach(member => {\r\n                if (member.name === \"prototype\" && member.declarations) {\r\n                    const firstDeclaration = member.declarations[0];\r\n                    if (\r\n                        member.declarations.length === 1 &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 49 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 173 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createClassElement",
            "complexity": 25,
            "lineCount": 105,
            "parameterCount": 3,
            "snippet": "function createClassElement(symbol: Symbol, modifiers: Modifier[] | undefined, members: ClassElement[]): void {\r\n            if (!(symbol.flags & SymbolFlags.Method) && !(symbol.flags & SymbolFlags.ObjectLiteral)) {\r\n                return;\r\n            }\r\n            const memberDeclaration = symbol.valueDeclaration as AccessExpression | ObjectLiteralExpression;\r\n            const assignmentBinaryExpression = memberDeclaration.parent as BinaryExpression;\r\n            const assignmentExpr = assignmentBinaryExpression.right;\r\n            if (!shouldConvertDeclaration(memberDeclaration, assignmentExpr)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/convertToAsyncFunction.ts",
        "criticalFunctions": [
          {
            "name": "renameCollidingVarNames",
            "complexity": 27,
            "lineCount": 73,
            "parameterCount": 3,
            "snippet": "function renameCollidingVarNames(nodeToRename: FunctionLikeDeclaration, checker: TypeChecker, synthNamesMap: Map<string, SynthIdentifier>): FunctionLikeDeclaration {\r\n    const identsToRenameMap = new Map<string, Identifier>(); // key is the symbol id\r\n    const collidingSymbolMap = createMultiMap<string, Symbol>();\r\n    forEachChild(nodeToRename, function visit(node: Node) {\r\n        if (!isIdentifier(node)) {\r\n            forEachChild(node, visit);\r\n            return;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformCallbackArgument",
            "complexity": 27,
            "lineCount": 139,
            "parameterCount": 6,
            "snippet": "function transformCallbackArgument(func: Expression, hasContinuation: boolean, continuationArgName: SynthBindingName | undefined, inputArgName: SynthBindingName | undefined, parent: PromiseReturningCallExpression<\"then\" | \"catch\" | \"finally\">, transformer: Transformer): readonly Statement[] {\r\n    switch (func.kind) {\r\n        case SyntaxKind.NullKeyword:\r\n            break;\r\n        case SyntaxKind.PropertyAccessExpression:\r\n        case SyntaxKind.Identifier: // identifier includes undefined\r\n            if (!inputArgName) {\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 139 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "convertToAsyncFunction",
            "complexity": 16,
            "lineCount": 58,
            "parameterCount": 4,
            "snippet": "function convertToAsyncFunction(changes: textChanges.ChangeTracker, sourceFile: SourceFile, position: number, checker: TypeChecker): void {\r\n    const tokenAtPosition = getTokenAtPosition(sourceFile, position);\r\n    let functionToConvert: FunctionLikeDeclaration | undefined;\r\n    if (\r\n        isIdentifier(tokenAtPosition) && isVariableDeclaration(tokenAtPosition.parent) &&\r\n        tokenAtPosition.parent.initializer && isFunctionLikeDeclaration(tokenAtPosition.parent.initializer)\r\n    ) {\r\n        functionToConvert = tokenAtPosition.parent.initializer;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visit",
            "complexity": 16,
            "lineCount": 47,
            "parameterCount": 1,
            "snippet": "function visit(node: Node) {\r\n        if (!isIdentifier(node)) {\r\n            forEachChild(node, visit);\r\n            return;\r\n        }\r\n        const symbol = checker.getSymbolAtLocation(node);\r\n        if (symbol) {\r\n            const type = checker.getTypeAtLocation(node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getArgBindingName",
            "complexity": 14,
            "lineCount": 55,
            "parameterCount": 2,
            "snippet": "function getArgBindingName(funcNode: Expression, transformer: Transformer): SynthBindingName | undefined {\r\n    const types: Type[] = [];\r\n    let name: SynthBindingName | undefined;\r\n    if (isFunctionLikeDeclaration(funcNode)) {\r\n        if (funcNode.parameters.length > 0) {\r\n            const param = funcNode.parameters[0].name;\r\n            name = getMappedBindingNameOrDefault(param);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/convertToEsModule.ts",
        "criticalFunctions": [
          {
            "name": "convertVariableStatement",
            "complexity": 8,
            "lineCount": 44,
            "parameterCount": 7,
            "snippet": "function convertVariableStatement(\r\n    sourceFile: SourceFile,\r\n    statement: VariableStatement,\r\n    changes: textChanges.ChangeTracker,\r\n    checker: TypeChecker,\r\n    identifiers: Identifiers,\r\n    target: ScriptTarget,\r\n    quotePreference: QuotePreference,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "convertStatement",
            "complexity": 7,
            "lineCount": 36,
            "parameterCount": 9,
            "snippet": "function convertStatement(\r\n    sourceFile: SourceFile,\r\n    statement: Statement,\r\n    checker: TypeChecker,\r\n    changes: textChanges.ChangeTracker,\r\n    identifiers: Identifiers,\r\n    target: ScriptTarget,\r\n    exports: ExportRenames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/convertToTypeOnlyImport.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/convertTypedefToType.ts",
        "criticalFunctions": [
          {
            "name": "doChange",
            "complexity": 11,
            "lineCount": 54,
            "parameterCount": 5,
            "snippet": "function doChange(\r\n    changes: textChanges.ChangeTracker,\r\n    node: Node,\r\n    sourceFile: SourceFile,\r\n    newLine: string,\r\n    fixAll = false,\r\n) {\r\n    if (!isJSDocTypedefTag(node)) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/fixAddMissingConstraint.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixAddMissingMember.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 70,
            "lineCount": 111,
            "parameterCount": 5,
            "snippet": "function getInfo(sourceFile: SourceFile, tokenPos: number, errorCode: number, checker: TypeChecker, program: Program): Info | undefined {\r\n    const token = getTokenAtPosition(sourceFile, tokenPos);\r\n    const parent = token.parent;\r\n    if (errorCode === Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1.code) {\r\n        if (!(token.kind === SyntaxKind.OpenBraceToken && isObjectLiteralExpression(parent) && isCallExpression(parent.parent))) return undefined;\r\n        const argIndex = findIndex(parent.parent.arguments, arg => arg === parent);\r\n        if (argIndex < 0) return undefined;\r\n        const signature = checker.getResolvedSignature(parent.parent);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 70 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryGetValueFromType",
            "complexity": 31,
            "lineCount": 72,
            "parameterCount": 6,
            "snippet": "function tryGetValueFromType(context: CodeFixContextBase, checker: TypeChecker, importAdder: ImportAdder, quotePreference: QuotePreference, type: Type, enclosingDeclaration: Node | undefined): Expression {\r\n    if (type.flags & TypeFlags.AnyOrUnknown) {\r\n        return createUndefined();\r\n    }\r\n    if (type.flags & (TypeFlags.String | TypeFlags.TemplateLiteral)) {\r\n        return factory.createStringLiteral(\"\", /* isSingleQuote */ quotePreference === QuotePreference.Single);\r\n    }\r\n    if (type.flags & TypeFlags.Number) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getAllCodeActions",
            "complexity": 24,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "context => {\r\n        const { program, fixId } = context;\r\n        const checker = program.getTypeChecker();\r\n        const seen = new Set<string>();\r\n        const typeDeclToMembers = new Map<ClassLikeDeclaration | InterfaceDeclaration | TypeLiteralNode, TypeLikeDeclarationInfo[]>();\r\n        return createCombinedCodeActions(textChanges.ChangeTracker.with(context, changes => {\r\n            eachDiagnostic(context, errorCodes, diag => {\r\n                const info = getInfo(diag.file, diag.start, diag.code, checker, context.program);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 24,
            "lineCount": 59,
            "parameterCount": 1,
            "snippet": "changes => {\r\n            eachDiagnostic(context, errorCodes, diag => {\r\n                const info = getInfo(diag.file, diag.start, diag.code, checker, context.program);\r\n                if (info === undefined) return;\r\n                const nodeId = getNodeId(info.parentDeclaration) + \"#\" + (info.kind === InfoKind.ObjectLiteral ? info.identifier || getNodeId(info.token) : info.token.text);\r\n                if (!addToSeen(seen, nodeId)) return;\r\n                if (fixId === fixMissingFunctionDeclaration && (info.kind === InfoKind.Function || info.kind === InfoKind.Signature)) {\r\n                    addFunctionDeclaration(changes, context, info);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addMethodDeclaration",
            "complexity": 3,
            "lineCount": 21,
            "parameterCount": 7,
            "snippet": "function addMethodDeclaration(\r\n    context: CodeFixContextBase,\r\n    changes: textChanges.ChangeTracker,\r\n    callExpression: CallExpression,\r\n    name: Identifier | PrivateIdentifier,\r\n    modifierFlags: ModifierFlags,\r\n    parentDeclaration: ClassLikeDeclaration | InterfaceDeclaration | TypeLiteralNode,\r\n    sourceFile: SourceFile,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/fixAddMissingParam.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 17,
            "lineCount": 74,
            "parameterCount": 3,
            "snippet": "function getInfo(sourceFile: SourceFile, program: Program, pos: number): SignatureInfo | undefined {\r\n    const token = getTokenAtPosition(sourceFile, pos);\r\n    const callExpression = findAncestor(token, isCallExpression);\r\n    if (callExpression === undefined || length(callExpression.arguments) === 0) {\r\n        return undefined;\r\n    }\r\n    const checker = program.getTypeChecker();\r\n    const type = checker.getTypeAtLocation(callExpression.expression);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixAddVoidToPromise.ts",
        "criticalFunctions": [
          {
            "name": "makeChange",
            "complexity": 20,
            "lineCount": 46,
            "parameterCount": 5,
            "snippet": "function makeChange(changes: textChanges.ChangeTracker, sourceFile: SourceFile, span: TextSpan, program: Program, seen?: Set<ParameterDeclaration>) {\r\n    const node = getTokenAtPosition(sourceFile, span.start);\r\n    if (!isIdentifier(node) || !isCallExpression(node.parent) || node.parent.expression !== node || node.parent.arguments.length !== 0) return;\r\n    const checker = program.getTypeChecker();\r\n    const symbol = checker.getSymbolAtLocation(node);\r\n    const decl = symbol?.valueDeclaration;\r\n    if (!decl || !isParameter(decl) || !isNewExpression(decl.parent.parent)) return;\r\n    if (seen?.has(decl)) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixAwaitInSyncFunction.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixImportNonExportedMember.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixJSDocTypes.ts",
        "criticalFunctions": [
          {
            "name": "isTypeContainer",
            "complexity": 17,
            "lineCount": 25,
            "parameterCount": 1,
            "snippet": "function isTypeContainer(node: Node): node is TypeContainer {\r\n    switch (node.kind) {\r\n        case SyntaxKind.AsExpression:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.ConstructSignature:\r\n        case SyntaxKind.FunctionDeclaration:\r\n        case SyntaxKind.GetAccessor:\r\n        case SyntaxKind.IndexSignature:\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixMissingTypeAnnotationOnExports.ts",
        "criticalFunctions": [
          {
            "name": "withContext",
            "complexity": 160,
            "lineCount": 946,
            "parameterCount": 3,
            "snippet": "function withContext<T>(\r\n    context: CodeFixContext | CodeFixAllContext,\r\n    typePrintMode: TypePrintMode,\r\n    cb: (fixer: Fixer) => T,\r\n): {\r\n    textChanges: FileTextChanges[];\r\n    result: T;\r\n} {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 160 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 946 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addInlineAssertion",
            "complexity": 22,
            "lineCount": 76,
            "parameterCount": 1,
            "snippet": "function addInlineAssertion(span: TextSpan): DiagnosticOrDiagnosticAndArguments | undefined {\r\n        context.cancellationToken.throwIfCancellationRequested();\r\n        const nodeWithDiag = getTokenAtPosition(sourceFile, span.start);\r\n        const expandoFunction = findExpandoFunction(nodeWithDiag);\r\n        if (expandoFunction) return;\r\n        const targetNode = findBestFittingNode(nodeWithDiag, span);\r\n        if (!targetNode || isValueSignatureDeclaration(targetNode) || isValueSignatureDeclaration(targetNode.parent)) return;\r\n        const isExpressionTarget = isExpression(targetNode);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "relativeType",
            "complexity": 17,
            "lineCount": 45,
            "parameterCount": 1,
            "snippet": "function relativeType(node: Node): InferenceResult {\r\n        if (isParameter(node)) {\r\n            return emptyInferenceResult;\r\n        }\r\n        if (isShorthandPropertyAssignment(node)) {\r\n            return {\r\n                typeNode: createTypeOfFromEntityNameExpression(node.name),\r\n                mutatedTarget: false,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "inferType",
            "complexity": 16,
            "lineCount": 61,
            "parameterCount": 2,
            "snippet": "function inferType(node: Node, variableType?: Type | undefined): InferenceResult {\r\n        if (typePrintMode === TypePrintMode.Relative) {\r\n            return relativeType(node);\r\n        }\r\n        let type: Type | undefined;\r\n        if (isValueSignatureDeclaration(node)) {\r\n            const signature = typeChecker.getSignatureFromDeclaration(node);\r\n            if (signature) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformDestructuringPatterns",
            "complexity": 14,
            "lineCount": 130,
            "parameterCount": 1,
            "snippet": "function transformDestructuringPatterns(bindingPattern: BindingPattern): DiagnosticOrDiagnosticAndArguments | undefined {\r\n        const enclosingVariableDeclaration = bindingPattern.parent as VariableDeclaration;\r\n        const enclosingVarStmt = bindingPattern.parent.parent.parent as VariableStatement;\r\n        if (!enclosingVariableDeclaration.initializer) return undefined;\r\n        let baseExpr: ExpressionReverseChain;\r\n        const newNodes: Node[] = [];\r\n        if (!isIdentifier(enclosingVariableDeclaration.initializer)) {\r\n            const tempHolderForReturn = factory.createUniqueName(\"dest\", GeneratedIdentifierFlags.Optimistic);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 130 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/fixNaNEquality.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixOverrideModifier.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixSpelling.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 28,
            "lineCount": 66,
            "parameterCount": 4,
            "snippet": "function getInfo(sourceFile: SourceFile, pos: number, context: CodeFixContextBase, errorCode: number): { node: Node; suggestedSymbol: Symbol; } | undefined {\r\n    const node = getTokenAtPosition(sourceFile, pos);\r\n    const parent = node.parent;\r\n    if (\r\n        (\r\n            errorCode === Diagnostics.No_overload_matches_this_call.code ||\r\n            errorCode === Diagnostics.Type_0_is_not_assignable_to_type_1.code\r\n        ) &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixStrictClassInitialization.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixUnmatchedParameter.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixUnreachableCode.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/fixUnusedIdentifier.ts",
        "criticalFunctions": [
          {
            "name": "mayDeleteParameter",
            "complexity": 26,
            "lineCount": 54,
            "parameterCount": 7,
            "snippet": "function mayDeleteParameter(checker: TypeChecker, sourceFile: SourceFile, parameter: ParameterDeclaration, sourceFiles: readonly SourceFile[], program: Program, cancellationToken: CancellationToken, isFixAll: boolean): boolean {\r\n    const { parent } = parameter;\r\n    switch (parent.kind) {\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.Constructor:\r\n            const index = parent.parameters.indexOf(parameter);\r\n            const referent = isMethodDeclaration(parent) ? parent.name : parent;\r\n            const entries = FindAllReferences.Core.getReferencedSymbolsForNode(parent.pos, referent, program, sourceFiles, cancellationToken);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getAllCodeActions",
            "complexity": 21,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "context => {\r\n        const { sourceFile, program, cancellationToken } = context;\r\n        const checker = program.getTypeChecker();\r\n        const sourceFiles = program.getSourceFiles();\r\n        return codeFixAll(context, errorCodes, (changes, diag) => {\r\n            const token = getTokenAtPosition(sourceFile, diag.start);\r\n            switch (context.fixId) {\r\n                case fixIdPrefix:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 21,
            "lineCount": 57,
            "parameterCount": 2,
            "snippet": "(changes, diag) => {\r\n            const token = getTokenAtPosition(sourceFile, diag.start);\r\n            switch (context.fixId) {\r\n                case fixIdPrefix:\r\n                    tryPrefixDeclaration(changes, diag.code, sourceFile, token);\r\n                    break;\r\n                case fixIdDeleteImports: {\r\n                    const importDecl = tryGetFullImport(token);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCodeActions",
            "complexity": 17,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "getCodeActions(context) {\r\n        const { errorCode, sourceFile, program, cancellationToken } = context;\r\n        const checker = program.getTypeChecker();\r\n        const sourceFiles = program.getSourceFiles();\r\n        const token = getTokenAtPosition(sourceFile, context.span.start);\r\n        if (isJSDocTemplateTag(token)) {\r\n            return [createDeleteFix(textChanges.ChangeTracker.with(context, t => t.delete(sourceFile, token)), Diagnostics.Remove_template_tag)];\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryDeleteParameter",
            "complexity": 10,
            "lineCount": 26,
            "parameterCount": 8,
            "snippet": "function tryDeleteParameter(\r\n    changes: textChanges.ChangeTracker,\r\n    sourceFile: SourceFile,\r\n    parameter: ParameterDeclaration,\r\n    checker: TypeChecker,\r\n    sourceFiles: readonly SourceFile[],\r\n    program: Program,\r\n    cancellationToken: CancellationToken,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/generateAccessors.ts",
        "criticalFunctions": [
          {
            "name": "generateAccessorFromProperty",
            "complexity": 8,
            "lineCount": 51,
            "parameterCount": 6,
            "snippet": "export function generateAccessorFromProperty(file: SourceFile, program: Program, start: number, end: number, context: textChanges.TextChangesContext, _actionName: string): FileTextChanges[] | undefined {\r\n    const fieldInfo = getAccessorConvertiblePropertyAtPosition(file, program, start, end);\r\n    if (!fieldInfo || refactor.isRefactorErrorInfo(fieldInfo)) return undefined;\r\n    const changeTracker = textChanges.ChangeTracker.fromContext(context);\r\n    const { isStatic, isReadonly, fieldName, accessorName, originalName, type, container, declaration } = fieldInfo;\r\n    suppressLeadingAndTrailingTrivia(fieldName);\r\n    suppressLeadingAndTrailingTrivia(accessorName);\r\n    suppressLeadingAndTrailingTrivia(declaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/helpers.ts",
        "criticalFunctions": [
          {
            "name": "addNewNodeForMemberSymbol",
            "complexity": 49,
            "lineCount": 199,
            "parameterCount": 10,
            "snippet": "export function addNewNodeForMemberSymbol(\r\n    symbol: Symbol,\r\n    enclosingDeclaration: ClassLikeDeclaration,\r\n    sourceFile: SourceFile,\r\n    context: TypeConstructionContext,\r\n    preferences: UserPreferences,\r\n    importAdder: ImportAdder | undefined,\r\n    addClassElement: (node: AddNode) => void,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 49 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 199 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSignatureDeclarationFromSignature",
            "complexity": 24,
            "lineCount": 110,
            "parameterCount": 10,
            "snippet": "export function createSignatureDeclarationFromSignature(\r\n    kind:\r\n        | SyntaxKind.MethodDeclaration\r\n        | SyntaxKind.FunctionExpression\r\n        | SyntaxKind.ArrowFunction\r\n        | SyntaxKind.FunctionDeclaration,\r\n    context: TypeConstructionContext,\r\n    quotePreference: QuotePreference,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSignatureDeclarationFromCallExpression",
            "complexity": 16,
            "lineCount": 78,
            "parameterCount": 7,
            "snippet": "export function createSignatureDeclarationFromCallExpression(\r\n    kind: SyntaxKind.MethodDeclaration | SyntaxKind.FunctionDeclaration | SyntaxKind.MethodSignature,\r\n    context: CodeFixContextBase,\r\n    importAdder: ImportAdder,\r\n    call: CallExpression,\r\n    name: Identifier | PrivateIdentifier | string,\r\n    modifierFlags: ModifierFlags,\r\n    contextNode: Node,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "createMethodImplementingSignatures",
            "complexity": 10,
            "lineCount": 54,
            "parameterCount": 9,
            "snippet": "function createMethodImplementingSignatures(\r\n    checker: TypeChecker,\r\n    context: TypeConstructionContext,\r\n    enclosingDeclaration: ClassLikeDeclaration,\r\n    signatures: readonly Signature[],\r\n    name: PropertyName,\r\n    optional: boolean,\r\n    modifiers: readonly Modifier[] | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getArgumentTypesAndTypeParameters",
            "complexity": 9,
            "lineCount": 71,
            "parameterCount": 8,
            "snippet": "function getArgumentTypesAndTypeParameters(checker: TypeChecker, importAdder: ImportAdder, instanceTypes: Type[], contextNode: Node | undefined, scriptTarget: ScriptTarget, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) {\r\n    const argumentTypeNodes: TypeNode[] = [];\r\n    const argumentTypeParameters = new Map<string, ArgumentTypeParameterAndConstraint | undefined>();\r\n    for (let i = 0; i < instanceTypes.length; i += 1) {\r\n        const instanceType = instanceTypes[i];\r\n        if (instanceType.isUnionOrIntersection() && instanceType.types.some(typeContainsTypeParameter)) {\r\n            const synthesizedTypeParameterName = createTypeParameterName(i);\r\n            argumentTypeNodes.push(factory.createTypeReferenceNode(synthesizedTypeParameterName));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/importFixes.ts",
        "criticalFunctions": [
          {
            "name": "createImportAdderWorker",
            "complexity": 103,
            "lineCount": 520,
            "parameterCount": 6,
            "snippet": "function createImportAdderWorker(sourceFile: SourceFile | FutureSourceFile, program: Program, useAutoImportProvider: boolean, preferences: UserPreferences, host: LanguageServiceHost, cancellationToken: CancellationToken | undefined): ImportAdder {\r\n    const compilerOptions = program.getCompilerOptions();\r\n    const addToNamespace: FixUseNamespaceImport[] = [];\r\n    const importType: FixAddJsdocTypeImport[] = [];\r\n    const addToExisting = new Map<ImportClause | ObjectBindingPattern, AddToExistingState>();\r\n    const removeExisting = new Set<ImportOrRequireAliasDeclaration>();\r\n    const verbatimImports = new Set<AnyImportOrRequireStatement | ImportOrRequireAliasDeclaration>();\r\n    type NewImportsKey = `${0 | 1}|${string}`;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 103 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 520 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "writeFixes",
            "complexity": 34,
            "lineCount": 130,
            "parameterCount": 2,
            "snippet": "function writeFixes(changeTracker: textChanges.ChangeTracker, oldFileQuotePreference?: QuotePreference) {\r\n        let quotePreference: QuotePreference;\r\n        if (sourceFile.imports !== undefined && sourceFile.imports.length === 0 && oldFileQuotePreference !== undefined) {\r\n            quotePreference = oldFileQuotePreference;\r\n        }\r\n        else {\r\n            quotePreference = getQuotePreference(sourceFile, preferences);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 130 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "doAddExistingFix",
            "complexity": 28,
            "lineCount": 128,
            "parameterCount": 7,
            "snippet": "function doAddExistingFix(\r\n    changes: textChanges.ChangeTracker,\r\n    sourceFile: SourceFile,\r\n    clause: ImportClause | ObjectBindingPattern,\r\n    defaultImport: Import | undefined,\r\n    namedImports: readonly Import[],\r\n    removeExistingImportSpecifiers: Set<ImportSpecifier | BindingElement> | undefined,\r\n    preferences: UserPreferences,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 128 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addImport",
            "complexity": 26,
            "lineCount": 112,
            "parameterCount": 1,
            "snippet": "function addImport(info: FixInfo) {\r\n        const { fix, symbolName } = info;\r\n        switch (fix.kind) {\r\n            case ImportFixKind.UseNamespace:\r\n                addToNamespace.push(fix);\r\n                break;\r\n            case ImportFixKind.JsdocTypeImport:\r\n                importType.push(fix);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryAddToExistingImport",
            "complexity": 25,
            "lineCount": 71,
            "parameterCount": 4,
            "snippet": "function tryAddToExistingImport(existingImports: readonly FixAddToExistingImportInfo[], isValidTypeOnlyUseSite: boolean, checker: TypeChecker, compilerOptions: CompilerOptions): FixAddToExistingImport | undefined {\r\n    let best: FixAddToExistingImport | undefined;\r\n    for (const existingImport of existingImports) {\r\n        const fix = getAddToExistingImportFix(existingImport);\r\n        if (!fix) continue;\r\n        const isTypeOnly = isTypeOnlyImportDeclaration(fix.importClauseOrBindingPattern);\r\n        if (\r\n            fix.addAsTypeOnly !== AddAsTypeOnly.NotAllowed && isTypeOnly ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/inferFromUsage.ts",
        "criticalFunctions": [
          {
            "name": "inferTypeFromReferences",
            "complexity": 184,
            "lineCount": 702,
            "parameterCount": 3,
            "snippet": "function inferTypeFromReferences(program: Program, references: readonly Identifier[], cancellationToken: CancellationToken) {\r\n    const checker = program.getTypeChecker();\r\n    const builtinConstructors: { [s: string]: (t: Type) => Type; } = {\r\n        string: () => checker.getStringType(),\r\n        number: () => checker.getNumberType(),\r\n        Array: t => checker.createArrayType(t),\r\n        Promise: t => checker.createPromiseType(t),\r\n    };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 184 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 702 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "inferTypeFromBinaryExpression",
            "complexity": 55,
            "lineCount": 114,
            "parameterCount": 3,
            "snippet": "function inferTypeFromBinaryExpression(node: Expression, parent: BinaryExpression, usage: Usage): void {\r\n        switch (parent.operatorToken.kind) {\r\n            case SyntaxKind.AsteriskAsteriskToken:\r\n            case SyntaxKind.AsteriskToken:\r\n            case SyntaxKind.SlashToken:\r\n            case SyntaxKind.PercentToken:\r\n            case SyntaxKind.LessThanLessThanToken:\r\n            case SyntaxKind.GreaterThanGreaterThanToken:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 55 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 114 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "doChange",
            "complexity": 32,
            "lineCount": 96,
            "parameterCount": 9,
            "snippet": "function doChange(changes: textChanges.ChangeTracker, sourceFile: SourceFile, token: Node, errorCode: number, program: Program, cancellationToken: CancellationToken, markSeen: NodeSeenTracker, host: LanguageServiceHost, preferences: UserPreferences): Declaration | undefined {\r\n    if (!isParameterPropertyModifier(token.kind) && token.kind !== SyntaxKind.Identifier && token.kind !== SyntaxKind.DotDotDotToken && token.kind !== SyntaxKind.ThisKeyword) {\r\n        return undefined;\r\n    }\r\n    const { parent } = token;\r\n    const importAdder = createImportAdder(sourceFile, program, preferences, host);\r\n    errorCode = mapSuggestionDiagnostic(errorCode);\r\n    switch (errorCode) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "calculateUsageOfNode",
            "complexity": 19,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function calculateUsageOfNode(node: Expression, usage: Usage): void {\r\n        while (isRightSideOfQualifiedNameOrPropertyAccess(node)) {\r\n            node = node.parent as Expression;\r\n        }\r\n        switch (node.parent.kind) {\r\n            case SyntaxKind.ExpressionStatement:\r\n                inferTypeFromExpressionStatement(node, usage);\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "annotateParameters",
            "complexity": 10,
            "lineCount": 31,
            "parameterCount": 8,
            "snippet": "function annotateParameters(\r\n    changes: textChanges.ChangeTracker,\r\n    importAdder: ImportAdder,\r\n    sourceFile: SourceFile,\r\n    parameterDeclaration: ParameterDeclaration,\r\n    containingFunction: SignatureDeclaration,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/services/codefixes/returnValueCorrect.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 20,
            "lineCount": 24,
            "parameterCount": 4,
            "snippet": "function getInfo(checker: TypeChecker, sourceFile: SourceFile, position: number, errorCode: number): Info | undefined {\r\n    const node = getTokenAtPosition(sourceFile, position);\r\n    if (!node.parent) return undefined;\r\n    const declaration = findAncestor(node.parent, isFunctionLikeDeclaration);\r\n    switch (errorCode) {\r\n        case Diagnostics.A_function_whose_declared_type_is_neither_undefined_void_nor_any_must_return_a_value.code:\r\n            if (!declaration || !declaration.body || !declaration.type || !rangeContainsRange(declaration.type, node)) return undefined;\r\n            return getFixInfo(checker, declaration, checker.getTypeFromTypeNode(declaration.type), /*isFunctionType*/ false);\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "getFixInfo",
            "complexity": 15,
            "lineCount": 51,
            "parameterCount": 4,
            "snippet": "function getFixInfo(checker: TypeChecker, declaration: FunctionLikeDeclaration, expectType: Type, isFunctionType: boolean): Info | undefined {\r\n    if (!declaration.body || !isBlock(declaration.body) || length(declaration.body.statements) !== 1) return undefined;\r\n    const firstStatement = first(declaration.body.statements);\r\n    if (isExpressionStatement(firstStatement) && checkFixedAssignableTo(checker, declaration, checker.getTypeAtLocation(firstStatement.expression), expectType, isFunctionType)) {\r\n        return {\r\n            declaration,\r\n            kind: ProblemKind.MissingReturnStatement,\r\n            expression: firstStatement.expression,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "src/services/codefixes/wrapDecoratorInParentheses.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "src/compiler/transformers/declarations/diagnostics.ts",
        "criticalFunctions": [
          {
            "name": "createGetSymbolAccessibilityDiagnosticForNode",
            "complexity": 122,
            "lineCount": 366,
            "parameterCount": 1,
            "snippet": "export function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationDiagnosticProducing): GetSymbolAccessibilityDiagnostic {\r\n    if (isVariableDeclaration(node) || isPropertyDeclaration(node) || isPropertySignature(node) || isPropertyAccessExpression(node) || isElementAccessExpression(node) || isBinaryExpression(node) || isBindingElement(node) || isConstructorDeclaration(node)) {\r\n        return getVariableDeclarationTypeVisibilityError;\r\n    }\r\n    else if (isSetAccessor(node) || isGetAccessor(node)) {\r\n        return getAccessorDeclarationTypeVisibilityError;\r\n    }\r\n    else if (isConstructSignatureDeclaration(node) || isCallSignatureDeclaration(node) || isMethodDeclaration(node) || isMethodSignature(node) || isFunctionDeclaration(node) || isIndexSignatureDeclaration(node)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 122 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 366 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createGetIsolatedDeclarationErrors",
            "complexity": 51,
            "lineCount": 207,
            "parameterCount": 1,
            "snippet": "export function createGetIsolatedDeclarationErrors(resolver: EmitResolver): (node: Node) => DiagnosticWithLocation {\r\n    const relatedSuggestionByDeclarationKind = {\r\n        [SyntaxKind.ArrowFunction]: Diagnostics.Add_a_return_type_to_the_function_expression,\r\n        [SyntaxKind.FunctionExpression]: Diagnostics.Add_a_return_type_to_the_function_expression,\r\n        [SyntaxKind.MethodDeclaration]: Diagnostics.Add_a_return_type_to_the_method,\r\n        [SyntaxKind.GetAccessor]: Diagnostics.Add_a_return_type_to_the_get_accessor_declaration,\r\n        [SyntaxKind.SetAccessor]: Diagnostics.Add_a_type_to_parameter_of_the_set_accessor_declaration,\r\n        [SyntaxKind.FunctionDeclaration]: Diagnostics.Add_a_return_type_to_the_function_declaration,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 51 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 207 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getParameterDeclarationTypeVisibilityDiagnosticMessage",
            "complexity": 28,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccessibilityResult: SymbolAccessibilityResult): DiagnosticMessage {\r\n        switch (node.parent.kind) {\r\n            case SyntaxKind.Constructor:\r\n                return symbolAccessibilityResult.errorModuleName ?\r\n                    symbolAccessibilityResult.accessibility === SymbolAccessibility.CannotBeNamed ?\r\n                        Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :\r\n                        Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2 :\r\n                    Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDiagnostic",
            "complexity": 24,
            "lineCount": 42,
            "parameterCount": 1,
            "snippet": "function getDiagnostic(node: Node) {\r\n        const heritageClause = findAncestor(node, isHeritageClause);\r\n        if (heritageClause) {\r\n            return createDiagnosticForNode(node, Diagnostics.Extends_clause_can_t_contain_an_expression_with_isolatedDeclarations);\r\n        }\r\n        if ((isPartOfTypeNode(node) || isTypeQueryNode(node.parent)) && (isEntityName(node) || isEntityNameExpression(node))) {\r\n            return createEntityInTypeNodeError(node);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "canProduceDiagnostics",
            "complexity": 22,
            "lineCount": 24,
            "parameterCount": 1,
            "snippet": "export function canProduceDiagnostics(node: Node): node is DeclarationDiagnosticProducing {\r\n    return isVariableDeclaration(node) ||\r\n        isPropertyDeclaration(node) ||\r\n        isPropertySignature(node) ||\r\n        isBindingElement(node) ||\r\n        isSetAccessor(node) ||\r\n        isGetAccessor(node) ||\r\n        isConstructSignatureDeclaration(node) ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/module/esnextAnd2015.ts",
        "criticalFunctions": [
          {
            "name": "transformECMAScriptModule",
            "complexity": 54,
            "lineCount": 373,
            "parameterCount": 1,
            "snippet": "export function transformECMAScriptModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n    } = context;\r\n    const host = context.getEmitHost();\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 54 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 373 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/module/module.ts",
        "criticalFunctions": [
          {
            "name": "transformModule",
            "complexity": 302,
            "lineCount": 2323,
            "parameterCount": 1,
            "snippet": "export function transformModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    interface AsynchronousDependencies {\r\n        aliasedModuleNames: Expression[];\r\n        unaliasedModuleNames: Expression[];\r\n        importAliasNames: ParameterDeclaration[];\r\n    }\r\n    function getTransformModuleDelegate(moduleKind: ModuleKind): (node: SourceFile) => SourceFile {\r\n        switch (moduleKind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 302 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2323 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "topLevelNestedVisitor",
            "complexity": 19,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "function topLevelNestedVisitor(node: Node): VisitResult<Node | undefined> {\r\n        switch (node.kind) {\r\n            case SyntaxKind.VariableStatement:\r\n                return visitVariableStatement(node as VariableStatement);\r\n            case SyntaxKind.FunctionDeclaration:\r\n                return visitFunctionDeclaration(node as FunctionDeclaration);\r\n            case SyntaxKind.ClassDeclaration:\r\n                return visitClassDeclaration(node as ClassDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          },
          {
            "name": "destructuringNeedsFlattening",
            "complexity": 19,
            "lineCount": 45,
            "parameterCount": 1,
            "snippet": "function destructuringNeedsFlattening(node: Expression): boolean {\r\n        if (isObjectLiteralExpression(node)) {\r\n            for (const elem of node.properties) {\r\n                switch (elem.kind) {\r\n                    case SyntaxKind.PropertyAssignment:\r\n                        if (destructuringNeedsFlattening(elem.initializer)) {\r\n                            return true;\r\n                        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitTopLevelExportDeclaration",
            "complexity": 17,
            "lineCount": 103,
            "parameterCount": 1,
            "snippet": "function visitTopLevelExportDeclaration(node: ExportDeclaration): VisitResult<Statement | undefined> {\r\n        if (!node.moduleSpecifier) {\r\n            return undefined;\r\n        }\r\n        const generatedName = factory.getGeneratedNameForNode(node);\r\n        if (node.exportClause && isNamedExports(node.exportClause)) {\r\n            const statements: Statement[] = [];\r\n            if (moduleKind !== ModuleKind.AMD) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitorWorker",
            "complexity": 16,
            "lineCount": 40,
            "parameterCount": 2,
            "snippet": "function visitorWorker(node: Node, valueIsDiscarded: boolean): VisitResult<Node> {\r\n        if (!(node.transformFlags & (TransformFlags.ContainsDynamicImport | TransformFlags.ContainsDestructuringAssignment | TransformFlags.ContainsUpdateExpressionForIdentifier)) && !importsAndRequiresToRewriteOrShim?.length) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.ForStatement:\r\n                return visitForStatement(node as ForStatement, /*isTopLevel*/ false);\r\n            case SyntaxKind.ExpressionStatement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/compiler/transformers/module/system.ts",
        "criticalFunctions": [
          {
            "name": "transformSystemModule",
            "complexity": 207,
            "lineCount": 1914,
            "parameterCount": 1,
            "snippet": "export function transformSystemModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    interface DependencyGroup {\r\n        name: StringLiteral;\r\n        externalImports: (ImportDeclaration | ImportEqualsDeclaration | ExportDeclaration)[];\r\n    }\r\n    const {\r\n        factory,\r\n        startLexicalEnvironment,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 207 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1914 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "topLevelNestedVisitor",
            "complexity": 19,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "function topLevelNestedVisitor(node: Node): VisitResult<Node | undefined> {\r\n        switch (node.kind) {\r\n            case SyntaxKind.VariableStatement:\r\n                return visitVariableStatement(node as VariableStatement);\r\n            case SyntaxKind.FunctionDeclaration:\r\n                return visitFunctionDeclaration(node as FunctionDeclaration);\r\n            case SyntaxKind.ClassDeclaration:\r\n                return visitClassDeclaration(node as ClassDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          },
          {
            "name": "addExportStarIfNeeded",
            "complexity": 14,
            "lineCount": 81,
            "parameterCount": 1,
            "snippet": "function addExportStarIfNeeded(statements: Statement[]) {\r\n        if (!moduleInfo.hasExportStarsToExportValues) {\r\n            return;\r\n        }\r\n        if (!some(moduleInfo.exportedNames) && moduleInfo.exportedFunctions.size === 0 && moduleInfo.exportSpecifiers.size === 0) {\r\n            let hasExportDeclarationWithExportClause = false;\r\n            for (const externalImport of moduleInfo.externalImports) {\r\n                if (externalImport.kind === SyntaxKind.ExportDeclaration && externalImport.exportClause) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSettersArray",
            "complexity": 13,
            "lineCount": 127,
            "parameterCount": 2,
            "snippet": "function createSettersArray(exportStarFunction: Identifier, dependencyGroups: DependencyGroup[]) {\r\n        const setters: Expression[] = [];\r\n        for (const group of dependencyGroups) {\r\n            const localName = forEach(group.externalImports, i => getLocalNameForExternalImport(factory, i, currentSourceFile));\r\n            const parameterName = localName ? factory.getGeneratedNameForNode(localName) : factory.createUniqueName(\"\");\r\n            const statements: Statement[] = [];\r\n            for (const entry of group.externalImports) {\r\n                const importVariableName = getLocalNameForExternalImport(factory, entry, currentSourceFile)!; // TODO: GH#18217\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformSourceFile",
            "complexity": 7,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "function transformSourceFile(node: SourceFile) {\r\n        if (node.isDeclarationFile || !(isEffectiveExternalModule(node, compilerOptions) || node.transformFlags & TransformFlags.ContainsDynamicImport)) {\r\n            return node;\r\n        }\r\n        const id = getOriginalNodeId(node);\r\n        currentSourceFile = node;\r\n        enclosingBlockScopedContainer = node;\r\n        moduleInfo = moduleInfoMap[id] = collectExternalModuleInfo(context, node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/config/matchFiles.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 818,
            "parameterCount": 0,
            "snippet": "() => {\r\n    baselineMatches(\"with defaults\", {}, caseInsensitiveCommonFoldersHost, caseInsensitiveBasePath);\r\n    describe(\"with literal file list\", () => {\r\n        baselineMatches(\r\n            \"without exclusions with literal file list\",\r\n            {\r\n                files: [\r\n                    \"a.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 818 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 146,
            "parameterCount": 0,
            "snippet": "() => {\r\n        baselineMatches(\r\n            \"without exclusions with literal include list\",\r\n            {\r\n                include: [\r\n                    \"a.ts\",\r\n                    \"b.ts\",\r\n                ],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 146 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 525,
            "parameterCount": 0,
            "snippet": "() => {\r\n        baselineMatches(\r\n            \"is sorted in include order, then in alphabetical order\",\r\n            {\r\n                include: [\r\n                    \"z/*.ts\",\r\n                    \"x/*.ts\",\r\n                ],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 525 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "() => {\r\n            baselineMatches(\r\n                \"and no exclusions\",\r\n                {\r\n                    include: [\r\n                        \"**/a.ts\",\r\n                    ],\r\n                },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 51,
            "parameterCount": 0,
            "snippet": "() => {\r\n            baselineMatches(\r\n                \"in includes immediately after\",\r\n                {\r\n                    include: [\r\n                        \"**/../*\",\r\n                    ],\r\n                },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/config/showConfig.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 23,
            "lineCount": 213,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function showTSConfigCorrectly(name: string, commandLinesArgs: string[], configJson?: object) {\r\n        describe(name, () => {\r\n            const outputFileName = `config/showConfig/${name.replace(/[^a-z0-9\\-./ ]/gi, \"\")}/tsconfig.json`;\r\n            it(`Correct output for ${outputFileName}`, () => {\r\n                const cwd = `/${name}`;\r\n                const configPath = ts.combinePaths(cwd, \"tsconfig.json\");\r\n                const configContents = configJson ? JSON.stringify(configJson) : undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 213 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "baselineOption",
            "complexity": 16,
            "lineCount": 72,
            "parameterCount": 2,
            "snippet": "function baselineOption(option: ts.CommandLineOption, isCompilerOptions: boolean) {\r\n        if (option.name === \"project\") return;\r\n        let args: string[];\r\n        let optionValue: object | undefined;\r\n        switch (option.type) {\r\n            case \"boolean\": {\r\n                if (option.isTSConfigOnly) {\r\n                    args = [\"-p\", \"tsconfig.json\"];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/evaluation/awaitUsingDeclarations.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 2006,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"'await using' in Block, normal completion (es2018)\", async () => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        const disposable = {\r\n            async [Symbol.asyncDispose]() {\r\n                output.push(\"disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2006 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 52,
            "parameterCount": 0,
            "snippet": "async () => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        function* g() {\r\n            yield {\r\n                async [Symbol.asyncDispose]() {\r\n                    output.push(\"a disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 53,
            "parameterCount": 0,
            "snippet": "async () => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        function* g() {\r\n            yield {\r\n                async [Symbol.asyncDispose]() {\r\n                    output.push(\"a disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "async () => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        function* g() {\r\n            yield {\r\n                async [Symbol.asyncDispose]() {\r\n                    output.push(\"a disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 52,
            "parameterCount": 0,
            "snippet": "async () => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        function* g() {\r\n            yield {\r\n                async [Symbol.asyncDispose]() {\r\n                    output.push(\"a disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "async-heavy",
            "error-handling",
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/evaluation/esDecorators.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 2475,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const options: ts.CompilerOptions = { target: ts.ScriptTarget.ES2021 };\r\n    const exec = (array: TemplateStringsArray) => evaluator.evaluateTypeScript(array[0], options);\r\n    describe(\"target\", () => {\r\n        describe(\"for: class\", () => {\r\n            it(\"is initial constructor\", () => {\r\n                const { target, C } = exec`\r\n                    export let target;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2475 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 75,
            "parameterCount": 0,
            "snippet": "() => {\r\n        describe(\"for: class\", () => {\r\n            it(\"is initial constructor\", () => {\r\n                const { target, C } = exec`\r\n                    export let target;\r\n                    export @((t, c) => { target = t }) class C {\r\n                    }\r\n                `;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 1466,
            "parameterCount": 0,
            "snippet": "() => {\r\n        describe(\"for: class\", () => {\r\n            it(\"is object\", () => {\r\n                const { context } = exec`\r\n                    export let context;\r\n                    export @((t, c) => { context = c; }) class C {\r\n                    }\r\n                `;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1466 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 72,
            "parameterCount": 0,
            "snippet": "() => {\r\n            describe(\"for: class\", () => {\r\n                it(\"is 'class'\", () => {\r\n                    const { context } = exec`\r\n                        export let context;\r\n                        export @((t, c) => { context = c; }) class C {\r\n                        }\r\n                    `;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 235,
            "parameterCount": 0,
            "snippet": "() => {\r\n            describe(\"for: class\", () => {\r\n                it(\"is initial class name\", () => {\r\n                    const { context } = exec`\r\n                        export let context;\r\n                        export @((t, c) => { context = c; }) class C {\r\n                        }\r\n                    `;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 235 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/evaluation/usingDeclarations.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 1851,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"'using' in Block, normal completion (es2018)\", () => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        const disposable = {\r\n            [Symbol.dispose]() {\r\n                output.push(\"disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1851 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        const disposable_1 = {\r\n            [Symbol.dispose]() {\r\n                output.push(\"disposed 1\");\r\n                throw \"error 1\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 60,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        const disposable_1 = {\r\n            [Symbol.dispose]() {\r\n                output.push(\"disposed 1\");\r\n                throw \"dispose error 1\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 52,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        function* g() {\r\n            yield {\r\n                [Symbol.dispose]() {\r\n                    output.push(\"a disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 53,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const { main, output } = evaluator.evaluateTypeScript(\r\n            `\r\n        export const output: any[] = [];\r\n        function* g() {\r\n            yield {\r\n                [Symbol.dispose]() {\r\n                    output.push(\"a disposed\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "async-heavy",
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/convertToAsyncFunction.ts",
        "criticalFunctions": [
          {
            "name": "testConvertToAsyncFunction",
            "complexity": 16,
            "lineCount": 115,
            "parameterCount": 5,
            "snippet": "function testConvertToAsyncFunction(it: Mocha.PendingTestFunction, caption: string, text: string, baselineFolder: string, flags: ConvertToAsyncTestFlags) {\r\n    const includeLib = !!(flags & ConvertToAsyncTestFlags.IncludeLib);\r\n    const includeModule = !!(flags & ConvertToAsyncTestFlags.IncludeModule);\r\n    const expectSuggestionDiagnostic = !!(flags & ConvertToAsyncTestFlags.ExpectSuggestionDiagnostic);\r\n    const expectNoSuggestionDiagnostic = !!(flags & ConvertToAsyncTestFlags.ExpectNoSuggestionDiagnostic);\r\n    const expectAction = !!(flags & ConvertToAsyncTestFlags.ExpectAction);\r\n    const expectNoAction = !!(flags & ConvertToAsyncTestFlags.ExpectNoAction);\r\n    const expectFailure = expectNoSuggestionDiagnostic || expectNoAction;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runBaseline",
            "complexity": 9,
            "lineCount": 74,
            "parameterCount": 1,
            "snippet": "function runBaseline(extension: ts.Extension) {\r\n        const path = \"/home/src/workspaces/project/a\" + extension;\r\n        const languageService = makeLanguageService({ path, content: t.source }, includeLib, includeModule);\r\n        const program = languageService.getProgram()!;\r\n        if (hasSyntacticDiagnostics(program)) {\r\n            assert.equal(ts.Extension.Js, extension, \"Syntactic diagnostics found in non-JS file\");\r\n            return;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 1773,
            "parameterCount": 0,
            "snippet": "() => {\r\n    _testConvertToAsyncFunction(\r\n        \"convertToAsyncFunction_basic\",\r\n        `\r\nfunction [#|f|](): Promise<void>{\r\n    return fetch('https://typescriptlang.org').then(result => { console.log(result) });\r\n}`,\r\n    );\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1773 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/organizeImports.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 20,
            "lineCount": 1221,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"Sort imports\", () => {\r\n        it(\"Sort - non-relative vs non-relative\", () => {\r\n            assertSortsBefore(\r\n                `import y from \"lib1\";`,\r\n                `import x from \"lib2\";`,\r\n            );\r\n        });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1221 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "assertEqual",
            "complexity": 14,
            "lineCount": 74,
            "parameterCount": 2,
            "snippet": "function assertEqual(node1?: ts.Node, node2?: ts.Node) {\r\n        if (node1 === undefined) {\r\n            assert.isUndefined(node2);\r\n            return;\r\n        }\r\n        else if (node2 === undefined) {\r\n            assert.isUndefined(node1); // Guaranteed to fail\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 791,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const libFile = {\r\n            path: \"/home/src/workspaces/project/lib.ts\",\r\n            content: `\r\nexport function F1();\r\nexport default function F2();\r\n`,\r\n        };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 791 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 176,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"No imports\", () => {\r\n            assert.isEmpty(ts.OrganizeImports.testCoalesceImports([], /*ignoreCase*/ true));\r\n        });\r\n        it(\"Sort specifiers - case-insensitive\", () => {\r\n            const sortedImports = parseImports(`import { default as M, a as n, B, y, Z as O } from \"lib\";`);\r\n            const actualCoalescedImports = ts.OrganizeImports.testCoalesceImports(sortedImports, /*ignoreCase*/ true);\r\n            const expectedCoalescedImports = parseImports(`import { B, default as M, a as n, Z as O, y } from \"lib\";`);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 176 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 108,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"No exports\", () => {\r\n            assert.isEmpty(ts.OrganizeImports.testCoalesceExports([], /*ignoreCase*/ true));\r\n        });\r\n        it(\"Sort specifiers - case-insensitive\", () => {\r\n            const sortedExports = parseExports(`export { default as M, a as n, B, y, Z as O } from \"lib\";`);\r\n            const actualCoalescedExports = ts.OrganizeImports.testCoalesceExports(sortedExports, /*ignoreCase*/ true);\r\n            const expectedCoalescedExports = parseExports(`export { B, default as M, a as n, Z as O, y } from \"lib\";`);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/preProcessFile.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 847,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function test(sourceText: string, readImportFile: boolean, detectJavaScriptImports: boolean, expectedPreProcess: ts.PreProcessedFileInfo): void {\r\n        const resultPreProcess = ts.preProcessFile(sourceText, readImportFile, detectJavaScriptImports);\r\n        assert.equal(resultPreProcess.isLibFile, expectedPreProcess.isLibFile, \"Pre-processed file has different value for isLibFile. Expected: \" + expectedPreProcess.isLibFile + \". Actual: \" + resultPreProcess.isLibFile);\r\n        checkFileReferenceList(\"Imported files\", expectedPreProcess.importedFiles, resultPreProcess.importedFiles);\r\n        checkFileReferenceList(\"Referenced files\", expectedPreProcess.referencedFiles, resultPreProcess.referencedFiles);\r\n        checkFileReferenceList(\"Type reference directives\", expectedPreProcess.typeReferenceDirectives, resultPreProcess.typeReferenceDirectives);\r\n        checkFileReferenceList(\"Lib reference directives\", expectedPreProcess.libReferenceDirectives, resultPreProcess.libReferenceDirectives);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 847 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 825,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"Correctly return referenced files from triple slash\", () => {\r\n            test('///<reference path = \"refFile1.ts\" />' + \"\\n\" + '///<reference path =\"refFile2.ts\"/>' + \"\\n\" + '///<reference path=\"refFile3.ts\" />' + \"\\n\" + '///<reference path= \"..\\\\refFile4d.ts\" />', /*readImportFile*/ true, /*detectJavaScriptImports*/ false, {\r\n                referencedFiles: [{ fileName: \"refFile1.ts\", pos: 22, end: 33 }, { fileName: \"refFile2.ts\", pos: 59, end: 70 }, { fileName: \"refFile3.ts\", pos: 94, end: 105 }, { fileName: \"..\\\\refFile4d.ts\", pos: 131, end: 146 }],\r\n                importedFiles: [] as ts.FileReference[],\r\n                typeReferenceDirectives: [],\r\n                libReferenceDirectives: [],\r\n                ambientExternalModules: undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 825 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/textChanges.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 12,
            "lineCount": 761,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function findChild(name: string, n: ts.Node) {\r\n        return find(n)!;\r\n        function find(node: ts.Node): ts.Node | undefined {\r\n            if (ts.isDeclaration(node) && node.name && ts.isIdentifier(node.name) && node.name.escapedText === name) {\r\n                return node;\r\n            }\r\n            else {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 761 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/transpile.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 16,
            "lineCount": 687,
            "parameterCount": 0,
            "snippet": "() => {\r\n    interface TranspileTestSettings {\r\n        options?: ts.TranspileOptions;\r\n        noSetFileName?: boolean;\r\n        testVerbatimModuleSyntax?: true | \"only\";\r\n    }\r\n    function transpilesCorrectly(nameIn: string, input: string, testSettings: TranspileTestSettings) {\r\n        const runOnce = (name: string, testSettings: TranspileTestSettings) =>\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 687 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transpilesCorrectly",
            "complexity": 16,
            "lineCount": 93,
            "parameterCount": 3,
            "snippet": "function transpilesCorrectly(nameIn: string, input: string, testSettings: TranspileTestSettings) {\r\n        const runOnce = (name: string, testSettings: TranspileTestSettings) =>\r\n            describe(name, () => {\r\n                let transpileResult: ts.TranspileOutput;\r\n                let oldTranspileResult: string;\r\n                let oldTranspileDiagnostics: ts.Diagnostic[];\r\n                const transpileOptions: ts.TranspileOptions = testSettings.options || {};\r\n                if (!transpileOptions.compilerOptions) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runOnce",
            "complexity": 14,
            "lineCount": 75,
            "parameterCount": 2,
            "snippet": "(name: string, testSettings: TranspileTestSettings) =>\r\n            describe(name, () => {\r\n                let transpileResult: ts.TranspileOutput;\r\n                let oldTranspileResult: string;\r\n                let oldTranspileDiagnostics: ts.Diagnostic[];\r\n                const transpileOptions: ts.TranspileOptions = testSettings.options || {};\r\n                if (!transpileOptions.compilerOptions) {\r\n                    transpileOptions.compilerOptions = {};\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 14,
            "lineCount": 74,
            "parameterCount": 0,
            "snippet": "() => {\r\n                let transpileResult: ts.TranspileOutput;\r\n                let oldTranspileResult: string;\r\n                let oldTranspileDiagnostics: ts.Diagnostic[];\r\n                const transpileOptions: ts.TranspileOptions = testSettings.options || {};\r\n                if (!transpileOptions.compilerOptions) {\r\n                    transpileOptions.compilerOptions = {};\r\n                }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/baseline.ts",
        "criticalFunctions": [
          {
            "name": "generateBuildInfoBaseline",
            "complexity": 28,
            "lineCount": 164,
            "parameterCount": 3,
            "snippet": "function generateBuildInfoBaseline(sys: ts.System, buildInfoPath: string, buildInfo: ts.BuildInfo) {\r\n    let fileIdsList: string[][] | undefined;\r\n    let result;\r\n    const version = buildInfo.version === ts.version ? fakeTsVersion : buildInfo.version;\r\n    if (!ts.isIncrementalBuildInfo(buildInfo)) {\r\n        result = {\r\n            ...buildInfo,\r\n            version,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "baselineProgram",
            "complexity": 18,
            "lineCount": 72,
            "parameterCount": 4,
            "snippet": "function baselineProgram(baseline: string[], [program, builderProgram]: CommandLineProgram, oldProgram: CommandLineProgram | undefined, baselineDependencies: boolean | undefined) {\r\n    if (program !== oldProgram?.[0]) {\r\n        const options = program.getCompilerOptions();\r\n        baseline.push(`Program root files: ${jsonToReadableText(program.getRootFileNames())}`);\r\n        baseline.push(`Program options: ${jsonToReadableText(options)}`);\r\n        baseline.push(`Program structureReused: ${(ts as any).StructureIsReused[program.structureIsReused]}`);\r\n        baseline.push(\"Program files::\");\r\n        for (const file of program.getSourceFiles()) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "baselineAfterTscCompile",
            "complexity": 4,
            "lineCount": 24,
            "parameterCount": 7,
            "snippet": "export function baselineAfterTscCompile(\r\n    sys: BaselineBase[\"sys\"],\r\n    baseline: BaselineBase[\"baseline\"],\r\n    getPrograms: CommandLineCallbacks[\"getPrograms\"],\r\n    oldPrograms: readonly (CommandLineProgram | undefined)[],\r\n    baselineSourceMap: boolean | undefined,\r\n    shouldBaselinePrograms: boolean | undefined,\r\n    baselineDependencies: boolean | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/monorepoSymlinkedSiblingPackages.ts",
        "criticalFunctions": [
          {
            "name": "getEditsWithBuildAndClean",
            "complexity": 5,
            "lineCount": 34,
            "parameterCount": 7,
            "snippet": "function getEditsWithBuildAndClean(\r\n    forTsserver: boolean,\r\n    built: boolean,\r\n    osFlavor: TestServerHostOsFlavor | undefined,\r\n    build: (host: TscWatchSystem) => void,\r\n    clean: (host: TscWatchSystem) => void,\r\n    beforeBuild?: readonly TscWatchCompileChange[],\r\n    beforeClean?: readonly TscWatchCompileChange[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "forEachMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders",
            "complexity": 4,
            "lineCount": 65,
            "parameterCount": 2,
            "snippet": "function forEachMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders(\r\n    forTsserver: boolean,\r\n    action: (\r\n        scenario: string,\r\n        sys: () => TestServerHost,\r\n        edits: () => readonly TscWatchCompileChange[],\r\n        indexFile: string,\r\n        currentDirectory: string,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders",
            "complexity": 2,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "function getMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders(\r\n    forTsserver: boolean,\r\n    built: boolean,\r\n    osFlavor: TestServerHostOsFlavor,\r\n): TestServerHost {\r\n    const sys = TestServerHost.getCreateWatchedSystem(forTsserver)({\r\n        \"/home/src/projects/c/3/c-impl/c/src/c.ts\": `export const c: string = 'test';`,\r\n        \"/home/src/projects/c/3/c-impl/c/src/index.ts\": `export * from './c';`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/noEmit.ts",
        "criticalFunctions": [
          {
            "name": "forEachNoEmitDtsChanges",
            "complexity": 11,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "export function forEachNoEmitDtsChanges(commandType: string[]): void {\r\n    describe(\"dts errors with declaration enable changes\", () => {\r\n        if (commandType[0] !== \"-b\") return; // Only test non multiple file errors with -b\r\n        [false, true].forEach(asModules =>\r\n            [undefined, true].forEach(incremental =>\r\n                [{}, { outFile: \"../outFile.js\", module: asModules ? \"amd\" : undefined }].forEach(options => {\r\n                    if (!incremental && asModules) return; // Not the interesting case\r\n                    const aContent = asModules ? `export const a = class { private p = 10; };` : `const a = class { private p = 10; };`;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "forEachNoEmitChangesWorker",
            "complexity": 10,
            "lineCount": 127,
            "parameterCount": 2,
            "snippet": "function forEachNoEmitChangesWorker(commandType: string[], compilerOptions: CompilerOptions) {\r\n    const discrepancyExplanation = () => [\r\n        \"Clean build will not have latestChangedDtsFile as there was no emit and emitSignatures as undefined for files\",\r\n        \"Incremental will store the past latestChangedDtsFile and emitSignatures\",\r\n    ];\r\n    const noChangeRunWithNoEmit: TestTscEdit = {\r\n        ...noChangeRun,\r\n        caption: \"No Change run with noEmit\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "editsForDtsChanges",
            "complexity": 4,
            "lineCount": 51,
            "parameterCount": 4,
            "snippet": "function editsForDtsChanges(\r\n    commandType: string[],\r\n    aContent: string,\r\n    incremental: boolean | undefined,\r\n    multiFile: boolean,\r\n): TestTscEdit[] {\r\n    return [\r\n        noChangeRun,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          },
          {
            "name": "forEachNoEmitTscWatch",
            "complexity": 1,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "export function forEachNoEmitTscWatch(commandType: string[]): void {\r\n    forEachNoEmitAndErrors((subScenario, sys, aTsContent, fixedATsContent, compilerOptions) =>\r\n        verifyTscWatch({\r\n            scenario: \"noEmit\",\r\n            subScenario,\r\n            commandLineArgs: [...commandType, \"-w\"],\r\n            sys: () => {\r\n                const result = sys();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 81,
            "parameterCount": 5,
            "snippet": "(subScenario, sys, aTsContent, fixedATsContent, compilerOptions) =>\r\n        verifyTscWatch({\r\n            scenario: \"noEmit\",\r\n            subScenario,\r\n            commandLineArgs: [...commandType, \"-w\"],\r\n            sys: () => {\r\n                const result = sys();\r\n                result.writeFile(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/tsc.ts",
        "criticalFunctions": [
          {
            "name": "verifyTscEditDiscrepancies",
            "complexity": 52,
            "lineCount": 239,
            "parameterCount": 4,
            "snippet": "function verifyTscEditDiscrepancies(\r\n    input: VerifyTscWithEditsInput,\r\n    index: number,\r\n    snaps: readonly TestServerHostSnapshot[],\r\n    baselines: string[] | undefined,\r\n): string[] | undefined {\r\n    const result = initialTestTscCompile({\r\n        ...input,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 52 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 239 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/tsserver.ts",
        "criticalFunctions": [
          {
            "name": "patchSessionToHandleWatchEvents",
            "complexity": 17,
            "lineCount": 123,
            "parameterCount": 1,
            "snippet": "function patchSessionToHandleWatchEvents(session: TestSession) {\r\n    const event = session.event;\r\n    const idToClose = new Map<number, () => void>();\r\n    session.event = (data, eventName) => {\r\n        event.call(session, data, eventName);\r\n        switch (eventName) {\r\n            case ts.server.CreateFileWatcherEvent:\r\n                watchFile(data as ts.server.protocol.CreateFileWatcherEventBody);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/typingsInstaller.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "src/testRunner/unittests/helpers/virtualFileSystemWithWatch.ts",
        "criticalFunctions": [
          {
            "name": "diffFsEntry",
            "complexity": 20,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "function diffFsEntry(baseline: string[], oldFsEntry: FSEntry | undefined, newFsEntry: FSEntry | undefined, newInode: number | undefined, writtenFiles: Map<string, any> | undefined): void {\r\n    const file = newFsEntry && newFsEntry.fullPath;\r\n    if (isFsFileOrFsLibFile(oldFsEntry)) {\r\n        if (isFsFileOrFsLibFile(newFsEntry)) {\r\n            if (oldFsEntry.content !== newFsEntry.content) {\r\n                diffFsFile(baseline, newFsEntry, newInode);\r\n            }\r\n            else if (oldFsEntry.modifiedTime !== newFsEntry.modifiedTime) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/sys/symlinkWatching.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 67,
            "lineCount": 829,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function delayedOp(op: () => void, delay: number) {\r\n        ts.sys.setTimeout!(op, delay);\r\n    }\r\n    function modifiedTimeToString(d: Date | undefined) {\r\n        if (!d) return undefined;\r\n        return `${d.getHours().toString().padStart(2, \"0\")}:${d.getMinutes().toString().padStart(2, \"0\")}:${d.getSeconds().toString().padStart(2, \"0\")}.${d.getMilliseconds().toString().padStart(3, \"0\")}`;\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 67 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 829 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyRecursiveWatchDirectoryUsingFsEvents",
            "complexity": 28,
            "lineCount": 241,
            "parameterCount": 5,
            "snippet": "function verifyRecursiveWatchDirectoryUsingFsEvents<System extends ts.System>(\r\n        getSys: () => System,\r\n        fsWatch: FsWatch<System>,\r\n        dir: string,\r\n        link: string,\r\n        osFlavor: TestServerHostOsFlavor.Windows | TestServerHostOsFlavor.MacOs,\r\n    ) {\r\n        if (skipSysTests) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 241 lines, consider splitting"
              }
            ]
          },
          {
            "name": "watchDirectoryOperation",
            "complexity": 22,
            "lineCount": 41,
            "parameterCount": 4,
            "snippet": "function watchDirectoryOperation(\r\n            sys: System,\r\n            opType: keyof RecursiveFsEventsForWatchDirectory,\r\n            dir: string,\r\n            link: string,\r\n        ) {\r\n            switch (opType) {\r\n                case \"init\":\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "verifyWatchDirectoryUsingFsEvents",
            "complexity": 14,
            "lineCount": 150,
            "parameterCount": 5,
            "snippet": "function verifyWatchDirectoryUsingFsEvents<System extends ts.System>(\r\n        getSys: () => System,\r\n        fsWatch: FsWatch<System>,\r\n        dir: string,\r\n        link: string,\r\n        osFlavor: TestServerHostOsFlavor,\r\n    ) {\r\n        if (skipSysTests) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 150 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 13,
            "lineCount": 141,
            "parameterCount": 0,
            "snippet": "async () => {\r\n            const sys = getSys();\r\n            const tableOfEvents: FsEventsForWatchDirectory = osFlavor === TestServerHostOsFlavor.MacOs ?\r\n                {\r\n                    fileCreate: [\r\n                        { event: \"rename\", fileName: \"file1.ts\" },\r\n                    ],\r\n                    linkFileCreate: [\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 141 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/configFileErrors.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 67,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function verify(outFile?: object) {\r\n        verifyTscWatch({\r\n            scenario: \"configFileErrors\",\r\n            subScenario: `${outFile ? \"outFile\" : \"multiFile\"}/reports syntax errors in config file`,\r\n            sys: () =>\r\n                TestServerHost.createWatchedSystem(\r\n                    [\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 3,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function verify(outFile?: object) {\r\n        verifyTscWatch({\r\n            scenario: \"configFileErrors\",\r\n            subScenario: `${outFile ? \"outFile\" : \"multiFile\"}/reports syntax errors in config file`,\r\n            sys: () =>\r\n                TestServerHost.createWatchedSystem(\r\n                    [\r\n                        { path: `/user/username/projects/myproject/a.ts`, content: \"export function foo() { }\" },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/moduleResolution.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 221,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTscWatch({\r\n        scenario: \"moduleResolutionCache\",\r\n        subScenario: \"handles the cache correctly when two projects use different module resolution settings\",\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem(\r\n                [\r\n                    { path: `/user/username/projects/myproject/project1/index.ts`, content: `import { foo } from \"file\";` },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 221 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 59,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `/user/username/projects/myproject/packages/pkg1/package.json`,\r\n                    content: jsonToReadableText({\r\n                        name: \"pkg1\",\r\n                        version: \"1.0.0\",\r\n                        main: \"build/index.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 60,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `/user/username/projects/myproject/packages/pkg1/package.json`,\r\n                    content: jsonToReadableText({\r\n                        name: \"pkg1\",\r\n                        version: \"1.0.0\",\r\n                        main: \"build/index.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/programUpdates.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 808,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTscWatch({\r\n        scenario: \"programUpdates\",\r\n        subScenario: \"creates solution in watch mode\",\r\n        commandLineArgs: [\"-b\", \"-w\", \"tests\"],\r\n        sys: getSysForSampleProjectReferences,\r\n    });\r\n    it(\"verify building references watches only those projects\", () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 808 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 161,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyIncrementalErrors(subScenario: string, buildOptions: readonly string[]) {\r\n            verifyTscWatch({\r\n                scenario: \"programUpdates\",\r\n                subScenario: `reportErrors/${subScenario}`,\r\n                commandLineArgs: [\"-b\", \"-w\", \"tests\", ...buildOptions],\r\n                sys: getSysForSampleProjectReferences,\r\n                edits: [\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 161 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 97,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyProjectChanges(subScenario: string, sys: () => TestServerHost) {\r\n            const buildLogicAndTests: TscWatchCompileChange = {\r\n                caption: \"Build logic and tests\",\r\n                edit: ts.noop,\r\n                timeouts: sys => sys.runQueuedTimeoutCallbacks(),\r\n            };\r\n            verifyTscWatch({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyProjectChanges",
            "complexity": 1,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function verifyProjectChanges(subScenario: string, sys: () => TestServerHost) {\r\n            const buildLogicAndTests: TscWatchCompileChange = {\r\n                caption: \"Build logic and tests\",\r\n                edit: ts.noop,\r\n                timeouts: sys => sys.runQueuedTimeoutCallbacks(),\r\n            };\r\n            verifyTscWatch({\r\n                scenario: \"programUpdates\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 62,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const subProjectLibrary = `${\"/user/username/projects\"}/sample1/Library`;\r\n        const libraryTs: File = {\r\n            path: `${subProjectLibrary}/library.ts`,\r\n            content: `\r\ninterface SomeObject\r\n{\r\n    message: string;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/publicApi.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 104,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const solution: File = {\r\n        path: `/user/username/projects/myproject/tsconfig.json`,\r\n        content: jsonToReadableText({\r\n            references: [\r\n                { path: \"./shared/tsconfig.json\" },\r\n                { path: \"./webpack/tsconfig.json\" },\r\n            ],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuildWatch/reexport.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 63,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTscWatch({\r\n        scenario: \"reexport\",\r\n        subScenario: \"Reports errors correctly\",\r\n        commandLineArgs: [\"-b\", \"-w\", \"-verbose\", \"src\"],\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/user/username/projects/reexport/src/tsconfig.json\": jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuild/commandLine.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 299,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function scenarioName(text: string, options: ts.CompilerOptions) {\r\n        return `${options.outFile ? \"outFile\" : \"multiFile\"}/${text}`;\r\n    }\r\n    describe(\"different options::\", () => {\r\n        function withOptionChange(caption: string, ...options: readonly string[]): TestTscEdit {\r\n            return {\r\n                caption,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 299 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 195,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function sys(options: ts.CompilerOptions) {\r\n            return TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/solution/project1/src/tsconfig.json\": jsonToReadableText({\r\n                    compilerOptions: compilerOptionsToConfigJson(options),\r\n                }),\r\n                \"/home/src/workspaces/solution/project1/src/a.ts\": `export const a = 10;const aLocal = 10;`,\r\n                \"/home/src/workspaces/solution/project1/src/b.ts\": `export const b = 10;const bLocal = 10;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 195 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyWithIncremental",
            "complexity": 2,
            "lineCount": 93,
            "parameterCount": 1,
            "snippet": "function verifyWithIncremental(options: ts.CompilerOptions) {\r\n            verifyTsc({\r\n                scenario: \"commandLine\",\r\n                subScenario: subScenario(\"emitDeclarationOnly on commandline\"),\r\n                sys: () => sys(options),\r\n                commandLineArgs: [\"--b\", \"project2/src\", \"--verbose\", \"--emitDeclarationOnly\"],\r\n                edits: [\r\n                    noChangeRun,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 92,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function withOptionChange(caption: string, ...options: readonly string[]): TestTscEdit {\r\n            return {\r\n                caption,\r\n                edit: ts.noop,\r\n                commandLineArgs: [\"--b\", \"--verbose\", ...options],\r\n            };\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyNonIncremental",
            "complexity": 1,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "function verifyNonIncremental(options: ts.CompilerOptions) {\r\n            verifyTsc({\r\n                scenario: \"commandLine\",\r\n                subScenario: scenarioName(\"emitDeclarationOnly on commandline with declaration\", options),\r\n                sys: () => sys({ declaration: true, ...options }),\r\n                commandLineArgs: [\"--b\", \"project2/src\", \"--verbose\", \"--emitDeclarationOnly\"],\r\n                edits: [\r\n                    noChangeRun,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuild/extends.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuild/javascriptProjectEmit.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 169,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTsc({\r\n        scenario: \"javascriptProjectEmit\",\r\n        subScenario: `loads js-based projects and emits them correctly`,\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/solution/common/nominal.js\": dedent`\r\n                    /**\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 169 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 79,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/solution/common/nominal.js\": dedent`\r\n                    /**\r\n                     * @template T, Name\r\n                     * @typedef {T & {[Symbol.species]: Name}} Nominal\r\n                     */\r\n                    module.exports = {};\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 77,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/solution/common/obj.json\": jsonToReadableText({\r\n                    val: 42,\r\n                }),\r\n                \"/home/src/workspaces/solution/common/index.ts\": dedent`\r\n                    import x = require(\"./obj.json\");\r\n                    export = x;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuild/moduleResolution.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 85,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function sys(optionsToExtend?: ts.CompilerOptions) {\r\n        return TestServerHost.createWatchedSystem([\r\n            {\r\n                path: `/user/username/projects/myproject/packages/pkg1/index.ts`,\r\n                content: dedent`\r\n                    import type { TheNum } from 'pkg2'\r\n                    export const theNum: TheNum = 42;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 64,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function sys() {\r\n        return TestServerHost.createWatchedSystem({\r\n            \"/home/src/workspaces/project/packages/a/index.js\": `export const a = 'a';`,\r\n            \"/home/src/workspaces/project/packages/a/test/index.js\": `import 'a';`,\r\n            \"/home/src/workspaces/project/packages/a/tsconfig.json\": jsonToReadableText({\r\n                compilerOptions: {\r\n                    checkJs: true,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuild/publicApi.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 94,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTsc({\r\n        scenario: \"publicAPI\",\r\n        subScenario: \"build with custom transformers\",\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/solution/tsconfig.json\": jsonToReadableText({\r\n                    references: [\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "compile",
            "complexity": 3,
            "lineCount": 57,
            "parameterCount": 1,
            "snippet": "sys => {\r\n            const { cb, getPrograms } = commandLineCallbacks(sys, /*originalReadCall*/ undefined);\r\n            const buildHost = ts.createSolutionBuilderHost(\r\n                sys,\r\n                /*createProgram*/ undefined,\r\n                ts.createDiagnosticReporter(sys, /*pretty*/ true),\r\n                ts.createBuilderStatusReporter(sys, /*pretty*/ true),\r\n                (errorCount, filesInError) => sys.write(ts.getErrorSummaryText(errorCount, filesInError, sys.newLine, sys)),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsbuild/sample.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 588,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"sanity check of clean build of 'sample1' project\", () => {\r\n        verifyTsc({\r\n            scenario: \"sample1\",\r\n            subScenario: \"builds correctly when outDir is specified\",\r\n            sys: getSysForSampleProjectReferences,\r\n            commandLineArgs: [\"--b\", \"tests\"],\r\n            modifySystem: sys =>\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 588 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 192,
            "parameterCount": 0,
            "snippet": "() => {\r\n        verifyTsc({\r\n            scenario: \"sample1\",\r\n            subScenario: \"can detect when and what to rebuild\",\r\n            sys: getSysForSampleProjectReferencesBuilt,\r\n            commandLineArgs: [\"--b\", \"tests\", \"--verbose\"],\r\n            edits: [\r\n                {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 192 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 179,
            "parameterCount": 0,
            "snippet": "() => {\r\n        verifyTsc({\r\n            subScenario: \"sample\",\r\n            sys: getSysForSampleProjectReferences,\r\n            scenario: \"sample1\",\r\n            commandLineArgs: [\"--b\", \"tests\", \"--verbose\"],\r\n            baselineSourceMap: true,\r\n            baselineReadFileCalls: true,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 179 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/emit.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 278,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const file1Consumer1Path = \"/home/src/projects/a/b/file1Consumer1.ts\";\r\n    const file1Consumer2Path = \"/home/src/projects/a/b/file1Consumer2.ts\";\r\n    const moduleFile1Path = \"/home/src/projects/a/b/moduleFile1.ts\";\r\n    const moduleFile2Path = \"/home/src/projects/a/b/moduleFile2.ts\";\r\n    const globalFilePath = \"/home/src/projects/a/b/globalFile3.ts\";\r\n    const configFilePath = \"/home/src/projects/a/b/tsconfig.json\";\r\n    interface VerifyTscWatchEmit {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 278 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyTscWatchEmit",
            "complexity": 4,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function verifyTscWatchEmit({\r\n        subScenario,\r\n        configObj,\r\n        getAdditionalFileOrFolder,\r\n        firstReloadFileList,\r\n        changes,\r\n    }: VerifyTscWatchEmit) {\r\n        verifyTscWatch({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 71,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function verifyOutAndOutFileSetting(subScenario: string, out?: string, outFile?: string) {\r\n        verifyTscWatch({\r\n            scenario,\r\n            subScenario: `emit with outFile or out setting/${subScenario}`,\r\n            commandLineArgs: [\"--w\", \"-p\", \"/home/src/projects/a/tsconfig.json\"],\r\n            sys: () =>\r\n                TestServerHost.createWatchedSystem({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 136,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function verifyNewLine(subScenario: string, newLine: string) {\r\n        verifyTscWatch({\r\n            scenario,\r\n            subScenario: `emit file content/${subScenario}`,\r\n            commandLineArgs: [\"--w\", \"/home/src/projects/a/app.ts\"],\r\n            sys: () =>\r\n                TestServerHost.createWatchedSystem(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 136 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 415,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const loggerFile: File = {\r\n        path: `/user/username/projects/myproject/logger.ts`,\r\n        content: `export class logger { }`,\r\n    };\r\n    const anotherFile: File = {\r\n        path: `/user/username/projects/myproject/another.ts`,\r\n        content: `import { logger } from \"./logger\"; new logger();`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 415 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/incremental.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 389,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const project = \"/users/username/projects/project\";\r\n    const configFile: File = {\r\n        path: `${project}/tsconfig.json`,\r\n        content: jsonToReadableText({ compilerOptions: { incremental: true } }),\r\n    };\r\n    interface VerifyIncrementalWatchEmitInput {\r\n        subScenario: string;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 389 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 114,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const file1: File = {\r\n            path: `${project}/file1.ts`,\r\n            content: \"export const x = 10;\",\r\n        };\r\n        const file2: File = {\r\n            path: `${project}/file2.ts`,\r\n            content: \"export const y = 20;\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 114 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 85,
            "parameterCount": 0,
            "snippet": "() => {\r\n            const fileModified: File = {\r\n                path: file2.path,\r\n                content: `export const y: string = 20;`,\r\n            };\r\n            verifyIncrementalWatchEmit({\r\n                files: () => [file1, fileModified, config],\r\n                subScenario: \"module compilation/own file emit with errors\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 72,
            "parameterCount": 0,
            "snippet": "() => {\r\n                const system = TestServerHost.createWatchedSystem(\r\n                    [file1, fileModified, config],\r\n                    { currentDirectory: project },\r\n                );\r\n                const reportDiagnostic = ts.createDiagnosticReporter(system);\r\n                const parsedConfig = ts.parseConfigFileWithSystem(\"tsconfig.json\", {}, /*extendedConfigCache*/ undefined, /*watchOptionsToExtend*/ undefined, system, reportDiagnostic)!;\r\n                ts.performIncrementalCompilation({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 72,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const jsxImportSourceOptions = { module: \"commonjs\", jsx: \"react-jsx\", incremental: true, jsxImportSource: \"react\" };\r\n        const jsxLibraryContent = `export namespace JSX {\r\n    interface Element {}\r\n    interface IntrinsicElements {\r\n        div: {\r\n            propA?: boolean;\r\n        };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/moduleResolution.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 722,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTscWatch({\r\n        scenario: \"moduleResolution\",\r\n        subScenario: `watches for changes to package-json main fields`,\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `/user/username/projects/myproject/packages/pkg1/package.json`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 722 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 162,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function getSys(packageFileContents: string) {\r\n            const configFile: File = {\r\n                path: `/user/username/projects/myproject/src/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n                    compilerOptions: {\r\n                        target: \"es2016\",\r\n                        module: \"Node16\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 162 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `/user/username/projects/myproject/tsconfig.json`,\r\n                    content: jsonToReadableText({\r\n                        compilerOptions: { moduleResolution: \"node16\" },\r\n                    }),\r\n                },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `/user/username/projects/myproject/tsconfig.json`,\r\n                    content: jsonToReadableText({\r\n                        compilerOptions: { moduleResolution: \"node16\" },\r\n                    }),\r\n                },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 76,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `/user/username/projects/myproject/tsconfig.json`,\r\n                    content: jsonToReadableText({\r\n                        compilerOptions: { moduleResolution: \"node16\" },\r\n                    }),\r\n                },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/programUpdates.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 2465,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const scenario = \"programUpdates\";\r\n    const configFilePath = \"/user/username/workspace/solution/projects/project/tsconfig.json\";\r\n    const configFile: File = {\r\n        path: configFilePath,\r\n        content: `{}`,\r\n    };\r\n    const commonFile1: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2465 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 55,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const file1 = {\r\n            path: \"/user/username/workspace/solution/projects/project/f1.ts\",\r\n            content: `\r\n                export * from \"../projectc/f2\";\r\n                export * from \"../projectd/f3\";`,\r\n        };\r\n        const file2 = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyWithOptions(subScenario: string, options: ts.CompilerOptions) {\r\n            verifyTscWatch({\r\n                scenario,\r\n                subScenario: `should not trigger recompilation because of program emit/${subScenario}`,\r\n                commandLineArgs: [\"-w\", \"-p\", `/user/username/projects/myproject/tsconfig.json`],\r\n                sys: () => {\r\n                    const file1: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 66,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const field = \"fullscreen\";\r\n        const fieldWithoutReadonly = `interface Document {\r\n    ${field}: boolean;\r\n}`;\r\n        const libFileWithDocument: File = {\r\n            path: libFile.path,\r\n            content: `${libFile.content}\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/resolutionCache.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 7,
            "lineCount": 745,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const scenario = \"resolutionCache\";\r\n    it(\"caching works\", () => {\r\n        const root = {\r\n            path: \"/users/username/projects/project/d/f0.ts\",\r\n            content: `import {x} from \"f1\"`,\r\n        };\r\n        const imported = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 745 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 86,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const root = {\r\n            path: \"/users/username/projects/project/d/f0.ts\",\r\n            content: `import {x} from \"f1\"`,\r\n        };\r\n        const imported = {\r\n            path: \"/users/username/projects/project/f1.ts\",\r\n            content: `foo()`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 59,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const root = {\r\n            path: `/users/username/projects/project/foo.ts`,\r\n            content: `import {x} from \"bar\"`,\r\n        };\r\n        const imported = {\r\n            path: `/users/username/projects/project/bar.d.ts`,\r\n            content: `export const y = 1;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 70,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const root = {\r\n            path: `/users/username/projects/project/foo.ts`,\r\n            content: `import {x} from \"bar\"`,\r\n        };\r\n        const imported = {\r\n            path: `/users/username/projects/project/bar.d.ts`,\r\n            content: `export const y = 1;export const x = 10;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 82,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function getNodeAtTypes() {\r\n            const nodeAtTypesIndex: File = {\r\n                path: `/user/username/projects/myproject/node_modules/@types/node/index.d.ts`,\r\n                content: `/// <reference path=\"base.d.ts\" />`,\r\n            };\r\n            const nodeAtTypesBase: File = {\r\n                path: `/user/username/projects/myproject/node_modules/@types/node/base.d.ts`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/watchApi.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 248,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function createSystem(configText: string, mainText: string) {\r\n        const config: File = {\r\n            path: `/user/username/projects/myproject/tsconfig.json`,\r\n            content: configText,\r\n        };\r\n        const mainFile: File = {\r\n            path: `/user/username/projects/myproject/main.ts`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 248 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 6,
            "lineCount": 153,
            "parameterCount": 1,
            "snippet": "function verify(outFileOptions: ts.CompilerOptions | undefined) {\r\n        function scenarioName(scenario: string) {\r\n            return `${outFileOptions ? \"outFile\" : \"multiFile\"}/${scenario}`;\r\n        }\r\n        function baselineName(baseline: string) {\r\n            return `tscWatch/watchApi/${outFileOptions ? \"outFile\" : \"multiFile\"}/${baseline}.js`;\r\n        }\r\n        it(scenarioName(\"verifies that noEmit is handled on createSemanticDiagnosticsBuilderProgram and typechecking happens only on affected files\"), () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 153 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 110,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function setup(libExtends: boolean) {\r\n        const system = TestServerHost.createWatchedSystem({\r\n            \"/user/username/projects/project/tsconfig.json\": jsonToReadableText({\r\n                compilerOptions: { types: [] },\r\n                files: [\"app.ts\"],\r\n                references: [{ path: \"./lib\" }],\r\n            }),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 105,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"verify that module resolution with json extension works when returned without extension\", () => {\r\n        const configFileJson: any = {\r\n            compilerOptions: { module: \"commonjs\", resolveJsonModule: true },\r\n            files: [\"index.ts\"],\r\n        };\r\n        const mainFile: File = {\r\n            path: `/user/username/projects/myproject/index.ts`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 54,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyWatch(subScenario: string, implementHasInvalidatedResolution: boolean) {\r\n            it(subScenario, () => {\r\n                const { sys, baseline, cb, getPrograms } = createBaseline(TestServerHost.createWatchedSystem({\r\n                    [`/user/username/projects/myproject/tsconfig.json`]: jsonToReadableText({\r\n                        compilerOptions: { traceResolution: true, extendedDiagnostics: true },\r\n                        files: [\"main.ts\"],\r\n                    }),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tscWatch/watchEnvironment.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 852,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const scenario = \"watchEnvironment\";\r\n    verifyTscWatch({\r\n        scenario,\r\n        subScenario: \"watchFile/using dynamic priority polling\",\r\n        commandLineArgs: [\"--w\", \"/a/username/projects/project/typescript.ts\"],\r\n        sys: () => {\r\n            const projectFolder = \"/a/username/projects/project\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 852 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 306,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyRenamingFileInSubFolder(subScenario: string, tscWatchDirectory: Tsc_WatchDirectory) {\r\n            const projectFolder = \"/a/username/projects/project\";\r\n            const projectSrcFolder = `${projectFolder}/src`;\r\n            const configFile: File = {\r\n                path: `${projectFolder}/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n                    watchOptions: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 306 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifySymlinks",
            "complexity": 3,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "function verifySymlinks(synchronousWatchDirectory: boolean) {\r\n            verifyTscWatch({\r\n                scenario,\r\n                subScenario: `watchDirectories/when there are symlinks to folders in recursive folders${synchronousWatchDirectory ? \" with synchronousWatchDirectory\" : \"\"}`,\r\n                commandLineArgs: [\"--w\"],\r\n                sys: () => {\r\n                    const cwd = \"/home/user/projects/myproject\";\r\n                    const file1: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 201,
            "parameterCount": 0,
            "snippet": "() => {\r\n        verifyTscWatch({\r\n            scenario,\r\n            subScenario: \"watchOptions/with watchFile option\",\r\n            commandLineArgs: [\"-w\"],\r\n            sys: () => {\r\n                const configFile: File = {\r\n                    path: \"/user/username/projects/project/tsconfig.json\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 201 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 84,
            "parameterCount": 0,
            "snippet": "() => {\r\n            function sys(watchOptions: ts.WatchOptions, osFlavor?: TestServerHostOsFlavor.Linux): TestServerHost {\r\n                const configFile: File = {\r\n                    path: `/user/username/projects/myproject/tsconfig.json`,\r\n                    content: jsonToReadableText({ exclude: [\"node_modules\"], watchOptions }),\r\n                };\r\n                const main: File = {\r\n                    path: `/user/username/projects/myproject/src/main.ts`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsc/composite.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 159,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTsc({\r\n        scenario: \"composite\",\r\n        subScenario: \"when setting composite false on command line\",\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/project/src/main.ts\": \"export const x = 10;\",\r\n                \"/home/src/workspaces/project/tsconfig.json\": jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 159 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsc/declarationEmit.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 355,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"with casing changes\", () => {\r\n        interface VerifyDeclarationEmitInput {\r\n            subScenario: string;\r\n            files: FileOrFolderOrSymLink[];\r\n            rootProject: string;\r\n            changeCaseFileTestPath: (path: string) => boolean;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 355 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 244,
            "parameterCount": 0,
            "snippet": "() => {\r\n        interface VerifyDeclarationEmitInput {\r\n            subScenario: string;\r\n            files: FileOrFolderOrSymLink[];\r\n            rootProject: string;\r\n            changeCaseFileTestPath: (path: string) => boolean;\r\n        }\r\n        function changeCaseFile(file: FileOrFolderOrSymLink, testPath: (path: string) => boolean, replacePath: (path: string) => string): FileOrFolderOrSymLink {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 244 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 113,
            "parameterCount": 0,
            "snippet": "() => {\r\n            function pluginOneConfig() {\r\n                return jsonToReadableText({\r\n                    compilerOptions: {\r\n                        target: \"es5\",\r\n                        declaration: true,\r\n                        traceResolution: true,\r\n                    },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 113 lines, consider splitting"
              }
            ]
          },
          {
            "name": "sys",
            "complexity": 1,
            "lineCount": 87,
            "parameterCount": 0,
            "snippet": "() =>\r\n            TestServerHost.createWatchedSystem([\r\n                {\r\n                    path: `D:\\\\Work\\\\pkg1\\\\package.json`,\r\n                    content: jsonToReadableText({\r\n                        name: \"ts-specifier-bug\",\r\n                        version: \"1.0.0\",\r\n                        description: \"\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsc/extends.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsc/incremental.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 654,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTsc({\r\n        scenario: \"incremental\",\r\n        subScenario: \"when passing filename for buildinfo on commandline\",\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/project/src/main.ts\": \"export const x = 10;\",\r\n                \"/home/src/workspaces/project/tsconfig.json\": jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 654 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 74,
            "parameterCount": 0,
            "snippet": "() => {\r\n        enum AliasType {\r\n            None = \"\",\r\n            SameFile = \"aliased \",\r\n            DifferentFile = \"aliased in different file \",\r\n        }\r\n        function fileWithEnum(withAlias: AliasType) {\r\n            return withAlias !== AliasType.DifferentFile ? \"/home/src/workspaces/project/b.d.ts\" : \"/home/src/workspaces/project/worker.d.ts\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 5,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function verify(withAlias: AliasType, preserveConstEnums: boolean) {\r\n            verifyTsc({\r\n                scenario: \"incremental\",\r\n                subScenario: `with ${withAlias}const enums${preserveConstEnums ? \" with preserveConstEnums\" : \"\"}`,\r\n                commandLineArgs: [\"-i\", `a.ts`, \"--tsbuildinfofile\", \"a.tsbuildinfo\", ...preserveConstEnums ? [\"--preserveConstEnums\"] : []],\r\n                sys: () =>\r\n                    TestServerHost.createWatchedSystem({\r\n                        \"/home/src/workspaces/project/a.ts\": dedent`\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 108,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function withOptionChange(caption: string, ...options: readonly string[]): TestTscEdit {\r\n            return {\r\n                caption,\r\n                edit: ts.noop,\r\n                commandLineArgs: [...options],\r\n            };\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsc/listFilesOnly.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsc/projectReferences.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 152,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verifyTsc({\r\n        scenario: \"projectReferences\",\r\n        subScenario: \"when project contains invalid project reference\",\r\n        sys: () =>\r\n            TestServerHost.createWatchedSystem({\r\n                \"/home/src/workspaces/project/src/main.ts\": \"export const x = 10;\",\r\n                \"/home/src/workspaces/project/tsconfig.json\": jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 152 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/autoImportProvider.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 289,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"Auto import provider program is not created without dependencies listed in package.json\", () => {\r\n        const { session } = setup([\r\n            angularFormsDts,\r\n            angularFormsPackageJson,\r\n            tsconfig,\r\n            { path: packageJson.path, content: `{ \"dependencies\": {} }` },\r\n            indexTs,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 289 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 64,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"Does not create auto import providers upon opening projects for find-all-references\", () => {\r\n        const files = [\r\n            angularFormsDts,\r\n            angularFormsPackageJson,\r\n            { path: tsconfig.path, content: `{ \"references\": [{ \"path\": \"packages/a\" }, { \"path\": \"packages/b\" }] }` },\r\n            { path: packageJson.path, content: `{ \"private\": true }` },\r\n            { path: \"/user/username/projects/project/packages/a/package.json\", content: packageJson.content },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              }
            ]
          },
          {
            "name": "setup",
            "complexity": 1,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function setup(files: File[]) {\r\n    const host = TestServerHost.createServerHost(files);\r\n    const session = new TestSession(host);\r\n    session.executeCommandSeq<ts.server.protocol.ConfigureRequest>({\r\n        command: ts.server.protocol.CommandTypes.Configure,\r\n        arguments: {\r\n            preferences: {\r\n                includePackageJsonAutoImports: \"auto\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/compileOnSave.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 268,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"should respect line endings\", () => {\r\n        const logger = createLoggerWithInMemoryLogs(/*host*/ undefined!); // special handling\r\n        test(\"\\n\", logger);\r\n        test(\"\\r\\n\", logger);\r\n        baselineTsserverLogs(\"compileOnSave\", \"line endings\", { logger });\r\n        function test(newLine: string, logger: LoggerWithInMemoryLogs) {\r\n            const lines = [\"var x = 1;\", \"var y = 2;\"];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 268 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 104,
            "parameterCount": 0,
            "snippet": "() => {\r\n        describe(\"when program contains module\", () => {\r\n            it(\"when d.ts emit is enabled\", () => {\r\n                verifyGlobalSave(/*declaration*/ true, /*hasModule*/ true);\r\n            });\r\n            it(\"when d.ts emit is not enabled\", () => {\r\n                verifyGlobalSave(/*declaration*/ false, /*hasModule*/ true);\r\n            });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyGlobalSave",
            "complexity": 6,
            "lineCount": 86,
            "parameterCount": 2,
            "snippet": "function verifyGlobalSave(declaration: boolean, hasModule: boolean) {\r\n            const config: File = {\r\n                path: `/user/username/projects/myproject/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n                    compileOnSave: true,\r\n                    compilerOptions: {\r\n                        declaration,\r\n                        module: hasModule ? undefined : \"none\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 715,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"for configured projects\", () => {\r\n        function files() {\r\n            const moduleFile1: File = {\r\n                path: \"/home/src/workspace/projects/b/moduleFile1.ts\",\r\n                content: \"export function Foo() { };\",\r\n            };\r\n            const file1Consumer1: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 715 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 611,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function files() {\r\n            const moduleFile1: File = {\r\n                path: \"/home/src/workspace/projects/b/moduleFile1.ts\",\r\n                content: \"export function Foo() { };\",\r\n            };\r\n            const file1Consumer1: File = {\r\n                path: \"/home/src/workspace/projects/b/file1Consumer1.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 611 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/completions.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 409,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"works\", () => {\r\n        const aTs: File = {\r\n            path: \"/home/src/project/project/a.ts\",\r\n            content: \"export const foo = 0;\",\r\n        };\r\n        const bTs: File = {\r\n            path: \"/home/src/project/project/b.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 409 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 120,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function completions(session: TestSession, includeExternalModuleExports?: boolean) {\r\n            session.executeCommandSeq<ts.server.protocol.CompletionsRequest>({\r\n                command: ts.server.protocol.CommandTypes.CompletionInfo,\r\n                arguments: {\r\n                    file: \"/user/username/projects/app/src/index.ts\",\r\n                    line: 1,\r\n                    offset: 1,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 120 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 6,
            "lineCount": 91,
            "parameterCount": 2,
            "snippet": "function verify(withExistingImport: boolean, includeCompletionsForModuleExports: boolean) {\r\n            it(`in project reference setup with path mapping${withExistingImport ? \" with existing import\" : \"\"}${!includeCompletionsForModuleExports ? \" without includeCompletionsForModuleExports\" : \"\"}`, () => {\r\n                const host = TestServerHost.createServerHost({\r\n                    \"/user/username/projects/app/src/index.ts\": `\r\n${withExistingImport ? \"import { MyClass } from 'shared';\" : \"\"}`,\r\n                    \"/user/username/projects/app/tsconfig.json\": JSON.stringify(\r\n                        {\r\n                            compilerOptions: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 89,
            "parameterCount": 0,
            "snippet": "() => {\r\n                const host = TestServerHost.createServerHost({\r\n                    \"/user/username/projects/app/src/index.ts\": `\r\n${withExistingImport ? \"import { MyClass } from 'shared';\" : \"\"}`,\r\n                    \"/user/username/projects/app/tsconfig.json\": JSON.stringify(\r\n                        {\r\n                            compilerOptions: {\r\n                                outDir: \"dist\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 78,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const aTs: File = {\r\n            path: \"/home/src/project/project/a.ts\",\r\n            content: \"export const foo = 0;\",\r\n        };\r\n        const bTs: File = {\r\n            path: \"/home/src/project/project/b.ts\",\r\n            content: \"foo\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/configuredProjects.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 11,
            "lineCount": 1128,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"create configured project without file list\", () => {\r\n        const configFile: File = {\r\n            path: \"/home/src/project/project/a/b/tsconfig.json\",\r\n            content: jsonToReadableText({\r\n                compilerOptions: {},\r\n                exclude: [\"e\"],\r\n            }),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1128 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 103,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const foo: File = {\r\n            path: `/user/username/projects/myproject/src/foo.ts`,\r\n            content: \"export function foo() { }\",\r\n        };\r\n        const bar: File = {\r\n            path: `/user/username/projects/myproject/src/bar.ts`,\r\n            content: \"export function bar() { }\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 100,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function getService(additionalFiles?: File[]) {\r\n            const alphaExtendedConfig: File = {\r\n                path: `/user/username/projects/myproject/extended/alpha.tsconfig.json`,\r\n                content: \"{}\",\r\n            };\r\n            const bravoExtendedConfig: File = {\r\n                path: `/user/username/projects/myproject/extended/bravo.tsconfig.json`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 56,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const configFile: File = {\r\n            path: `/user/username/projects/myproject/tsconfig.json`,\r\n            content: jsonToReadableText({ files: [\"commonFile1.ts\"] }),\r\n        };\r\n        const commonFile1: File = {\r\n            path: `/user/username/projects/myproject/commonFile1.ts`,\r\n            content: \"let x = 1\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 199,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function setup(parentOrSiblingConfigFile: File) {\r\n            const configFile: File = {\r\n                path: `/user/username/projects/myproject/folder/tsconfig.json`,\r\n                content: jsonToReadableText({ files: [\"commonFile1.ts\"] }),\r\n            };\r\n            const commonFile1: File = {\r\n                path: `/user/username/projects/myproject/folder/commonFile1.ts`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 199 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/declarationFileMaps.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 402,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const aTs: File = {\r\n        path: \"/home/src/projects/project/a/a.ts\",\r\n        content: \"export function fnA() {}\\nexport interface IfaceA {}\\nexport const instanceA: IfaceA = {};\",\r\n    };\r\n    const compilerOptions: ts.CompilerOptions = {\r\n        outDir: \"bin\",\r\n        declaration: true,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 402 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/exportMapCache.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 111,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const libTsconfig: File = {\r\n        path: \"/home/src/projects/project/packages/lib/tsconfig.json\",\r\n        content: jsonToReadableText({\r\n            compilerOptions: {\r\n                composite: true,\r\n                module: \"commonjs\",\r\n            },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyReferences",
            "complexity": 4,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function verifyReferences(includesLib: boolean) {\r\n        const files = [libTsconfig, libIndex, appTsconfig, appIndex];\r\n        if (includesLib) {\r\n            files.push({\r\n                path: \"/home/src/projects/project/packages/app/other.ts\",\r\n                content: `import { foo } from \"../lib\";`,\r\n            });\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 179,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const files = [aTs, bTs, ambientDeclaration, tsconfig, packageJson, mobxPackageJson, mobxDts, exportEqualsMappedType];\r\n    const setup = createSetup(files, [aTs, bTs], { file: bTs.path, line: 1, offset: 3 });\r\n    it(\"caches auto-imports in the same file\", () => {\r\n        const { exportMapCache, session } = setup();\r\n        assert.ok(exportMapCache.isUsableByFile(bTs.path as ts.Path));\r\n        assert.ok(!exportMapCache.isEmpty());\r\n        baselineTsserverLogs(\"exportMapCache\", \"caches auto-imports in the same file\", session);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 179 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 83,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const utilsTs: File = {\r\n            path: \"/home/src/projects/project/utils.ts\",\r\n            content: `export class Element {\r\n            }\r\n            export abstract class Component {\r\n                abstract render(): Element;\r\n            }`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/externalProjects.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 819,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"can handle tsconfig file name with difference casing\", () => {\r\n        function verifyConfigFileCasing(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const f1 = {\r\n                path: \"/home/src/projects/project/a/b/app.ts\",\r\n                content: \"let x = 1\",\r\n            };\r\n            const config = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 819 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 87,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyAddRemoveConfig(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const f1 = {\r\n                path: \"/home/src/projects/project/a/b/app.ts\",\r\n                content: \"let x = 1;\",\r\n            };\r\n            const cLib = {\r\n                path: \"/home/src/projects/project/a/b/c/lib.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyAddRemoveConfig",
            "complexity": 4,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "function verifyAddRemoveConfig(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const f1 = {\r\n                path: \"/home/src/projects/project/a/b/app.ts\",\r\n                content: \"let x = 1;\",\r\n            };\r\n            const cLib = {\r\n                path: \"/home/src/projects/project/a/b/c/lib.ts\",\r\n                content: \"\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyAddRemoveConfig(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const f1 = {\r\n                path: \"/home/src/projects/project/a/b/app.ts\",\r\n                content: \"let x = 1;\",\r\n            };\r\n            const f2 = {\r\n                path: \"/home/src/projects/project/a/b/lib.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 55,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyDeletingConfigFile(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const site = {\r\n                path: \"/user/someuser/projects/project/js/site.js\",\r\n                content: \"\",\r\n            };\r\n            const configFile = {\r\n                path: \"/user/someuser/projects/project/tsconfig.json\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 364,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"works when extends is specified with a case insensitive file system\", () => {\r\n        const rootPath = \"/Users/username/dev/project\";\r\n        const file1: File = {\r\n            path: `${rootPath}/index.ts`,\r\n            content: 'import {x} from \"file2\";',\r\n        };\r\n        const file2: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 364 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 169,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifySymlink(\r\n            subScenario: string,\r\n            linkPath: string,\r\n            getFiles: () => { moduleA: File; symlinkA: SymLink; moduleB: File; tsconfig: File; },\r\n        ) {\r\n            it(subScenario, () => {\r\n                const { moduleA, symlinkA, moduleB, tsconfig } = getFiles();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 169 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifySymlink",
            "complexity": 1,
            "lineCount": 95,
            "parameterCount": 3,
            "snippet": "function verifySymlink(\r\n            subScenario: string,\r\n            linkPath: string,\r\n            getFiles: () => { moduleA: File; symlinkA: SymLink; moduleB: File; tsconfig: File; },\r\n        ) {\r\n            it(subScenario, () => {\r\n                const { moduleA, symlinkA, moduleB, tsconfig } = getFiles();\r\n                const host = TestServerHost.createServerHost([moduleA, symlinkA, moduleB, tsconfig]);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 58,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const host = getSysForMultipleErrorsForceConsistentCasingInFileNames(/*forTsserver*/ true);\r\n        const session = new TestSession(host);\r\n        const file = \"/home/src/projects/project/src/struct.d.ts\";\r\n        let fileText = host.readFile(file)!;\r\n        openFilesForSession([{ file, projectRootPath: \"/home/src/projects/project\" }], session);\r\n        verifyGetErrRequest({ session, files: [file] });\r\n        updateFile(fileText + \"\\nexport const y = 10;\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/getEditsForFileRename.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 22,
            "lineCount": 277,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"works for host implementing 'resolveModuleNames' and 'getResolvedModuleWithFailedLookupLocationsFromCache'\", () => {\r\n        const userTs: File = {\r\n            path: \"/home/src/projects/project//user.ts\",\r\n            content: 'import { x } from \"./old\";',\r\n        };\r\n        const newTs: File = {\r\n            path: \"/home/src/projects/project/new.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 277 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 92,
            "parameterCount": 1,
            "snippet": "withUpdateOpen =>\r\n        [true, false].forEach(openedBeforeChange => {\r\n            [true, false].forEach(closedBeforeChange => {\r\n                if (closedBeforeChange && !openedBeforeChange) return;\r\n                it(`works with when file is opened ${openedBeforeChange ? \"before\" : \"after\"} seeing file existance on the disk${closedBeforeChange ? \" closed before change\" : \"\"}${withUpdateOpen ? \" with updateOpen\" : \"\"}`, () => {\r\n                    const oldFilePath = \"/home/src/projects/myproject/src/old.ts\";\r\n                    const host = TestServerHost.createServerHost({\r\n                        \"/home/src/projects/myproject/src/index.ts\": `import {} from '@/old';`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "openedBeforeChange => {\r\n            [true, false].forEach(closedBeforeChange => {\r\n                if (closedBeforeChange && !openedBeforeChange) return;\r\n                it(`works with when file is opened ${openedBeforeChange ? \"before\" : \"after\"} seeing file existance on the disk${closedBeforeChange ? \" closed before change\" : \"\"}${withUpdateOpen ? \" with updateOpen\" : \"\"}`, () => {\r\n                    const oldFilePath = \"/home/src/projects/myproject/src/old.ts\";\r\n                    const host = TestServerHost.createServerHost({\r\n                        \"/home/src/projects/myproject/src/index.ts\": `import {} from '@/old';`,\r\n                        [oldFilePath]: `export const x = 10;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "closedBeforeChange => {\r\n                if (closedBeforeChange && !openedBeforeChange) return;\r\n                it(`works with when file is opened ${openedBeforeChange ? \"before\" : \"after\"} seeing file existance on the disk${closedBeforeChange ? \" closed before change\" : \"\"}${withUpdateOpen ? \" with updateOpen\" : \"\"}`, () => {\r\n                    const oldFilePath = \"/home/src/projects/myproject/src/old.ts\";\r\n                    const host = TestServerHost.createServerHost({\r\n                        \"/home/src/projects/myproject/src/index.ts\": `import {} from '@/old';`,\r\n                        [oldFilePath]: `export const x = 10;`,\r\n                        \"/home/src/projects/myproject/tsconfig.json\": jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 12,
            "lineCount": 86,
            "parameterCount": 0,
            "snippet": "() => {\r\n                    const oldFilePath = \"/home/src/projects/myproject/src/old.ts\";\r\n                    const host = TestServerHost.createServerHost({\r\n                        \"/home/src/projects/myproject/src/index.ts\": `import {} from '@/old';`,\r\n                        [oldFilePath]: `export const x = 10;`,\r\n                        \"/home/src/projects/myproject/tsconfig.json\": jsonToReadableText({\r\n                            compilerOptions: {\r\n                                paths: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/goToDefinition.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 130,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"does not issue errors on jsdoc in TS\", () => {\r\n        const files: File[] = [\r\n            {\r\n                path: \"/home/src/projects/project/packages/babel-loader/tsconfig.json\",\r\n                content: `\r\n{\r\n    \"compilerOptions\": {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 130 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 61,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const files: File[] = [\r\n            {\r\n                path: \"/home/src/projects/project/packages/babel-loader/tsconfig.json\",\r\n                content: `\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"ES2018\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 67,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const files: File[] = [\r\n            {\r\n                path: \"/home/src/projects/project/packages/babel-loader/tsconfig.json\",\r\n                content: `\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"ES2018\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 71,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"should be set to 2 if the project has js root files\", () => {\r\n        const file1: File = {\r\n            path: \"/home/src/projects/project/file1.js\",\r\n            content: `var t = require(\"test\"); t.`,\r\n        };\r\n        const moduleFile: File = {\r\n            path: \"/home/src/projects/project/node_modules/test/index.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/occurences.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/partialSemanticServer.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 219,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function setup() {\r\n        const file1: File = {\r\n            path: `/user/username/projects/myproject/a.ts`,\r\n            content: `import { y, cc } from \"./b\";\r\nimport { something } from \"something\";\r\nclass c { prop = \"hello\"; foo() { return this.prop; } }`,\r\n        };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 219 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/plugins.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 148,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function createGetExternalFiles(getSession: () => TestSession) {\r\n        const externalFiles = new Map<ts.server.Project, string[]>();\r\n        return (project: ts.server.Project, updateLevel: ts.ProgramUpdateLevel) => {\r\n            if (project.projectKind !== ts.server.ProjectKind.Configured) return [];\r\n            if (updateLevel === ts.ProgramUpdateLevel.Update) {\r\n                const existing = externalFiles.get(project);\r\n                if (existing) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 69,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"getSupportedCodeFixes can be proxied\", () => {\r\n        const aTs: File = {\r\n            path: \"/home/src/projects/project/a.ts\",\r\n            content: `class c { prop = \"hello\"; foo() { const x = 0; } }`,\r\n        };\r\n        const bTs: File = {\r\n            path: \"/home/src/projects/project/b.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 67,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const aTs: File = {\r\n            path: \"/home/src/projects/project/a.ts\",\r\n            content: `class c { prop = \"hello\"; foo() { const x = 0; } }`,\r\n        };\r\n        const bTs: File = {\r\n            path: \"/home/src/projects/project/b.ts\",\r\n            content: aTs.content,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 54,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const aTs: File = {\r\n            path: \"/user/username/projects/myproject/a.ts\",\r\n            content: `export const a = 10;`,\r\n        };\r\n        const dTs: File = {\r\n            path: \"/user/username/projects/myproject/d.ts\",\r\n            content: `export const d = 10;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 62,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const aTs: File = {\r\n            path: \"/user/username/projects/myproject/a.ts\",\r\n            content: `export const a = 10;`,\r\n        };\r\n        const bVue: File = {\r\n            path: \"/user/username/projects/myproject/b.vue\",\r\n            content: \"bVueFile\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectErrors.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 73,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function verifyNpmInstall(timeoutDuringPartialInstallation: boolean) {\r\n        const main: File = {\r\n            path: `/user/username/projects/myproject/src/main.ts`,\r\n            content: \"import * as _a from '@angular/core';\",\r\n        };\r\n        const config: File = {\r\n            path: `/user/username/projects/myproject/tsconfig.json`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyNpmInstall",
            "complexity": 5,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function verifyNpmInstall(timeoutDuringPartialInstallation: boolean) {\r\n        const main: File = {\r\n            path: `/user/username/projects/myproject/src/main.ts`,\r\n            content: \"import * as _a from '@angular/core';\",\r\n        };\r\n        const config: File = {\r\n            path: `/user/username/projects/myproject/tsconfig.json`,\r\n            content: \"{}\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 202,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"document is not contained in project\", () => {\r\n        const file1 = {\r\n            path: \"/home/src/projects/project/a/b/app.ts\",\r\n            content: \"\",\r\n        };\r\n        const corruptedConfig = {\r\n            path: \"/home/src/projects/project/a/b/tsconfig.json\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 202 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 174,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"external project - diagnostics for missing files\", () => {\r\n        const file1 = {\r\n            path: \"/home/src/projects/project/a/b/app.ts\",\r\n            content: \"\",\r\n        };\r\n        const file2 = {\r\n            path: \"/home/src/projects/project/a/b/applib.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 174 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 51,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const file1 = {\r\n            path: \"/home/src/projects/project/a/b/app.ts\",\r\n            content: \"\",\r\n        };\r\n        const file2 = {\r\n            path: \"/home/src/projects/project/a/b/lib.ts\",\r\n            content: \"\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 1659,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const dependecyLocation = `/user/username/projects/myproject/dependency`;\r\n    const usageLocation = `/user/username/projects/myproject/usage`;\r\n    const dependencyTs: File = {\r\n        path: `${dependecyLocation}/fns.ts`,\r\n        content: `export function fn1() { }\r\nexport function fn2() { }\r\n`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1659 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 671,
            "parameterCount": 0,
            "snippet": "() => {\r\n        describe(\"Of usageTs\", () => {\r\n            it(\"with initial file open, without specifying project file\", () => {\r\n                const host = TestServerHost.createServerHost([dependencyTs, dependencyConfig, usageTs, usageConfig]);\r\n                const session = new TestSession(host);\r\n                openFilesForSession([usageTs], session);\r\n                session.executeCommandSeq<ts.server.protocol.CompileOnSaveAffectedFileListRequest>({\r\n                    command: ts.server.protocol.CommandTypes.CompileOnSaveAffectedFileList,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 671 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 334,
            "parameterCount": 0,
            "snippet": "() => {\r\n            it(\"with initial file open, without specifying project file\", () => {\r\n                const host = TestServerHost.createServerHost([dependencyTs, dependencyConfig, usageTs, usageConfig]);\r\n                const session = new TestSession(host);\r\n                openFilesForSession([usageTs], session);\r\n                session.executeCommandSeq<ts.server.protocol.CompileOnSaveAffectedFileListRequest>({\r\n                    command: ts.server.protocol.CommandTypes.CompileOnSaveAffectedFileList,\r\n                    arguments: { file: usageTs.path },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 334 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 334,
            "parameterCount": 0,
            "snippet": "() => {\r\n            it(\"with initial file open, without specifying project file\", () => {\r\n                const host = TestServerHost.createServerHost([dependencyTs, dependencyConfig, usageTs, usageConfig]);\r\n                const session = new TestSession(host);\r\n                openFilesForSession([usageTs], session);\r\n                session.executeCommandSeq<ts.server.protocol.CompileOnSaveAffectedFileListRequest>({\r\n                    command: ts.server.protocol.CommandTypes.CompileOnSaveAffectedFileList,\r\n                    arguments: { file: dependencyTs.path },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 334 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 949,
            "parameterCount": 0,
            "snippet": "() => {\r\n        describe(\"Of usageTs\", () => {\r\n            it(\"with initial file open, without specifying project file\", () => {\r\n                const host = TestServerHost.createServerHost([dependencyTs, dependencyConfig, usageTs, usageConfig]);\r\n                const session = new TestSession(host);\r\n                openFilesForSession([usageTs, dependencyTs], session);\r\n                session.executeCommandSeq<ts.server.protocol.CompileOnSaveAffectedFileListRequest>({\r\n                    command: ts.server.protocol.CommandTypes.CompileOnSaveAffectedFileList,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 949 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferences.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 29,
            "lineCount": 1953,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"with container project\", () => {\r\n        function setup(tempFile?: File) {\r\n            const containerLibConfig: File = {\r\n                path: \"/user/username/projects/container/lib/tsconfig.json\",\r\n                content: jsonToReadableText({\r\n                    compilerOptions: {\r\n                        outFile: \"../built/local/lib.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1953 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 7,
            "lineCount": 138,
            "parameterCount": 0,
            "snippet": "() => {\r\n        interface Packages {\r\n            bPackageJson: File;\r\n            aTest: File;\r\n            bFoo: File;\r\n            bBar: File;\r\n            bSymlink: SymLink;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 138 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 7,
            "lineCount": 121,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const indexA: File = {\r\n            path: `/user/username/projects/myproject/a/index.ts`,\r\n            content: `import { B } from \"../b/lib\";\r\nconst b: B = new B();`,\r\n        };\r\n        const configB: File = {\r\n            path: `/user/username/projects/myproject/b/tsconfig.json`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 203,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"finds default project\", () => {\r\n            const { session, appDemo, baseline, verifyProjectManagement } = setup();\r\n            verifyGetErrRequest({\r\n                files: [appDemo],\r\n                session,\r\n            });\r\n            verifyProjectManagement(); // Should not remove projects for file\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 203 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 4,
            "lineCount": 348,
            "parameterCount": 0,
            "snippet": "() => {\r\n        interface Setup {\r\n            scenario: string;\r\n            solutionOptions?: ts.CompilerOptions;\r\n            solutionFiles?: string[];\r\n            configRefs: string[];\r\n            additionalFiles: readonly File[];\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 348 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/projectReferencesSourcemap.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 20,
            "lineCount": 537,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const dependecyLocation = `/user/username/projects/myproject/dependency`;\r\n    const dependecyDeclsLocation = `/user/username/projects/myproject/decls`;\r\n    const mainLocation = `/user/username/projects/myproject/main`;\r\n    const dependencyTs: File = {\r\n        path: `${dependecyLocation}/FnS.ts`,\r\n        content: `export function fn1() { }\r\nexport function fn2() { }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 537 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyFileChangeAndRenames",
            "complexity": 8,
            "lineCount": 79,
            "parameterCount": 1,
            "snippet": "function verifyFileChangeAndRenames(options: VerifyFileRenamesOptions) {\r\n        function file(options: VerifyFileRenamesOptions) {\r\n            return options.file === \"dts\" ? dtsLocation : dtsMapLocation;\r\n        }\r\n        enum ChangeAsRenameType {\r\n            NoTimeout = \"no timeout\",\r\n            TimeoutAfterDelete = \"timeout after delete\",\r\n            TimeoutAfterWrite = \"timeout after write\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 66,
            "parameterCount": 0,
            "snippet": "() => {\r\n        verifyScenario({\r\n            scenarioLocation: \"dependencyAndUsage\",\r\n            scenario: \"goToDef and rename locations\",\r\n            openFiles: [mainTs, dependencyTs, randomFile],\r\n            action: [goToDefFromMainTs, renameFromDependencyTs],\r\n            change: session => {\r\n                makeChangeToMainTs(session);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyScenario",
            "complexity": 2,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "function verifyScenario(options: VerifyScenario) {\r\n        verifyForAllSessionTypes((type, options) => {\r\n            verifyAction({\r\n                scenarioLocation: options.scenarioLocation,\r\n                type,\r\n                scenario: options.scenario,\r\n                openFiles: options.openFiles,\r\n                action: options.action,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 56,
            "parameterCount": 2,
            "snippet": "(type, options) => {\r\n            verifyAction({\r\n                scenarioLocation: options.scenarioLocation,\r\n                type,\r\n                scenario: options.scenario,\r\n                openFiles: options.openFiles,\r\n                action: options.action,\r\n            });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/projects.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 1534,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"handles the missing files - that were added to program because they were added with ///<ref\", () => {\r\n        const file1: File = {\r\n            path: \"/user/username/projects/project/commonFile1.ts\",\r\n            content: `/// <reference path=\"commonFile2.ts\"/>\r\n                    let x = y`,\r\n        };\r\n        const commonFile2: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1534 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyDeferredContext(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const file1 = {\r\n                path: \"/home/src/projects/project/a.deferred\",\r\n                content: \"const a = 1;\",\r\n            };\r\n            const file2 = {\r\n                path: \"/home/src/projects/project/b.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 84,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"external project including config file\", () => {\r\n            const file1 = {\r\n                path: \"/user/username/projects/project/f1.ts\",\r\n                content: \"let x =1;\",\r\n            };\r\n            const config1 = {\r\n                path: \"/user/username/projects/project/tsconfig.json\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 73,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const file1 = {\r\n            path: \"/user/username/projects/project/f1.ts\",\r\n            content: ` `,\r\n        };\r\n        const file2 = {\r\n            path: \"/user/username/projects/project/f2.html\",\r\n            content: `var hello = \"hello\";`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 71,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const file1 = {\r\n            path: \"/user/username/projects/project/f1.ts\",\r\n            content: ` `,\r\n        };\r\n        const file2 = {\r\n            path: \"/user/username/projects/project/f2.html\",\r\n            content: `var hello = \"hello\";`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/resolutionCache.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 58,
            "parameterCount": 0,
            "snippet": "() => {\r\n    verify(\"when resolution is succeeds in global typings location with import from the cache file\", () => ({\r\n        [`${getPathForTypeScriptTypingInstallerCacheTest(\"node_modules/@types/node/index.d.ts\")}`]: dedent`\r\n            import { x } from \"undici-types\";\r\n            export const y = x;\r\n        `,\r\n        [`${getPathForTypeScriptTypingInstallerCacheTest(\"node_modules/@types/undici-types/index.d.ts\")}`]: dedent`\r\n            export const x = 10;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 137,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"should restore the states for inferred projects\", () => {\r\n        const moduleFile = {\r\n            path: \"/users/username/projects/project/moduleFile.ts\",\r\n            content: \"export function bar() { };\",\r\n        };\r\n        const file1 = {\r\n            path: \"/users/username/projects/project/file1.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 256,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const configFile: File = {\r\n        path: `/user/username/projects/myproject/tsconfig.json`,\r\n        content: jsonToReadableText({ compilerOptions: { traceResolution: true } }),\r\n    };\r\n    function getModules(module1Path: string, module2Path: string) {\r\n        const module1: File = {\r\n            path: module1Path,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 256 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 57,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function verifyModuleResolution(scenario: string, useNodeFile: boolean) {\r\n            it(scenario, () => {\r\n                const nodeFile: File = {\r\n                    path: `/user/username/projects/myproject/src/typings/node.d.ts`,\r\n                    content: `\r\ndeclare module \"fs\" {\r\n    export interface something {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyModuleResolution",
            "complexity": 2,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "function verifyModuleResolution(scenario: string, useNodeFile: boolean) {\r\n            it(scenario, () => {\r\n                const nodeFile: File = {\r\n                    path: `/user/username/projects/myproject/src/typings/node.d.ts`,\r\n                    content: `\r\ndeclare module \"fs\" {\r\n    export interface something {\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/session.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 152,
            "parameterCount": 0,
            "snippet": "() => {\r\n    class InProcSession extends ts.server.Session {\r\n        private queue: ts.server.protocol.Request[] = [];\r\n        constructor(private client: InProcClient) {\r\n            super({\r\n                host: mockHost,\r\n                cancellationToken: ts.server.nullCancellationToken,\r\n                useSingleInferredProject: false,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 152 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 309,
            "parameterCount": 0,
            "snippet": "() => {\r\n    let session: TestSession;\r\n    let lastSent: ts.server.protocol.Message;\r\n    function createSession(): TestSession {\r\n        const opts: ts.server.SessionOptions = {\r\n            host: mockHost,\r\n            cancellationToken: ts.server.nullCancellationToken,\r\n            useSingleInferredProject: false,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 309 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 62,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const allCommandNames: ts.server.protocol.CommandTypes[] = Object.values((ts.server.protocol as any).CommandTypes);\r\n        it(\"should not throw when commands are executed with invalid arguments\", () => {\r\n            let i = 0;\r\n            for (const name of allCommandNames) {\r\n                const req: ts.server.protocol.Request = {\r\n                    command: name,\r\n                    seq: i,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 117,
            "parameterCount": 0,
            "snippet": "() => {\r\n        it(\"should throw when commands are executed with invalid arguments\", () => {\r\n            const req: ts.server.protocol.FileRequest = {\r\n                command: ts.server.protocol.CommandTypes.Open,\r\n                seq: 0,\r\n                type: \"request\",\r\n                arguments: {\r\n                    file: undefined!, // TODO: GH#18217\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 117 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 69,
            "parameterCount": 0,
            "snippet": "() => {\r\n    let oldPrepare: ts.AnyFunction;\r\n    let oldStackTraceLimit: number;\r\n    before(() => {\r\n        oldStackTraceLimit = (Error as any).stackTraceLimit;\r\n        oldPrepare = (Error as any).prepareStackTrace;\r\n        delete (Error as any).prepareStackTrace;\r\n        (Error as any).stackTraceLimit = 10;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/syntacticServer.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 152,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function setup() {\r\n        const file1: File = {\r\n            path: `/user/username/projects/myproject/a.ts`,\r\n            content: `import { y, cc } from \"./b\";\r\nimport { something } from \"something\";\r\nclass c { prop = \"hello\"; foo() { return this.prop; } }`,\r\n        };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 152 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/typeAquisition.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/typeOnlyImportChains.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 149,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"named export -> type-only namespace import -> named export -> named import\", () => {\r\n        const a = {\r\n            path: \"/home/src/projects/project/a.ts\",\r\n            content: \"export class A {}\",\r\n        };\r\n        const b = {\r\n            path: \"/home/src/projects/project/b.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 149 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/typingsInstaller.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 1306,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"configured projects (typings installed) 1\", () => {\r\n        const file1 = {\r\n            path: \"/user/username/projects/project/app.js\",\r\n            content: \"\",\r\n        };\r\n        const tsconfig = {\r\n            path: \"/user/username/projects/project/tsconfig.json\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1306 lines, consider splitting"
              }
            ]
          },
          {
            "name": "testConfiguredProjectNodeModules",
            "complexity": 3,
            "lineCount": 68,
            "parameterCount": 2,
            "snippet": "function testConfiguredProjectNodeModules(\r\n        subScenario: string,\r\n        { jsconfigContent, appJsContent }: {\r\n            jsconfigContent?: object;\r\n            appJsContent?: string;\r\n        } = {},\r\n    ) {\r\n        it(subScenario, () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 3,
            "lineCount": 60,
            "parameterCount": 0,
            "snippet": "() => {\r\n            const app = {\r\n                path: \"/user/username/projects/project/app.js\",\r\n                content: appJsContent || \"\",\r\n            };\r\n            const pkgJson = {\r\n                path: \"/user/username/projects/project/package.json\",\r\n                content: jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 303,
            "parameterCount": 0,
            "snippet": "() => {\r\n    const emptySafeList = ts.emptyMap;\r\n    it(\"should use mappings from safe list\", () => {\r\n        const app = {\r\n            path: \"/home/src/projects/project/app.js\",\r\n            content: \"\",\r\n        };\r\n        const jquery = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 303 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 70,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const lodashJs = {\r\n            path: \"/user/username/projects/project//lodash.js\",\r\n            content: \"\",\r\n        };\r\n        const commanderJs = {\r\n            path: \"/user/username/projects/project//commander.js\",\r\n            content: \"\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/versionCache.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 14,
            "lineCount": 132,
            "parameterCount": 0,
            "snippet": "() => {\r\n    let rsa: number[] = [];\r\n    let la: number[] = [];\r\n    let las: number[] = [];\r\n    let elas: number[] = [];\r\n    let ersa: number[] = [];\r\n    let ela: number[] = [];\r\n    const iterationCount = 20;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 132 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 73,
            "parameterCount": 0,
            "snippet": "() => {\r\n    let validateEditAtLineCharIndex: (line: number, char: number, deleteLength: number, insertString: string) => void;\r\n    before(() => {\r\n        const testContent = `/// <reference path=\"z.ts\" />\r\nvar x = 10;\r\nvar y = { zebra: 12, giraffe: \"ell\" };\r\nz.a;\r\nclass Point {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 103,
            "parameterCount": 0,
            "snippet": "() => {\r\n    let validateEditAtPosition: (position: number, deleteLength: number, insertString: string) => void;\r\n    let testContent: string;\r\n    let lines: string[];\r\n    let lineMap: number[];\r\n    before(() => {\r\n        testContent = `in this story:\r\nthe lazy brown fox\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/watchEnvironment.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 297,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"with watchFile option as host configuration\", () => {\r\n        const commonFile1: File = {\r\n            path: \"/user/username/projects/project/commonFile1.ts\",\r\n            content: \"let x = 1\",\r\n        };\r\n        const commonFile2: File = {\r\n            path: \"/user/username/projects/project/commonFile2.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 297 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 131,
            "parameterCount": 0,
            "snippet": "() => {\r\n        function setupFiles() {\r\n            const main: File = {\r\n                path: `/user/username/projects/myproject/src/main.ts`,\r\n                content: `import { foo } from \"bar\"; foo();`,\r\n            };\r\n            const bar: File = {\r\n                path: `/user/username/projects/myproject/node_modules/bar/index.d.ts`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 131 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 61,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function verifyCompletionListWithNewFileInSubFolder(scenario: string, tscWatchDirectory: Tsc_WatchDirectory) {\r\n        it(scenario, () => {\r\n            const projectFolder = \"/a/username/workspace/project\";\r\n            const projectSrcFolder = `${projectFolder}/src`;\r\n            const configFile: File = {\r\n                path: `${projectFolder}/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 67,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(`unittests:: tsserver:: watchEnvironment:: tsserverProjectSystem recursive watch directory implementation does not watch files/directories in node_modules starting with \".\"`, () => {\r\n        const projectFolder = \"/a/username/workspace/project\";\r\n        const projectSrcFolder = `${projectFolder}/src`;\r\n        const configFile: File = {\r\n            path: `${projectFolder}/tsconfig.json`,\r\n            content: \"{}\",\r\n        };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 65,
            "parameterCount": 0,
            "snippet": "() => {\r\n        const projectFolder = \"/a/username/workspace/project\";\r\n        const projectSrcFolder = `${projectFolder}/src`;\r\n        const configFile: File = {\r\n            path: `${projectFolder}/tsconfig.json`,\r\n            content: \"{}\",\r\n        };\r\n        const index: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/extract/constants.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 386,
            "parameterCount": 0,
            "snippet": "() => {\r\n    testExtractConstant(\"extractConstant_TopLevel\", `let x = [#|1|];`);\r\n    testExtractConstant(\r\n        \"extractConstant_Namespace\",\r\n        `namespace N {\r\n    let x = [#|1|];\r\n}`,\r\n    );\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 386 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/extract/functions.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 712,
            "parameterCount": 0,
            "snippet": "() => {\r\n    testExtractFunction(\r\n        \"extractFunction1\",\r\n        `namespace A {\r\n    let x = 1;\r\n    function foo() {\r\n    }\r\n    namespace B {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 712 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/extract/helpers.ts",
        "criticalFunctions": [
          {
            "name": "extractTest",
            "complexity": 12,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "export function extractTest(source: string): Test {\r\n    const activeRanges: Range[] = [];\r\n    let text = \"\";\r\n    let lastPos = 0;\r\n    let pos = 0;\r\n    const ranges = new Map<string, Range>();\r\n    while (pos < source.length) {\r\n        if (\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "testExtractSymbol",
            "complexity": 5,
            "lineCount": 66,
            "parameterCount": 4,
            "snippet": "export function testExtractSymbol(caption: string, text: string, baselineFolder: string, description: ts.DiagnosticMessage): void {\r\n    const t = extractTest(text);\r\n    const selectionRange = t.ranges.get(\"selection\")!;\r\n    if (!selectionRange) {\r\n        throw new Error(`Test ${caption} does not specify selection range`);\r\n    }\r\n    [ts.Extension.Ts, ts.Extension.Js].forEach(extension => it(`${caption} [${extension}]`, () => runBaseline(extension)));\r\n    function runBaseline(extension: ts.Extension) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/services/extract/ranges.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 442,
            "parameterCount": 0,
            "snippet": "() => {\r\n    describe(\"get extract range from selection\", () => {\r\n        testExtractRange(\r\n            \"extractRange1\",\r\n            `\r\n                [#|\r\n                [$|var x = 1;\r\n                var y = 2;|]|]\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 442 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 212,
            "parameterCount": 0,
            "snippet": "() => {\r\n        testExtractRange(\r\n            \"extractRange1\",\r\n            `\r\n                [#|\r\n                [$|var x = 1;\r\n                var y = 2;|]|]\r\n            `,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 212 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/projectLanguageServiceState.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 60,
            "parameterCount": 0,
            "snippet": "() => {\r\n    it(\"language service disabled events are triggered\", () => {\r\n        const f1 = {\r\n            path: \"/user/username/projects/project/app.js\",\r\n            content: \"let x = 1;\",\r\n        };\r\n        const f2 = {\r\n            path: \"/user/username/projects/project/largefile.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "src/testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 406,
            "parameterCount": 0,
            "snippet": "() => {\r\n    function verifyProjectsUpdatedInBackgroundEvent(scenario: string, createSession: (host: TestServerHost) => TestSession) {\r\n        it(\"when adding new file\", () => {\r\n            const commonFile1: File = {\r\n                path: \"/users/username/projects/project/file1.ts\",\r\n                content: \"export var x = 10;\",\r\n            };\r\n            const commonFile2: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 406 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyProjectsUpdatedInBackgroundEvent",
            "complexity": 6,
            "lineCount": 386,
            "parameterCount": 2,
            "snippet": "function verifyProjectsUpdatedInBackgroundEvent(scenario: string, createSession: (host: TestServerHost) => TestSession) {\r\n        it(\"when adding new file\", () => {\r\n            const commonFile1: File = {\r\n                path: \"/users/username/projects/project/file1.ts\",\r\n                content: \"export var x = 10;\",\r\n            };\r\n            const commonFile2: File = {\r\n                path: \"/users/username/projects/project/file2.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 386 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 5,
            "lineCount": 275,
            "parameterCount": 0,
            "snippet": "() => {\r\n            const file1Consumer1Path = \"/users/username/projects/project/file1Consumer1.ts\";\r\n            const moduleFile1Path = \"/users/username/projects/project/moduleFile1.ts\";\r\n            const configFilePath = \"/users/username/projects/project/tsconfig.json\";\r\n            interface InitialStateParams {\r\n                /** custom config file options */\r\n                configObj?: any;\r\n                /** Additional files and folders to add */\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 275 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getInitialState",
            "complexity": 5,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "function getInitialState({ configObj = {}, getAdditionalFileOrFolder, firstReloadFileList }: InitialStateParams = {}) {\r\n                const moduleFile1: File = {\r\n                    path: moduleFile1Path,\r\n                    content: \"export function Foo() { };\",\r\n                };\r\n                const file1Consumer1: File = {\r\n                    path: file1Consumer1Path,\r\n                    content: `import {Foo} from \"./moduleFile1\"; export var y = 10;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      }
    ]
  },
  "durationMs": 21563
}