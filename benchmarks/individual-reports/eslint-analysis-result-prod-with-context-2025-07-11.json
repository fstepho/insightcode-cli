{
  "project": "eslint",
  "repo": "https://github.com/eslint/eslint.git",
  "type": "code analysis tool",
  "stars": "26k",
  "stableVersion": "v9.30.1",
  "description": "JavaScript linter",
  "category": "large",
  "emblematicFiles": {
    "coreFiles": [
      "lib/linter/linter.js",
      "lib/eslint/eslint.js",
      "lib/cli-engine/cli-engine.js"
    ],
    "architecturalFiles": [
      "lib/config/config-array-factory.js",
      "lib/rule-tester/rule-tester.js"
    ],
    "performanceCriticalFiles": [
      "lib/source-code/source-code.js",
      "lib/linter/node-event-generator.js"
    ],
    "complexAlgorithmFiles": [
      "lib/linter/code-path-analysis/code-path-analyzer.js",
      "lib/config/flat-config-array.js"
    ]
  },
  "analysis": {
    "context": {
      "project": {
        "name": "eslint",
        "path": ".",
        "version": "9.30.1",
        "repository": "eslint/eslint"
      },
      "analysis": {
        "timestamp": "2025-07-11T18:26:20.579Z",
        "durationMs": 20091,
        "toolVersion": "0.6.0",
        "filesAnalyzed": 425
      }
    },
    "overview": {
      "grade": "C",
      "statistics": {
        "totalFiles": 425,
        "totalLOC": 66827,
        "avgComplexity": 22.8,
        "avgLOC": 157,
        "avgDuplicationRatio": 0.19
      },
      "scores": {
        "complexity": 58,
        "duplication": 91,
        "maintainability": 73,
        "overall": 71
      },
      "summary": "307 critical files found requiring attention"
    },
    "details": [
      {
        "file": "Makefile.js",
        "metrics": {
          "complexity": 66,
          "loc": 780,
          "functionCount": 79,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.6
          }
        ],
        "healthScore": 0
      },
      {
        "file": "cypress.config.js",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "eslint.config.js",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "webpack.config.js",
        "metrics": {
          "complexity": 1,
          "loc": 49,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "bin/eslint.js",
        "metrics": {
          "complexity": 14,
          "loc": 89,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 82
      },
      {
        "file": "conf/default-cli-options.js",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "conf/ecma-version.js",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "conf/globals.js",
        "metrics": {
          "complexity": 1,
          "loc": 137,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/api.js",
        "metrics": {
          "complexity": 2,
          "loc": 18,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.31,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli.js",
        "metrics": {
          "complexity": 110,
          "loc": 550,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 10,
          "incomingDependencies": 1,
          "instability": 0.91,
          "cohesionScore": 0.35,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.83
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/config-api.js",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/options.js",
        "metrics": {
          "complexity": 15,
          "loc": 418,
          "functionCount": 2,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.39
          }
        ],
        "healthScore": 52
      },
      {
        "file": "lib/universal.js",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.33,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/unsupported-api.js",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.33,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/all-files-ignored.js",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/all-matched-files-ignored.js",
        "metrics": {
          "complexity": 1,
          "loc": 14,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/config-file-missing.js",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/config-plugin-missing.js",
        "metrics": {
          "complexity": 1,
          "loc": 10,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/config-serialize-function.js",
        "metrics": {
          "complexity": 4,
          "loc": 24,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/eslintrc-incompat.js",
        "metrics": {
          "complexity": 1,
          "loc": 78,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/eslintrc-plugins.js",
        "metrics": {
          "complexity": 4,
          "loc": 20,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/extend-config-missing.js",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/failed-to-read-json.js",
        "metrics": {
          "complexity": 1,
          "loc": 8,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/file-not-found.js",
        "metrics": {
          "complexity": 2,
          "loc": 8,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/invalid-rule-options.js",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.5,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/invalid-rule-severity.js",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.5,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/no-config-found.js",
        "metrics": {
          "complexity": 1,
          "loc": 10,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/plugin-conflict.js",
        "metrics": {
          "complexity": 2,
          "loc": 15,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/plugin-invalid.js",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/plugin-missing.js",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/print-config-with-directory-path.js",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/shared.js",
        "metrics": {
          "complexity": 2,
          "loc": 10,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "messages/whitespace-found.js",
        "metrics": {
          "complexity": 1,
          "loc": 8,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": ".trunk/configs/svgo.config.js",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/base.js",
        "metrics": {
          "complexity": 1,
          "loc": 287,
          "functionCount": 0,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.44
          }
        ],
        "healthScore": 88
      },
      {
        "file": "packages/eslint-config-eslint/cjs.js",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.67,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/formatting.js",
        "metrics": {
          "complexity": 1,
          "loc": 133,
          "functionCount": 0,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 14,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.67,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/nodejs.js",
        "metrics": {
          "complexity": 1,
          "loc": 35,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli-engine/cli-engine.js",
        "metrics": {
          "complexity": 106,
          "loc": 619,
          "functionCount": 40,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 2,
          "instability": 0.78,
          "cohesionScore": 0.48,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.06
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/cli-engine/file-enumerator.js",
        "metrics": {
          "complexity": 46,
          "loc": 278,
          "functionCount": 18,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.39
          }
        ],
        "healthScore": 9
      },
      {
        "file": "lib/cli-engine/hash.js",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 3,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli-engine/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli-engine/lint-result-cache.js",
        "metrics": {
          "complexity": 13,
          "loc": 92,
          "functionCount": 7,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 2,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/cli-engine/load-rules.js",
        "metrics": {
          "complexity": 3,
          "loc": 19,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/config/config-loader.js",
        "metrics": {
          "complexity": 43,
          "loc": 369,
          "functionCount": 27,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 3
      },
      {
        "file": "lib/config/config.js",
        "metrics": {
          "complexity": 73,
          "loc": 373,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 5,
          "instability": 0.38,
          "cohesionScore": 0.44,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.24
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/config/default-config.js",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 2,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.29,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/config/flat-config-array.js",
        "metrics": {
          "complexity": 11,
          "loc": 90,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "lib/config/flat-config-schema.js",
        "metrics": {
          "complexity": 57,
          "loc": 335,
          "functionCount": 28,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 3,
          "instability": 0.25,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/eslint/eslint-helpers.js",
        "metrics": {
          "complexity": 104,
          "loc": 580,
          "functionCount": 41,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 3,
          "instability": 0.25,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.93
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/eslint/eslint.js",
        "metrics": {
          "complexity": 101,
          "loc": 681,
          "functionCount": 43,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 9,
          "incomingDependencies": 4,
          "instability": 0.69,
          "cohesionScore": 0.37,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.27
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/eslint/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.67,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/eslint/legacy-eslint.js",
        "metrics": {
          "complexity": 99,
          "loc": 471,
          "functionCount": 31,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.57
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rule-tester/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/rule-tester/rule-tester.js",
        "metrics": {
          "complexity": 127,
          "loc": 1069,
          "functionCount": 69,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 10,
          "incomingDependencies": 1,
          "instability": 0.91,
          "cohesionScore": 0.31,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/linter/apply-disable-directives.js",
        "metrics": {
          "complexity": 52,
          "loc": 361,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/linter/esquery.js",
        "metrics": {
          "complexity": 30,
          "loc": 165,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 46
      },
      {
        "file": "lib/linter/file-context.js",
        "metrics": {
          "complexity": 1,
          "loc": 47,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 4,
          "instability": 0.33,
          "cohesionScore": 0.67,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/interpolate.js",
        "metrics": {
          "complexity": 3,
          "loc": 21,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/linter.js",
        "metrics": {
          "complexity": 261,
          "loc": 1812,
          "functionCount": 92,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 24,
          "incomingDependencies": 2,
          "instability": 0.92,
          "cohesionScore": 0.44,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.05
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.81
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/linter/report-translator.js",
        "metrics": {
          "complexity": 47,
          "loc": 237,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.56,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.19
          }
        ],
        "healthScore": 10
      },
      {
        "file": "lib/linter/rule-fixer.js",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/rules.js",
        "metrics": {
          "complexity": 5,
          "loc": 29,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/source-code-fixer.js",
        "metrics": {
          "complexity": 18,
          "loc": 80,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 64
      },
      {
        "file": "lib/linter/source-code-traverser.js",
        "metrics": {
          "complexity": 24,
          "loc": 156,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/linter/source-code-visitor.js",
        "metrics": {
          "complexity": 4,
          "loc": 29,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/timing.js",
        "metrics": {
          "complexity": 15,
          "loc": 92,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 79
      },
      {
        "file": "lib/linter/vfile.js",
        "metrics": {
          "complexity": 6,
          "loc": 30,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/ajv.js",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/assert.js",
        "metrics": {
          "complexity": 2,
          "loc": 7,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 5,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/ast-utils.js",
        "metrics": {
          "complexity": 1,
          "loc": 14,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 3,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/deep-merge-arrays.js",
        "metrics": {
          "complexity": 13,
          "loc": 31,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/shared/directives.js",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/flags.js",
        "metrics": {
          "complexity": 3,
          "loc": 67,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/logging.js",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/naming.js",
        "metrics": {
          "complexity": 11,
          "loc": 57,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "lib/shared/option-utils.js",
        "metrics": {
          "complexity": 11,
          "loc": 42,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "lib/shared/relative-module-resolver.js",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/runtime-info.js",
        "metrics": {
          "complexity": 15,
          "loc": 93,
          "functionCount": 7,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 79
      },
      {
        "file": "lib/shared/serialization.js",
        "metrics": {
          "complexity": 17,
          "loc": 45,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/shared/severity.js",
        "metrics": {
          "complexity": 7,
          "loc": 29,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 3,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/stats.js",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/string-utils.js",
        "metrics": {
          "complexity": 4,
          "loc": 24,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 7,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 100,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/text-table.js",
        "metrics": {
          "complexity": 5,
          "loc": 30,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/shared/traverser.js",
        "metrics": {
          "complexity": 17,
          "loc": 96,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 4,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/services/parser-service.js",
        "metrics": {
          "complexity": 3,
          "loc": 31,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/services/processor-service.js",
        "metrics": {
          "complexity": 4,
          "loc": 48,
          "functionCount": 3,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/services/suppressions-service.js",
        "metrics": {
          "complexity": 26,
          "loc": 163,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/services/warning-service.js",
        "metrics": {
          "complexity": 1,
          "loc": 36,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 4,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/types/config-api.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/types/index.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1577,
          "functionCount": 55,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 51
      },
      {
        "file": "lib/types/rules.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1839,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/types/universal.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/types/use-at-your-own-risk.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 14,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/accessor-pairs.js",
        "metrics": {
          "complexity": 48,
          "loc": 230,
          "functionCount": 19,
          "duplicationRatio": 0.38
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.15
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/array-bracket-newline.js",
        "metrics": {
          "complexity": 23,
          "loc": 200,
          "functionCount": 12,
          "duplicationRatio": 0.34
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 14
      },
      {
        "file": "lib/rules/array-bracket-spacing.js",
        "metrics": {
          "complexity": 32,
          "loc": 214,
          "functionCount": 13,
          "duplicationRatio": 0.54
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/array-callback-return.js",
        "metrics": {
          "complexity": 52,
          "loc": 340,
          "functionCount": 21,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.13
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/array-element-newline.js",
        "metrics": {
          "complexity": 34,
          "loc": 263,
          "functionCount": 11,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.65
          }
        ],
        "healthScore": 10
      },
      {
        "file": "lib/rules/arrow-body-style.js",
        "metrics": {
          "complexity": 47,
          "loc": 336,
          "functionCount": 10,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/arrow-parens.js",
        "metrics": {
          "complexity": 23,
          "loc": 163,
          "functionCount": 9,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.03
          }
        ],
        "healthScore": 15
      },
      {
        "file": "lib/rules/arrow-spacing.js",
        "metrics": {
          "complexity": 7,
          "loc": 134,
          "functionCount": 8,
          "duplicationRatio": 0.38
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 59
      },
      {
        "file": "lib/rules/block-scoped-var.js",
        "metrics": {
          "complexity": 4,
          "loc": 79,
          "functionCount": 9,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/rules/block-spacing.js",
        "metrics": {
          "complexity": 19,
          "loc": 144,
          "functionCount": 6,
          "duplicationRatio": 0.23
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 43
      },
      {
        "file": "lib/rules/brace-style.js",
        "metrics": {
          "complexity": 26,
          "loc": 218,
          "functionCount": 15,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.09
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.68
          }
        ],
        "healthScore": 19
      },
      {
        "file": "lib/rules/callback-return.js",
        "metrics": {
          "complexity": 27,
          "loc": 138,
          "functionCount": 6,
          "duplicationRatio": 0.21
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.39
          }
        ],
        "healthScore": 33
      },
      {
        "file": "lib/rules/camelcase.js",
        "metrics": {
          "complexity": 57,
          "loc": 271,
          "functionCount": 16,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.85
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/capitalized-comments.js",
        "metrics": {
          "complexity": 25,
          "loc": 167,
          "functionCount": 12,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/rules/class-methods-use-this.js",
        "metrics": {
          "complexity": 26,
          "loc": 158,
          "functionCount": 9,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/comma-dangle.js",
        "metrics": {
          "complexity": 42,
          "loc": 280,
          "functionCount": 14,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 17
      },
      {
        "file": "lib/rules/comma-spacing.js",
        "metrics": {
          "complexity": 24,
          "loc": 144,
          "functionCount": 7,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 14
      },
      {
        "file": "lib/rules/comma-style.js",
        "metrics": {
          "complexity": 42,
          "loc": 288,
          "functionCount": 18,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.44
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 6
      },
      {
        "file": "lib/rules/complexity.js",
        "metrics": {
          "complexity": 18,
          "loc": 133,
          "functionCount": 9,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 55
      },
      {
        "file": "lib/rules/computed-property-spacing.js",
        "metrics": {
          "complexity": 14,
          "loc": 181,
          "functionCount": 11,
          "duplicationRatio": 0.48
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 19
      },
      {
        "file": "lib/rules/consistent-return.js",
        "metrics": {
          "complexity": 24,
          "loc": 151,
          "functionCount": 11,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/consistent-this.js",
        "metrics": {
          "complexity": 20,
          "loc": 115,
          "functionCount": 12,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/rules/constructor-super.js",
        "metrics": {
          "complexity": 57,
          "loc": 256,
          "functionCount": 16,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.85
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.28
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/curly.js",
        "metrics": {
          "complexity": 41,
          "loc": 295,
          "functionCount": 18,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.48
          }
        ],
        "healthScore": 18
      },
      {
        "file": "lib/rules/default-case-last.js",
        "metrics": {
          "complexity": 3,
          "loc": 34,
          "functionCount": 3,
          "duplicationRatio": 0.36
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.19
          }
        ],
        "healthScore": 62
      },
      {
        "file": "lib/rules/default-case.js",
        "metrics": {
          "complexity": 7,
          "loc": 62,
          "functionCount": 4,
          "duplicationRatio": 0.38
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 60
      },
      {
        "file": "lib/rules/default-param-last.js",
        "metrics": {
          "complexity": 7,
          "loc": 52,
          "functionCount": 3,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.28
          }
        ],
        "healthScore": 88
      },
      {
        "file": "lib/rules/dot-location.js",
        "metrics": {
          "complexity": 8,
          "loc": 101,
          "functionCount": 5,
          "duplicationRatio": 0.39
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 57
      },
      {
        "file": "lib/rules/dot-notation.js",
        "metrics": {
          "complexity": 29,
          "loc": 169,
          "functionCount": 5,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.45
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 39
      },
      {
        "file": "lib/rules/eol-last.js",
        "metrics": {
          "complexity": 10,
          "loc": 103,
          "functionCount": 4,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.96
          }
        ],
        "healthScore": 72
      },
      {
        "file": "lib/rules/eqeqeq.js",
        "metrics": {
          "complexity": 22,
          "loc": 146,
          "functionCount": 10,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 43
      },
      {
        "file": "lib/rules/for-direction.js",
        "metrics": {
          "complexity": 26,
          "loc": 111,
          "functionCount": 6,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/rules/func-call-spacing.js",
        "metrics": {
          "complexity": 22,
          "loc": 202,
          "functionCount": 7,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.01
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 9
      },
      {
        "file": "lib/rules/func-name-matching.js",
        "metrics": {
          "complexity": 61,
          "loc": 253,
          "functionCount": 10,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.26
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/func-names.js",
        "metrics": {
          "complexity": 32,
          "loc": 119,
          "functionCount": 8,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/func-style.js",
        "metrics": {
          "complexity": 40,
          "loc": 185,
          "functionCount": 13,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 25
      },
      {
        "file": "lib/rules/function-call-argument-newline.js",
        "metrics": {
          "complexity": 10,
          "loc": 126,
          "functionCount": 9,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 77
      },
      {
        "file": "lib/rules/function-paren-newline.js",
        "metrics": {
          "complexity": 43,
          "loc": 286,
          "functionCount": 12,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.43
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 3
      },
      {
        "file": "lib/rules/generator-star-spacing.js",
        "metrics": {
          "complexity": 19,
          "loc": 174,
          "functionCount": 9,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 26
      },
      {
        "file": "lib/rules/getter-return.js",
        "metrics": {
          "complexity": 22,
          "loc": 173,
          "functionCount": 11,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 15
      },
      {
        "file": "lib/rules/global-require.js",
        "metrics": {
          "complexity": 8,
          "loc": 83,
          "functionCount": 6,
          "duplicationRatio": 0.51
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 19
      },
      {
        "file": "lib/rules/grouped-accessor-pairs.js",
        "metrics": {
          "complexity": 33,
          "loc": 141,
          "functionCount": 11,
          "duplicationRatio": 0.49
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.62
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/guard-for-in.js",
        "metrics": {
          "complexity": 15,
          "loc": 56,
          "functionCount": 2,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 66
      },
      {
        "file": "lib/rules/handle-callback-err.js",
        "metrics": {
          "complexity": 7,
          "loc": 78,
          "functionCount": 6,
          "duplicationRatio": 0.35
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.15
          }
        ],
        "healthScore": 63
      },
      {
        "file": "lib/rules/id-blacklist.js",
        "metrics": {
          "complexity": 34,
          "loc": 136,
          "functionCount": 12,
          "duplicationRatio": 0.58
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          },
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/id-denylist.js",
        "metrics": {
          "complexity": 32,
          "loc": 118,
          "functionCount": 11,
          "duplicationRatio": 0.51
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          },
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.03
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/id-length.js",
        "metrics": {
          "complexity": 27,
          "loc": 167,
          "functionCount": 10,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 39
      },
      {
        "file": "lib/rules/id-match.js",
        "metrics": {
          "complexity": 62,
          "loc": 247,
          "functionCount": 10,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.24
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/implicit-arrow-linebreak.js",
        "metrics": {
          "complexity": 8,
          "loc": 97,
          "functionCount": 5,
          "duplicationRatio": 0.47
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.55
          }
        ],
        "healthScore": 41
      },
      {
        "file": "lib/rules/indent-legacy.js",
        "metrics": {
          "complexity": 185,
          "loc": 985,
          "functionCount": 44,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.28
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/indent.js",
        "metrics": {
          "complexity": 187,
          "loc": 1646,
          "functionCount": 91,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.65
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 320,
          "functionCount": 291,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 291,
          "incomingDependencies": 6,
          "instability": 0.98,
          "cohesionScore": 0.67,
          "percentileUsageRank": 100,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 80
      },
      {
        "file": "lib/rules/init-declarations.js",
        "metrics": {
          "complexity": 21,
          "loc": 125,
          "functionCount": 6,
          "duplicationRatio": 0.36
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.21
          }
        ],
        "healthScore": 11
      },
      {
        "file": "lib/rules/jsx-quotes.js",
        "metrics": {
          "complexity": 6,
          "loc": 93,
          "functionCount": 6,
          "duplicationRatio": 0.41
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.38
          }
        ],
        "healthScore": 53
      },
      {
        "file": "lib/rules/key-spacing.js",
        "metrics": {
          "complexity": 65,
          "loc": 594,
          "functionCount": 28,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/keyword-spacing.js",
        "metrics": {
          "complexity": 77,
          "loc": 428,
          "functionCount": 35,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.43
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/line-comment-position.js",
        "metrics": {
          "complexity": 15,
          "loc": 129,
          "functionCount": 4,
          "duplicationRatio": 0.47
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 17
      },
      {
        "file": "lib/rules/linebreak-style.js",
        "metrics": {
          "complexity": 6,
          "loc": 85,
          "functionCount": 4,
          "duplicationRatio": 0.44
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/rules/lines-around-comment.js",
        "metrics": {
          "complexity": 78,
          "loc": 397,
          "functionCount": 25,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/lines-around-directive.js",
        "metrics": {
          "complexity": 28,
          "loc": 167,
          "functionCount": 7,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.66
          }
        ],
        "healthScore": 26
      },
      {
        "file": "lib/rules/lines-between-class-members.js",
        "metrics": {
          "complexity": 23,
          "loc": 247,
          "functionCount": 13,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.24
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.21
          }
        ],
        "healthScore": 30
      },
      {
        "file": "lib/rules/logical-assignment-operators.js",
        "metrics": {
          "complexity": 101,
          "loc": 508,
          "functionCount": 23,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.69
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/max-classes-per-file.js",
        "metrics": {
          "complexity": 6,
          "loc": 71,
          "functionCount": 5,
          "duplicationRatio": 0.4
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/max-depth.js",
        "metrics": {
          "complexity": 8,
          "loc": 106,
          "functionCount": 6,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/max-len.js",
        "metrics": {
          "complexity": 56,
          "loc": 321,
          "functionCount": 19,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/max-lines-per-function.js",
        "metrics": {
          "complexity": 31,
          "loc": 160,
          "functionCount": 7,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.55
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 29
      },
      {
        "file": "lib/rules/max-lines.js",
        "metrics": {
          "complexity": 20,
          "loc": 127,
          "functionCount": 9,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/max-nested-callbacks.js",
        "metrics": {
          "complexity": 8,
          "loc": 70,
          "functionCount": 3,
          "duplicationRatio": 0.49
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.64
          }
        ],
        "healthScore": 33
      },
      {
        "file": "lib/rules/max-params.js",
        "metrics": {
          "complexity": 12,
          "loc": 99,
          "functionCount": 2,
          "duplicationRatio": 0.34
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 52
      },
      {
        "file": "lib/rules/max-statements-per-line.js",
        "metrics": {
          "complexity": 11,
          "loc": 157,
          "functionCount": 5,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/max-statements.js",
        "metrics": {
          "complexity": 13,
          "loc": 118,
          "functionCount": 7,
          "duplicationRatio": 0.35
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 47
      },
      {
        "file": "lib/rules/multiline-comment-style.js",
        "metrics": {
          "complexity": 58,
          "loc": 498,
          "functionCount": 47,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.66
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/multiline-ternary.js",
        "metrics": {
          "complexity": 16,
          "loc": 223,
          "functionCount": 6,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.48
          }
        ],
        "healthScore": 46
      },
      {
        "file": "lib/rules/new-cap.js",
        "metrics": {
          "complexity": 24,
          "loc": 178,
          "functionCount": 9,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 36
      },
      {
        "file": "lib/rules/new-parens.js",
        "metrics": {
          "complexity": 8,
          "loc": 90,
          "functionCount": 4,
          "duplicationRatio": 0.47
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.57
          }
        ],
        "healthScore": 39
      },
      {
        "file": "lib/rules/newline-after-var.js",
        "metrics": {
          "complexity": 31,
          "loc": 174,
          "functionCount": 12,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.55
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 35
      },
      {
        "file": "lib/rules/newline-before-return.js",
        "metrics": {
          "complexity": 18,
          "loc": 136,
          "functionCount": 10,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/newline-per-chained-call.js",
        "metrics": {
          "complexity": 13,
          "loc": 118,
          "functionCount": 5,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-alert.js",
        "metrics": {
          "complexity": 17,
          "loc": 91,
          "functionCount": 7,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 51
      },
      {
        "file": "lib/rules/no-array-constructor.js",
        "metrics": {
          "complexity": 22,
          "loc": 128,
          "functionCount": 7,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-async-promise-executor.js",
        "metrics": {
          "complexity": 1,
          "loc": 32,
          "functionCount": 3,
          "duplicationRatio": 0.4
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/no-await-in-loop.js",
        "metrics": {
          "complexity": 19,
          "loc": 66,
          "functionCount": 4,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 61
      },
      {
        "file": "lib/rules/no-bitwise.js",
        "metrics": {
          "complexity": 8,
          "loc": 92,
          "functionCount": 6,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.58
          }
        ],
        "healthScore": 81
      },
      {
        "file": "lib/rules/no-buffer-constructor.js",
        "metrics": {
          "complexity": 2,
          "loc": 54,
          "functionCount": 2,
          "duplicationRatio": 0.74
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-caller.js",
        "metrics": {
          "complexity": 5,
          "loc": 36,
          "functionCount": 2,
          "duplicationRatio": 0.57
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-case-declarations.js",
        "metrics": {
          "complexity": 7,
          "loc": 58,
          "functionCount": 4,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 92
      },
      {
        "file": "lib/rules/no-catch-shadow.js",
        "metrics": {
          "complexity": 3,
          "loc": 53,
          "functionCount": 3,
          "duplicationRatio": 0.47
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.57
          }
        ],
        "healthScore": 39
      },
      {
        "file": "lib/rules/no-class-assign.js",
        "metrics": {
          "complexity": 1,
          "loc": 37,
          "functionCount": 4,
          "duplicationRatio": 0.67
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-compare-neg-zero.js",
        "metrics": {
          "complexity": 7,
          "loc": 50,
          "functionCount": 3,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-cond-assign.js",
        "metrics": {
          "complexity": 18,
          "loc": 110,
          "functionCount": 6,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 55
      },
      {
        "file": "lib/rules/no-confusing-arrow.js",
        "metrics": {
          "complexity": 11,
          "loc": 89,
          "functionCount": 4,
          "duplicationRatio": 0.39
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/rules/no-console.js",
        "metrics": {
          "complexity": 20,
          "loc": 123,
          "functionCount": 9,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/rules/no-const-assign.js",
        "metrics": {
          "complexity": 2,
          "loc": 39,
          "functionCount": 4,
          "duplicationRatio": 0.67
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-constant-binary-expression.js",
        "metrics": {
          "complexity": 145,
          "loc": 401,
          "functionCount": 11,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.34
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-constant-condition.js",
        "metrics": {
          "complexity": 13,
          "loc": 103,
          "functionCount": 10,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/rules/no-constructor-return.js",
        "metrics": {
          "complexity": 5,
          "loc": 43,
          "functionCount": 4,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 90
      },
      {
        "file": "lib/rules/no-continue.js",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 2,
          "duplicationRatio": 0.61
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-control-regex.js",
        "metrics": {
          "complexity": 21,
          "loc": 98,
          "functionCount": 7,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-debugger.js",
        "metrics": {
          "complexity": 1,
          "loc": 26,
          "functionCount": 2,
          "duplicationRatio": 0.5
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.67
          }
        ],
        "healthScore": 31
      },
      {
        "file": "lib/rules/no-delete-var.js",
        "metrics": {
          "complexity": 3,
          "loc": 27,
          "functionCount": 2,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/no-div-regex.js",
        "metrics": {
          "complexity": 3,
          "loc": 42,
          "functionCount": 3,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-dupe-args.js",
        "metrics": {
          "complexity": 3,
          "loc": 40,
          "functionCount": 3,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 64
      },
      {
        "file": "lib/rules/no-dupe-class-members.js",
        "metrics": {
          "complexity": 15,
          "loc": 76,
          "functionCount": 6,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 66
      },
      {
        "file": "lib/rules/no-dupe-else-if.js",
        "metrics": {
          "complexity": 17,
          "loc": 89,
          "functionCount": 12,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/rules/no-dupe-keys.js",
        "metrics": {
          "complexity": 15,
          "loc": 86,
          "functionCount": 8,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 79
      },
      {
        "file": "lib/rules/no-duplicate-case.js",
        "metrics": {
          "complexity": 5,
          "loc": 47,
          "functionCount": 4,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-duplicate-imports.js",
        "metrics": {
          "complexity": 47,
          "loc": 266,
          "functionCount": 14,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 8
      },
      {
        "file": "lib/rules/no-else-return.js",
        "metrics": {
          "complexity": 45,
          "loc": 239,
          "functionCount": 24,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.25
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 13
      },
      {
        "file": "lib/rules/no-empty-character-class.js",
        "metrics": {
          "complexity": 5,
          "loc": 53,
          "functionCount": 3,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.51
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/no-empty-function.js",
        "metrics": {
          "complexity": 28,
          "loc": 144,
          "functionCount": 6,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 47
      },
      {
        "file": "lib/rules/no-empty-pattern.js",
        "metrics": {
          "complexity": 9,
          "loc": 65,
          "functionCount": 3,
          "duplicationRatio": 0.44
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 47
      },
      {
        "file": "lib/rules/no-empty-static-block.js",
        "metrics": {
          "complexity": 3,
          "loc": 33,
          "functionCount": 2,
          "duplicationRatio": 0.46
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.53
          }
        ],
        "healthScore": 43
      },
      {
        "file": "lib/rules/no-empty.js",
        "metrics": {
          "complexity": 8,
          "loc": 86,
          "functionCount": 4,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-eq-null.js",
        "metrics": {
          "complexity": 8,
          "loc": 34,
          "functionCount": 2,
          "duplicationRatio": 0.39
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 57
      },
      {
        "file": "lib/rules/no-eval.js",
        "metrics": {
          "complexity": 27,
          "loc": 176,
          "functionCount": 12,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/rules/no-ex-assign.js",
        "metrics": {
          "complexity": 1,
          "loc": 34,
          "functionCount": 4,
          "duplicationRatio": 0.7
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.41
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-extend-native.js",
        "metrics": {
          "complexity": 16,
          "loc": 106,
          "functionCount": 11,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 59
      },
      {
        "file": "lib/rules/no-extra-bind.js",
        "metrics": {
          "complexity": 13,
          "loc": 122,
          "functionCount": 10,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/rules/no-extra-boolean-cast.js",
        "metrics": {
          "complexity": 66,
          "loc": 290,
          "functionCount": 11,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-extra-label.js",
        "metrics": {
          "complexity": 13,
          "loc": 108,
          "functionCount": 7,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/rules/no-extra-parens.js",
        "metrics": {
          "complexity": 298,
          "loc": 1210,
          "functionCount": 85,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14.9
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.21
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-extra-semi.js",
        "metrics": {
          "complexity": 8,
          "loc": 100,
          "functionCount": 8,
          "duplicationRatio": 0.35
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 62
      },
      {
        "file": "lib/rules/no-fallthrough.js",
        "metrics": {
          "complexity": 23,
          "loc": 175,
          "functionCount": 13,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.59
          }
        ],
        "healthScore": 31
      },
      {
        "file": "lib/rules/no-floating-decimal.js",
        "metrics": {
          "complexity": 7,
          "loc": 77,
          "functionCount": 4,
          "duplicationRatio": 0.4
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/no-func-assign.js",
        "metrics": {
          "complexity": 2,
          "loc": 42,
          "functionCount": 5,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-global-assign.js",
        "metrics": {
          "complexity": 7,
          "loc": 64,
          "functionCount": 4,
          "duplicationRatio": 0.66
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-implicit-coercion.js",
        "metrics": {
          "complexity": 83,
          "loc": 307,
          "functionCount": 20,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-implicit-globals.js",
        "metrics": {
          "complexity": 21,
          "loc": 146,
          "functionCount": 8,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 27
      },
      {
        "file": "lib/rules/no-implied-eval.js",
        "metrics": {
          "complexity": 18,
          "loc": 110,
          "functionCount": 9,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 64
      },
      {
        "file": "lib/rules/no-import-assign.js",
        "metrics": {
          "complexity": 41,
          "loc": 139,
          "functionCount": 9,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.05
          }
        ],
        "healthScore": 30
      },
      {
        "file": "lib/rules/no-inline-comments.js",
        "metrics": {
          "complexity": 13,
          "loc": 77,
          "functionCount": 4,
          "duplicationRatio": 0.27
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.82
          }
        ],
        "healthScore": 61
      },
      {
        "file": "lib/rules/no-inner-declarations.js",
        "metrics": {
          "complexity": 13,
          "loc": 102,
          "functionCount": 5,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.44
          }
        ],
        "healthScore": 69
      },
      {
        "file": "lib/rules/no-invalid-regexp.js",
        "metrics": {
          "complexity": 26,
          "loc": 157,
          "functionCount": 8,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/rules/no-invalid-this.js",
        "metrics": {
          "complexity": 13,
          "loc": 112,
          "functionCount": 8,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/rules/no-irregular-whitespace.js",
        "metrics": {
          "complexity": 22,
          "loc": 182,
          "functionCount": 14,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-iterator.js",
        "metrics": {
          "complexity": 2,
          "loc": 28,
          "functionCount": 2,
          "duplicationRatio": 0.57
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-label-var.js",
        "metrics": {
          "complexity": 2,
          "loc": 35,
          "functionCount": 3,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/no-labels.js",
        "metrics": {
          "complexity": 13,
          "loc": 106,
          "functionCount": 8,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-lone-blocks.js",
        "metrics": {
          "complexity": 20,
          "loc": 93,
          "functionCount": 9,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/rules/no-lonely-if.js",
        "metrics": {
          "complexity": 18,
          "loc": 97,
          "functionCount": 3,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 55
      },
      {
        "file": "lib/rules/no-loop-func.js",
        "metrics": {
          "complexity": 42,
          "loc": 157,
          "functionCount": 10,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          }
        ],
        "healthScore": 28
      },
      {
        "file": "lib/rules/no-loss-of-precision.js",
        "metrics": {
          "complexity": 17,
          "loc": 136,
          "functionCount": 15,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/rules/no-magic-numbers.js",
        "metrics": {
          "complexity": 47,
          "loc": 233,
          "functionCount": 13,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 10
      },
      {
        "file": "lib/rules/no-misleading-character-class.js",
        "metrics": {
          "complexity": 86,
          "loc": 426,
          "functionCount": 22,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.42
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-mixed-operators.js",
        "metrics": {
          "complexity": 16,
          "loc": 161,
          "functionCount": 10,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 54
      },
      {
        "file": "lib/rules/no-mixed-requires.js",
        "metrics": {
          "complexity": 22,
          "loc": 187,
          "functionCount": 9,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.9
          }
        ],
        "healthScore": 24
      },
      {
        "file": "lib/rules/no-mixed-spaces-and-tabs.js",
        "metrics": {
          "complexity": 10,
          "loc": 108,
          "functionCount": 4,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.94
          }
        ],
        "healthScore": 73
      },
      {
        "file": "lib/rules/no-multi-assign.js",
        "metrics": {
          "complexity": 2,
          "loc": 48,
          "functionCount": 2,
          "duplicationRatio": 0.56
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 1
      },
      {
        "file": "lib/rules/no-multi-spaces.js",
        "metrics": {
          "complexity": 16,
          "loc": 138,
          "functionCount": 6,
          "duplicationRatio": 0.34
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 33
      },
      {
        "file": "lib/rules/no-multi-str.js",
        "metrics": {
          "complexity": 3,
          "loc": 36,
          "functionCount": 3,
          "duplicationRatio": 0.5
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.67
          }
        ],
        "healthScore": 31
      },
      {
        "file": "lib/rules/no-multiple-empty-lines.js",
        "metrics": {
          "complexity": 13,
          "loc": 166,
          "functionCount": 7,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.95
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/rules/no-native-reassign.js",
        "metrics": {
          "complexity": 9,
          "loc": 76,
          "functionCount": 4,
          "duplicationRatio": 0.68
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.37
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-negated-condition.js",
        "metrics": {
          "complexity": 9,
          "loc": 57,
          "functionCount": 7,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 90
      },
      {
        "file": "lib/rules/no-negated-in-lhs.js",
        "metrics": {
          "complexity": 4,
          "loc": 43,
          "functionCount": 2,
          "duplicationRatio": 0.64
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.28
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-nested-ternary.js",
        "metrics": {
          "complexity": 3,
          "loc": 31,
          "functionCount": 2,
          "duplicationRatio": 0.52
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.04
          }
        ],
        "healthScore": 16
      },
      {
        "file": "lib/rules/no-new-func.js",
        "metrics": {
          "complexity": 14,
          "loc": 66,
          "functionCount": 3,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 47
      },
      {
        "file": "lib/rules/no-new-native-nonconstructor.js",
        "metrics": {
          "complexity": 7,
          "loc": 46,
          "functionCount": 3,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 45
      },
      {
        "file": "lib/rules/no-new-object.js",
        "metrics": {
          "complexity": 4,
          "loc": 51,
          "functionCount": 2,
          "duplicationRatio": 0.47
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.55
          }
        ],
        "healthScore": 41
      },
      {
        "file": "lib/rules/no-new-require.js",
        "metrics": {
          "complexity": 3,
          "loc": 50,
          "functionCount": 2,
          "duplicationRatio": 0.7
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-new-symbol.js",
        "metrics": {
          "complexity": 6,
          "loc": 54,
          "functionCount": 3,
          "duplicationRatio": 0.8
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.59
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-new-wrappers.js",
        "metrics": {
          "complexity": 4,
          "loc": 39,
          "functionCount": 2,
          "duplicationRatio": 0.28
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.88
          }
        ],
        "healthScore": 74
      },
      {
        "file": "lib/rules/no-new.js",
        "metrics": {
          "complexity": 1,
          "loc": 26,
          "functionCount": 2,
          "duplicationRatio": 0.57
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-nonoctal-decimal-escape.js",
        "metrics": {
          "complexity": 5,
          "loc": 114,
          "functionCount": 5,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/rules/no-obj-calls.js",
        "metrics": {
          "complexity": 6,
          "loc": 64,
          "functionCount": 3,
          "duplicationRatio": 0.23
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 82
      },
      {
        "file": "lib/rules/no-object-constructor.js",
        "metrics": {
          "complexity": 11,
          "loc": 83,
          "functionCount": 4,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.69
          }
        ],
        "healthScore": 69
      },
      {
        "file": "lib/rules/no-octal-escape.js",
        "metrics": {
          "complexity": 3,
          "loc": 35,
          "functionCount": 2,
          "duplicationRatio": 0.32
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-octal.js",
        "metrics": {
          "complexity": 3,
          "loc": 30,
          "functionCount": 2,
          "duplicationRatio": 0.48
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.59
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/no-param-reassign.js",
        "metrics": {
          "complexity": 36,
          "loc": 167,
          "functionCount": 7,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.8
          }
        ],
        "healthScore": 39
      },
      {
        "file": "lib/rules/no-path-concat.js",
        "metrics": {
          "complexity": 6,
          "loc": 57,
          "functionCount": 2,
          "duplicationRatio": 0.7
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.39
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-plusplus.js",
        "metrics": {
          "complexity": 5,
          "loc": 59,
          "functionCount": 4,
          "duplicationRatio": 0.36
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.19
          }
        ],
        "healthScore": 62
      },
      {
        "file": "lib/rules/no-process-env.js",
        "metrics": {
          "complexity": 5,
          "loc": 51,
          "functionCount": 2,
          "duplicationRatio": 0.79
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.57
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-process-exit.js",
        "metrics": {
          "complexity": 1,
          "loc": 47,
          "functionCount": 2,
          "duplicationRatio": 0.85
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.69
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-promise-executor-return.js",
        "metrics": {
          "complexity": 26,
          "loc": 176,
          "functionCount": 12,
          "duplicationRatio": 0.46
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.54
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-proto.js",
        "metrics": {
          "complexity": 2,
          "loc": 25,
          "functionCount": 2,
          "duplicationRatio": 0.6
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-prototype-builtins.js",
        "metrics": {
          "complexity": 14,
          "loc": 115,
          "functionCount": 4,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 82
      },
      {
        "file": "lib/rules/no-redeclare.js",
        "metrics": {
          "complexity": 16,
          "loc": 107,
          "functionCount": 5,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 70
      },
      {
        "file": "lib/rules/no-regex-spaces.js",
        "metrics": {
          "complexity": 17,
          "loc": 143,
          "functionCount": 8,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/rules/no-restricted-exports.js",
        "metrics": {
          "complexity": 28,
          "loc": 180,
          "functionCount": 9,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/no-restricted-globals.js",
        "metrics": {
          "complexity": 9,
          "loc": 104,
          "functionCount": 9,
          "duplicationRatio": 0.35
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.16
          }
        ],
        "healthScore": 63
      },
      {
        "file": "lib/rules/no-restricted-imports.js",
        "metrics": {
          "complexity": 71,
          "loc": 570,
          "functionCount": 17,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.9
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-restricted-modules.js",
        "metrics": {
          "complexity": 23,
          "loc": 176,
          "functionCount": 8,
          "duplicationRatio": 0.23
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.51
          }
        ],
        "healthScore": 33
      },
      {
        "file": "lib/rules/no-restricted-properties.js",
        "metrics": {
          "complexity": 23,
          "loc": 188,
          "functionCount": 7,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-restricted-syntax.js",
        "metrics": {
          "complexity": 4,
          "loc": 57,
          "functionCount": 3,
          "duplicationRatio": 0.5
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.67
          }
        ],
        "healthScore": 31
      },
      {
        "file": "lib/rules/no-return-assign.js",
        "metrics": {
          "complexity": 10,
          "loc": 56,
          "functionCount": 2,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-return-await.js",
        "metrics": {
          "complexity": 20,
          "loc": 114,
          "functionCount": 6,
          "duplicationRatio": 0.04
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/rules/no-script-url.js",
        "metrics": {
          "complexity": 7,
          "loc": 44,
          "functionCount": 4,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.71
          }
        ],
        "healthScore": 78
      },
      {
        "file": "lib/rules/no-self-assign.js",
        "metrics": {
          "complexity": 35,
          "loc": 127,
          "functionCount": 4,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 40
      },
      {
        "file": "lib/rules/no-self-compare.js",
        "metrics": {
          "complexity": 5,
          "loc": 51,
          "functionCount": 4,
          "duplicationRatio": 0.28
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 75
      },
      {
        "file": "lib/rules/no-sequences.js",
        "metrics": {
          "complexity": 16,
          "loc": 96,
          "functionCount": 5,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 57
      },
      {
        "file": "lib/rules/no-setter-return.js",
        "metrics": {
          "complexity": 25,
          "loc": 135,
          "functionCount": 9,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/rules/no-shadow-restricted-names.js",
        "metrics": {
          "complexity": 11,
          "loc": 83,
          "functionCount": 5,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.99
          }
        ],
        "healthScore": 63
      },
      {
        "file": "lib/rules/no-shadow.js",
        "metrics": {
          "complexity": 97,
          "loc": 405,
          "functionCount": 28,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-spaced-func.js",
        "metrics": {
          "complexity": 7,
          "loc": 76,
          "functionCount": 3,
          "duplicationRatio": 0.4
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/no-sparse-arrays.js",
        "metrics": {
          "complexity": 6,
          "loc": 44,
          "functionCount": 2,
          "duplicationRatio": 0.38
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/rules/no-sync.js",
        "metrics": {
          "complexity": 3,
          "loc": 63,
          "functionCount": 2,
          "duplicationRatio": 0.68
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.36
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-tabs.js",
        "metrics": {
          "complexity": 6,
          "loc": 87,
          "functionCount": 3,
          "duplicationRatio": 0.57
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.14
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-template-curly-in-string.js",
        "metrics": {
          "complexity": 3,
          "loc": 30,
          "functionCount": 2,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.52
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/no-ternary.js",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 2,
          "duplicationRatio": 0.67
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-this-before-super.js",
        "metrics": {
          "complexity": 30,
          "loc": 187,
          "functionCount": 22,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 46
      },
      {
        "file": "lib/rules/no-throw-literal.js",
        "metrics": {
          "complexity": 4,
          "loc": 30,
          "functionCount": 2,
          "duplicationRatio": 0.46
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.53
          }
        ],
        "healthScore": 43
      },
      {
        "file": "lib/rules/no-trailing-spaces.js",
        "metrics": {
          "complexity": 18,
          "loc": 142,
          "functionCount": 6,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1
          }
        ],
        "healthScore": 29
      },
      {
        "file": "lib/rules/no-unassigned-vars.js",
        "metrics": {
          "complexity": 11,
          "loc": 64,
          "functionCount": 4,
          "duplicationRatio": 0.27
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.79
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/rules/no-undef-init.js",
        "metrics": {
          "complexity": 10,
          "loc": 69,
          "functionCount": 3,
          "duplicationRatio": 0.27
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.83
          }
        ],
        "healthScore": 75
      },
      {
        "file": "lib/rules/no-undef.js",
        "metrics": {
          "complexity": 4,
          "loc": 55,
          "functionCount": 4,
          "duplicationRatio": 0.45
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 46
      },
      {
        "file": "lib/rules/no-undefined.js",
        "metrics": {
          "complexity": 3,
          "loc": 48,
          "functionCount": 7,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.94
          }
        ],
        "healthScore": 73
      },
      {
        "file": "lib/rules/no-underscore-dangle.js",
        "metrics": {
          "complexity": 47,
          "loc": 270,
          "functionCount": 15,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 7
      },
      {
        "file": "lib/rules/no-unexpected-multiline.js",
        "metrics": {
          "complexity": 10,
          "loc": 89,
          "functionCount": 7,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 87
      },
      {
        "file": "lib/rules/no-unmodified-loop-condition.js",
        "metrics": {
          "complexity": 35,
          "loc": 187,
          "functionCount": 16,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.75
          }
        ],
        "healthScore": 40
      },
      {
        "file": "lib/rules/no-unneeded-ternary.js",
        "metrics": {
          "complexity": 21,
          "loc": 175,
          "functionCount": 9,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.61
          }
        ],
        "healthScore": 30
      },
      {
        "file": "lib/rules/no-unreachable-loop.js",
        "metrics": {
          "complexity": 16,
          "loc": 116,
          "functionCount": 15,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.68
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/rules/no-unreachable.js",
        "metrics": {
          "complexity": 21,
          "loc": 176,
          "functionCount": 22,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 42
      },
      {
        "file": "lib/rules/no-unsafe-finally.js",
        "metrics": {
          "complexity": 14,
          "loc": 79,
          "functionCount": 4,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 71
      },
      {
        "file": "lib/rules/no-unsafe-negation.js",
        "metrics": {
          "complexity": 11,
          "loc": 104,
          "functionCount": 7,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/no-unsafe-optional-chaining.js",
        "metrics": {
          "complexity": 25,
          "loc": 172,
          "functionCount": 20,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/no-unused-expressions.js",
        "metrics": {
          "complexity": 15,
          "loc": 162,
          "functionCount": 20,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.46
          }
        ],
        "healthScore": 63
      },
      {
        "file": "lib/rules/no-unused-labels.js",
        "metrics": {
          "complexity": 15,
          "loc": 95,
          "functionCount": 6,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "healthScore": 79
      },
      {
        "file": "lib/rules/no-unused-private-class-members.js",
        "metrics": {
          "complexity": 29,
          "loc": 133,
          "functionCount": 6,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.45
          }
        ],
        "healthScore": 46
      },
      {
        "file": "lib/rules/no-unused-vars.js",
        "metrics": {
          "complexity": 241,
          "loc": 1078,
          "functionCount": 52,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 12.05
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-use-before-define.js",
        "metrics": {
          "complexity": 63,
          "loc": 255,
          "functionCount": 14,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-useless-assignment.js",
        "metrics": {
          "complexity": 73,
          "loc": 390,
          "functionCount": 27,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/no-useless-backreference.js",
        "metrics": {
          "complexity": 23,
          "loc": 180,
          "functionCount": 11,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/no-useless-call.js",
        "metrics": {
          "complexity": 12,
          "loc": 57,
          "functionCount": 4,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 71
      },
      {
        "file": "lib/rules/no-useless-catch.js",
        "metrics": {
          "complexity": 8,
          "loc": 42,
          "functionCount": 2,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.05
          }
        ],
        "healthScore": 65
      },
      {
        "file": "lib/rules/no-useless-computed-key.js",
        "metrics": {
          "complexity": 19,
          "loc": 123,
          "functionCount": 5,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 53
      },
      {
        "file": "lib/rules/no-useless-concat.js",
        "metrics": {
          "complexity": 9,
          "loc": 66,
          "functionCount": 6,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 2
          }
        ],
        "healthScore": 72
      },
      {
        "file": "lib/rules/no-useless-constructor.js",
        "metrics": {
          "complexity": 34,
          "loc": 146,
          "functionCount": 14,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          }
        ],
        "healthScore": 41
      },
      {
        "file": "lib/rules/no-useless-escape.js",
        "metrics": {
          "complexity": 43,
          "loc": 282,
          "functionCount": 14,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.41
          }
        ],
        "healthScore": 15
      },
      {
        "file": "lib/rules/no-useless-rename.js",
        "metrics": {
          "complexity": 22,
          "loc": 131,
          "functionCount": 6,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/no-useless-return.js",
        "metrics": {
          "complexity": 31,
          "loc": 244,
          "functionCount": 24,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.55
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 36
      },
      {
        "file": "lib/rules/no-var.js",
        "metrics": {
          "complexity": 39,
          "loc": 175,
          "functionCount": 23,
          "duplicationRatio": 0.05
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.95
          }
        ],
        "healthScore": 34
      },
      {
        "file": "lib/rules/no-void.js",
        "metrics": {
          "complexity": 4,
          "loc": 49,
          "functionCount": 2,
          "duplicationRatio": 0.38
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 59
      },
      {
        "file": "lib/rules/no-warning-comments.js",
        "metrics": {
          "complexity": 12,
          "loc": 123,
          "functionCount": 8,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 88
      },
      {
        "file": "lib/rules/no-whitespace-before-property.js",
        "metrics": {
          "complexity": 11,
          "loc": 100,
          "functionCount": 4,
          "duplicationRatio": 0.35
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 54
      },
      {
        "file": "lib/rules/no-with.js",
        "metrics": {
          "complexity": 1,
          "loc": 22,
          "functionCount": 2,
          "duplicationRatio": 0.59
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/nonblock-statement-body-position.js",
        "metrics": {
          "complexity": 14,
          "loc": 120,
          "functionCount": 11,
          "duplicationRatio": 0.31
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.03
          }
        ],
        "healthScore": 47
      },
      {
        "file": "lib/rules/object-curly-newline.js",
        "metrics": {
          "complexity": 37,
          "loc": 280,
          "functionCount": 16,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.85
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 13
      },
      {
        "file": "lib/rules/object-curly-spacing.js",
        "metrics": {
          "complexity": 27,
          "loc": 249,
          "functionCount": 15,
          "duplicationRatio": 0.42
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.25
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/object-property-newline.js",
        "metrics": {
          "complexity": 10,
          "loc": 124,
          "functionCount": 3,
          "duplicationRatio": 0.39
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.31
          }
        ],
        "healthScore": 57
      },
      {
        "file": "lib/rules/object-shorthand.js",
        "metrics": {
          "complexity": 81,
          "loc": 452,
          "functionCount": 31,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.51
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/one-var-declaration-per-line.js",
        "metrics": {
          "complexity": 9,
          "loc": 76,
          "functionCount": 5,
          "duplicationRatio": 0.56
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.12
          }
        ],
        "healthScore": 2
      },
      {
        "file": "lib/rules/one-var.js",
        "metrics": {
          "complexity": 92,
          "loc": 511,
          "functionCount": 19,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.7
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/operator-assignment.js",
        "metrics": {
          "complexity": 25,
          "loc": 186,
          "functionCount": 10,
          "duplicationRatio": 0.1
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/rules/operator-linebreak.js",
        "metrics": {
          "complexity": 35,
          "loc": 232,
          "functionCount": 9,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.75
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.16
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.03
          }
        ],
        "healthScore": 25
      },
      {
        "file": "lib/rules/padded-blocks.js",
        "metrics": {
          "complexity": 33,
          "loc": 279,
          "functionCount": 15,
          "duplicationRatio": 0.23
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.53
          }
        ],
        "healthScore": 13
      },
      {
        "file": "lib/rules/padding-line-between-statements.js",
        "metrics": {
          "complexity": 46,
          "loc": 362,
          "functionCount": 33,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.21
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/prefer-arrow-callback.js",
        "metrics": {
          "complexity": 60,
          "loc": 276,
          "functionCount": 16,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/prefer-const.js",
        "metrics": {
          "complexity": 75,
          "loc": 328,
          "functionCount": 27,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/prefer-destructuring.js",
        "metrics": {
          "complexity": 31,
          "loc": 201,
          "functionCount": 10,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.55
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 25
      },
      {
        "file": "lib/rules/prefer-exponentiation-operator.js",
        "metrics": {
          "complexity": 32,
          "loc": 164,
          "functionCount": 9,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 44
      },
      {
        "file": "lib/rules/prefer-named-capture-group.js",
        "metrics": {
          "complexity": 16,
          "loc": 137,
          "functionCount": 9,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.06
          }
        ],
        "healthScore": 63
      },
      {
        "file": "lib/rules/prefer-numeric-literals.js",
        "metrics": {
          "complexity": 16,
          "loc": 96,
          "functionCount": 4,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          }
        ],
        "healthScore": 70
      },
      {
        "file": "lib/rules/prefer-object-has-own.js",
        "metrics": {
          "complexity": 18,
          "loc": 105,
          "functionCount": 4,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 64
      },
      {
        "file": "lib/rules/prefer-object-spread.js",
        "metrics": {
          "complexity": 41,
          "loc": 204,
          "functionCount": 16,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 24
      },
      {
        "file": "lib/rules/prefer-promise-reject-errors.js",
        "metrics": {
          "complexity": 15,
          "loc": 93,
          "functionCount": 9,
          "duplicationRatio": 0.19
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.29
          }
        ],
        "healthScore": 67
      },
      {
        "file": "lib/rules/prefer-reflect.js",
        "metrics": {
          "complexity": 11,
          "loc": 121,
          "functionCount": 4,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 85
      },
      {
        "file": "lib/rules/prefer-regex-literals.js",
        "metrics": {
          "complexity": 68,
          "loc": 448,
          "functionCount": 22,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.4
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.49
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/prefer-rest-params.js",
        "metrics": {
          "complexity": 7,
          "loc": 58,
          "functionCount": 5,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.6
          }
        ],
        "healthScore": 81
      },
      {
        "file": "lib/rules/prefer-spread.js",
        "metrics": {
          "complexity": 8,
          "loc": 54,
          "functionCount": 4,
          "duplicationRatio": 0.16
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 92
      },
      {
        "file": "lib/rules/prefer-template.js",
        "metrics": {
          "complexity": 36,
          "loc": 218,
          "functionCount": 17,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.8
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.09
          }
        ],
        "healthScore": 32
      },
      {
        "file": "lib/rules/quote-props.js",
        "metrics": {
          "complexity": 65,
          "loc": 309,
          "functionCount": 21,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.03
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.63
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/quotes.js",
        "metrics": {
          "complexity": 58,
          "loc": 281,
          "functionCount": 12,
          "duplicationRatio": 0.15
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.41
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/radix.js",
        "metrics": {
          "complexity": 25,
          "loc": 140,
          "functionCount": 11,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/rules/require-atomic-updates.js",
        "metrics": {
          "complexity": 43,
          "loc": 245,
          "functionCount": 19,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 17
      },
      {
        "file": "lib/rules/require-await.js",
        "metrics": {
          "complexity": 19,
          "loc": 114,
          "functionCount": 8,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 61
      },
      {
        "file": "lib/rules/require-unicode-regexp.js",
        "metrics": {
          "complexity": 33,
          "loc": 261,
          "functionCount": 7,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 32
      },
      {
        "file": "lib/rules/require-yield.js",
        "metrics": {
          "complexity": 6,
          "loc": 43,
          "functionCount": 4,
          "duplicationRatio": 0.26
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.71
          }
        ],
        "healthScore": 78
      },
      {
        "file": "lib/rules/rest-spread-spacing.js",
        "metrics": {
          "complexity": 12,
          "loc": 119,
          "functionCount": 4,
          "duplicationRatio": 0.35
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.18
          }
        ],
        "healthScore": 50
      },
      {
        "file": "lib/rules/semi-spacing.js",
        "metrics": {
          "complexity": 22,
          "loc": 210,
          "functionCount": 13,
          "duplicationRatio": 0.25
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.7
          }
        ],
        "healthScore": 22
      },
      {
        "file": "lib/rules/semi-style.js",
        "metrics": {
          "complexity": 32,
          "loc": 161,
          "functionCount": 7,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 34
      },
      {
        "file": "lib/rules/semi.js",
        "metrics": {
          "complexity": 64,
          "loc": 315,
          "functionCount": 17,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.22
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/rules/sort-imports.js",
        "metrics": {
          "complexity": 25,
          "loc": 246,
          "functionCount": 14,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.23
          }
        ],
        "healthScore": 40
      },
      {
        "file": "lib/rules/sort-keys.js",
        "metrics": {
          "complexity": 26,
          "loc": 198,
          "functionCount": 15,
          "duplicationRatio": 0.18
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 38
      },
      {
        "file": "lib/rules/sort-vars.js",
        "metrics": {
          "complexity": 8,
          "loc": 112,
          "functionCount": 10,
          "duplicationRatio": 0.29
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.94
          }
        ],
        "healthScore": 73
      },
      {
        "file": "lib/rules/space-before-blocks.js",
        "metrics": {
          "complexity": 21,
          "loc": 170,
          "functionCount": 7,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 14
      },
      {
        "file": "lib/rules/space-before-function-paren.js",
        "metrics": {
          "complexity": 22,
          "loc": 154,
          "functionCount": 8,
          "duplicationRatio": 0.42
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.39
          }
        ],
        "healthScore": 2
      },
      {
        "file": "lib/rules/space-in-parens.js",
        "metrics": {
          "complexity": 33,
          "loc": 275,
          "functionCount": 14,
          "duplicationRatio": 0.24
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.57
          }
        ],
        "healthScore": 12
      },
      {
        "file": "lib/rules/space-infix-ops.js",
        "metrics": {
          "complexity": 19,
          "loc": 174,
          "functionCount": 9,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.47
          }
        ],
        "healthScore": 45
      },
      {
        "file": "lib/rules/space-unary-ops.js",
        "metrics": {
          "complexity": 33,
          "loc": 285,
          "functionCount": 18,
          "duplicationRatio": 0.22
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.43
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.48
          }
        ],
        "healthScore": 14
      },
      {
        "file": "lib/rules/spaced-comment.js",
        "metrics": {
          "complexity": 36,
          "loc": 140,
          "functionCount": 15,
          "duplicationRatio": 0.2
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.8
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.35
          }
        ],
        "healthScore": 25
      },
      {
        "file": "lib/rules/strict.js",
        "metrics": {
          "complexity": 33,
          "loc": 195,
          "functionCount": 17,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          }
        ],
        "healthScore": 42
      },
      {
        "file": "lib/rules/switch-colon-spacing.js",
        "metrics": {
          "complexity": 10,
          "loc": 112,
          "functionCount": 7,
          "duplicationRatio": 0.28
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.84
          }
        ],
        "healthScore": 75
      },
      {
        "file": "lib/rules/symbol-description.js",
        "metrics": {
          "complexity": 5,
          "loc": 42,
          "functionCount": 4,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 92
      },
      {
        "file": "lib/rules/template-curly-spacing.js",
        "metrics": {
          "complexity": 13,
          "loc": 125,
          "functionCount": 8,
          "duplicationRatio": 0.33
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.11
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/rules/template-tag-spacing.js",
        "metrics": {
          "complexity": 6,
          "loc": 93,
          "functionCount": 6,
          "duplicationRatio": 0.4
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.32
          }
        ],
        "healthScore": 56
      },
      {
        "file": "lib/rules/unicode-bom.js",
        "metrics": {
          "complexity": 5,
          "loc": 53,
          "functionCount": 4,
          "duplicationRatio": 0.34
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.13
          }
        ],
        "healthScore": 64
      },
      {
        "file": "lib/rules/use-isnan.js",
        "metrics": {
          "complexity": 28,
          "loc": 187,
          "functionCount": 10,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          }
        ],
        "healthScore": 47
      },
      {
        "file": "lib/rules/valid-typeof.js",
        "metrics": {
          "complexity": 18,
          "loc": 127,
          "functionCount": 7,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.98
          }
        ],
        "healthScore": 36
      },
      {
        "file": "lib/rules/vars-on-top.js",
        "metrics": {
          "complexity": 24,
          "loc": 98,
          "functionCount": 8,
          "duplicationRatio": 0.17
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.15
          }
        ],
        "healthScore": 40
      },
      {
        "file": "lib/rules/wrap-iife.js",
        "metrics": {
          "complexity": 21,
          "loc": 154,
          "functionCount": 9,
          "duplicationRatio": 0.3
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.02
          }
        ],
        "healthScore": 15
      },
      {
        "file": "lib/rules/wrap-regex.js",
        "metrics": {
          "complexity": 8,
          "loc": 72,
          "functionCount": 3,
          "duplicationRatio": 0.54
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.08
          }
        ],
        "healthScore": 9
      },
      {
        "file": "lib/rules/yield-star-spacing.js",
        "metrics": {
          "complexity": 12,
          "loc": 121,
          "functionCount": 5,
          "duplicationRatio": 0.48
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.59
          }
        ],
        "healthScore": 26
      },
      {
        "file": "lib/rules/yoda.js",
        "metrics": {
          "complexity": 47,
          "loc": 234,
          "functionCount": 15,
          "duplicationRatio": 0.14
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.17
          }
        ],
        "healthScore": 10
      },
      {
        "file": "packages/eslint-config-eslint/types/base.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/types/cjs.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/types/formatting.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/types/index.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/eslint-config-eslint/types/nodejs.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli-engine/formatters/html.js",
        "metrics": {
          "complexity": 17,
          "loc": 255,
          "functionCount": 15,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.27
          }
        ],
        "healthScore": 57
      },
      {
        "file": "lib/cli-engine/formatters/json-with-metadata.js",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli-engine/formatters/json.js",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/cli-engine/formatters/stylish.js",
        "metrics": {
          "complexity": 12,
          "loc": 89,
          "functionCount": 7,
          "duplicationRatio": 0.02
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.25,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 88
      },
      {
        "file": "packages/js/src/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.6,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/js/types/index.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/index.js",
        "metrics": {
          "complexity": 36,
          "loc": 180,
          "functionCount": 8,
          "duplicationRatio": 0.12
        },
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 3,
          "instability": 0.57,
          "cohesionScore": 0.4,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.8
          }
        ],
        "healthScore": 39
      },
      {
        "file": "lib/languages/js/validate-language-options.js",
        "metrics": {
          "complexity": 25,
          "loc": 111,
          "functionCount": 8,
          "duplicationRatio": 0.08
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          }
        ],
        "healthScore": 49
      },
      {
        "file": "lib/linter/code-path-analysis/code-path-analyzer.js",
        "metrics": {
          "complexity": 167,
          "loc": 492,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.58,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.64
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/linter/code-path-analysis/code-path-segment.js",
        "metrics": {
          "complexity": 11,
          "loc": 91,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 3,
          "instability": 0.25,
          "cohesionScore": 0.75,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "healthScore": 91
      },
      {
        "file": "lib/linter/code-path-analysis/code-path-state.js",
        "metrics": {
          "complexity": 113,
          "loc": 872,
          "functionCount": 63,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.75,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.91
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/linter/code-path-analysis/code-path.js",
        "metrics": {
          "complexity": 20,
          "loc": 120,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.75,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "healthScore": 58
      },
      {
        "file": "lib/linter/code-path-analysis/debug-helpers.js",
        "metrics": {
          "complexity": 26,
          "loc": 132,
          "functionCount": 7,
          "duplicationRatio": 0.01
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          }
        ],
        "healthScore": 48
      },
      {
        "file": "lib/linter/code-path-analysis/fork-context.js",
        "metrics": {
          "complexity": 10,
          "loc": 122,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/linter/code-path-analysis/id-generator.js",
        "metrics": {
          "complexity": 2,
          "loc": 15,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 2,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "packages/js/src/configs/eslint-all.js",
        "metrics": {
          "complexity": 1,
          "loc": 203,
          "functionCount": 0,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.01
          }
        ],
        "healthScore": 94
      },
      {
        "file": "packages/js/src/configs/eslint-recommended.js",
        "metrics": {
          "complexity": 1,
          "loc": 66,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/index.js",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0.8,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/source-code.js",
        "metrics": {
          "complexity": 159,
          "loc": 736,
          "functionCount": 51,
          "duplicationRatio": 0.03
        },
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.24,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.45
          }
        ],
        "healthScore": 0
      },
      {
        "file": "lib/languages/js/source-code/token-store/backward-token-comment-cursor.js",
        "metrics": {
          "complexity": 9,
          "loc": 32,
          "functionCount": 2,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/backward-token-cursor.js",
        "metrics": {
          "complexity": 3,
          "loc": 22,
          "functionCount": 3,
          "duplicationRatio": 0.13
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/cursor.js",
        "metrics": {
          "complexity": 3,
          "loc": 19,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 5,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/cursors.js",
        "metrics": {
          "complexity": 5,
          "loc": 64,
          "functionCount": 3,
          "duplicationRatio": 0.07
        },
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/decorative-cursor.js",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 3,
          "instability": 0.25,
          "cohesionScore": 0.83,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/filter-cursor.js",
        "metrics": {
          "complexity": 3,
          "loc": 17,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/forward-token-comment-cursor.js",
        "metrics": {
          "complexity": 9,
          "loc": 36,
          "functionCount": 2,
          "duplicationRatio": 0.09
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/forward-token-cursor.js",
        "metrics": {
          "complexity": 3,
          "loc": 25,
          "functionCount": 4,
          "duplicationRatio": 0.11
        },
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.83,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/index.js",
        "metrics": {
          "complexity": 30,
          "loc": 401,
          "functionCount": 27,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.7,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.34
          }
        ],
        "healthScore": 21
      },
      {
        "file": "lib/languages/js/source-code/token-store/limit-cursor.js",
        "metrics": {
          "complexity": 2,
          "loc": 15,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/padded-token-cursor.js",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/skip-cursor.js",
        "metrics": {
          "complexity": 3,
          "loc": 17,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.83,
          "percentileUsageRank": 8,
          "isInCycle": false
        },
        "issues": [],
        "healthScore": 100
      },
      {
        "file": "lib/languages/js/source-code/token-store/utils.js",
        "metrics": {
          "complexity": 12,
          "loc": 54,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 5,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "healthScore": 88
      }
    ],
    "codeContext": [
      {
        "file": "Makefile.js",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 18,
            "lineCount": 171,
            "parameterCount": 0,
            "snippet": "function () {\n\techo(\"Validating rules\");\n\tlet errors = 0;\n\tRULE_FILES.forEach(filename => {\n\t\tconst basename = path.basename(filename, \".js\");\n\t\tconst docFilename = `docs/src/rules/${basename}.md`;\n\t\tconst docText = cat(docFilename);\n\t\tconst docTextWithoutFrontmatter = matter(String(docText)).content;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 171 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 161,
            "parameterCount": 1,
            "snippet": "filename => {\n\t\tconst basename = path.basename(filename, \".js\");\n\t\tconst docFilename = `docs/src/rules/${basename}.md`;\n\t\tconst docText = cat(docFilename);\n\t\tconst docTextWithoutFrontmatter = matter(String(docText)).content;\n\t\tconst docMarkdown = marked.lexer(docTextWithoutFrontmatter, {\n\t\t\tgfm: true,\n\t\t\tsilent: false,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 161 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 58,
            "parameterCount": 0,
            "snippet": "function () {\n\techo(\"Generating documentation\");\n\tconst DOCS_RULES_DIR = path.join(DOCS_SRC_DIR, \"rules\");\n\tconst RULE_VERSIONS_FILE = path.join(\n\t\tDOCS_SRC_DIR,\n\t\t\"_data/rule_versions.json\",\n\t);\n\tlet versions = test(\"-f\", RULE_VERSIONS_FILE)\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateRuleIndexPage",
            "complexity": 4,
            "lineCount": 60,
            "parameterCount": 0,
            "snippet": "function generateRuleIndexPage() {\n\tconst docsSiteOutputFile = path.join(DOCS_DATA_DIR, \"rules.json\"),\n\t\tdocsSiteMetaOutputFile = path.join(DOCS_DATA_DIR, \"rules_meta.json\"),\n\t\truleTypes = \"conf/rule-type-list.json\",\n\t\truleTypesData = JSON.parse(cat(path.resolve(ruleTypes)));\n\tconst meta = {};\n\tRULE_FILES.map(filename => [filename, path.basename(filename, \".js\")])\n\t\t.sort((a, b) => a[1].localeCompare(b[1]))\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "updateVersions",
            "complexity": 4,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function updateVersions(oldVersion, newVersion) {\n\techo(\"Updating ESLint versions list in docs package\");\n\tconst filePath = path.join(\n\t\t__dirname,\n\t\t\"docs\",\n\t\t\"src\",\n\t\t\"_data\",\n\t\t\"versions.json\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/cli.js",
        "criticalFunctions": [
          {
            "name": "execute",
            "complexity": 71,
            "lineCount": 336,
            "parameterCount": 3,
            "snippet": "async execute(args, text, allowFlatConfig = true) {\n\t\tif (Array.isArray(args)) {\n\t\t\tdebug(\"CLI args: %o\", args.slice(2));\n\t\t}\n\t\t/*\n\t\t * Before doing anything, we need to see if we are using a\n\t\t * flat config file. If so, then we need to change the way command\n\t\t * line args are parsed. This is temporary, and when we fully\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 71 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 336 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "translateOptions",
            "complexity": 30,
            "lineCount": 187,
            "parameterCount": 2,
            "snippet": "async function translateOptions(\n\t{\n\t\tcache,\n\t\tcacheFile,\n\t\tcacheLocation,\n\t\tcacheStrategy,\n\t\tconfig,\n\t\tconfigLookup,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 187 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/options.js",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 440,
            "parameterCount": 1,
            "snippet": "function (usingFlatConfig) {\n\tlet lookupFlag;\n\tif (usingFlatConfig) {\n\t\tlookupFlag = {\n\t\t\toption: \"config-lookup\",\n\t\t\ttype: \"Boolean\",\n\t\t\tdefault: \"true\",\n\t\t\tdescription: \"Disable look up for eslint.config.js\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 440 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/cli-engine/cli-engine.js",
        "criticalFunctions": [
          {
            "name": "executeOnFiles",
            "complexity": 18,
            "lineCount": 132,
            "parameterCount": 1,
            "snippet": "executeOnFiles(patterns) {\n\t\tconst {\n\t\t\tcacheFilePath,\n\t\t\tfileEnumerator,\n\t\t\tlastConfigArrays,\n\t\t\tlintResultCache,\n\t\t\tlinter,\n\t\t\toptions: {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 132 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFormatter",
            "complexity": 9,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "getFormatter(format) {\n\t\tconst resolvedFormatName = format || \"stylish\";\n\t\tif (typeof resolvedFormatName === \"string\") {\n\t\t\tconst normalizedFormatName = resolvedFormatName.replace(\n\t\t\t\t/\\\\/gu,\n\t\t\t\t\"/\",\n\t\t\t);\n\t\t\tconst slots = internalSlotsMap.get(this);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "executeOnText",
            "complexity": 7,
            "lineCount": 70,
            "parameterCount": 3,
            "snippet": "executeOnText(text, filename, warnIgnored) {\n\t\tconst {\n\t\t\tconfigArrayFactory,\n\t\t\tfileEnumerator,\n\t\t\tlastConfigArrays,\n\t\t\tlinter,\n\t\t\toptions: {\n\t\t\t\tallowInlineConfig,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyText",
            "complexity": 6,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "function verifyText({\n\ttext,\n\tcwd,\n\tfilePath: providedFilePath,\n\tconfig,\n\tfix,\n\tallowInlineConfig,\n\treportUnusedDisableDirectives,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getCacheFile",
            "complexity": 6,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function getCacheFile(cacheFile, cwd) {\n\t/*\n\t * make sure the path separators are normalized for the environment/os\n\t * keeping the trailing path separator if present\n\t */\n\tconst normalizedCacheFile = path.normalize(cacheFile);\n\tconst resolvedCacheFile = path.resolve(cwd, normalizedCacheFile);\n\tconst looksLikeADirectory = normalizedCacheFile.slice(-1) === path.sep;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/cli-engine/file-enumerator.js",
        "criticalFunctions": [
          {
            "name": "_iterateFilesRecursive",
            "complexity": 14,
            "lineCount": 80,
            "parameterCount": 2,
            "snippet": "*_iterateFilesRecursive(directoryPath, options) {\n\t\tdebug(`Enter the directory: ${directoryPath}`);\n\t\tconst { configArrayFactory } = internalSlotsMap.get(this);\n\t\t/** @type {ConfigArray|null} */\n\t\tlet config = null;\n\t\tfor (const entry of readdirSafeSync(directoryPath)) {\n\t\t\tconst filePath = path.join(directoryPath, entry.name);\n\t\t\tconst fileInfo = entry.isSymbolicLink()\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "iterateFiles",
            "complexity": 11,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "*iterateFiles(patternOrPatterns) {\n\t\tconst { globInputPaths, errorOnUnmatchedPattern } =\n\t\t\tinternalSlotsMap.get(this);\n\t\tconst patterns = Array.isArray(patternOrPatterns)\n\t\t\t? patternOrPatterns\n\t\t\t: [patternOrPatterns];\n\t\tdebug(\"Start to iterate files: %o\", patterns);\n\t\tconst set = new Set();\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/config/config-loader.js",
        "criticalFunctions": [
          {
            "name": "calculateConfigArray",
            "complexity": 15,
            "lineCount": 102,
            "parameterCount": 3,
            "snippet": "static async calculateConfigArray(configFilePath, basePath, options) {\n\t\tconst {\n\t\t\tcwd,\n\t\t\tbaseConfig,\n\t\t\tignoreEnabled,\n\t\t\tignorePatterns,\n\t\t\toverrideConfig,\n\t\t\thasUnstableNativeNodeJsTSConfigFlag = false,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "loadConfigFile",
            "complexity": 8,
            "lineCount": 79,
            "parameterCount": 2,
            "snippet": "async function loadConfigFile(filePath, hasUnstableNativeNodeJsTSConfigFlag) {\n\tdebug(`Loading config from ${filePath}`);\n\tconst fileURL = pathToFileURL(filePath);\n\tdebug(`Config file URL is ${fileURL}`);\n\tconst mtime = (await fs.stat(filePath)).mtime.getTime();\n\t/*\n\t * Append a query with the config file's modification time (`mtime`) in order\n\t * to import the current version of the config file. Without the query, `import()` would\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/config/config.js",
        "criticalFunctions": [
          {
            "name": "validateRulesConfig",
            "complexity": 12,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "validateRulesConfig(rulesConfig) {\n\t\tif (!rulesConfig) {\n\t\t\tthrow new TypeError(\"Config is required for validation.\");\n\t\t}\n\t\tfor (const [ruleId, ruleOptions] of Object.entries(rulesConfig)) {\n\t\t\tif (ruleId === \"__proto__\") {\n\t\t\t\tcontinue;\n\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/config/flat-config-schema.js",
        "criticalFunctions": [
          {
            "name": "deepMerge",
            "complexity": 9,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "function deepMerge(first, second, mergeMap = new Map()) {\n\tlet secondMergeMap = mergeMap.get(first);\n\tif (secondMergeMap) {\n\t\tconst result = secondMergeMap.get(second);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t} else {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "merge",
            "complexity": 7,
            "lineCount": 56,
            "parameterCount": 2,
            "snippet": "merge(first = {}, second = {}) {\n\t\tconst result = {\n\t\t\t...first,\n\t\t\t...second,\n\t\t};\n\t\tfor (const ruleId of Object.keys(result)) {\n\t\t\ttry {\n\t\t\t\tif (ruleId === \"__proto__\") {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/eslint/eslint-helpers.js",
        "criticalFunctions": [
          {
            "name": "processOptions",
            "complexity": 47,
            "lineCount": 194,
            "parameterCount": 1,
            "snippet": "function processOptions({\n\tallowInlineConfig = true, // ← we cannot use `overrideConfig.noInlineConfig` instead because `allowInlineConfig` has side-effect that suppress warnings that show inline configs are ignored.\n\tbaseConfig = null,\n\tcache = false,\n\tcacheLocation = \".eslintcache\",\n\tcacheStrategy = \"metadata\",\n\tcwd = process.cwd(),\n\terrorOnUnmatchedPattern = true,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 47 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 194 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "globSearch",
            "complexity": 13,
            "lineCount": 124,
            "parameterCount": 1,
            "snippet": "async function globSearch({\n\tbasePath,\n\tpatterns,\n\trawPatterns,\n\tconfigLoader,\n\terrorOnUnmatchedPattern,\n}) {\n\tif (patterns.length === 0) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 124 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "findFiles",
            "complexity": 10,
            "lineCount": 118,
            "parameterCount": 1,
            "snippet": "async function findFiles({\n\tpatterns,\n\tglobInputPaths,\n\tcwd,\n\tconfigLoader,\n\terrorOnUnmatchedPattern,\n}) {\n\tconst results = [];\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCacheFile",
            "complexity": 6,
            "lineCount": 58,
            "parameterCount": 3,
            "snippet": "function getCacheFile(cacheFile, cwd, { prefix = \".cache_\" } = {}) {\n\t/*\n\t * make sure the path separators are normalized for the environment/os\n\t * keeping the trailing path separator if present\n\t */\n\tconst normalizedCacheFile = path.normalize(cacheFile);\n\tconst resolvedCacheFile = path.resolve(cwd, normalizedCacheFile);\n\tconst looksLikeADirectory = normalizedCacheFile.slice(-1) === path.sep;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "globMultiSearch",
            "complexity": 5,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "async function globMultiSearch({\n\tsearches,\n\tconfigLoader,\n\terrorOnUnmatchedPattern,\n}) {\n\t/*\n\t * For convenience, we normalized the search map into an array of objects.\n\t * Next, we filter out all searches that have no patterns. This happens\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/eslint/eslint.js",
        "criticalFunctions": [
          {
            "name": "lintFiles",
            "complexity": 23,
            "lineCount": 208,
            "parameterCount": 1,
            "snippet": "async lintFiles(patterns) {\n\t\tlet normalizedPatterns = patterns;\n\t\tconst {\n\t\t\tcacheFilePath,\n\t\t\tlintResultCache,\n\t\t\tlinter,\n\t\t\toptions: eslintOptions,\n\t\t} = privateMembers.get(this);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 208 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "lintText",
            "complexity": 16,
            "lineCount": 102,
            "parameterCount": 2,
            "snippet": "async lintText(code, options = {}) {\n\t\tif (typeof code !== \"string\") {\n\t\t\tthrow new Error(\"'code' must be a string\");\n\t\t}\n\t\tif (typeof options !== \"object\") {\n\t\t\tthrow new Error(\"'options' must be an object, null, or undefined\");\n\t\t}\n\t\tconst { filePath, warnIgnored, ...unknownOptions } = options || {};\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getRulesMetaForResults",
            "complexity": 9,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "getRulesMetaForResults(results) {\n\t\tif (results.length === 0) {\n\t\t\treturn {};\n\t\t}\n\t\tconst resultRules = new Map();\n\t\tconst {\n\t\t\tconfigLoader,\n\t\t\toptions: { cwd },\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 95,
            "parameterCount": 1,
            "snippet": "async filePath => {\n\t\t\t\tconst configs =\n\t\t\t\t\tawait this.#configLoader.loadConfigArrayForFile(filePath);\n\t\t\t\tconst config = configs.getConfig(filePath);\n\t\t\t\t/*\n\t\t\t\t * If a filename was entered that cannot be matched\n\t\t\t\t * to a config, then notify the user.\n\t\t\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "loadFormatter",
            "complexity": 9,
            "lineCount": 86,
            "parameterCount": 1,
            "snippet": "async loadFormatter(name = \"stylish\") {\n\t\tif (typeof name !== \"string\") {\n\t\t\tthrow new Error(\"'name' must be a string\");\n\t\t}\n\t\tconst normalizedFormatName = name.replace(/\\\\/gu, \"/\");\n\t\tconst namespace = getNamespaceFromTerm(normalizedFormatName);\n\t\tconst { cwd } = privateMembers.get(this).options;\n\t\tlet formatterPath;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/eslint/legacy-eslint.js",
        "criticalFunctions": [
          {
            "name": "processOptions",
            "complexity": 46,
            "lineCount": 188,
            "parameterCount": 1,
            "snippet": "function processOptions({\n\tallowInlineConfig = true, // ← we cannot use `overrideConfig.noInlineConfig` instead because `allowInlineConfig` has side-effect that suppress warnings that show inline configs are ignored.\n\tbaseConfig = null,\n\tcache = false,\n\tcacheLocation = \".eslintcache\",\n\tcacheStrategy = \"metadata\",\n\tcwd = process.cwd(),\n\terrorOnUnmatchedPattern = true,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 188 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rule-tester/rule-tester.js",
        "criticalFunctions": [
          {
            "name": "run",
            "complexity": 91,
            "lineCount": 1008,
            "parameterCount": 3,
            "snippet": "run(ruleName, rule, test) {\n\t\tconst testerConfig = this.testerConfig,\n\t\t\trequiredScenarios = [\"valid\", \"invalid\"],\n\t\t\tscenarioErrors = [],\n\t\t\tlinter = this.linter,\n\t\t\truleId = `rule-to-test/${ruleName}`;\n\t\tconst seenValidTestCases = new Set();\n\t\tconst seenInvalidTestCases = new Set();\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 91 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1008 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "testInvalidTemplate",
            "complexity": 48,
            "lineCount": 483,
            "parameterCount": 1,
            "snippet": "function testInvalidTemplate(item) {\n\t\t\tassert.ok(\n\t\t\t\ttypeof item.code === \"string\",\n\t\t\t\t\"Test case must specify a string value for 'code'\",\n\t\t\t);\n\t\t\tif (item.name) {\n\t\t\t\tassert.ok(\n\t\t\t\t\ttypeof item.name === \"string\",\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 483 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runRuleForItem",
            "complexity": 20,
            "lineCount": 247,
            "parameterCount": 1,
            "snippet": "function runRuleForItem(item) {\n\t\t\tconst flatConfigArrayOptions = {\n\t\t\t\tbaseConfig,\n\t\t\t};\n\t\t\tif (item.filename) {\n\t\t\t\tflatConfigArrayOptions.basePath =\n\t\t\t\t\tpath.parse(item.filename).root || void 0;\n\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 247 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 168,
            "parameterCount": 2,
            "snippet": "(expectedSuggestion, index) => {\n\t\t\t\t\t\t\t\t\t\t\tassert.ok(\n\t\t\t\t\t\t\t\t\t\t\t\ttypeof expectedSuggestion ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"object\" &&\n\t\t\t\t\t\t\t\t\t\t\t\t\texpectedSuggestion !== null,\n\t\t\t\t\t\t\t\t\t\t\t\t\"Test suggestion in 'suggestions' array must be an object.\",\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tObject.keys(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 168 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/apply-disable-directives.js",
        "criticalFunctions": [
          {
            "name": "applyDirectives",
            "complexity": 24,
            "lineCount": 128,
            "parameterCount": 1,
            "snippet": "function applyDirectives(options) {\n\tconst problems = [];\n\tconst usedDisableDirectives = new Set();\n\tconst { sourceCode } = options;\n\tfor (const problem of options.problems) {\n\t\tlet disableDirectivesForProblem = [];\n\t\tlet nextDirectiveIndex = 0;\n\t\twhile (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 128 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 11,
            "lineCount": 121,
            "parameterCount": 1,
            "snippet": "({\n\tlanguage,\n\tsourceCode,\n\tdirectives,\n\tdisableFixes,\n\tproblems,\n\tconfiguredRules,\n\truleFilter,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectUsedEnableDirectives",
            "complexity": 10,
            "lineCount": 79,
            "parameterCount": 1,
            "snippet": "function collectUsedEnableDirectives(directives) {\n\t/**\n\t * A Map of `eslint-enable` keyed by ruleIds that may be marked as used.\n\t * If `eslint-enable` does not have a ruleId, the key will be `null`.\n\t * @type {Map<string|null, Directive>}\n\t */\n\tconst enabledRules = new Map();\n\t/**\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createIndividualDirectivesRemoval",
            "complexity": 2,
            "lineCount": 91,
            "parameterCount": 3,
            "snippet": "function createIndividualDirectivesRemoval(\n\tdirectives,\n\tparentDirective,\n\tsourceCode,\n) {\n\t/*\n\t * Get the list of the rules text without any surrounding whitespace. In order to preserve the original\n\t * formatting, we don't want to change that whitespace.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 2,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "directive => {\n\t\tconst { ruleId } = directive;\n\t\tconst regex = new RegExp(\n\t\t\tString.raw`(?:^|\\s*,\\s*)(?<quote>['\"]?)${escapeRegExp(ruleId)}\\k<quote>(?:\\s*,\\s*|$)`,\n\t\t\t\"u\",\n\t\t);\n\t\tconst match = regex.exec(listText);\n\t\tconst matchedText = match[0];\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/esquery.js",
        "criticalFunctions": [
          {
            "name": "analyzeParsedSelector",
            "complexity": 17,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "function analyzeParsedSelector(parsedSelector) {\n\tlet attributeCount = 0;\n\tlet identifierCount = 0;\n\t/**\n\t * Analyzes a selector and returns the node types that could possibly trigger it.\n\t * @param {ESQuerySelector} selector The selector to analyze.\n\t * @returns {string[]|null} The node types that could possibly trigger this selector, or `null` if all node types could trigger it\n\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "analyzeSelector",
            "complexity": 17,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "function analyzeSelector(selector) {\n\t\tswitch (selector.type) {\n\t\t\tcase \"identifier\":\n\t\t\t\tidentifierCount++;\n\t\t\t\treturn [selector.value];\n\t\t\tcase \"not\":\n\t\t\t\tselector.selectors.map(analyzeSelector);\n\t\t\t\treturn null;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/linter.js",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 31,
            "lineCount": 347,
            "parameterCount": 3,
            "snippet": "#flatVerifyWithoutProcessors(file, providedConfig, providedOptions) {\n\t\tconst slots = internalSlotsMap.get(this);\n\t\tconst config = providedConfig || {};\n\t\tconst { settings = {}, languageOptions } = config;\n\t\tconst options = normalizeVerifyOptions(providedOptions, config);\n\t\tif (!slots.lastSourceCode) {\n\t\t\tlet t;\n\t\t\tif (options.stats) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 347 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runRules",
            "complexity": 29,
            "lineCount": 191,
            "parameterCount": 15,
            "snippet": "function runRules(\n\tsourceCode,\n\tconfiguredRules,\n\truleMapper,\n\tparserName,\n\tlanguage,\n\tlanguageOptions,\n\tsettings,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 191 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "15 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 28,
            "lineCount": 144,
            "parameterCount": 1,
            "snippet": "ruleId => {\n\t\tconst severity = Config.getRuleNumericSeverity(configuredRules[ruleId]);\n\t\tif (severity === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (ruleFilter && !ruleFilter({ ruleId, severity })) {\n\t\t\treturn;\n\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 144 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDirectiveComments",
            "complexity": 27,
            "lineCount": 260,
            "parameterCount": 4,
            "snippet": "function getDirectiveComments(\n\tsourceCode,\n\truleMapper,\n\twarnInlineConfig,\n\tconfig,\n) {\n\tconst configuredRules = {};\n\tconst enabledGlobals = Object.create(null);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 260 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 27,
            "lineCount": 233,
            "parameterCount": 1,
            "snippet": "comment => {\n\t\t\tconst directive = commentParser.parseDirective(comment.value);\n\t\t\tif (!directive) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst {\n\t\t\t\tlabel,\n\t\t\t\tvalue,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 233 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/report-translator.js",
        "criticalFunctions": [
          {
            "name": "createReportTranslator",
            "complexity": 10,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "function createReportTranslator(metadata) {\n\t/*\n\t * `createReportTranslator` gets called once per enabled rule per file. It needs to be very performant.\n\t * The report translator itself (i.e. the function that `createReportTranslator` returns) gets\n\t * called every time a rule reports a problem, which happens much less frequently (usually, the vast\n\t * majority of rules don't report any problems for a given file).\n\t */\n\treturn (...args) => {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 10,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "(...args) => {\n\t\tconst descriptor = normalizeMultiArgReportCall(...args);\n\t\tconst messages = metadata.messageIds;\n\t\tconst { sourceCode } = metadata;\n\t\tassertValidNodeInfo(descriptor);\n\t\tlet computedMessage;\n\t\tif (descriptor.messageId) {\n\t\t\tif (!messages) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/source-code-fixer.js",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 16,
            "lineCount": 92,
            "parameterCount": 3,
            "snippet": "function (sourceText, messages, shouldFix) {\n\tdebug(\"Applying fixes\");\n\tif (shouldFix === false) {\n\t\tdebug(\"shouldFix parameter was false, not attempting fixes\");\n\t\treturn {\n\t\t\tfixed: false,\n\t\t\tmessages,\n\t\t\toutput: sourceText,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/source-code-traverser.js",
        "criticalFunctions": [
          {
            "name": "calculateSelectors",
            "complexity": 13,
            "lineCount": 65,
            "parameterCount": 3,
            "snippet": "calculateSelectors(node, ancestry, isExit) {\n\t\tconst nodeTypeKey = this.esqueryOptions?.nodeTypeKey || \"type\";\n\t\tconst selectors = [];\n\t\t/*\n\t\t * Get the selectors that may match this node. First, check\n\t\t * to see if the node type has specific selectors,\n\t\t * then gather the \"any type\" selectors.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "traverseSync",
            "complexity": 6,
            "lineCount": 56,
            "parameterCount": 3,
            "snippet": "traverseSync(sourceCode, visitor, { steps } = {}) {\n\t\tconst esquery = new ESQueryHelper(visitor, {\n\t\t\tvisitorKeys: sourceCode.visitorKeys ?? this.#language.visitorKeys,\n\t\t\tfallback: vk.getKeys,\n\t\t\tmatchClass: this.#language.matchesSelectorClass ?? (() => false),\n\t\t\tnodeTypeKey: this.#language.nodeTypeKey,\n\t\t});\n\t\tconst currentAncestry = [];\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/timing.js",
        "criticalFunctions": [
          {
            "name": "display",
            "complexity": 6,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function display(data) {\n\tlet total = 0;\n\tconst rows = Object.keys(data)\n\t\t.map(key => {\n\t\t\tconst time = data[key];\n\t\t\ttotal += time;\n\t\t\treturn [key, time];\n\t\t})\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/shared/runtime-info.js",
        "criticalFunctions": [
          {
            "name": "environment",
            "complexity": 15,
            "lineCount": 134,
            "parameterCount": 0,
            "snippet": "function environment() {\n\tconst cache = new Map();\n\t/**\n\t * Checks if a path is a child of a directory.\n\t * @param {string} parentPath The parent path to check.\n\t * @param {string} childPath The path to check.\n\t * @returns {boolean} Whether or not the given path is a child of a directory.\n\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/shared/serialization.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/shared/traverser.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/services/suppressions-service.js",
        "criticalFunctions": [
          {
            "name": "applySuppressions",
            "complexity": 10,
            "lineCount": 67,
            "parameterCount": 2,
            "snippet": "applySuppressions(results, suppressions) {\n\t\t/**\n\t\t * We copy the results to avoid modifying the original objects\n\t\t * We remove only result messages that are matched and hence suppressed\n\t\t * We leave the rest untouched to minimize the risk of losing parts of the original data\n\t\t */\n\t\tconst filtered = structuredClone(results);\n\t\tconst unused = {};\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/types/index.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/types/rules.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/types/use-at-your-own-risk.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/accessor-pairs.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 33,
            "lineCount": 190,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tgetWithoutSet: checkGetWithoutSet,\n\t\t\t\tsetWithoutGet: checkSetWithoutGet,\n\t\t\t\tenforceForClassMembers,\n\t\t\t},\n\t\t] = context.options;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 190 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkList",
            "complexity": 18,
            "lineCount": 48,
            "parameterCount": 1,
            "snippet": "function checkList(nodes) {\n\t\t\tconst accessors = [];\n\t\t\tlet found = false;\n\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\tconst node = nodes[i];\n\t\t\t\tif (isAccessorKind(node)) {\n\t\t\t\t\tconst name = astUtils.getStaticPropertyName(node);\n\t\t\t\t\tconst key =\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/array-bracket-newline.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 208,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Normalizes a given option value.\n\t\t * @param {string|Object|undefined} option An option value to parse.\n\t\t * @returns {{multiline: boolean, minItems: number}} Normalized option object.\n\t\t */\n\t\tfunction normalizeOptionValue(option) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 208 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "check",
            "complexity": 15,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "function check(node) {\n\t\t\tconst elements = node.elements;\n\t\t\tconst normalizedOptions = normalizeOptions(context.options[0]);\n\t\t\tconst options = normalizedOptions[node.type];\n\t\t\tconst openBracket = sourceCode.getFirstToken(node);\n\t\t\tconst closeBracket = sourceCode.getLastToken(node);\n\t\t\tconst firstIncComment = sourceCode.getTokenAfter(openBracket, {\n\t\t\t\tincludeComments: true,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/array-bracket-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 32,
            "lineCount": 223,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst spaced = context.options[0] === \"always\",\n\t\t\tsourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether an option is set, relative to the spacing option.\n\t\t * If spaced is \"always\", then check whether option is set to false.\n\t\t * If spaced is \"never\", then check whether option is set to true.\n\t\t * @param {Object} option The option to exclude.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 223 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateArraySpacing",
            "complexity": 27,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "function validateArraySpacing(node) {\n\t\t\tif (options.spaced && node.elements.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst first = sourceCode.getFirstToken(node),\n\t\t\t\tsecond = sourceCode.getFirstToken(node, 1),\n\t\t\t\tlast = node.typeAnnotation\n\t\t\t\t\t? sourceCode.getTokenBefore(node.typeAnnotation)\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/array-callback-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 26,
            "lineCount": 223,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [options] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet funcInfo = {\n\t\t\tarrayMethodName: null,\n\t\t\tupper: null,\n\t\t\tcodePath: null,\n\t\t\thasReturn: false,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 223 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getArrayMethodName",
            "complexity": 15,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "function getArrayMethodName(node) {\n\tlet currentNode = node;\n\twhile (currentNode) {\n\t\tconst parent = currentNode.parent;\n\t\tswitch (parent.type) {\n\t\t\t/*\n\t\t\t * Looks up the destination. e.g.,\n\t\t\t * foo.every(nativeFoo || function foo() { ... });\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkLastSegment",
            "complexity": 13,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "function checkLastSegment(node) {\n\t\t\tif (!funcInfo.shouldCheck) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageAndSuggestions = { messageId: \"\", suggest: [] };\n\t\t\tif (funcInfo.arrayMethodName === \"forEach\") {\n\t\t\t\tif (\n\t\t\t\t\toptions.checkForEach &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ReturnStatement",
            "complexity": 11,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "ReturnStatement(node) {\n\t\t\t\tif (!funcInfo.shouldCheck) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfuncInfo.hasReturn = true;\n\t\t\t\tconst messageAndSuggestions = { messageId: \"\", suggest: [] };\n\t\t\t\tif (funcInfo.arrayMethodName === \"forEach\") {\n\t\t\t\t\tif (options.checkForEach && node.argument) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/array-element-newline.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 34,
            "lineCount": 271,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Normalizes a given option value.\n\t\t * @param {string|Object|undefined} providedOption An option value to parse.\n\t\t * @returns {{multiline: boolean, minItems: number}} Normalized option object.\n\t\t */\n\t\tfunction normalizeOptionValue(providedOption) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 271 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "check",
            "complexity": 19,
            "lineCount": 108,
            "parameterCount": 1,
            "snippet": "function check(node) {\n\t\t\tconst elements = node.elements;\n\t\t\tconst normalizedOptions = normalizeOptions(context.options[0]);\n\t\t\tconst options = normalizedOptions[node.type];\n\t\t\tif (!options) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet elementBreak = false;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reportNoLineBreak",
            "complexity": 4,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "function reportNoLineBreak(token) {\n\t\t\tconst tokenBefore = sourceCode.getTokenBefore(token, {\n\t\t\t\tincludeComments: true,\n\t\t\t});\n\t\t\tcontext.report({\n\t\t\t\tloc: {\n\t\t\t\t\tstart: tokenBefore.loc.end,\n\t\t\t\t\tend: token.loc.start,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/arrow-body-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 47,
            "lineCount": 338,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = context.options;\n\t\tconst always = options[0] === \"always\";\n\t\tconst asNeeded = options[0] === \"as-needed\";\n\t\tconst never = options[0] === \"never\";\n\t\tconst requireReturnForObjectLiteral =\n\t\t\toptions[1] && options[1].requireReturnForObjectLiteral;\n\t\tconst sourceCode = context.sourceCode;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 47 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 338 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validate",
            "complexity": 38,
            "lineCount": 256,
            "parameterCount": 1,
            "snippet": "function validate(node) {\n\t\t\tconst arrowBody = node.body;\n\t\t\tif (arrowBody.type === \"BlockStatement\") {\n\t\t\t\tconst blockBody = arrowBody.body;\n\t\t\t\tif (blockBody.length !== 1 && !never) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 38 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 256 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 13,
            "lineCount": 100,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\tconst fixes = [];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tblockBody.length !== 1 ||\n\t\t\t\t\t\t\t\tblockBody[0].type !== \"ReturnStatement\" ||\n\t\t\t\t\t\t\t\t!blockBody[0].argument ||\n\t\t\t\t\t\t\t\thasASIProblem(\n\t\t\t\t\t\t\t\t\tsourceCode.getTokenAfter(arrowBody),\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 6,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\tconst fixes = [];\n\t\t\t\t\t\t\tconst arrowToken = sourceCode.getTokenBefore(\n\t\t\t\t\t\t\t\tarrowBody,\n\t\t\t\t\t\t\t\tastUtils.isArrowToken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst [\n\t\t\t\t\t\t\t\tfirstTokenAfterArrow,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/arrow-parens.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 143,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst asNeeded = context.options[0] === \"as-needed\";\n\t\tconst requireForBlockBody =\n\t\t\tasNeeded &&\n\t\t\tcontext.options[1] &&\n\t\t\tcontext.options[1].requireForBlockBody === true;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 143 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "\"ArrowFunctionExpression[params.length=1]\"(node) {\n\t\t\t\tconst shouldHaveParens =\n\t\t\t\t\t!asNeeded || (requireForBlockBody && hasBlockBody(node));\n\t\t\t\tconst openingParen = findOpeningParenOfParams(node);\n\t\t\t\tconst hasParens = openingParen !== null;\n\t\t\t\tconst [param] = node.params;\n\t\t\t\tif (shouldHaveParens && !hasParens) {\n\t\t\t\t\tcontext.report({\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/arrow-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 7,
            "lineCount": 109,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst rule = Object.assign({}, context.options[0]);\n\t\trule.before = rule.before !== false;\n\t\trule.after = rule.after !== false;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Get tokens of arrow(`=>`) and before/after arrow.\n\t\t * @param {ASTNode} node The arrow function node.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "spaces",
            "complexity": 7,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "function spaces(node) {\n\t\t\tconst tokens = getTokens(node);\n\t\t\tconst countSpace = countSpaces(tokens);\n\t\t\tif (rule.before) {\n\t\t\t\tif (countSpace.before === 0) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode: tokens.before,\n\t\t\t\t\t\tmessageId: \"expectedBefore\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/block-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 144,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst always = context.options[0] !== \"never\",\n\t\t\tmessageId = always ? \"missing\" : \"extra\",\n\t\t\tsourceCode = context.sourceCode;\n\t\t/**\n\t\t * Gets the open brace token from a given node.\n\t\t * @param {ASTNode} node A BlockStatement/StaticBlock/SwitchStatement node to get.\n\t\t * @returns {Token} The token of the open brace.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 144 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkSpacingInsideBraces",
            "complexity": 14,
            "lineCount": 88,
            "parameterCount": 1,
            "snippet": "function checkSpacingInsideBraces(node) {\n\t\t\tconst openBrace = getOpenBrace(node);\n\t\t\tconst closeBrace = sourceCode.getLastToken(node);\n\t\t\tconst firstToken = sourceCode.getTokenAfter(openBrace, {\n\t\t\t\tincludeComments: true,\n\t\t\t});\n\t\t\tconst lastToken = sourceCode.getTokenBefore(closeBrace, {\n\t\t\t\tincludeComments: true,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 88 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/brace-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 26,
            "lineCount": 197,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst style = context.options[0] || \"1tbs\",\n\t\t\tparams = context.options[1] || {},\n\t\t\tsourceCode = context.sourceCode;\n\t\t/**\n\t\t * Fixes a place where a newline unexpectedly appears\n\t\t * @param {Token} firstToken The token before the unexpected newline\n\t\t * @param {Token} secondToken The token after the unexpected newline\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 197 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateCurlyPair",
            "complexity": 13,
            "lineCount": 73,
            "parameterCount": 2,
            "snippet": "function validateCurlyPair(openingCurly, closingCurly) {\n\t\t\tconst tokenBeforeOpeningCurly =\n\t\t\t\tsourceCode.getTokenBefore(openingCurly);\n\t\t\tconst tokenAfterOpeningCurly =\n\t\t\t\tsourceCode.getTokenAfter(openingCurly);\n\t\t\tconst tokenBeforeClosingCurly =\n\t\t\t\tsourceCode.getTokenBefore(closingCurly);\n\t\t\tconst singleLineException =\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/callback-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 27,
            "lineCount": 160,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst callbacks = context.options[0] || [\"callback\", \"cb\", \"next\"],\n\t\t\tsourceCode = context.sourceCode;\n\t\t/**\n\t\t * Find the closest parent matching a list of types.\n\t\t * @param {ASTNode} node The node whose parents we are searching\n\t\t * @param {Array} types The node types to match\n\t\t * @returns {ASTNode} The matched node or undefined.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 160 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "CallExpression",
            "complexity": 13,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "CallExpression(node) {\n\t\t\t\tif (!isCallback(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst closestBlock =\n\t\t\t\t\tfindClosestParentOfType(node, [\n\t\t\t\t\t\t\"BlockStatement\",\n\t\t\t\t\t\t\"ReturnStatement\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/camelcase.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 55,
            "lineCount": 347,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tallow,\n\t\t\t\tignoreDestructuring,\n\t\t\t\tignoreGlobals,\n\t\t\t\tignoreImports,\n\t\t\t\tproperties,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 55 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 347 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/capitalized-comments.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 183,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst capitalize = context.options[0] || \"always\",\n\t\t\tnormalizedOptions = getAllNormalizedOptions(context.options[1]),\n\t\t\tsourceCode = context.sourceCode;\n\t\tcreateRegExpForIgnorePatterns(normalizedOptions);\n\t\t/**\n\t\t * Checks whether a comment is an inline comment.\n\t\t *\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 183 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isCommentValid",
            "complexity": 15,
            "lineCount": 66,
            "parameterCount": 2,
            "snippet": "function isCommentValid(comment, options) {\n\t\t\tif (DEFAULT_IGNORE_PATTERN.test(comment.value)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst commentWithoutAsterisks = comment.value.replace(/\\*/gu, \"\");\n\t\t\tif (\n\t\t\t\toptions.ignorePatternRegExp &&\n\t\t\t\toptions.ignorePatternRegExp.test(commentWithoutAsterisks)\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/class-methods-use-this.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 25,
            "lineCount": 183,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [options] = context.options;\n\t\tconst {\n\t\t\tenforceForClassFields,\n\t\t\tignoreOverrideMethods,\n\t\t\tignoreClassesWithImplements,\n\t\t} = options;\n\t\tconst exceptMethods = new Set(options.exceptMethods);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 183 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/comma-dangle.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 29,
            "lineCount": 256,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = normalizeOptions(\n\t\t\tcontext.options[0],\n\t\t\tcontext.languageOptions.ecmaVersion,\n\t\t);\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Gets the last item of the given node.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 256 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/comma-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 24,
            "lineCount": 137,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst tokensAndComments = sourceCode.tokensAndComments;\n\t\tconst options = {\n\t\t\tbefore: context.options[0] ? context.options[0].before : false,\n\t\t\tafter: context.options[0] ? context.options[0].after : true,\n\t\t};\n\t\tconst commaTokensToIgnore = [];\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 16,
            "lineCount": 49,
            "parameterCount": 0,
            "snippet": "\"Program:exit\"() {\n\t\t\t\ttokensAndComments.forEach((token, i) => {\n\t\t\t\t\tif (!astUtils.isCommaToken(token)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst previousToken = tokensAndComments[i - 1];\n\t\t\t\t\tconst nextToken = tokensAndComments[i + 1];\n\t\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 16,
            "lineCount": 47,
            "parameterCount": 2,
            "snippet": "(token, i) => {\n\t\t\t\t\tif (!astUtils.isCommaToken(token)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst previousToken = tokensAndComments[i - 1];\n\t\t\t\t\tconst nextToken = tokensAndComments[i + 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpreviousToken &&\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/comma-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 41,
            "lineCount": 316,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst style = context.options[0] || \"last\",\n\t\t\tsourceCode = context.sourceCode;\n\t\tconst exceptions = {\n\t\t\tArrayPattern: true,\n\t\t\tArrowFunctionExpression: true,\n\t\t\tCallExpression: true,\n\t\t\tFunctionDeclaration: true,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 316 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateCommaItemSpacing",
            "complexity": 12,
            "lineCount": 68,
            "parameterCount": 4,
            "snippet": "function validateCommaItemSpacing(\n\t\t\tpreviousItemToken,\n\t\t\tcommaToken,\n\t\t\tcurrentItemToken,\n\t\t\treportItem,\n\t\t) {\n\t\t\tif (\n\t\t\t\tastUtils.isTokenOnSameLine(commaToken, currentItemToken) &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateComma",
            "complexity": 12,
            "lineCount": 77,
            "parameterCount": 2,
            "snippet": "function validateComma(node, property) {\n\t\t\tconst items = node[property],\n\t\t\t\tarrayLiteral =\n\t\t\t\t\tnode.type === \"ArrayExpression\" ||\n\t\t\t\t\tnode.type === \"ArrayPattern\";\n\t\t\tif (items.length > 1 || arrayLiteral) {\n\t\t\t\tlet previousItemToken = sourceCode.getFirstToken(node);\n\t\t\t\titems.forEach(item => {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/complexity.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 126,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst option = context.options[0];\n\t\tlet threshold = THRESHOLD_DEFAULT;\n\t\tlet VARIANT = \"classic\";\n\t\tif (typeof option === \"object\") {\n\t\t\tif (\n\t\t\t\tObject.hasOwn(option, \"maximum\") ||\n\t\t\t\tObject.hasOwn(option, \"max\")\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 126 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/computed-property-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 175,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n\t\tconst enforceForClassMembers =\n\t\t\t!context.options[1] || context.options[1].enforceForClassMembers;\n\t\t/**\n\t\t * Reports that there shouldn't be a space after the first token\n\t\t * @param {ASTNode} node The node to report in the event of an error.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 175 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkSpacing",
            "complexity": 12,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "function checkSpacing(propertyName) {\n\t\t\treturn function (node) {\n\t\t\t\tif (!node.computed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst property = node[propertyName];\n\t\t\t\tconst before = sourceCode.getTokenBefore(\n\t\t\t\t\t\tproperty,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 12,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function (node) {\n\t\t\t\tif (!node.computed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst property = node[propertyName];\n\t\t\t\tconst before = sourceCode.getTokenBefore(\n\t\t\t\t\t\tproperty,\n\t\t\t\t\t\tastUtils.isOpeningBracketToken,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/consistent-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 137,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ treatUndefinedAsUnspecified }] = context.options;\n\t\tlet funcInfo = null;\n\t\t/**\n\t\t * Checks whether of not the implicit returning is consistent if the last\n\t\t * code path segment is reachable.\n\t\t * @param {ASTNode} node A program/function node to check.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/consistent-this.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 137,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst aliases = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports that a variable declarator or assignment expression is assigning\n\t\t * a non-'this' value to the specified alias.\n\t\t * @param {ASTNode} node The assigning node.\n\t\t * @param {string} name the name of the alias that was incorrectly used.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/constructor-super.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 32,
            "lineCount": 298,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/*\n\t\t * {{hasExtends: boolean, scope: Scope, codePath: CodePath}[]}\n\t\t * Information for each constructor.\n\t\t * - upper:      Information of the upper constructor.\n\t\t * - hasExtends: A flag which shows whether own class has a valid `extends`\n\t\t *               part.\n\t\t * - scope:      The scope of own class.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 298 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isPossibleConstructor",
            "complexity": 23,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "function isPossibleConstructor(node) {\n\tif (!node) {\n\t\treturn false;\n\t}\n\tswitch (node.type) {\n\t\tcase \"ClassExpression\":\n\t\tcase \"FunctionExpression\":\n\t\tcase \"ThisExpression\":\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/curly.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 41,
            "lineCount": 353,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst multiOnly = context.options[0] === \"multi\";\n\t\tconst multiLine = context.options[0] === \"multi-line\";\n\t\tconst multiOrNest = context.options[0] === \"multi-or-nest\";\n\t\tconst consistent = context.options[1] === \"consistent\";\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines if a given node is a one-liner that's on the same line as it's preceding code.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 353 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "prepareCheck",
            "complexity": 21,
            "lineCount": 131,
            "parameterCount": 4,
            "snippet": "function prepareCheck(node, body, name, opts) {\n\t\t\tconst hasBlock = body.type === \"BlockStatement\";\n\t\t\tlet expected = null;\n\t\t\tif (\n\t\t\t\thasBlock &&\n\t\t\t\t(body.body.length !== 1 ||\n\t\t\t\t\tastUtils.areBracesNecessary(body, sourceCode))\n\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 131 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "check",
            "complexity": 12,
            "lineCount": 91,
            "parameterCount": 0,
            "snippet": "check() {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.expected !== null &&\n\t\t\t\t\t\tthis.expected !== this.actual\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (this.expected) {\n\t\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\t\tnode,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "needsSemicolon",
            "complexity": 11,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function needsSemicolon(closingBracket) {\n\t\t\tconst tokenBefore = sourceCode.getTokenBefore(closingBracket);\n\t\t\tconst tokenAfter = sourceCode.getTokenAfter(closingBracket);\n\t\t\tconst lastBlockNode = sourceCode.getNodeByRangeIndex(\n\t\t\t\ttokenBefore.range[0],\n\t\t\t);\n\t\t\tif (astUtils.isSemicolonToken(tokenBefore)) {\n\t\t\t\treturn false;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 5,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t\t * `do while` expressions sometimes need a space to be inserted after `do`.\n\t\t\t\t\t\t\t\t\t * e.g. `do{foo()} while (bar)` should be corrected to `do foo() while (bar)`\n\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\tconst needsPrecedingSpace =\n\t\t\t\t\t\t\t\t\t\tnode.type === \"DoWhileStatement\" &&\n\t\t\t\t\t\t\t\t\t\tsourceCode.getTokenBefore(body)\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/default-case-last.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/default-case.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 7,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [options] = context.options;\n\t\tconst commentPattern = options.commentPattern\n\t\t\t? new RegExp(options.commentPattern, \"u\")\n\t\t\t: DEFAULT_COMMENT_PATTERN;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Shortcut to get last element of array\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/dot-location.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst config = context.options[0];\n\t\tconst onObject = config === \"object\" || !config;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports if the dot between object and property is on the correct location.\n\t\t * @param {ASTNode} node The `MemberExpression` node.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/dot-notation.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 29,
            "lineCount": 151,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [options] = context.options;\n\t\tconst allowKeywords = options.allowKeywords;\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet allowPattern;\n\t\tif (options.allowPattern) {\n\t\t\tallowPattern = new RegExp(options.allowPattern, \"u\");\n\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 151 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "MemberExpression",
            "complexity": 16,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "MemberExpression(node) {\n\t\t\t\tif (\n\t\t\t\t\tnode.computed &&\n\t\t\t\t\tnode.property.type === \"Literal\" &&\n\t\t\t\t\t(literalTypesToCheck.has(typeof node.property.value) ||\n\t\t\t\t\t\tastUtils.isNullLiteral(node.property))\n\t\t\t\t) {\n\t\t\t\t\tcheckComputedProperty(node, node.property.value);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkComputedProperty",
            "complexity": 13,
            "lineCount": 64,
            "parameterCount": 2,
            "snippet": "function checkComputedProperty(node, value) {\n\t\t\tif (\n\t\t\t\tvalidIdentifier.test(value) &&\n\t\t\t\t(allowKeywords || !keywords.includes(String(value))) &&\n\t\t\t\t!(allowPattern && allowPattern.test(value))\n\t\t\t) {\n\t\t\t\tconst formattedValue =\n\t\t\t\t\tnode.property.type === \"Literal\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/eol-last.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 10,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\treturn {\n\t\t\tProgram: function checkBadEOF(node) {\n\t\t\t\tconst sourceCode = context.sourceCode,\n\t\t\t\t\tsrc = sourceCode.getText(),\n\t\t\t\t\tlastLine = sourceCode.lines.at(-1),\n\t\t\t\t\tlocation = {\n\t\t\t\t\t\tcolumn: lastLine.length,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkBadEOF",
            "complexity": 10,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function checkBadEOF(node) {\n\t\t\t\tconst sourceCode = context.sourceCode,\n\t\t\t\t\tsrc = sourceCode.getText(),\n\t\t\t\t\tlastLine = sourceCode.lines.at(-1),\n\t\t\t\t\tlocation = {\n\t\t\t\t\t\tcolumn: lastLine.length,\n\t\t\t\t\t\tline: sourceCode.lines.length,\n\t\t\t\t\t},\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/eqeqeq.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 138,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst config = context.options[0] || \"always\";\n\t\tconst options = context.options[1] || {};\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst nullOption =\n\t\t\tconfig === \"always\" ? options.null || \"always\" : \"ignore\";\n\t\tconst enforceRuleForNull = nullOption === \"always\";\n\t\tconst enforceInverseRuleForNull = nullOption === \"never\";\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 138 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/for-direction.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 26,
            "lineCount": 126,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst { sourceCode } = context;\n\t\t/**\n\t\t * report an error.\n\t\t * @param {ASTNode} node the node to report.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction report(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 126 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ForStatement",
            "complexity": 16,
            "lineCount": 44,
            "parameterCount": 1,
            "snippet": "ForStatement(node) {\n\t\t\t\tif (\n\t\t\t\t\tnode.test &&\n\t\t\t\t\tnode.test.type === \"BinaryExpression\" &&\n\t\t\t\t\tnode.update\n\t\t\t\t) {\n\t\t\t\t\tfor (const counterPosition of [\"left\", \"right\"]) {\n\t\t\t\t\t\tif (node.test[counterPosition].type !== \"Identifier\") {\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/func-call-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 184,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst never = context.options[0] !== \"always\";\n\t\tconst allowNewlines =\n\t\t\t!never && context.options[1] && context.options[1].allowNewlines;\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst text = sourceCode.getText();\n\t\t/**\n\t\t * Check if open space is present in a function name\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 184 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkSpacing",
            "complexity": 17,
            "lineCount": 136,
            "parameterCount": 3,
            "snippet": "function checkSpacing(node, leftToken, rightToken) {\n\t\t\tconst textBetweenTokens = text\n\t\t\t\t.slice(leftToken.range[1], rightToken.range[0])\n\t\t\t\t.replace(/\\/\\*.*?\\*\\//gu, \"\");\n\t\t\tconst hasWhitespace = /\\s/u.test(textBetweenTokens);\n\t\t\tconst hasNewline =\n\t\t\t\thasWhitespace &&\n\t\t\t\tastUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 136 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/func-name-matching.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 53,
            "lineCount": 218,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options =\n\t\t\t(typeof context.options[0] === \"object\"\n\t\t\t\t? context.options[0]\n\t\t\t\t: context.options[1]) || {};\n\t\tconst nameMatches =\n\t\t\ttypeof context.options[0] === \"string\"\n\t\t\t\t? context.options[0]\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 53 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 218 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 23,
            "lineCount": 86,
            "parameterCount": 1,
            "snippet": "\"Property, PropertyDefinition[value]\"(node) {\n\t\t\t\tif (\n\t\t\t\t\t!(node.value.type === \"FunctionExpression\" && node.value.id)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (node.key.type === \"Identifier\" && !node.computed) {\n\t\t\t\t\tconst functionName = node.value.id.name;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/func-names.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 31,
            "lineCount": 124,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Returns the config option for the given node.\n\t\t * @param {ASTNode} node A node to get the config for.\n\t\t * @returns {string} The config option.\n\t\t */\n\t\tfunction getConfigForNode(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 124 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/func-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 40,
            "lineCount": 153,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [style, { allowArrowFunctions, allowTypeAnnotation, overrides }] =\n\t\t\tcontext.options;\n\t\tconst enforceDeclarations = style === \"declaration\";\n\t\tconst { namedExports: exportFunctionStyle } = overrides;\n\t\tconst stack = [];\n\t\t/**\n\t\t * Checks if a function declaration is part of an overloaded function\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 40 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 153 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/function-call-argument-newline.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 10,
            "lineCount": 105,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst checkers = {\n\t\t\tunexpected: {\n\t\t\t\tmessageId: \"unexpectedLineBreak\",\n\t\t\t\tcheck: (prevToken, currentToken) =>\n\t\t\t\t\tprevToken.loc.end.line !== currentToken.loc.start.line,\n\t\t\t\tcreateFix: (token, tokenBefore) => fixer =>\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/function-paren-newline.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 42,
            "lineCount": 280,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst rawOption = context.options[0] || \"multiline\";\n\t\tconst multilineOption = rawOption === \"multiline\";\n\t\tconst multilineArgumentsOption = rawOption === \"multiline-arguments\";\n\t\tconst consistentOption = rawOption === \"consistent\";\n\t\tlet minItems;\n\t\tif (typeof rawOption === \"object\") {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 280 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getParenTokens",
            "complexity": 15,
            "lineCount": 82,
            "parameterCount": 1,
            "snippet": "function getParenTokens(node) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase \"NewExpression\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!node.arguments.length &&\n\t\t\t\t\t\t!(\n\t\t\t\t\t\t\tastUtils.isOpeningParenToken(\n\t\t\t\t\t\t\t\tsourceCode.getLastToken(node, { skip: 1 }),\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateParens",
            "complexity": 11,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function validateParens(parens, elements) {\n\t\t\tconst leftParen = parens.leftParen;\n\t\t\tconst rightParen = parens.rightParen;\n\t\t\tconst tokenAfterLeftParen = sourceCode.getTokenAfter(leftParen);\n\t\t\tconst tokenBeforeRightParen = sourceCode.getTokenBefore(rightParen);\n\t\t\tconst hasLeftNewline = !astUtils.isTokenOnSameLine(\n\t\t\t\tleftParen,\n\t\t\t\ttokenAfterLeftParen,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/generator-star-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 153,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst optionDefinitions = {\n\t\t\tbefore: { before: true, after: false },\n\t\t\tafter: { before: false, after: true },\n\t\t\tboth: { before: true, after: true },\n\t\t\tneither: { before: false, after: false },\n\t\t};\n\t\t/**\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 153 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/getter-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 166,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowImplicit }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet funcInfo = {\n\t\t\tupper: null,\n\t\t\tcodePath: null,\n\t\t\thasReturn: false,\n\t\t\tshouldCheck: false,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 166 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isGetter",
            "complexity": 14,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function isGetter(node) {\n\t\t\tconst parent = node.parent;\n\t\t\tif (\n\t\t\t\tTARGET_NODE_TYPE.test(node.type) &&\n\t\t\t\tnode.body.type === \"BlockStatement\"\n\t\t\t) {\n\t\t\t\tif (parent.kind === \"get\") {\n\t\t\t\t\treturn true;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/global-require.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/grouped-accessor-pairs.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 24,
            "lineCount": 115,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [order] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports the given accessor pair.\n\t\t * @param {string} messageId messageId to report.\n\t\t * @param {ASTNode} formerNode getter/setter node that is defined before `latterNode`.\n\t\t * @param {ASTNode} latterNode getter/setter node that is defined after `formerNode`.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkList",
            "complexity": 22,
            "lineCount": 63,
            "parameterCount": 2,
            "snippet": "function checkList(nodes, shouldCheck) {\n\t\t\tconst accessors = [];\n\t\t\tlet found = false;\n\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\tconst node = nodes[i];\n\t\t\t\tif (shouldCheck(node) && isAccessorKind(node)) {\n\t\t\t\t\tconst name = astUtils.getStaticPropertyName(node);\n\t\t\t\t\tconst key =\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/guard-for-in.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\treturn {\n\t\t\tForInStatement(node) {\n\t\t\t\tconst body = node.body;\n\t\t\t\tif (body.type === \"EmptyStatement\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (body.type === \"IfStatement\") {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ForInStatement",
            "complexity": 15,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "ForInStatement(node) {\n\t\t\t\tconst body = node.body;\n\t\t\t\tif (body.type === \"EmptyStatement\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (body.type === \"IfStatement\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/handle-callback-err.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 7,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst errorArgument = context.options[0] || \"err\";\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks if the given argument should be interpreted as a regexp pattern.\n\t\t * @param {string} stringToCheck The string which should be checked.\n\t\t * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/id-blacklist.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst denyList = new Set(context.options);\n\t\tconst reportedNodes = new Set();\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet globalScope;\n\t\t/**\n\t\t * Checks whether the given name is restricted.\n\t\t * @param {string} name The name to check.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/id-denylist.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 110,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst denyList = new Set(context.options);\n\t\tconst reportedNodes = new Set();\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet globalScope;\n\t\t/**\n\t\t * Checks whether the given name is restricted.\n\t\t * @param {string} name The name to check.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/id-length.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 27,
            "lineCount": 132,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [options] = context.options;\n\t\tconst { max: maxLength = Infinity, min: minLength } = options;\n\t\tconst properties = options.properties !== \"never\";\n\t\tconst exceptions = new Set(options.exceptions);\n\t\tconst exceptionPatterns = options.exceptionPatterns.map(\n\t\t\tpattern => new RegExp(pattern, \"u\"),\n\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 132 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/id-match.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 62,
            "lineCount": 291,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\tpattern,\n\t\t\t{\n\t\t\t\tclassFields: checkClassFields,\n\t\t\t\tignoreDestructuring,\n\t\t\t\tonlyDeclarations,\n\t\t\t\tproperties: checkProperties,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 62 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 291 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Identifier",
            "complexity": 50,
            "lineCount": 138,
            "parameterCount": 1,
            "snippet": "Identifier(node) {\n\t\t\t\tconst name = node.name,\n\t\t\t\t\tparent = node.parent,\n\t\t\t\t\teffectiveParent =\n\t\t\t\t\t\tparent.type === \"MemberExpression\"\n\t\t\t\t\t\t\t? parent.parent\n\t\t\t\t\t\t\t: parent;\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 138 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/implicit-arrow-linebreak.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst option = context.options[0] || \"beside\";\n\t\t/**\n\t\t * Validates the location of an arrow function body\n\t\t * @param {ASTNode} node The arrow function body\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/indent-legacy.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 185,
            "lineCount": 1171,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst DEFAULT_VARIABLE_INDENT = 1;\n\t\tconst DEFAULT_PARAMETER_INDENT = null; // For backwards compatibility, don't check parameter indentation unless specified in the config\n\t\tconst DEFAULT_FUNCTION_BODY_INDENT = 1;\n\t\tlet indentType = \"space\";\n\t\tlet indentSize = 4;\n\t\tconst options = {\n\t\t\tSwitchCase: 0,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 185 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1171 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkIndentInArrayOrObjectBlock",
            "complexity": 30,
            "lineCount": 146,
            "parameterCount": 1,
            "snippet": "function checkIndentInArrayOrObjectBlock(node) {\n\t\t\tif (isSingleLineNode(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet elements =\n\t\t\t\tnode.type === \"ArrayExpression\"\n\t\t\t\t\t? node.elements\n\t\t\t\t\t: node.properties;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 146 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkIndentInFunctionBlock",
            "complexity": 19,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "function checkIndentInFunctionBlock(node) {\n\t\t\t/*\n\t\t\t * Search first caller in chain.\n\t\t\t * Ex.:\n\t\t\t *\n\t\t\t * Models <- Identifier\n\t\t\t *   .User\n\t\t\t *   .find()\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "blockIndentationCheck",
            "complexity": 16,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function blockIndentationCheck(node) {\n\t\t\tif (isSingleLineNode(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tnode.parent &&\n\t\t\t\t(node.parent.type === \"FunctionExpression\" ||\n\t\t\t\t\tnode.parent.type === \"FunctionDeclaration\" ||\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/indent.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 168,
            "lineCount": 1663,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst DEFAULT_VARIABLE_INDENT = 1;\n\t\tconst DEFAULT_PARAMETER_INDENT = 1;\n\t\tconst DEFAULT_FUNCTION_BODY_INDENT = 1;\n\t\tlet indentType = \"space\";\n\t\tlet indentSize = 4;\n\t\tconst options = {\n\t\t\tSwitchCase: 0,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 168 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1663 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 21,
            "lineCount": 128,
            "parameterCount": 0,
            "snippet": "\"Program:exit\"() {\n\t\t\t\tif (options.ignoreComments) {\n\t\t\t\t\tsourceCode\n\t\t\t\t\t\t.getAllComments()\n\t\t\t\t\t\t.forEach(comment => offsets.ignoreToken(comment));\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < listenerCallQueue.length; i++) {\n\t\t\t\t\tconst nodeInfo = listenerCallQueue[i];\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 128 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addElementListIndent",
            "complexity": 16,
            "lineCount": 77,
            "parameterCount": 4,
            "snippet": "function addElementListIndent(elements, startToken, endToken, offset) {\n\t\t\t/**\n\t\t\t * Gets the first token of a given element, including surrounding parentheses.\n\t\t\t * @param {ASTNode} element A node in the `elements` list\n\t\t\t * @returns {Token} The first token of this element\n\t\t\t */\n\t\t\tfunction getFirstToken(element) {\n\t\t\t\tlet token = sourceCode.getTokenBefore(element);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ConditionalExpression",
            "complexity": 11,
            "lineCount": 85,
            "parameterCount": 1,
            "snippet": "ConditionalExpression(node) {\n\t\t\t\tconst firstToken = sourceCode.getFirstToken(node);\n\t\t\t\tif (\n\t\t\t\t\t!options.flatTernaryExpressions ||\n\t\t\t\t\t!astUtils.isTokenOnSameLine(node.test, node.consequent) ||\n\t\t\t\t\tisOnFirstLineOfStatement(firstToken, node)\n\t\t\t\t) {\n\t\t\t\t\tconst questionMarkToken = sourceCode.getFirstTokenBetween(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "\"MemberExpression, JSXMemberExpression, MetaProperty\"(node) {\n\t\t\t\tconst object =\n\t\t\t\t\tnode.type === \"MetaProperty\" ? node.meta : node.object;\n\t\t\t\tconst firstNonObjectToken = sourceCode.getFirstTokenBetween(\n\t\t\t\t\tobject,\n\t\t\t\t\tnode.property,\n\t\t\t\t\tastUtils.isNotClosingParenToken,\n\t\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/init-declarations.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 17,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst MODE_ALWAYS = \"always\",\n\t\t\tMODE_NEVER = \"never\";\n\t\tconst mode = context.options[0] || MODE_ALWAYS;\n\t\tconst params = context.options[1] || {};\n\t\tlet insideDeclaredNamespace = false;\n\t\treturn {\n\t\t\tTSModuleDeclaration(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/jsx-quotes.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/key-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 51,
            "lineCount": 463,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * OPTIONS\n\t\t * \"key-spacing\": [2, {\n\t\t *     beforeColon: false,\n\t\t *     afterColon: true,\n\t\t *     align: \"colon\" // Optional, or \"value\"\n\t\t * }\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 51 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 463 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "report",
            "complexity": 21,
            "lineCount": 93,
            "parameterCount": 5,
            "snippet": "function report(property, side, whitespace, expected, mode) {\n\t\t\tconst diff = whitespace.length - expected;\n\t\t\tif (\n\t\t\t\t((diff && mode === \"strict\") ||\n\t\t\t\t\t(diff < 0 && mode === \"minimum\") ||\n\t\t\t\t\t(diff > 0 && !expected && mode === \"minimum\")) &&\n\t\t\t\t!(expected && containsLineTerminator(whitespace))\n\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyGroupAlignment",
            "complexity": 7,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "function verifyGroupAlignment(properties) {\n\t\t\tconst length = properties.length,\n\t\t\t\twidths = properties.map(getKeyWidth), // Width of keys, including quotes\n\t\t\t\talign = alignmentOptions.on; // \"value\" or \"colon\"\n\t\t\tlet targetWidth = Math.max(...widths),\n\t\t\t\tbeforeColon,\n\t\t\t\tafterColon,\n\t\t\t\tmode;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/keyword-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 72,
            "lineCount": 556,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst tokensToIgnore = new WeakSet();\n\t\t/**\n\t\t * Reports a given token if there are not space(s) before the token.\n\t\t * @param {Token} token A token to report.\n\t\t * @param {RegExp} pattern A pattern of the previous token to check.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 72 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 556 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/line-comment-position.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = context.options[0];\n\t\tlet above,\n\t\t\tignorePattern,\n\t\t\tapplyDefaultIgnorePatterns = true;\n\t\tif (!options || typeof options === \"string\") {\n\t\t\tabove = !options || options === \"above\";\n\t\t} else {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/linebreak-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 6,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Builds a fix function that replaces text at the specified range in the source text.\n\t\t * @param {SourceRange} range The range to replace\n\t\t * @param {string} text The text to insert.\n\t\t * @returns {Function} Fixer function\n\t\t * @private\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/lines-around-comment.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 78,
            "lineCount": 425,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = Object.assign({}, context.options[0]);\n\t\tconst ignorePattern = options.ignorePattern;\n\t\tconst defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n\t\tconst customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n\t\tconst applyDefaultIgnorePatterns =\n\t\t\toptions.applyDefaultIgnorePatterns !== false;\n\t\toptions.beforeBlockComment =\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 78 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 425 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkForEmptyLine",
            "complexity": 36,
            "lineCount": 118,
            "parameterCount": 2,
            "snippet": "function checkForEmptyLine(token, opts) {\n\t\t\tif (\n\t\t\t\tapplyDefaultIgnorePatterns &&\n\t\t\t\tdefaultIgnoreRegExp.test(token.value)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (ignorePattern && customIgnoreRegExp.test(token.value)) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/lines-around-directive.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 28,
            "lineCount": 172,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst config = context.options[0] || \"always\";\n\t\tconst expectLineBefore =\n\t\t\ttypeof config === \"string\" ? config : config.before;\n\t\tconst expectLineAfter =\n\t\t\ttypeof config === \"string\" ? config : config.after;\n\t\t/**\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 172 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkDirectives",
            "complexity": 18,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "function checkDirectives(node) {\n\t\t\tconst directives = astUtils.getDirectivePrologue(node);\n\t\t\tif (!directives.length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst firstDirective = directives[0];\n\t\t\tconst leadingComments =\n\t\t\t\tsourceCode.getCommentsBefore(firstDirective);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/lines-between-class-members.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 238,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = [];\n\t\toptions[0] = context.options[0] || \"always\";\n\t\toptions[1] = context.options[1] || { exceptAfterSingleLine: false };\n\t\tconst configureList =\n\t\t\ttypeof options[0] === \"object\"\n\t\t\t\t? options[0].enforce\n\t\t\t\t: [{ blankLine: options[0], prev: \"*\", next: \"*\" }];\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 238 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ClassBody",
            "complexity": 10,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "ClassBody(node) {\n\t\t\t\tconst body = node.body;\n\t\t\t\tfor (let i = 0; i < body.length - 1; i++) {\n\t\t\t\t\tconst curFirst = sourceCode.getFirstToken(body[i]);\n\t\t\t\t\tconst { curLast, nextFirst } = getBoundaryTokens(\n\t\t\t\t\t\tbody[i],\n\t\t\t\t\t\tbody[i + 1],\n\t\t\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/logical-assignment-operators.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 50,
            "lineCount": 405,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst mode = context.options[0] === \"never\" ? \"never\" : \"always\";\n\t\tconst checkIf =\n\t\t\tmode === \"always\" &&\n\t\t\tcontext.options.length > 1 &&\n\t\t\tcontext.options[1].enforceForIfStatements;\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst isStrict = sourceCode.getScope(sourceCode.ast).isStrict;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 405 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 21,
            "lineCount": 103,
            "parameterCount": 1,
            "snippet": "\"IfStatement[alternate=null]\"(ifNode) {\n\t\t\t\tif (!checkIf) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst hasBody = ifNode.consequent.type === \"BlockStatement\";\n\t\t\t\tif (hasBody && ifNode.consequent.body.length !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 10,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "*fix(ruleFixer) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tsourceCode.getCommentsInside(ifNode).length > 0\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst firstBodyToken =\n\t\t\t\t\t\t\t\tsourceCode.getFirstToken(body);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "'LogicalExpression[right.type=\"AssignmentExpression\"][right.operator=\"=\"]'(\n\t\t\t\tlogical,\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tisReference(logical.left) &&\n\t\t\t\t\tastUtils.isSameReference(logical.left, logical.right.left)\n\t\t\t\t) {\n\t\t\t\t\tconst descriptor = {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "AssignmentExpression",
            "complexity": 7,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "AssignmentExpression(assignment) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!astUtils.isLogicalAssignmentOperator(\n\t\t\t\t\t\t\tassignment.operator,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-classes-per-file.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/max-depth.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst functionStack = [],\n\t\t\toption = context.options[0];\n\t\tlet maxDepth = 4;\n\t\tif (\n\t\t\ttypeof option === \"object\" &&\n\t\t\t(Object.hasOwn(option, \"maximum\") || Object.hasOwn(option, \"max\"))\n\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-len.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 56,
            "lineCount": 386,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/*\n\t\t * Inspired by http://tools.ietf.org/html/rfc3986#appendix-B, however:\n\t\t * - They're matching an entire string that we know is a URI\n\t\t * - We're matching part of a string where we think there *might* be a URL\n\t\t * - We're only concerned about URLs, as picking out any URI would cause\n\t\t *   too many false positives\n\t\t * - We don't care about matching the entire URL, any small segment is fine\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 56 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 386 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkProgramForMaxLength",
            "complexity": 27,
            "lineCount": 133,
            "parameterCount": 1,
            "snippet": "function checkProgramForMaxLength(node) {\n\t\t\tconst lines = sourceCode.lines,\n\t\t\t\tcomments =\n\t\t\t\t\tignoreComments || maxCommentLength || ignoreTrailingComments\n\t\t\t\t\t\t? getAllComments()\n\t\t\t\t\t\t: [];\n\t\t\tlet commentsIndex = 0;\n\t\t\tconst strings = getAllStrings();\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 24,
            "lineCount": 110,
            "parameterCount": 2,
            "snippet": "(line, i) => {\n\t\t\t\tconst lineNumber = i + 1;\n\t\t\t\t/*\n\t\t\t\t * if we're checking comment length; we need to know whether this\n\t\t\t\t * line is a comment\n\t\t\t\t */\n\t\t\t\tlet lineIsComment = false;\n\t\t\t\tlet textToMeasure;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-lines-per-function.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 30,
            "lineCount": 152,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst lines = sourceCode.lines;\n\t\tconst option = context.options[0];\n\t\tlet maxLines = 50;\n\t\tlet skipComments = false;\n\t\tlet skipBlankLines = false;\n\t\tlet IIFEs = false;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 152 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-lines.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 116,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst option = context.options[0];\n\t\tlet max = 300;\n\t\tif (typeof option === \"object\" && Object.hasOwn(option, \"max\")) {\n\t\t\tmax = option.max;\n\t\t} else if (typeof option === \"number\") {\n\t\t\tmax = option;\n\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 116 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-nested-callbacks.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst option = context.options[0];\n\t\tlet THRESHOLD = 10;\n\t\tif (\n\t\t\ttypeof option === \"object\" &&\n\t\t\t(Object.hasOwn(option, \"maximum\") || Object.hasOwn(option, \"max\"))\n\t\t) {\n\t\t\tTHRESHOLD = option.maximum || option.max;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/max-params.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 12,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst option = context.options[0];\n\t\tlet numParams = 3;\n\t\tlet countVoidThis = false;\n\t\tif (typeof option === \"object\") {\n\t\t\tif (\n\t\t\t\tObject.hasOwn(option, \"maximum\") ||\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-statements-per-line.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 11,
            "lineCount": 155,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode,\n\t\t\toptions = context.options[0] || {},\n\t\t\tmaxStatementsPerLine =\n\t\t\t\ttypeof options.max !== \"undefined\" ? options.max : 1;\n\t\tlet lastStatementLine = 0,\n\t\t\tnumberOfStatementsOnThisLine = 0,\n\t\t\tfirstExtraStatement;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 155 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/max-statements.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 119,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst functionStack = [],\n\t\t\toption = context.options[0],\n\t\t\tignoreTopLevelFunctions =\n\t\t\t\t(context.options[1] &&\n\t\t\t\t\tcontext.options[1].ignoreTopLevelFunctions) ||\n\t\t\t\tfalse,\n\t\t\ttopLevelFunctions = [];\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 119 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/multiline-comment-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 58,
            "lineCount": 560,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst option = context.options[0] || \"starred-block\";\n\t\tconst params = context.options[1] || {};\n\t\tconst checkJSDoc = !!params.checkJSDoc;\n\t\t/**\n\t\t * Checks if a comment line is starred.\n\t\t * @param {string} line A string representing a comment line.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 58 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 560 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 18,
            "lineCount": 176,
            "parameterCount": 1,
            "snippet": "\"starred-block\"(commentGroup) {\n\t\t\t\tconst [firstComment] = commentGroup;\n\t\t\t\tconst commentLines = getCommentLines(commentGroup);\n\t\t\t\tif (commentLines.some(value => value.includes(\"*/\"))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (commentGroup.length > 1) {\n\t\t\t\t\tcontext.report({\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 176 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 9,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\t\t\tconst lineStartIndex =\n\t\t\t\t\t\t\t\t\t\tsourceCode.getIndexFromLoc({\n\t\t\t\t\t\t\t\t\t\t\tline: lineNumber,\n\t\t\t\t\t\t\t\t\t\t\tcolumn: 0,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (errorType === \"alignment\") {\n\t\t\t\t\t\t\t\t\t\tconst [, commentTextPrefix = \"\"] =\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Program",
            "complexity": 9,
            "lineCount": 51,
            "parameterCount": 0,
            "snippet": "Program() {\n\t\t\t\treturn sourceCode\n\t\t\t\t\t.getAllComments()\n\t\t\t\t\t.filter(comment => comment.type !== \"Shebang\")\n\t\t\t\t\t.filter(\n\t\t\t\t\t\tcomment =>\n\t\t\t\t\t\t\t!astUtils.COMMENTS_IGNORE_PATTERN.test(\n\t\t\t\t\t\t\t\tcomment.value,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "\"bare-block\"(commentGroup) {\n\t\t\t\tif (isJSDocComment(commentGroup)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst [firstComment] = commentGroup;\n\t\t\t\tconst commentLines = getCommentLines(commentGroup);\n\t\t\t\tif (\n\t\t\t\t\tfirstComment.type === \"Line\" &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/multiline-ternary.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 189,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst option = context.options[0];\n\t\tconst multiline = option !== \"never\";\n\t\tconst allowSingleLine = option === \"always-multiline\";\n\t\treturn {\n\t\t\tConditionalExpression(node) {\n\t\t\t\tconst questionToken = sourceCode.getTokenAfter(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 189 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ConditionalExpression",
            "complexity": 16,
            "lineCount": 176,
            "parameterCount": 1,
            "snippet": "ConditionalExpression(node) {\n\t\t\t\tconst questionToken = sourceCode.getTokenAfter(\n\t\t\t\t\tnode.test,\n\t\t\t\t\tastUtils.isNotClosingParenToken,\n\t\t\t\t);\n\t\t\t\tconst colonToken = sourceCode.getTokenAfter(\n\t\t\t\t\tnode.consequent,\n\t\t\t\t\tastUtils.isNotClosingParenToken,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 176 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/new-cap.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 24,
            "lineCount": 153,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [config] = context.options;\n\t\tconst skipProperties = !config.properties;\n\t\tconst newIsCapExceptions = config.newIsCapExceptions.reduce(invert, {});\n\t\tconst newIsCapExceptionPattern = config.newIsCapExceptionPattern\n\t\t\t? new RegExp(config.newIsCapExceptionPattern, \"u\")\n\t\t\t: null;\n\t\tconst capIsNewExceptions = calculateCapIsNewExceptions(config);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 153 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/new-parens.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = context.options;\n\t\tconst always = options[0] !== \"never\"; // Default is always\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tNewExpression(node) {\n\t\t\t\tif (node.arguments.length !== 0) {\n\t\t\t\t\treturn; // if there are arguments, there have to be parens\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/newline-after-var.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 31,
            "lineCount": 244,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst mode = context.options[0] === \"never\" ? \"never\" : \"always\";\n\t\tconst commentEndLine = sourceCode\n\t\t\t.getAllComments()\n\t\t\t.reduce((result, token) => {\n\t\t\t\tresult[token.loc.start.line] = token.loc.end.line;\n\t\t\t\treturn result;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 244 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkForBlankLine",
            "complexity": 17,
            "lineCount": 98,
            "parameterCount": 1,
            "snippet": "function checkForBlankLine(node) {\n\t\t\t/*\n\t\t\t * lastToken is the last token on the node's line. It will usually also be the last token of the node, but it will\n\t\t\t * sometimes be second-last if there is a semicolon on a different line.\n\t\t\t */\n\t\t\tconst lastToken = getLastToken(node),\n\t\t\t\t/*\n\t\t\t\t * If lastToken is the last token of the node, nextToken should be the token after the node. Otherwise, nextToken\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 98 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/newline-before-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 191,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Tests whether node is preceded by supplied tokens\n\t\t * @param {ASTNode} node node to check\n\t\t * @param {Array} testTokens array of tokens to test against\n\t\t * @returns {boolean} Whether or not the node is preceded by one of the supplied tokens\n\t\t * @private\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 191 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/newline-per-chained-call.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = context.options[0] || {},\n\t\t\tignoreChainWithDepth = options.ignoreChainWithDepth || 2;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Get the prefix of a given MemberExpression node.\n\t\t * If the MemberExpression node is a computed value it returns a\n\t\t * left bracket. If not it returns a period.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-alert.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-array-constructor.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 144,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks if there are comments in Array constructor expressions.\n\t\t * @param {ASTNode} node A CallExpression or NewExpression node.\n\t\t * @returns {boolean} True if there are comments, false otherwise.\n\t\t */\n\t\tfunction hasCommentsInArrayConstructor(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 144 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "check",
            "complexity": 16,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "function check(node) {\n\t\t\tif (\n\t\t\t\tnode.callee.type !== \"Identifier\" ||\n\t\t\t\tnode.callee.name !== \"Array\" ||\n\t\t\t\tnode.typeArguments ||\n\t\t\t\t(node.arguments.length === 1 &&\n\t\t\t\t\tnode.arguments[0].type !== \"SpreadElement\")\n\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-async-promise-executor.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-await-in-loop.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-buffer-constructor.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-caller.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-catch-shadow.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-class-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-compare-neg-zero.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-cond-assign.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 109,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [prohibitAssign] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Check whether an AST node is the test expression for a conditional statement.\n\t\t * @param {!Object} node The node to test.\n\t\t * @returns {boolean} `true` if the node is the text expression for a conditional statement; otherwise, `false`.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-confusing-arrow.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-console.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 162,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allow: allowed = [] }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks whether the given reference is 'console' or not.\n\t\t * @param {eslint-scope.Reference} reference The reference to check.\n\t\t * @returns {boolean} `true` if the reference is 'console'.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 162 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-const-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-constant-binary-expression.js",
        "criticalFunctions": [
          {
            "name": "hasConstantStrictBooleanComparison",
            "complexity": 30,
            "lineCount": 86,
            "parameterCount": 2,
            "snippet": "function hasConstantStrictBooleanComparison(scope, node) {\n\tswitch (node.type) {\n\t\tcase \"ObjectExpression\": // Objects are not booleans\n\t\tcase \"ArrayExpression\": // Arrays are not booleans\n\t\tcase \"ArrowFunctionExpression\": // Functions are not booleans\n\t\tcase \"FunctionExpression\":\n\t\tcase \"ClassExpression\": // Classes are not booleans\n\t\tcase \"NewExpression\": // Objects are not booleans\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "hasConstantNullishness",
            "complexity": 29,
            "lineCount": 84,
            "parameterCount": 3,
            "snippet": "function hasConstantNullishness(scope, node, nonNullish) {\n\tif (nonNullish && isNullOrUndefined(scope, node)) {\n\t\treturn false;\n\t}\n\tswitch (node.type) {\n\t\tcase \"ObjectExpression\": // Objects are never nullish\n\t\tcase \"ArrayExpression\": // Arrays are never nullish\n\t\tcase \"ArrowFunctionExpression\": // Functions never nullish\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "hasConstantLooseBooleanComparison",
            "complexity": 27,
            "lineCount": 110,
            "parameterCount": 2,
            "snippet": "function hasConstantLooseBooleanComparison(scope, node) {\n\tswitch (node.type) {\n\t\tcase \"ObjectExpression\":\n\t\tcase \"ClassExpression\":\n\t\t\t/**\n\t\t\t * In theory objects like:\n\t\t\t *\n\t\t\t * `{toString: () => a}`\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isAlwaysNew",
            "complexity": 17,
            "lineCount": 51,
            "parameterCount": 2,
            "snippet": "function isAlwaysNew(scope, node) {\n\tswitch (node.type) {\n\t\tcase \"ObjectExpression\":\n\t\tcase \"ArrayExpression\":\n\t\tcase \"ArrowFunctionExpression\":\n\t\tcase \"FunctionExpression\":\n\t\tcase \"ClassExpression\":\n\t\t\treturn true;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 88,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tLogicalExpression(node) {\n\t\t\t\tconst { operator, left } = node;\n\t\t\t\tconst scope = sourceCode.getScope(node);\n\t\t\t\tif (\n\t\t\t\t\t(operator === \"&&\" || operator === \"||\") &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 88 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-continue.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-control-regex.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 59,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * Get the regex expression\n\t\t * @param {ASTNode} node `Literal` node to evaluate\n\t\t * @returns {{ pattern: string, flags: string | null } | null} Regex if found (the given node is either a regex literal\n\t\t * or a string literal that is the pattern argument of a RegExp constructor call). Otherwise `null`. If flags cannot be determined,\n\t\t * the `flags` property will be `null`.\n\t\t * @private\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-debugger.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-delete-var.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-div-regex.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-dupe-args.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-dupe-class-members.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tlet stack = [];\n\t\t/**\n\t\t * Gets state of a given member name.\n\t\t * @param {string} name A name of a member.\n\t\t * @param {boolean} isStatic A flag which specifies that is a static member.\n\t\t * @returns {Object} A state of a given member name.\n\t\t *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-dupe-else-if.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 74,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether the two given nodes are considered to be equal. In particular, given that the nodes\n\t\t * represent expressions in a boolean context, `||` and `&&` can be considered as commutative operators.\n\t\t * @param {ASTNode} a First node.\n\t\t * @param {ASTNode} b Second node.\n\t\t * @returns {boolean} `true` if the nodes are considered to be equal.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-dupe-keys.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 9,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tlet info = null;\n\t\treturn {\n\t\t\tObjectExpression(node) {\n\t\t\t\tinfo = new ObjectInfo(info, node);\n\t\t\t},\n\t\t\t\"ObjectExpression:exit\"() {\n\t\t\t\tinfo = info.upper;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-duplicate-case.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-duplicate-imports.js",
        "criticalFunctions": [
          {
            "name": "isImportExportCanBeMerged",
            "complexity": 19,
            "lineCount": 38,
            "parameterCount": 2,
            "snippet": "function isImportExportCanBeMerged(node1, node2) {\n\tconst importExportType1 = getImportExportType(node1);\n\tconst importExportType2 = getImportExportType(node2);\n\tif (\n\t\t(node1.importKind === \"type\" || node1.exportKind === \"type\") &&\n\t\t(node2.importKind === \"type\" || node2.exportKind === \"type\")\n\t) {\n\t\tconst isDefault1 = importExportType1 === \"ImportDefaultSpecifier\";\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkAndReport",
            "complexity": 10,
            "lineCount": 71,
            "parameterCount": 6,
            "snippet": "function checkAndReport(\n\tcontext,\n\tnode,\n\tmodules,\n\tdeclarationType,\n\tincludeExports,\n\tallowSeparateTypeImports,\n) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-else-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 45,
            "lineCount": 397,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowElseIf }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks whether the given names can be safely used to declare block-scoped variables\n\t\t * in the given scope. Name collisions can produce redeclaration syntax errors,\n\t\t * or silently change references and modify behavior of the original code.\n\t\t *\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 45 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 397 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "displayReport",
            "complexity": 15,
            "lineCount": 97,
            "parameterCount": 1,
            "snippet": "function displayReport(elseNode) {\n\t\t\tconst currentScope = sourceCode.getScope(elseNode.parent);\n\t\t\tcontext.report({\n\t\t\t\tnode: elseNode,\n\t\t\t\tmessageId: \"unexpected\",\n\t\t\t\tfix(fixer) {\n\t\t\t\t\tif (!isSafeFromNameCollisions(elseNode, currentScope)) {\n\t\t\t\t\t\treturn null;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 15,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\tif (!isSafeFromNameCollisions(elseNode, currentScope)) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst startToken = sourceCode.getFirstToken(elseNode);\n\t\t\t\t\tconst elseToken = sourceCode.getTokenBefore(startToken);\n\t\t\t\t\tconst source = sourceCode.getText(elseNode);\n\t\t\t\t\tconst lastIfToken = sourceCode.getTokenBefore(elseToken);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isSafeToDeclare",
            "complexity": 12,
            "lineCount": 85,
            "parameterCount": 2,
            "snippet": "function isSafeToDeclare(names, scope) {\n\t\t\tif (names.length === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst functionScope = scope.variableScope;\n\t\t\t/*\n\t\t\t * If this is a function scope, scope.variables will contain parameters, implicit variables such as \"arguments\",\n\t\t\t * all function-scoped variables ('var'), and block-scoped variables defined in the scope.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-empty-character-class.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-empty-function.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 17,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allow }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks if the given function node is allowed to be empty.\n\t\t * @param {ASTNode} node The function node to check.\n\t\t * @returns {boolean} True if the function is allowed to be empty, false otherwise.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-empty-pattern.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-empty-static-block.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-empty.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowEmptyCatch }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tBlockStatement(node) {\n\t\t\t\tif (node.body.length !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-eq-null.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-eval.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 27,
            "lineCount": 221,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowIndirect }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet funcInfo = null;\n\t\t/**\n\t\t * Pushes a `this` scope (non-arrow function, class static block, or class field initializer) information to the stack.\n\t\t * Top-level scopes are handled separately.\n\t\t *\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 221 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-ex-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-extend-native.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 127,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst exceptions = new Set(context.options[0].exceptions);\n\t\tconst modifiedBuiltins = new Set(\n\t\t\tObject.keys(astUtils.ECMASCRIPT_GLOBALS)\n\t\t\t\t.filter(builtin => builtin[0].toUpperCase() === builtin[0])\n\t\t\t\t.filter(builtin => !exceptions.has(builtin)),\n\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-extra-boolean-cast.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 65,
            "lineCount": 351,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ enforceForLogicalOperands, enforceForInnerExpressions }] =\n\t\t\tcontext.options;\n\t\tconst BOOLEAN_NODE_TYPES = new Set([\n\t\t\t\"IfStatement\",\n\t\t\t\"DoWhileStatement\",\n\t\t\t\"WhileStatement\",\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 351 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "needsParens",
            "complexity": 18,
            "lineCount": 62,
            "parameterCount": 2,
            "snippet": "function needsParens(previousNode, node) {\n\t\t\tif (previousNode.parent.type === \"ChainExpression\") {\n\t\t\t\treturn needsParens(previousNode.parent, node);\n\t\t\t}\n\t\t\tif (isParenthesized(previousNode)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst parent = previousNode.parent;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isInFlaggedContext",
            "complexity": 16,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "function isInFlaggedContext(node) {\n\t\t\tif (node.parent.type === \"ChainExpression\") {\n\t\t\t\treturn isInFlaggedContext(node.parent);\n\t\t\t}\n\t\t\t/*\n\t\t\t * legacy behavior - enforceForLogicalOperands will only recurse on\n\t\t\t * logical expressions, not on other contexts.\n\t\t\t * enforceForInnerExpressions will recurse on logical expressions\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "CallExpression",
            "complexity": 16,
            "lineCount": 95,
            "parameterCount": 1,
            "snippet": "CallExpression(node) {\n\t\t\t\tif (\n\t\t\t\t\tnode.callee.type !== \"Identifier\" ||\n\t\t\t\t\tnode.callee.name !== \"Boolean\"\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isInFlaggedContext(node)) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 13,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\tconst parent = node.parent;\n\t\t\t\t\t\t\tif (node.arguments.length === 0) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tparent.type === \"UnaryExpression\" &&\n\t\t\t\t\t\t\t\t\tparent.operator === \"!\"\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t/*\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-extra-parens.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 296,
            "lineCount": 1553,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst tokensToIgnore = new WeakSet();\n\t\tconst precedence = astUtils.getPrecedence;\n\t\tconst ALL_NODES = context.options[0] !== \"functions\";\n\t\tconst EXCEPT_COND_ASSIGN =\n\t\t\tALL_NODES &&\n\t\t\tcontext.options[1] &&\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 296 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1553 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "MemberExpression",
            "complexity": 23,
            "lineCount": 57,
            "parameterCount": 1,
            "snippet": "MemberExpression(node) {\n\t\t\t\tconst shouldAllowWrapOnce =\n\t\t\t\t\tisMemberExpInNewCallee(node) &&\n\t\t\t\t\tdoesMemberExpressionContainCallExpression(node);\n\t\t\t\tconst nodeObjHasExcessParens = shouldAllowWrapOnce\n\t\t\t\t\t? hasDoubleExcessParens(node.object)\n\t\t\t\t\t: hasExcessParens(node.object) &&\n\t\t\t\t\t\t!(\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "checkBinaryLogical",
            "complexity": 21,
            "lineCount": 47,
            "parameterCount": 1,
            "snippet": "function checkBinaryLogical(node) {\n\t\t\tconst prec = precedence(node);\n\t\t\tconst leftPrecedence = precedence(node.left);\n\t\t\tconst rightPrecedence = precedence(node.right);\n\t\t\tconst isExponentiation = node.operator === \"**\";\n\t\t\tconst shouldSkipLeft =\n\t\t\t\tNESTED_BINARY &&\n\t\t\t\t(node.left.type === \"BinaryExpression\" ||\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkExpressionOrExportStatement",
            "complexity": 21,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "function checkExpressionOrExportStatement(node) {\n\t\t\tconst firstToken = isParenthesised(node)\n\t\t\t\t? sourceCode.getTokenBefore(node)\n\t\t\t\t: sourceCode.getFirstToken(node);\n\t\t\tconst secondToken = sourceCode.getTokenAfter(\n\t\t\t\tfirstToken,\n\t\t\t\tastUtils.isNotOpeningParenToken,\n\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          },
          {
            "name": "report",
            "complexity": 12,
            "lineCount": 77,
            "parameterCount": 1,
            "snippet": "function report(node) {\n\t\t\tconst leftParenToken = sourceCode.getTokenBefore(node);\n\t\t\tconst rightParenToken = sourceCode.getTokenAfter(node);\n\t\t\tif (!isParenthesisedTwice(node)) {\n\t\t\t\tif (tokensToIgnore.has(sourceCode.getFirstToken(node))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isIIFE(node) && !isParenthesised(node.callee)) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-extra-semi.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 107,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks if a node or token is fixable.\n\t\t * A node is fixable if it can be removed without turning a subsequent statement into a directive after fixing other nodes.\n\t\t * @param {Token} nodeOrToken The node or token to check.\n\t\t * @returns {boolean} Whether or not the node is fixable.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-fallthrough.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst codePathSegments = [];\n\t\tlet currentCodePathSegments = new Set();\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [\n\t\t\t{ allowEmptyCase, commentPattern, reportUnusedFallthroughComment },\n\t\t] = context.options;\n\t\tconst fallthroughCommentPattern = commentPattern\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-floating-decimal.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-func-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-global-assign.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 7,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ exceptions }] = context.options;\n\t\t/**\n\t\t * Reports write references.\n\t\t * @param {Reference} reference A reference to check.\n\t\t * @param {number} index The index of the reference in the references.\n\t\t * @param {Reference[]} references The array that the reference belongs to.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-implicit-coercion.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 46,
            "lineCount": 225,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [options] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports an error and autofixes the node\n\t\t * @param {ASTNode} node An ast node to report the error on.\n\t\t * @param {string} recommendation The recommended code for the issue\n\t\t * @param {bool} shouldSuggest Whether this report should offer a suggestion\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 225 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "UnaryExpression",
            "complexity": 18,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "UnaryExpression(node) {\n\t\t\t\tlet operatorAllowed;\n\t\t\t\toperatorAllowed = options.allow.includes(\"!!\");\n\t\t\t\tif (\n\t\t\t\t\t!operatorAllowed &&\n\t\t\t\t\toptions.boolean &&\n\t\t\t\t\tisDoubleLogicalNegating(node)\n\t\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-implicit-globals.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 21,
            "lineCount": 126,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ lexicalBindings: checkLexicalBindings }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports the node.\n\t\t * @param {ASTNode} node Node to report.\n\t\t * @param {string} messageId Id of the message to report.\n\t\t * @param {string|undefined} kind Declaration kind, can be 'var', 'const', 'let', function or class.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 126 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Program",
            "complexity": 21,
            "lineCount": 102,
            "parameterCount": 1,
            "snippet": "Program(node) {\n\t\t\t\tconst scope = sourceCode.getScope(node);\n\t\t\t\tscope.variables.forEach(variable => {\n\t\t\t\t\tconst isReadonlyEslintGlobalVariable =\n\t\t\t\t\t\tvariable.writeable === false;\n\t\t\t\t\tconst isWritableEslintGlobalVariable =\n\t\t\t\t\t\tvariable.writeable === true;\n\t\t\t\t\tif (isWritableEslintGlobalVariable) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 21,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "variable => {\n\t\t\t\t\tconst isReadonlyEslintGlobalVariable =\n\t\t\t\t\t\tvariable.writeable === false;\n\t\t\t\t\tconst isWritableEslintGlobalVariable =\n\t\t\t\t\t\tvariable.writeable === true;\n\t\t\t\t\tif (isWritableEslintGlobalVariable) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-implied-eval.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 122,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst GLOBAL_CANDIDATES = Object.freeze([\n\t\t\t\"global\",\n\t\t\t\"window\",\n\t\t\t\"globalThis\",\n\t\t]);\n\t\tconst EVAL_LIKE_FUNC_PATTERN =\n\t\t\t/^(?:set(?:Interval|Timeout)|execScript)$/u;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 122 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-import-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-inline-comments.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ ignorePattern }] = context.options;\n\t\tconst customIgnoreRegExp =\n\t\t\tignorePattern && new RegExp(ignorePattern, \"u\");\n\t\t/**\n\t\t * Will check that comments are not on lines starting with or ending with code\n\t\t * @param {ASTNode} node The comment node to check\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-inner-declarations.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 10,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst both = context.options[0] === \"both\";\n\t\tconst { blockScopedFunctions } = context.options[1];\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst ecmaVersion = context.languageOptions.ecmaVersion;\n\t\t/**\n\t\t * Ensure that a given node is at a program or function body's root.\n\t\t * @param {ASTNode} node Declaration node to check.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-invalid-regexp.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 26,
            "lineCount": 189,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowConstructorFlags }] = context.options;\n\t\tlet allowedFlags = [];\n\t\tif (allowConstructorFlags) {\n\t\t\tconst temp = allowConstructorFlags\n\t\t\t\t.join(\"\")\n\t\t\t\t.replace(new RegExp(`[${validFlags}]`, \"gu\"), \"\");\n\t\t\tif (temp) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 189 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 11,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "\"CallExpression, NewExpression\"(node) {\n\t\t\t\tif (\n\t\t\t\t\tnode.callee.type !== \"Identifier\" ||\n\t\t\t\t\tnode.callee.name !== \"RegExp\"\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst flags = getFlags(node);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-irregular-whitespace.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 212,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tskipComments,\n\t\t\t\tskipStrings,\n\t\t\t\tskipRegExps,\n\t\t\t\tskipTemplates,\n\t\t\t\tskipJSXText,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 212 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-iterator.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-label-var.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-labels.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 12,
            "lineCount": 97,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowLoop, allowSwitch }] = context.options;\n\t\tlet scopeInfo = null;\n\t\t/**\n\t\t * Gets the kind of a given node.\n\t\t * @param {ASTNode} node A node to get.\n\t\t * @returns {string} The kind of the node.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-lone-blocks.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 109,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst loneBlocks = [];\n\t\tlet ruleDef;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports a node as invalid.\n\t\t * @param {ASTNode} node The node to be reported.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-lonely-if.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 87,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tIfStatement(node) {\n\t\t\t\tconst parent = node.parent,\n\t\t\t\t\tgrandparent = parent.parent;\n\t\t\t\tif (\n\t\t\t\t\tparent &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "IfStatement",
            "complexity": 18,
            "lineCount": 81,
            "parameterCount": 1,
            "snippet": "IfStatement(node) {\n\t\t\t\tconst parent = node.parent,\n\t\t\t\t\tgrandparent = parent.parent;\n\t\t\t\tif (\n\t\t\t\t\tparent &&\n\t\t\t\t\tparent.type === \"BlockStatement\" &&\n\t\t\t\t\tparent.body.length === 1 &&\n\t\t\t\t\t!astUtils.areBracesNecessary(parent, sourceCode) &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 11,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\tconst openingElseCurly =\n\t\t\t\t\t\t\t\tsourceCode.getFirstToken(parent);\n\t\t\t\t\t\t\tconst closingElseCurly =\n\t\t\t\t\t\t\t\tsourceCode.getLastToken(parent);\n\t\t\t\t\t\t\tconst elseKeyword =\n\t\t\t\t\t\t\t\tsourceCode.getTokenBefore(openingElseCurly);\n\t\t\t\t\t\t\tconst tokenAfterElseBlock =\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-loop-func.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 37,
            "lineCount": 212,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst SKIPPED_IIFE_NODES = new Set();\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Gets the containing loop node of a specified node.\n\t\t *\n\t\t * We don't need to check nested functions, so this ignores those, with the exception of IIFE.\n\t\t * `Scope.through` contains references of nested functions.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 212 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isSafe",
            "complexity": 13,
            "lineCount": 61,
            "parameterCount": 2,
            "snippet": "function isSafe(loopNode, reference) {\n\t\t\tconst variable = reference.resolved;\n\t\t\tconst definition = variable && variable.defs[0];\n\t\t\tconst declaration = definition && definition.parent;\n\t\t\tconst kind =\n\t\t\t\tdeclaration && declaration.type === \"VariableDeclaration\"\n\t\t\t\t\t? declaration.kind\n\t\t\t\t\t: \"\";\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-loss-of-precision.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 17,
            "lineCount": 200,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * Returns whether the node is number literal\n\t\t * @param {Node} node the node literal being evaluated\n\t\t * @returns {boolean} true if the node is a number literal\n\t\t */\n\t\tfunction isNumber(node) {\n\t\t\treturn typeof node.value === \"number\";\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 200 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-magic-numbers.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 41,
            "lineCount": 197,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst config = context.options[0] || {},\n\t\t\tdetectObjects = !!config.detectObjects,\n\t\t\tenforceConst = !!config.enforceConst,\n\t\t\tignore = new Set((config.ignore || []).map(normalizeIgnoreValue)),\n\t\t\tignoreArrayIndexes = !!config.ignoreArrayIndexes,\n\t\t\tignoreDefaultValues = !!config.ignoreDefaultValues,\n\t\t\tignoreClassFieldInitialValues =\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 197 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Literal",
            "complexity": 28,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "Literal(node) {\n\t\t\t\tif (!astUtils.isNumericLiteral(node)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet fullNumberNode;\n\t\t\t\tlet value;\n\t\t\t\tlet raw;\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-misleading-character-class.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 34,
            "lineCount": 275,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst allowEscape = context.options[0]?.allowEscape;\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst parser = new RegExpParser();\n\t\tconst checkedPatternNodes = new Set();\n\t\t/**\n\t\t * Verify a given regular expression.\n\t\t * @param {Node} node The node to report.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 275 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 20,
            "lineCount": 157,
            "parameterCount": 4,
            "snippet": "function verify(node, pattern, flags, unicodeFixer) {\n\t\t\tlet patternNode;\n\t\t\ttry {\n\t\t\t\tpatternNode = parser.parsePattern(pattern, 0, pattern.length, {\n\t\t\t\t\tunicode: flags.includes(\"u\"),\n\t\t\t\t\tunicodeSets: flags.includes(\"v\"),\n\t\t\t\t});\n\t\t\t} catch {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 157 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Program",
            "complexity": 13,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "Program(node) {\n\t\t\t\tconst scope = sourceCode.getScope(node);\n\t\t\t\tconst tracker = new ReferenceTracker(scope);\n\t\t\t\t/*\n\t\t\t\t * Iterate calls of RegExp.\n\t\t\t\t * E.g., `new RegExp()`, `RegExp()`, `new window.RegExp()`,\n\t\t\t\t *       `const {RegExp: a} = window; new a()`, etc...\n\t\t\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-mixed-operators.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 12,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst options = normalizeOptions(context.options[0]);\n\t\t/**\n\t\t * Checks whether a given node should be ignored by options or not.\n\t\t * @param {ASTNode} node A node to check. This is a BinaryExpression\n\t\t *      node or a LogicalExpression node. This parent node is one of\n\t\t *      them, too.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-mixed-requires.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 192,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = context.options[0];\n\t\tlet grouping = false,\n\t\t\tallowCall = false;\n\t\tif (typeof options === \"object\") {\n\t\t\tgrouping = options.grouping;\n\t\t\tallowCall = options.allowCall;\n\t\t} else {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 192 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-mixed-spaces-and-tabs.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 9,
            "lineCount": 92,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet smartTabs;\n\t\tswitch (context.options[0]) {\n\t\t\tcase true: // Support old syntax, maybe add deprecation warning here\n\t\t\tcase \"smart-tabs\":\n\t\t\t\tsmartTabs = true;\n\t\t\t\tbreak;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 7,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "\"Program:exit\"(node) {\n\t\t\t\tconst lines = sourceCode.lines,\n\t\t\t\t\tcomments = sourceCode.getAllComments(),\n\t\t\t\t\tignoredCommentLines = new Set();\n\t\t\t\tcomments.forEach(comment => {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet i = comment.loc.start.line + 1;\n\t\t\t\t\t\ti <= comment.loc.end.line;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-multi-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-multi-spaces.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 103,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst options = context.options[0] || {};\n\t\tconst ignoreEOLComments = options.ignoreEOLComments;\n\t\tconst exceptions = Object.assign(\n\t\t\t{ Property: true },\n\t\t\toptions.exceptions,\n\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Program",
            "complexity": 13,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "Program() {\n\t\t\t\tsourceCode.tokensAndComments.forEach(\n\t\t\t\t\t(leftToken, leftIndex, tokensAndComments) => {\n\t\t\t\t\t\tif (leftIndex === tokensAndComments.length - 1) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst rightToken = tokensAndComments[leftIndex + 1];\n\t\t\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 13,
            "lineCount": 64,
            "parameterCount": 3,
            "snippet": "(leftToken, leftIndex, tokensAndComments) => {\n\t\t\t\t\t\tif (leftIndex === tokensAndComments.length - 1) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst rightToken = tokensAndComments[leftIndex + 1];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!sourceCode.text\n\t\t\t\t\t\t\t\t.slice(leftToken.range[1], rightToken.range[0])\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-multi-str.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-multiple-empty-lines.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 131,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tlet max = 2,\n\t\t\tmaxEOF = max,\n\t\t\tmaxBOF = max;\n\t\tif (context.options.length) {\n\t\t\tmax = context.options[0].max;\n\t\t\tmaxEOF =\n\t\t\t\ttypeof context.options[0].maxEOF !== \"undefined\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 131 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 85,
            "parameterCount": 1,
            "snippet": "\"Program:exit\"(node) {\n\t\t\t\treturn (\n\t\t\t\t\tallLines\n\t\t\t\t\t\t.reduce((nonEmptyLineNumbers, line, index) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tline.trim() ||\n\t\t\t\t\t\t\t\ttemplateLiteralLines.has(index + 1)\n\t\t\t\t\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 64,
            "parameterCount": 2,
            "snippet": "(lastLineNumber, lineNumber) => {\n\t\t\t\t\t\t\tlet messageId, maxAllowed;\n\t\t\t\t\t\t\tif (lastLineNumber === 0) {\n\t\t\t\t\t\t\t\tmessageId = \"blankBeginningOfFile\";\n\t\t\t\t\t\t\t\tmaxAllowed = maxBOF;\n\t\t\t\t\t\t\t} else if (lineNumber === allLines.length + 1) {\n\t\t\t\t\t\t\t\tmessageId = \"blankEndOfFile\";\n\t\t\t\t\t\t\t\tmaxAllowed = maxEOF;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-native-reassign.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 9,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst config = context.options[0];\n\t\tconst exceptions = (config && config.exceptions) || [];\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports write references.\n\t\t * @param {Reference} reference A reference to check.\n\t\t * @param {number} index The index of the reference in the references.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-negated-in-lhs.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-nested-ternary.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-new-func.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\t\"Program:exit\"(node) {\n\t\t\t\tconst globalScope = sourceCode.getScope(node);\n\t\t\t\tconst variable = globalScope.set.get(\"Function\");\n\t\t\t\tif (variable && variable.defs.length === 0) {\n\t\t\t\t\tvariable.references.forEach(ref => {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-new-native-nonconstructor.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-new-object.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-new-require.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-new-symbol.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-new-wrappers.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-new.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-object-constructor.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 11,
            "lineCount": 77,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether or not an object literal that replaces a specified node needs to be enclosed in parentheses.\n\t\t * @param {ASTNode} node The node to be replaced.\n\t\t * @returns {boolean} Whether or not parentheses around the object literal are required.\n\t\t */\n\t\tfunction needsParentheses(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-octal-escape.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-octal.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-param-reassign.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 35,
            "lineCount": 176,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst props = context.options[0] && context.options[0].props;\n\t\tconst ignoredPropertyAssignmentsFor =\n\t\t\t(context.options[0] &&\n\t\t\t\tcontext.options[0].ignorePropertyModificationsFor) ||\n\t\t\t[];\n\t\tconst ignoredPropertyAssignmentsForRegex =\n\t\t\t(context.options[0] &&\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 176 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isModifyingProp",
            "complexity": 20,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "function isModifyingProp(reference) {\n\t\t\tlet node = reference.identifier;\n\t\t\tlet parent = node.parent;\n\t\t\twhile (\n\t\t\t\tparent &&\n\t\t\t\t(!stopNodePattern.test(parent.type) ||\n\t\t\t\t\tparent.type === \"ForInStatement\" ||\n\t\t\t\t\tparent.type === \"ForOfStatement\")\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-path-concat.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-plusplus.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-process-env.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-process-exit.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-promise-executor-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 100,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tlet funcInfo = null;\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ allowVoid }] = context.options;\n\t\treturn {\n\t\t\tonCodePathStart(_, node) {\n\t\t\t\tfuncInfo = {\n\t\t\t\t\tupper: funcInfo,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "onCodePathStart",
            "complexity": 10,
            "lineCount": 54,
            "parameterCount": 2,
            "snippet": "onCodePathStart(_, node) {\n\t\t\t\tfuncInfo = {\n\t\t\t\t\tupper: funcInfo,\n\t\t\t\t\tshouldCheck:\n\t\t\t\t\t\tfunctionTypesToCheck.has(node.type) &&\n\t\t\t\t\t\tisPromiseExecutor(node, sourceCode),\n\t\t\t\t};\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-proto.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-redeclare.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 123,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ builtinGlobals }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Iterate declarations of a given variable.\n\t\t * @param {escope.variable} variable The variable object to iterate declarations.\n\t\t * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-regex-spaces.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 164,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Validate regular expression\n\t\t * @param {ASTNode} nodeToReport Node to report.\n\t\t * @param {string} pattern Regular expression pattern to validate.\n\t\t * @param {string} rawPattern Raw representation of the pattern in the source code.\n\t\t * @param {number} rawPatternStartRange Start range of the pattern in the source code.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkRegex",
            "complexity": 7,
            "lineCount": 74,
            "parameterCount": 5,
            "snippet": "function checkRegex(\n\t\t\tnodeToReport,\n\t\t\tpattern,\n\t\t\trawPattern,\n\t\t\trawPatternStartRange,\n\t\t\tflags,\n\t\t) {\n\t\t\tif (!DOUBLE_SPACE.test(rawPattern)) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-restricted-exports.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 28,
            "lineCount": 125,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst restrictedNames = new Set(\n\t\t\tcontext.options[0] && context.options[0].restrictedNamedExports,\n\t\t);\n\t\tconst restrictedNamePattern =\n\t\t\tcontext.options[0] &&\n\t\t\tcontext.options[0].restrictedNamedExportsPattern;\n\t\tconst restrictDefaultExports =\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 125 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkExportedName",
            "complexity": 18,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "function checkExportedName(node) {\n\t\t\tconst name = astUtils.getModuleExportName(node);\n\t\t\tlet matchesRestrictedNamePattern = false;\n\t\t\tif (restrictedNamePattern && name !== \"default\") {\n\t\t\t\tconst patternRegex = new RegExp(restrictedNamePattern, \"u\");\n\t\t\t\tmatchesRestrictedNamePattern = patternRegex.test(name);\n\t\t\t}\n\t\t\tif (matchesRestrictedNamePattern || restrictedNames.has(name)) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-restricted-globals.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 9,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tif (context.options.length === 0) {\n\t\t\treturn {};\n\t\t}\n\t\tconst restrictedGlobalMessages = context.options.reduce(\n\t\t\t(memo, option) => {\n\t\t\t\tif (typeof option === \"string\") {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-restricted-imports.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 71,
            "lineCount": 448,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst options = Array.isArray(context.options) ? context.options : [];\n\t\tconst isPathAndPatternsObject =\n\t\t\ttypeof options[0] === \"object\" &&\n\t\t\t(Object.hasOwn(options[0], \"paths\") ||\n\t\t\t\tObject.hasOwn(options[0], \"patterns\"));\n\t\tconst restrictedPaths =\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 71 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 448 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reportPathForPatterns",
            "complexity": 27,
            "lineCount": 160,
            "parameterCount": 3,
            "snippet": "function reportPathForPatterns(node, group, importNames) {\n\t\t\tconst importSource = node.source.value.trim();\n\t\t\tconst customMessage = group.customMessage;\n\t\t\tconst restrictedImportNames = group.importNames;\n\t\t\tconst restrictedImportNamePattern = group.importNamePattern\n\t\t\t\t? new RegExp(group.importNamePattern, \"u\")\n\t\t\t\t: null;\n\t\t\tconst allowedImportNames = group.allowImportNames;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 160 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 20,
            "lineCount": 123,
            "parameterCount": 2,
            "snippet": "(specifiers, importName) => {\n\t\t\t\tif (importName === \"*\") {\n\t\t\t\t\tconst [specifier] = specifiers;\n\t\t\t\t\tif (restrictedImportNames) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessageId: customMessage\n\t\t\t\t\t\t\t\t? \"patternAndEverythingWithCustomMessage\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkRestrictedPathAndReport",
            "complexity": 16,
            "lineCount": 107,
            "parameterCount": 3,
            "snippet": "function checkRestrictedPathAndReport(importSource, importNames, node) {\n\t\t\tif (!Object.hasOwn(groupedRestrictedPaths, importSource)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgroupedRestrictedPaths[importSource].forEach(\n\t\t\t\trestrictedPathEntry => {\n\t\t\t\t\tconst customMessage = restrictedPathEntry.message;\n\t\t\t\t\tconst restrictedImportNames =\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 99,
            "parameterCount": 1,
            "snippet": "restrictedPathEntry => {\n\t\t\t\t\tconst customMessage = restrictedPathEntry.message;\n\t\t\t\t\tconst restrictedImportNames =\n\t\t\t\t\t\trestrictedPathEntry.importNames;\n\t\t\t\t\tconst allowedImportNames =\n\t\t\t\t\t\trestrictedPathEntry.allowImportNames;\n\t\t\t\t\tif (!restrictedImportNames && !allowedImportNames) {\n\t\t\t\t\t\tcontext.report({\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-restricted-modules.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 141,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = Array.isArray(context.options) ? context.options : [];\n\t\tconst isPathAndPatternsObject =\n\t\t\ttypeof options[0] === \"object\" &&\n\t\t\t(Object.hasOwn(options[0], \"paths\") ||\n\t\t\t\tObject.hasOwn(options[0], \"patterns\"));\n\t\tconst restrictedPaths =\n\t\t\t(isPathAndPatternsObject ? options[0].paths : context.options) ||\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 141 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-restricted-properties.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 150,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst restrictedCalls = context.options;\n\t\tif (restrictedCalls.length === 0) {\n\t\t\treturn {};\n\t\t}\n\t\tconst restrictedProperties = new Map();\n\t\tconst globallyRestrictedObjects = new Map();\n\t\tconst globallyRestrictedProperties = new Map();\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 150 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkPropertyAccess",
            "complexity": 11,
            "lineCount": 55,
            "parameterCount": 3,
            "snippet": "function checkPropertyAccess(node, objectName, propertyName) {\n\t\t\tif (propertyName === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst matchedObject = restrictedProperties.get(objectName);\n\t\t\tconst matchedObjectProperty = matchedObject\n\t\t\t\t? matchedObject.get(propertyName)\n\t\t\t\t: globallyRestrictedObjects.get(objectName);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-restricted-syntax.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-return-assign.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-return-await.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 116,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * Reports a found unnecessary `await` expression.\n\t\t * @param {ASTNode} node The node representing the `await` expression to report\n\t\t * @returns {void}\n\t\t */\n\t\tfunction reportUnnecessaryAwait(node) {\n\t\t\tcontext.report({\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 116 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-script-url.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-self-assign.js",
        "criticalFunctions": [
          {
            "name": "eachSelfAssignment",
            "complexity": 34,
            "lineCount": 93,
            "parameterCount": 4,
            "snippet": "function eachSelfAssignment(left, right, props, report) {\n\tif (!left || !right) {\n\t} else if (\n\t\tleft.type === \"Identifier\" &&\n\t\tright.type === \"Identifier\" &&\n\t\tleft.name === right.name\n\t) {\n\t\treport(right);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-self-compare.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-sequences.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 102,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowInParentheses }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Parts of the grammar that are required to have parens.\n\t\t */\n\t\tconst parenthesized = {\n\t\t\tDoWhileStatement: \"test\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-setter-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 6,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tlet funcInfo = null;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Creates and pushes to the stack a function info object for the given function node.\n\t\t * @param {ASTNode} node The function node.\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-shadow-restricted-names.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-shadow.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 97,
            "lineCount": 514,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tbuiltinGlobals,\n\t\t\t\thoist,\n\t\t\t\tallow,\n\t\t\t\tignoreOnInitialization,\n\t\t\t\tignoreTypeValueShadow,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 97 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 514 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkForShadows",
            "complexity": 24,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "function checkForShadows(scope) {\n\t\t\tif (isGlobalAugmentation(scope)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst variables = scope.variables;\n\t\t\tfor (let i = 0; i < variables.length; ++i) {\n\t\t\t\tconst variable = variables[i];\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isInitPatternNode",
            "complexity": 13,
            "lineCount": 57,
            "parameterCount": 2,
            "snippet": "function isInitPatternNode(variable, shadowedVariable) {\n\t\t\tconst outerDef = shadowedVariable.defs[0];\n\t\t\tif (!outerDef) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { variableScope } = variable.scope;\n\t\t\tif (\n\t\t\t\t!(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-spaced-func.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-sparse-arrays.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-sync.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-tabs.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-template-curly-in-string.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-ternary.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-this-before-super.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 28,
            "lineCount": 287,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/*\n\t\t * Information for each constructor.\n\t\t * - upper:      Information of the upper constructor.\n\t\t * - hasExtends: A flag which shows whether the owner class has a valid\n\t\t *   `extends` part.\n\t\t * - scope:      The scope of the owner class.\n\t\t * - codePath:   The code path of this constructor.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 287 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-throw-literal.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-trailing-spaces.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 144,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst BLANK_CLASS = \"[ \\t\\u00a0\\u2000-\\u200b\\u3000]\",\n\t\t\tSKIP_BLANK = `^${BLANK_CLASS}*$`,\n\t\t\tNONBLANK = `${BLANK_CLASS}+$`;\n\t\tconst options = context.options[0] || {},\n\t\t\tskipBlankLines = options.skipBlankLines || false,\n\t\t\tignoreComments = options.ignoreComments || false;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 144 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkTrailingSpaces",
            "complexity": 13,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "function checkTrailingSpaces(node) {\n\t\t\t\t/*\n\t\t\t\t * Let's hack. Since Espree does not return whitespace nodes,\n\t\t\t\t * fetch the source code and do matching via regexps.\n\t\t\t\t */\n\t\t\t\tconst re = new RegExp(NONBLANK, \"u\"),\n\t\t\t\t\tskipMatch = new RegExp(SKIP_BLANK, \"u\"),\n\t\t\t\t\tlines = sourceCode.lines,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unassigned-vars.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-undef-init.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 10,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tVariableDeclarator(node) {\n\t\t\t\tconst name = sourceCode.getText(node.id),\n\t\t\t\t\tinit = node.init && node.init.name,\n\t\t\t\t\tscope = sourceCode.getScope(node),\n\t\t\t\t\tundefinedVar = astUtils.getVariableByName(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-undef.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-undefined.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 3,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Report an invalid \"undefined\" identifier node.\n\t\t * @param {ASTNode} node The node to report.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction report(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-underscore-dangle.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 47,
            "lineCount": 300,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tallow,\n\t\t\t\tallowAfterSuper,\n\t\t\t\tallowAfterThis,\n\t\t\t\tallowAfterThisConstructor,\n\t\t\t\tallowFunctionParams,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 47 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 300 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unmodified-loop-condition.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 17,
            "lineCount": 177,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet groupMap = null;\n\t\t/**\n\t\t * Reports a given condition info.\n\t\t * @param {LoopConditionInfo} condition A loop condition info to report.\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 177 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unneeded-ternary.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 21,
            "lineCount": 155,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ defaultAssignment }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Test if the node is a boolean literal\n\t\t * @param {ASTNode} node The node to report.\n\t\t * @returns {boolean} True if the its a boolean literal\n\t\t * @private\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 155 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ConditionalExpression",
            "complexity": 12,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "ConditionalExpression(node) {\n\t\t\t\tif (\n\t\t\t\t\tisBooleanLiteral(node.alternate) &&\n\t\t\t\t\tisBooleanLiteral(node.consequent)\n\t\t\t\t) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessageId: \"unnecessaryConditionalExpression\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unreachable-loop.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 5,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ ignore: ignoredLoopTypes }] = context.options;\n\t\tconst loopTypesToCheck = getDifference(allLoopTypes, ignoredLoopTypes),\n\t\t\tloopSelector = loopTypesToCheck.join(\",\"),\n\t\t\tloopsByTargetSegments = new Map(),\n\t\t\tloopsToReport = new Set();\n\t\tconst codePathSegments = [];\n\t\tlet currentCodePathSegments = new Set();\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unreachable.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 17,
            "lineCount": 167,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/** @type {ConstructorInfo | null} */\n\t\tlet constructorInfo = null;\n\t\t/** @type {ConsecutiveRange} */\n\t\tconst range = new ConsecutiveRange(context.sourceCode);\n\t\t/** @type {Array<Set<CodePathSegment>>} */\n\t\tconst codePathSegments = [];\n\t\t/** @type {Set<CodePathSegment>} */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 167 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unsafe-finally.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 79,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * Checks if the node is the finalizer of a TryStatement\n\t\t * @param {ASTNode} node node to check.\n\t\t * @returns {boolean} - true if the node is the finalizer of a TryStatement\n\t\t */\n\t\tfunction isFinallyBlock(node) {\n\t\t\treturn (\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unsafe-negation.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 6,
            "lineCount": 59,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ enforceForOrderingRelations }] = context.options;\n\t\treturn {\n\t\t\tBinaryExpression(node) {\n\t\t\t\tconst operator = node.operator;\n\t\t\t\tconst orderingRelationRuleApplies =\n\t\t\t\t\tenforceForOrderingRelations &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "BinaryExpression",
            "complexity": 6,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "BinaryExpression(node) {\n\t\t\t\tconst operator = node.operator;\n\t\t\t\tconst orderingRelationRuleApplies =\n\t\t\t\t\tenforceForOrderingRelations &&\n\t\t\t\t\tisOrderingRelationalOperator(operator);\n\t\t\t\tif (\n\t\t\t\t\t(isInOrInstanceOfOperator(operator) ||\n\t\t\t\t\t\torderingRelationRuleApplies) &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-unsafe-optional-chaining.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 156,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ disallowArithmeticOperators }] = context.options;\n\t\t/**\n\t\t * Reports unsafe usage of optional chaining\n\t\t * @param {ASTNode} node node to report\n\t\t * @returns {void}\n\t\t */\n\t\tfunction reportUnsafeUsage(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 156 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unused-expressions.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 145,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tallowShortCircuit,\n\t\t\t\tallowTernary,\n\t\t\t\tallowTaggedTemplates,\n\t\t\t\tenforceForJSX,\n\t\t\t\tignoreDirectives,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 145 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-unused-labels.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 120,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet scopeInfo = null;\n\t\t/**\n\t\t * Adds a scope info to the stack.\n\t\t * @param {ASTNode} node A node to add. This is a LabeledStatement.\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 120 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unused-private-class-members.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 29,
            "lineCount": 188,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst trackedClasses = [];\n\t\t/**\n\t\t * Check whether the current node is in a write only assignment.\n\t\t * @param {ASTNode} privateIdentifierNode Node referring to a private identifier\n\t\t * @returns {boolean} Whether the node is in a write only assignment\n\t\t * @private\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 188 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "PrivateIdentifier",
            "complexity": 14,
            "lineCount": 88,
            "parameterCount": 1,
            "snippet": "PrivateIdentifier(privateIdentifierNode) {\n\t\t\t\tconst classBody = trackedClasses.find(classProperties =>\n\t\t\t\t\tclassProperties.has(privateIdentifierNode.name),\n\t\t\t\t);\n\t\t\t\tif (!classBody) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst memberDefinition = classBody.get(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 88 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-unused-vars.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 238,
            "lineCount": 1602,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst REST_PROPERTY_TYPE =\n\t\t\t/^(?:RestElement|(?:Experimental)?RestProperty)$/u;\n\t\tconst config = {\n\t\t\tvars: \"all\",\n\t\t\targs: \"after-used\",\n\t\t\tignoreRestSiblings: false,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 238 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1602 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "handleFixes",
            "complexity": 96,
            "lineCount": 693,
            "parameterCount": 2,
            "snippet": "function handleFixes(fixer, unusedVar) {\n\t\t\tconst id = unusedVar.identifiers[0];\n\t\t\tconst parent = id.parent;\n\t\t\tconst parentType = parent.type;\n\t\t\tconst tokenBefore = sourceCode.getTokenBefore(id);\n\t\t\tconst tokenAfter = sourceCode.getTokenAfter(id);\n\t\t\tconst isFunction = astUtils.isFunction;\n\t\t\tconst isLoop = astUtils.isLoop;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 96 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 693 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectUnusedVariables",
            "complexity": 48,
            "lineCount": 204,
            "parameterCount": 2,
            "snippet": "function collectUnusedVariables(scope, unusedVars) {\n\t\t\tconst variables = scope.variables;\n\t\t\tconst childScopes = scope.childScopes;\n\t\t\tlet i, l;\n\t\t\tif (scope.type !== \"global\" || config.vars === \"all\") {\n\t\t\t\tfor (i = 0, l = variables.length; i < l; ++i) {\n\t\t\t\t\tconst variable = variables[i];\n\t\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 204 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fixVariables",
            "complexity": 9,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "function fixVariables(node) {\n\t\t\t\tconst parentNode = node.parent;\n\t\t\t\tif (parentNode.type === \"VariableDeclarator\") {\n\t\t\t\t\tif (isLoop(parentNode.parent.parent)) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * remove unused declared variable with single declaration such as 'var a = b;'\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "\"Program:exit\"(programNode) {\n\t\t\t\tconst unusedVars = collectUnusedVariables(\n\t\t\t\t\tsourceCode.getScope(programNode),\n\t\t\t\t\t[],\n\t\t\t\t);\n\t\t\t\tfor (let i = 0, l = unusedVars.length; i < l; ++i) {\n\t\t\t\t\tconst unusedVar = unusedVars[i];\n\t\t\t\t\tif (unusedVar.defs.length > 0) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-use-before-define.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 28,
            "lineCount": 123,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = parseOptions(context.options[0]);\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether a given reference should be checked.\n\t\t *\n\t\t * Returns `false` if the reference is:\n\t\t * - initialization's (e.g., `let a = 1`).\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "shouldCheck",
            "complexity": 25,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "function shouldCheck(reference) {\n\t\t\tif (reference.init) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { identifier } = reference;\n\t\t\tif (\n\t\t\t\toptions.allowNamedExports &&\n\t\t\t\tidentifier.parent.type === \"ExportSpecifier\" &&\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isEvaluatedDuringInitialization",
            "complexity": 12,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "function isEvaluatedDuringInitialization(reference) {\n\tif (isFromSeparateExecutionContext(reference)) {\n\t\t/*\n\t\t * Even if the reference appears in the initializer, it isn't evaluated during the initialization.\n\t\t * For example, `const x = () => x;` is valid.\n\t\t */\n\t\treturn false;\n\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-useless-assignment.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 57,
            "lineCount": 509,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * @typedef {Object} ScopeStack\n\t\t * @property {CodePath} codePath The code path of this scope stack.\n\t\t * @property {Scope} scope The scope of this scope stack.\n\t\t * @property {ScopeStack} upper The upper scope stack.\n\t\t * @property {Record<string, ScopeStackSegmentInfo>} segments The map of ScopeStackSegmentInfo.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 57 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 509 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 33,
            "lineCount": 292,
            "parameterCount": 1,
            "snippet": "function verify(target) {\n\t\t\t/**\n\t\t\t * Checks whether the given identifier is used in the segment.\n\t\t\t * @param {CodePathSegment} segment The code path segment.\n\t\t\t * @param {Identifier} identifier The identifier to check.\n\t\t\t * @returns {boolean} `true` if the identifier is used in the segment.\n\t\t\t */\n\t\t\tfunction isIdentifierUsedInSegment(segment, identifier) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 292 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyAssignmentIsUsed",
            "complexity": 28,
            "lineCount": 256,
            "parameterCount": 2,
            "snippet": "function verifyAssignmentIsUsed(targetAssignment, allAssignments) {\n\t\t\t\tconst isAssignmentInTryBlock = target.tryStatementBlocks.some(\n\t\t\t\t\ttryBlock =>\n\t\t\t\t\t\ttryBlock.range[0] <=\n\t\t\t\t\t\t\ttargetAssignment.identifier.range[0] &&\n\t\t\t\t\t\ttargetAssignment.identifier.range[1] <=\n\t\t\t\t\t\t\ttryBlock.range[1],\n\t\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 256 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 21,
            "lineCount": 110,
            "parameterCount": 1,
            "snippet": "\":matches(VariableDeclarator[init!=null], AssignmentExpression, UpdateExpression):exit\"(\n\t\t\t\tnode,\n\t\t\t) {\n\t\t\t\tif (scopeStack.currentSegments.size === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst assignments = scopeStack.assignments;\n\t\t\t\tlet pattern;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-useless-backreference.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 168,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks and reports useless backreferences in the given regular expression.\n\t\t * @param {ASTNode} node Node that represents regular expression. A regex literal or RegExp constructor call.\n\t\t * @param {string} pattern Regular expression pattern.\n\t\t * @param {string} flags Regular expression flags.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 168 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkRegex",
            "complexity": 16,
            "lineCount": 127,
            "parameterCount": 3,
            "snippet": "function checkRegex(node, pattern, flags) {\n\t\t\tlet regExpAST;\n\t\t\ttry {\n\t\t\t\tregExpAST = parser.parsePattern(pattern, 0, pattern.length, {\n\t\t\t\t\tunicode: flags.includes(\"u\"),\n\t\t\t\t\tunicodeSets: flags.includes(\"v\"),\n\t\t\t\t});\n\t\t\t} catch {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "onBackreferenceEnter",
            "complexity": 15,
            "lineCount": 111,
            "parameterCount": 1,
            "snippet": "onBackreferenceEnter(bref) {\n\t\t\t\t\tconst groups = [bref.resolved].flat(),\n\t\t\t\t\t\tbrefPath = getPathToRoot(bref);\n\t\t\t\t\tconst problems = groups.map(group => {\n\t\t\t\t\t\tconst groupPath = getPathToRoot(group);\n\t\t\t\t\t\tif (brefPath.includes(group)) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tmessageId: \"nested\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 10,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "group => {\n\t\t\t\t\t\tconst groupPath = getPathToRoot(group);\n\t\t\t\t\t\tif (brefPath.includes(group)) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tmessageId: \"nested\",\n\t\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-useless-call.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-useless-catch.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-useless-computed-key.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 7,
            "lineCount": 77,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ enforceForClassMembers }] = context.options;\n\t\t/**\n\t\t * Reports a given node if it violated this rule.\n\t\t * @param {ASTNode} node The node to check.\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "check",
            "complexity": 5,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "function check(node) {\n\t\t\tif (hasUselessComputedKey(node)) {\n\t\t\t\tconst { key } = node;\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: \"unnecessarilyComputedProperty\",\n\t\t\t\t\tdata: { property: sourceCode.getText(key) },\n\t\t\t\t\tfix(fixer) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-useless-concat.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-useless-constructor.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 11,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * Checks whether a node is a redundant constructor\n\t\t * @param {ASTNode} node node to check\n\t\t * @returns {void}\n\t\t */\n\t\tfunction checkForConstructor(node) {\n\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkForConstructor",
            "complexity": 11,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "function checkForConstructor(node) {\n\t\t\tif (\n\t\t\t\tnode.kind !== \"constructor\" ||\n\t\t\t\tnode.value.type !== \"FunctionExpression\" ||\n\t\t\t\thasDecoratorsOrParameterProperty(node) ||\n\t\t\t\thasUsefulAccessibility(node)\n\t\t\t) {\n\t\t\t\treturn;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-useless-escape.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 43,
            "lineCount": 302,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ allowRegexCharacters }] = context.options;\n\t\tconst parser = new RegExpParser();\n\t\t/**\n\t\t * Reports a node\n\t\t * @param {ASTNode} node The node to report\n\t\t * @param {number} startOffset The backslash's offset from the start of the node\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 302 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateRegExp",
            "complexity": 23,
            "lineCount": 150,
            "parameterCount": 1,
            "snippet": "function validateRegExp(node) {\n\t\t\tconst { pattern, flags } = node.regex;\n\t\t\tlet patternNode;\n\t\t\tconst unicode = flags.includes(\"u\");\n\t\t\tconst unicodeSets = flags.includes(\"v\");\n\t\t\ttry {\n\t\t\t\tpatternNode = parser.parsePattern(pattern, 0, pattern.length, {\n\t\t\t\t\tunicode,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 150 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "onCharacterEnter",
            "complexity": 22,
            "lineCount": 121,
            "parameterCount": 1,
            "snippet": "onCharacterEnter(characterNode) {\n\t\t\t\t\tif (!characterNode.raw.startsWith(\"\\\\\")) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst escapedChar = characterNode.raw.slice(1);\n\t\t\t\t\tif (\n\t\t\t\t\t\tescapedChar !==\n\t\t\t\t\t\t\tString.fromCodePoint(characterNode.value) ||\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-useless-rename.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 145,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst [{ ignoreDestructuring, ignoreImport, ignoreExport }] =\n\t\t\tcontext.options;\n\t\t/**\n\t\t * Reports error for unnecessarily renamed assignments\n\t\t * @param {ASTNode} node node to report\n\t\t * @param {ASTNode} initial node with initial name value\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 145 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-useless-return.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 300,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst segmentInfoMap = new WeakMap();\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet scopeInfo = null;\n\t\t/**\n\t\t * Checks whether the given segment is terminated by a return statement or not.\n\t\t * @param {CodePathSegment} segment The segment to check.\n\t\t * @returns {boolean} `true` if the segment is terminated by a return statement, or if it's still a part of unreachable.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 300 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "markReturnStatementsOnSegmentAsUsed",
            "complexity": 7,
            "lineCount": 59,
            "parameterCount": 2,
            "snippet": "function markReturnStatementsOnSegmentAsUsed(\n\t\t\tsegment,\n\t\t\tusedUnreachableSegments,\n\t\t) {\n\t\t\tif (!segment.reachable) {\n\t\t\t\tusedUnreachableSegments.add(segment);\n\t\t\t\tsegment.allPrevSegments\n\t\t\t\t\t.filter(isReturned)\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-var.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 21,
            "lineCount": 148,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks whether the variables which are defined by the given declarator node have their references in TDZ.\n\t\t * @param {ASTNode} declarator The VariableDeclarator node to check.\n\t\t * @returns {boolean} `true` if one of the variables which are defined by the given declarator node have their references in TDZ.\n\t\t */\n\t\tfunction hasSelfReferenceInTDZ(declarator) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-void.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/no-whitespace-before-property.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 11,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports whitespace before property token\n\t\t * @param {ASTNode} node the node to report in the event of an error\n\t\t * @param {Token} leftToken the left token\n\t\t * @param {Token} rightToken the right token\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/no-with.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/nonblock-statement-body-position.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Gets the applicable preference for a particular keyword\n\t\t * @param {string} keywordName The name of a keyword, e.g. 'if'\n\t\t * @returns {string} The applicable option for the keyword, e.g. 'beside'\n\t\t */\n\t\tfunction getOption(keywordName) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/object-curly-newline.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 23,
            "lineCount": 159,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst normalizedOptions = normalizeOptions(context.options[0]);\n\t\t/**\n\t\t * Reports a given node if it violated this rule.\n\t\t * @param {ASTNode} node A node to check. This is an ObjectExpression, ObjectPattern, ImportDeclaration or ExportNamedDeclaration node.\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 159 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "check",
            "complexity": 23,
            "lineCount": 142,
            "parameterCount": 1,
            "snippet": "function check(node) {\n\t\t\tconst options = normalizedOptions[node.type];\n\t\t\tif (\n\t\t\t\t(node.type === \"ImportDeclaration\" &&\n\t\t\t\t\t!node.specifiers.some(\n\t\t\t\t\t\tspecifier => specifier.type === \"ImportSpecifier\",\n\t\t\t\t\t)) ||\n\t\t\t\t(node.type === \"ExportNamedDeclaration\" &&\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 142 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/object-curly-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 27,
            "lineCount": 300,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst spaced = context.options[0] === \"always\",\n\t\t\tsourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether an option is set, relative to the spacing option.\n\t\t * If spaced is \"always\", then check whether option is set to false.\n\t\t * If spaced is \"never\", then check whether option is set to true.\n\t\t * @param {Object} option The option to exclude.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 300 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateBraceSpacing",
            "complexity": 21,
            "lineCount": 47,
            "parameterCount": 5,
            "snippet": "function validateBraceSpacing(node, first, second, penultimate, last) {\n\t\t\tif (astUtils.isTokenOnSameLine(first, second)) {\n\t\t\t\tconst firstSpaced = sourceCode.isSpaceBetweenTokens(\n\t\t\t\t\tfirst,\n\t\t\t\t\tsecond,\n\t\t\t\t);\n\t\t\t\tif (options.spaced && !firstSpaced) {\n\t\t\t\t\treportRequiredBeginningSpace(node, first);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/object-property-newline.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 10,
            "lineCount": 79,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst allowSameLine =\n\t\t\tcontext.options[0] &&\n\t\t\t(context.options[0].allowAllPropertiesOnSameLine ||\n\t\t\t\tcontext.options[0]\n\t\t\t\t\t.allowMultiplePropertiesPerLine); /* Deprecated */\n\t\tconst messageId = allowSameLine\n\t\t\t? \"propertiesOnNewlineAll\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ObjectExpression",
            "complexity": 7,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "ObjectExpression(node) {\n\t\t\t\tif (allowSameLine) {\n\t\t\t\t\tif (node.properties.length > 1) {\n\t\t\t\t\t\tconst firstTokenOfFirstProperty =\n\t\t\t\t\t\t\tsourceCode.getFirstToken(node.properties[0]);\n\t\t\t\t\t\tconst lastTokenOfLastProperty = sourceCode.getLastToken(\n\t\t\t\t\t\t\tnode.properties.at(-1),\n\t\t\t\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/object-shorthand.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 81,
            "lineCount": 504,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst APPLY = context.options[0] || OPTIONS.always;\n\t\tconst APPLY_TO_METHODS =\n\t\t\tAPPLY === OPTIONS.methods || APPLY === OPTIONS.always;\n\t\tconst APPLY_TO_PROPS =\n\t\t\tAPPLY === OPTIONS.properties || APPLY === OPTIONS.always;\n\t\tconst APPLY_NEVER = APPLY === OPTIONS.never;\n\t\tconst APPLY_CONSISTENT = APPLY === OPTIONS.consistent;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 81 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 504 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 42,
            "lineCount": 141,
            "parameterCount": 1,
            "snippet": "\"Property:exit\"(node) {\n\t\t\t\tconst isConciseProperty = node.method || node.shorthand;\n\t\t\t\tif (node.parent.type === \"ObjectPattern\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (node.kind === \"get\" || node.kind === \"set\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 141 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "makeFunctionShorthand",
            "complexity": 12,
            "lineCount": 84,
            "parameterCount": 2,
            "snippet": "function makeFunctionShorthand(fixer, node) {\n\t\t\tconst firstKeyToken = node.computed\n\t\t\t\t? sourceCode.getFirstToken(node, astUtils.isOpeningBracketToken)\n\t\t\t\t: sourceCode.getFirstToken(node.key);\n\t\t\tconst lastKeyToken = node.computed\n\t\t\t\t? sourceCode.getFirstTokenBetween(\n\t\t\t\t\t\tnode.key,\n\t\t\t\t\t\tnode.value,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/one-var-declaration-per-line.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 9,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst always = context.options[0] === \"always\";\n\t\t/**\n\t\t * Determine if provided keyword is a variant of for specifiers\n\t\t * @private\n\t\t * @param {string} keyword keyword to test\n\t\t * @returns {boolean} True if `keyword` is a variant of for specifier\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/one-var.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 92,
            "lineCount": 582,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst MODE_ALWAYS = \"always\";\n\t\tconst MODE_NEVER = \"never\";\n\t\tconst MODE_CONSECUTIVE = \"consecutive\";\n\t\tconst mode = context.options[0] || MODE_ALWAYS;\n\t\tconst options = {};\n\t\tif (typeof mode === \"string\") {\n\t\t\toptions.var = { uninitialized: mode, initialized: mode };\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 92 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 582 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkVariableDeclaration",
            "complexity": 42,
            "lineCount": 192,
            "parameterCount": 1,
            "snippet": "function checkVariableDeclaration(node) {\n\t\t\tconst parent = node.parent;\n\t\t\tconst type = node.kind;\n\t\t\tif (!options[type]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst declarations = node.declarations;\n\t\t\tconst declarationCounts = countDeclarations(declarations);\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 192 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "hasOnlyOneStatement",
            "complexity": 16,
            "lineCount": 41,
            "parameterCount": 2,
            "snippet": "function hasOnlyOneStatement(statementType, declarations) {\n\t\t\tconst declarationCounts = countDeclarations(declarations);\n\t\t\tconst currentOptions = options[statementType] || {};\n\t\t\tconst currentScope = getCurrentScope(statementType);\n\t\t\tconst hasRequires = declarations.some(isRequire);\n\t\t\tif (\n\t\t\t\tcurrentOptions.uninitialized === MODE_ALWAYS &&\n\t\t\t\tcurrentOptions.initialized === MODE_ALWAYS\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "splitDeclarations",
            "complexity": 12,
            "lineCount": 92,
            "parameterCount": 1,
            "snippet": "function splitDeclarations(declaration) {\n\t\t\tconst { parent } = declaration;\n\t\t\tif (\n\t\t\t\t!isInStatementList(\n\t\t\t\t\tparent.type === \"ExportNamedDeclaration\"\n\t\t\t\t\t\t? parent\n\t\t\t\t\t\t: declaration,\n\t\t\t\t)\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 10,
            "lineCount": 77,
            "parameterCount": 1,
            "snippet": "fixer =>\n\t\t\t\tdeclaration.declarations\n\t\t\t\t\t.map(declarator => {\n\t\t\t\t\t\tconst tokenAfterDeclarator =\n\t\t\t\t\t\t\tsourceCode.getTokenAfter(declarator);\n\t\t\t\t\t\tif (tokenAfterDeclarator === null) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/operator-assignment.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 20,
            "lineCount": 181,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst never = context.options[0] === \"never\";\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Returns the operator token of an AssignmentExpression or BinaryExpression\n\t\t * @param {ASTNode} node An AssignmentExpression or BinaryExpression node\n\t\t * @returns {Token} The operator token in the node\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 181 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 11,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "function verify(node) {\n\t\t\tif (\n\t\t\t\tnode.operator !== \"=\" ||\n\t\t\t\tnode.right.type !== \"BinaryExpression\"\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst left = node.left;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "prohibit",
            "complexity": 9,
            "lineCount": 76,
            "parameterCount": 1,
            "snippet": "function prohibit(node) {\n\t\t\tif (\n\t\t\t\tnode.operator !== \"=\" &&\n\t\t\t\t!astUtils.isLogicalAssignmentOperator(node.operator)\n\t\t\t) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: \"unexpected\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 7,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\tif (canBeFixed(node.left)) {\n\t\t\t\t\t\t\tconst firstToken = sourceCode.getFirstToken(node);\n\t\t\t\t\t\t\tconst operatorToken = getOperatorToken(node);\n\t\t\t\t\t\t\tconst leftText = sourceCode\n\t\t\t\t\t\t\t\t.getText()\n\t\t\t\t\t\t\t\t.slice(node.range[0], operatorToken.range[0]);\n\t\t\t\t\t\t\tconst newOperator = node.operator.slice(0, -1);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/operator-linebreak.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 35,
            "lineCount": 233,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst usedDefaultGlobal = !context.options[0];\n\t\tconst globalStyle = context.options[0] || \"after\";\n\t\tconst options = context.options[1] || {};\n\t\tconst styleOverrides = options.overrides\n\t\t\t? Object.assign({}, options.overrides)\n\t\t\t: {};\n\t\tif (usedDefaultGlobal && !styleOverrides[\"?\"]) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 233 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFixer",
            "complexity": 15,
            "lineCount": 87,
            "parameterCount": 2,
            "snippet": "function getFixer(operatorToken, desiredStyle) {\n\t\t\treturn fixer => {\n\t\t\t\tconst tokenBefore = sourceCode.getTokenBefore(operatorToken);\n\t\t\t\tconst tokenAfter = sourceCode.getTokenAfter(operatorToken);\n\t\t\t\tconst textBefore = sourceCode.text.slice(\n\t\t\t\t\ttokenBefore.range[1],\n\t\t\t\t\toperatorToken.range[0],\n\t\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 85,
            "parameterCount": 1,
            "snippet": "fixer => {\n\t\t\t\tconst tokenBefore = sourceCode.getTokenBefore(operatorToken);\n\t\t\t\tconst tokenAfter = sourceCode.getTokenAfter(operatorToken);\n\t\t\t\tconst textBefore = sourceCode.text.slice(\n\t\t\t\t\ttokenBefore.range[1],\n\t\t\t\t\toperatorToken.range[0],\n\t\t\t\t);\n\t\t\t\tconst textAfter = sourceCode.text.slice(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "validateNode",
            "complexity": 12,
            "lineCount": 75,
            "parameterCount": 3,
            "snippet": "function validateNode(node, rightSide, operator) {\n\t\t\t/*\n\t\t\t * Find the operator token by searching from the right side, because between the left side and the operator\n\t\t\t * there could be additional tokens from type annotations. Search specifically for the token which\n\t\t\t * value equals the operator, in order to skip possible opening parentheses before the right side node.\n\t\t\t */\n\t\t\tconst operatorToken = sourceCode.getTokenBefore(\n\t\t\t\trightSide,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/padded-blocks.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 32,
            "lineCount": 272,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = {};\n\t\tconst typeOptions = context.options[0] || \"always\";\n\t\tconst exceptOptions = context.options[1] || {};\n\t\tif (typeof typeOptions === \"string\") {\n\t\t\tconst shouldHavePadding = typeOptions === \"always\";\n\t\t\toptions.blocks = shouldHavePadding;\n\t\t\toptions.switches = shouldHavePadding;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 272 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkPadding",
            "complexity": 8,
            "lineCount": 101,
            "parameterCount": 1,
            "snippet": "function checkPadding(node) {\n\t\t\tconst openBrace = getOpenBrace(node),\n\t\t\t\tfirstBlockToken = getFirstBlockToken(openBrace),\n\t\t\t\ttokenBeforeFirst = sourceCode.getTokenBefore(firstBlockToken, {\n\t\t\t\t\tincludeComments: true,\n\t\t\t\t}),\n\t\t\t\tcloseBrace = sourceCode.getLastToken(node),\n\t\t\t\tlastBlockToken = getLastBlockToken(closeBrace),\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 101 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/padding-line-between-statements.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 153,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst configureList = context.options || [];\n\t\tlet scopeInfo = null;\n\t\t/**\n\t\t * Processes to enter to new scope.\n\t\t * This manages the current previous statement.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 153 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyForAlways",
            "complexity": 5,
            "lineCount": 51,
            "parameterCount": 4,
            "snippet": "function verifyForAlways(context, prevNode, nextNode, paddingLines) {\n\tif (paddingLines.length > 0) {\n\t\treturn;\n\t}\n\tcontext.report({\n\t\tnode: nextNode,\n\t\tmessageId: \"expectedBlankLine\",\n\t\tfix(fixer) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-arrow-callback.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 37,
            "lineCount": 247,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowNamedFunctions, allowUnboundThis }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/*\n\t\t * {Array<{this: boolean, super: boolean, meta: boolean}>}\n\t\t * - this - A flag which shows there are one or more ThisExpression.\n\t\t * - super - A flag which shows there are one or more Super.\n\t\t * - meta - A flag which shows there are one or more MethProperty.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 247 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 33,
            "lineCount": 180,
            "parameterCount": 1,
            "snippet": "\"FunctionExpression:exit\"(node) {\n\t\t\t\tconst scopeInfo = exitScope();\n\t\t\t\tif (allowNamedFunctions && node.id && node.id.name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (node.generator) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 180 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 19,
            "lineCount": 134,
            "parameterCount": 1,
            "snippet": "*fix(fixer) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(!callbackInfo.isLexicalThis &&\n\t\t\t\t\t\t\t\t\tscopeInfo.this) ||\n\t\t\t\t\t\t\t\thasDuplicateParams(node.params)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * If the callback function does not have .bind(this) and contains a reference to `this`, there\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCallbackInfo",
            "complexity": 17,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "function getCallbackInfo(node) {\n\tconst retv = { isCallback: false, isLexicalThis: false };\n\tlet currentNode = node;\n\tlet parent = node.parent;\n\tlet bound = false;\n\twhile (currentNode) {\n\t\tswitch (parent.type) {\n\t\t\tcase \"LogicalExpression\":\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-const.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 28,
            "lineCount": 172,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ destructuring, ignoreReadBeforeAssign }] = context.options;\n\t\tconst shouldMatchAnyDestructuredVariable = destructuring !== \"all\";\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst variables = [];\n\t\tlet reportCount = 0;\n\t\tlet checkedId = null;\n\t\tlet checkedName = \"\";\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 172 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkGroup",
            "complexity": 26,
            "lineCount": 135,
            "parameterCount": 1,
            "snippet": "function checkGroup(nodes) {\n\t\t\tconst nodesToReport = nodes.filter(Boolean);\n\t\t\tif (\n\t\t\t\tnodes.length &&\n\t\t\t\t(shouldMatchAnyDestructuredVariable ||\n\t\t\t\t\tnodesToReport.length === nodes.length)\n\t\t\t) {\n\t\t\t\tconst varDeclParent = findUp(\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 135 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getIdentifierIfShouldBeConst",
            "complexity": 21,
            "lineCount": 87,
            "parameterCount": 2,
            "snippet": "function getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign) {\n\tif (variable.eslintUsed && variable.scope.type === \"global\") {\n\t\treturn null;\n\t}\n\tlet writer = null;\n\tlet isReadBeforeInit = false;\n\tconst references = variable.references;\n\tfor (let i = 0; i < references.length; ++i) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-destructuring.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 31,
            "lineCount": 219,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst enabledTypes = context.options[0];\n\t\tconst enforceForRenamedProperties =\n\t\t\tcontext.options[1] &&\n\t\t\tcontext.options[1].enforceForRenamedProperties;\n\t\tlet normalizedOptions = {\n\t\t\tVariableDeclarator: { array: true, object: true },\n\t\t\tAssignmentExpression: { array: true, object: true },\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 219 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/prefer-exponentiation-operator.js",
        "criticalFunctions": [
          {
            "name": "doesExponentiationExpressionNeedParens",
            "complexity": 16,
            "lineCount": 31,
            "parameterCount": 2,
            "snippet": "function doesExponentiationExpressionNeedParens(node, sourceCode) {\n\tconst parent =\n\t\tnode.parent.type === \"ChainExpression\"\n\t\t\t? node.parent.parent\n\t\t\t: node.parent;\n\tconst parentPrecedence = astUtils.getPrecedence(parent);\n\tconst needsParens =\n\t\tparent.type === \"ClassDeclaration\" ||\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "create",
            "complexity": 14,
            "lineCount": 113,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Reports the given node.\n\t\t * @param {ASTNode} node 'Math.pow()' node to report.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction report(node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 113 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "report",
            "complexity": 13,
            "lineCount": 86,
            "parameterCount": 1,
            "snippet": "function report(node) {\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessageId: \"useExponentiation\",\n\t\t\t\tfix(fixer) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.arguments.length !== 2 ||\n\t\t\t\t\t\tnode.arguments.some(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 13,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.arguments.length !== 2 ||\n\t\t\t\t\t\tnode.arguments.some(\n\t\t\t\t\t\t\targ => arg.type === \"SpreadElement\",\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\tsourceCode.getCommentsInside(node).length > 0\n\t\t\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/prefer-named-capture-group.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 82,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Function to check regular expression.\n\t\t * @param {string} pattern The regular expression pattern to be checked.\n\t\t * @param {ASTNode} node AST node which contains the regular expression or a call/new expression.\n\t\t * @param {ASTNode} regexNode AST node which contains the regular expression.\n\t\t * @param {string|null} flags The regular expression flags to be checked.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/prefer-numeric-literals.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 92,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\t\"CallExpression[arguments.length=2]\"(node) {\n\t\t\t\tconst [strNode, radixNode] = node.arguments,\n\t\t\t\t\tstr = astUtils.getStaticStringValue(strNode),\n\t\t\t\t\tradix = radixNode.value;\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 82,
            "parameterCount": 1,
            "snippet": "\"CallExpression[arguments.length=2]\"(node) {\n\t\t\t\tconst [strNode, radixNode] = node.arguments,\n\t\t\t\t\tstr = astUtils.getStaticStringValue(strNode),\n\t\t\t\t\tradix = radixNode.value;\n\t\t\t\tif (\n\t\t\t\t\tstr !== null &&\n\t\t\t\t\tastUtils.isStringLiteral(strNode) &&\n\t\t\t\t\tradixNode.type === \"Literal\" &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 9,
            "lineCount": 57,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\tif (sourceCode.getCommentsInside(node).length) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst replacement = `${literalPrefix}${str}`;\n\t\t\t\t\t\t\tif (+replacement !== parseInt(str, radix)) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * If the newly-produced literal would be invalid, (e.g. 0b1234),\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-object-has-own.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 12,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tCallExpression(node) {\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\tnode.callee.type === \"MemberExpression\" &&\n\t\t\t\t\t\tnode.callee.object.type === \"MemberExpression\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "CallExpression",
            "complexity": 12,
            "lineCount": 69,
            "parameterCount": 1,
            "snippet": "CallExpression(node) {\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\tnode.callee.type === \"MemberExpression\" &&\n\t\t\t\t\t\tnode.callee.object.type === \"MemberExpression\"\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/prefer-object-spread.js",
        "criticalFunctions": [
          {
            "name": "defineFixer",
            "complexity": 9,
            "lineCount": 72,
            "parameterCount": 2,
            "snippet": "function defineFixer(node, sourceCode) {\n\treturn function* (fixer) {\n\t\tconst leftParen = sourceCode.getTokenAfter(\n\t\t\tnode.callee,\n\t\t\tisOpeningParenToken,\n\t\t);\n\t\tconst rightParen = sourceCode.getLastToken(node);\n\t\tyield fixer.removeRange([node.range[0], leftParen.range[0]]);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function* (fixer) {\n\t\tconst leftParen = sourceCode.getTokenAfter(\n\t\t\tnode.callee,\n\t\t\tisOpeningParenToken,\n\t\t);\n\t\tconst rightParen = sourceCode.getLastToken(node);\n\t\tyield fixer.removeRange([node.range[0], leftParen.range[0]]);\n\t\tif (needsParens(node, sourceCode)) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-promise-reject-errors.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 15,
            "lineCount": 105,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowEmptyReject }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks the argument of a reject() or Promise.reject() CallExpression, and reports it if it can't be an Error\n\t\t * @param {ASTNode} callExpression A CallExpression node which is used to reject a Promise\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-regex-literals.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 65,
            "lineCount": 440,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ disallowRedundantWrapping }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether the given node is a String.raw`` tagged template expression\n\t\t * with a static template literal.\n\t\t * @param {ASTNode} node Node to check.\n\t\t * @returns {boolean} True if the node is String.raw`` with a static template.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 440 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Program",
            "complexity": 24,
            "lineCount": 201,
            "parameterCount": 1,
            "snippet": "Program(node) {\n\t\t\t\tconst scope = sourceCode.getScope(node);\n\t\t\t\tconst tracker = new ReferenceTracker(scope);\n\t\t\t\tconst traceMap = {\n\t\t\t\t\tRegExp: {\n\t\t\t\t\t\t[CALL]: true,\n\t\t\t\t\t\t[CONSTRUCT]: true,\n\t\t\t\t\t},\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 201 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/prefer-template.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 16,
            "lineCount": 193,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet done = Object.create(null);\n\t\t/**\n\t\t * Gets the non-token text between two nodes, ignoring any other tokens that appear between the two tokens.\n\t\t * @param {ASTNode} node1 The first node\n\t\t * @param {ASTNode} node2 The second node\n\t\t * @returns {string} The text between the nodes, excluding other tokens\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 193 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTemplateLiteral",
            "complexity": 11,
            "lineCount": 98,
            "parameterCount": 3,
            "snippet": "function getTemplateLiteral(\n\t\t\tcurrentNode,\n\t\t\ttextBeforeNode,\n\t\t\ttextAfterNode,\n\t\t) {\n\t\t\tif (\n\t\t\t\tcurrentNode.type === \"Literal\" &&\n\t\t\t\ttypeof currentNode.value === \"string\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 98 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/quote-props.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 65,
            "lineCount": 274,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst MODE = context.options[0],\n\t\t\tKEYWORDS = context.options[1] && context.options[1].keywords,\n\t\t\tCHECK_UNNECESSARY =\n\t\t\t\t!context.options[1] || context.options[1].unnecessary !== false,\n\t\t\tNUMBERS = context.options[1] && context.options[1].numbers,\n\t\t\tsourceCode = context.sourceCode;\n\t\t/**\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 274 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkConsistency",
            "complexity": 24,
            "lineCount": 94,
            "parameterCount": 2,
            "snippet": "function checkConsistency(node, checkQuotesRedundancy) {\n\t\t\tconst quotedProps = [],\n\t\t\t\tunquotedProps = [];\n\t\t\tlet keywordKeyName = null,\n\t\t\t\tnecessaryQuotes = false;\n\t\t\tnode.properties.forEach(property => {\n\t\t\t\tconst key = property.key;\n\t\t\t\tif (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkUnnecessaryQuotes",
            "complexity": 18,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "function checkUnnecessaryQuotes(node) {\n\t\t\tconst key = node.key;\n\t\t\tif (node.method || node.computed || node.shorthand) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (key.type === \"Literal\" && typeof key.value === \"string\") {\n\t\t\t\tlet tokens;\n\t\t\t\ttry {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 16,
            "lineCount": 43,
            "parameterCount": 1,
            "snippet": "property => {\n\t\t\t\tconst key = property.key;\n\t\t\t\tif (\n\t\t\t\t\t!key ||\n\t\t\t\t\tproperty.method ||\n\t\t\t\t\tproperty.computed ||\n\t\t\t\t\tproperty.shorthand\n\t\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/quotes.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 48,
            "lineCount": 254,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst quoteOption = context.options[0],\n\t\t\tsettings = QUOTE_SETTINGS[quoteOption || \"double\"],\n\t\t\toptions = context.options[1],\n\t\t\tallowTemplateLiterals =\n\t\t\t\toptions && options.allowTemplateLiterals === true,\n\t\t\tsourceCode = context.sourceCode;\n\t\tlet avoidEscape = options && options.avoidEscape === true;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 254 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/radix.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 17,
            "lineCount": 104,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [mode] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Checks the arguments of a given CallExpression node and reports it if it\n\t\t * offends this rule.\n\t\t * @param {ASTNode} node A CallExpression node to check.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkArguments",
            "complexity": 9,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "function checkArguments(node) {\n\t\t\tconst args = node.arguments;\n\t\t\tswitch (args.length) {\n\t\t\t\tcase 0:\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessageId: \"missingParameters\",\n\t\t\t\t\t});\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/require-atomic-updates.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 21,
            "lineCount": 147,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ allowProperties }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst assignmentReferences = new Map();\n\t\tconst segmentInfo = new SegmentInfo();\n\t\tlet stack = null;\n\t\treturn {\n\t\t\tonCodePathStart(codePath, node) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 147 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "\":expression:exit\"(node) {\n\t\t\t\tif (!stack.referenceMap) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tnode.type === \"AwaitExpression\" ||\n\t\t\t\t\tnode.type === \"YieldExpression\"\n\t\t\t\t) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/require-await.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 122,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tlet scopeInfo = null;\n\t\t/**\n\t\t * Push the scope info object to the stack.\n\t\t * @returns {void}\n\t\t */\n\t\tfunction enterFunction() {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 122 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "exitFunction",
            "complexity": 16,
            "lineCount": 74,
            "parameterCount": 1,
            "snippet": "function exitFunction(node) {\n\t\t\tif (\n\t\t\t\t!node.generator &&\n\t\t\t\tnode.async &&\n\t\t\t\t!scopeInfo.hasAwait &&\n\t\t\t\t!astUtils.isEmptyFunction(node)\n\t\t\t) {\n\t\t\t\t/*\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/require-unicode-regexp.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 30,
            "lineCount": 236,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst { requireFlag } = context.options[0] ?? {};\n\t\treturn {\n\t\t\t\"Literal[regex]\"(node) {\n\t\t\t\tconst flags = node.regex.flags || \"\";\n\t\t\t\tconst missingFlag = checkFlags(requireFlag, flags);\n\t\t\t\tif (missingFlag) {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 236 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Program",
            "complexity": 22,
            "lineCount": 157,
            "parameterCount": 1,
            "snippet": "Program(node) {\n\t\t\t\tconst scope = sourceCode.getScope(node);\n\t\t\t\tconst tracker = new ReferenceTracker(scope);\n\t\t\t\tconst trackMap = {\n\t\t\t\t\tRegExp: { [CALL]: true, [CONSTRUCT]: true },\n\t\t\t\t};\n\t\t\t\tfor (const { node: refNode } of tracker.iterateGlobalReferences(\n\t\t\t\t\ttrackMap,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 157 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 13,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst replaceFlag =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trequireFlag ?? \"u\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (flagsNode) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(flagsNode.type ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Literal\" &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttypeof flagsNode.value ===\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "\"Literal[regex]\"(node) {\n\t\t\t\tconst flags = node.regex.flags || \"\";\n\t\t\t\tconst missingFlag = checkFlags(requireFlag, flags);\n\t\t\t\tif (missingFlag) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tmessageId:\n\t\t\t\t\t\t\trequireFlag === \"v\"\n\t\t\t\t\t\t\t\t? \"requireVFlag\"\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/require-yield.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/rest-spread-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 11,
            "lineCount": 92,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode,\n\t\t\talwaysSpace = context.options[0] === \"always\";\n\t\t/**\n\t\t * Checks whitespace between rest/spread operators and their expressions\n\t\t * @param {ASTNode} node The node to check\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkWhiteSpace",
            "complexity": 11,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "function checkWhiteSpace(node) {\n\t\t\tconst operator = sourceCode.getFirstToken(node),\n\t\t\t\tnextToken = sourceCode.getTokenAfter(operator),\n\t\t\t\thasWhitespace = sourceCode.isSpaceBetweenTokens(\n\t\t\t\t\toperator,\n\t\t\t\t\tnextToken,\n\t\t\t\t);\n\t\t\tlet type;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/semi-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 221,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst config = context.options[0],\n\t\t\tsourceCode = context.sourceCode;\n\t\tlet requireSpaceBefore = false,\n\t\t\trequireSpaceAfter = true;\n\t\tif (typeof config === \"object\") {\n\t\t\trequireSpaceBefore = config.before;\n\t\t\trequireSpaceAfter = config.after;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 221 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkSemicolonSpacing",
            "complexity": 11,
            "lineCount": 79,
            "parameterCount": 2,
            "snippet": "function checkSemicolonSpacing(token, node) {\n\t\t\tif (astUtils.isSemicolonToken(token)) {\n\t\t\t\tif (hasLeadingSpace(token)) {\n\t\t\t\t\tif (!requireSpaceBefore) {\n\t\t\t\t\t\tconst tokenBefore = sourceCode.getTokenBefore(token);\n\t\t\t\t\t\tconst loc = {\n\t\t\t\t\t\t\tstart: tokenBefore.loc.end,\n\t\t\t\t\t\t\tend: token.loc.start,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/semi-style.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 93,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst option = context.options[0] || \"last\";\n\t\t/**\n\t\t * Check the given semicolon token.\n\t\t * @param {Token} semiToken The semicolon token to check.\n\t\t * @param {\"first\"|\"last\"} expected The expected location to check.\n\t\t * @returns {void}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/semi.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 64,
            "lineCount": 375,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n\t\tconst unsafeClassFieldNames = new Set([\"get\", \"set\", \"static\"]);\n\t\tconst unsafeClassFieldFollowers = new Set([\"*\", \"in\", \"instanceof\"]);\n\t\tconst options = context.options[1];\n\t\tconst never = context.options[0] === \"never\";\n\t\tconst exceptOneLine = Boolean(\n\t\t\toptions && options.omitLastInOneLineBlock,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 64 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 375 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/sort-imports.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 25,
            "lineCount": 243,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\t{\n\t\t\t\tignoreCase,\n\t\t\t\tignoreDeclarationSort,\n\t\t\t\tignoreMemberSort,\n\t\t\t\tmemberSyntaxSortOrder,\n\t\t\t\tallowSeparatedGroups,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 243 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "ImportDeclaration",
            "complexity": 21,
            "lineCount": 170,
            "parameterCount": 1,
            "snippet": "ImportDeclaration(node) {\n\t\t\t\tif (!ignoreDeclarationSort) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tpreviousDeclaration &&\n\t\t\t\t\t\tallowSeparatedGroups &&\n\t\t\t\t\t\tgetNumberOfLinesBetween(previousDeclaration, node) > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tpreviousDeclaration = null;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 170 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 5,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\timportSpecifiers.some(\n\t\t\t\t\t\t\t\t\t\tspecifier =>\n\t\t\t\t\t\t\t\t\t\t\tsourceCode.getCommentsBefore(\n\t\t\t\t\t\t\t\t\t\t\t\tspecifier,\n\t\t\t\t\t\t\t\t\t\t\t).length ||\n\t\t\t\t\t\t\t\t\t\t\tsourceCode.getCommentsAfter(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/sort-keys.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 24,
            "lineCount": 133,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [\n\t\t\torder,\n\t\t\t{\n\t\t\t\tcaseSensitive,\n\t\t\t\tnatural,\n\t\t\t\tminKeys,\n\t\t\t\tallowLineSeparatedGroups,\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "Property",
            "complexity": 21,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "Property(node) {\n\t\t\t\tif (node.parent.type === \"ObjectPattern\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (ignoreComputedKeys && node.computed) {\n\t\t\t\t\tstack.prevName = null; // reset sort\n\t\t\t\t\treturn;\n\t\t\t\t}\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/sort-vars.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 8,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ ignoreCase }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn {\n\t\t\tVariableDeclaration(node) {\n\t\t\t\tconst idDeclarations = node.declarations.filter(\n\t\t\t\t\tdecl => decl.id.type === \"Identifier\",\n\t\t\t\t);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "VariableDeclaration",
            "complexity": 8,
            "lineCount": 82,
            "parameterCount": 1,
            "snippet": "VariableDeclaration(node) {\n\t\t\t\tconst idDeclarations = node.declarations.filter(\n\t\t\t\t\tdecl => decl.id.type === \"Identifier\",\n\t\t\t\t);\n\t\t\t\tconst getSortableName = ignoreCase\n\t\t\t\t\t? decl => decl.id.name.toLowerCase()\n\t\t\t\t\t: decl => decl.id.name;\n\t\t\t\tconst unfixable = idDeclarations.some(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 6,
            "lineCount": 69,
            "parameterCount": 2,
            "snippet": "(memo, decl) => {\n\t\t\t\t\tconst lastVariableName = getSortableName(memo),\n\t\t\t\t\t\tcurrentVariableName = getSortableName(decl);\n\t\t\t\t\tif (currentVariableName < lastVariableName) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode: decl,\n\t\t\t\t\t\t\tmessageId: \"sortVars\",\n\t\t\t\t\t\t\tfix(fixer) {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fix",
            "complexity": 5,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "fix(fixer) {\n\t\t\t\t\t\t\t\tif (unfixable || fixed) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn fixer.replaceTextRange(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tidDeclarations[0].range[0],\n\t\t\t\t\t\t\t\t\t\tidDeclarations.at(-1).range[1],\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/space-before-blocks.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 129,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst config = context.options[0],\n\t\t\tsourceCode = context.sourceCode;\n\t\tlet alwaysFunctions = true,\n\t\t\talwaysKeywords = true,\n\t\t\talwaysClasses = true,\n\t\t\tneverFunctions = false,\n\t\t\tneverKeywords = false,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 129 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/space-before-function-paren.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 22,
            "lineCount": 121,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst baseConfig =\n\t\t\ttypeof context.options[0] === \"string\"\n\t\t\t\t? context.options[0]\n\t\t\t\t: \"always\";\n\t\tconst overrideConfig =\n\t\t\ttypeof context.options[0] === \"object\" ? context.options[0] : {};\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkFunction",
            "complexity": 7,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function checkFunction(node) {\n\t\t\tconst functionConfig = getConfigForFunction(node);\n\t\t\tif (functionConfig === \"ignore\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rightToken = sourceCode.getFirstToken(\n\t\t\t\tnode,\n\t\t\t\tastUtils.isOpeningParenToken,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/space-in-parens.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 33,
            "lineCount": 299,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst ALWAYS = context.options[0] === \"always\",\n\t\t\texceptionsArrayOptions =\n\t\t\t\t(context.options[1] && context.options[1].exceptions) || [],\n\t\t\toptions = {};\n\t\tlet exceptions;\n\t\tif (exceptionsArrayOptions.length) {\n\t\t\toptions.braceException = exceptionsArrayOptions.includes(\"{}\");\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 299 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkParenSpaces",
            "complexity": 11,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "function checkParenSpaces(node) {\n\t\t\t\texceptions = getExceptions();\n\t\t\t\tconst tokens = sourceCode.tokensAndComments;\n\t\t\t\ttokens.forEach((token, i) => {\n\t\t\t\t\tconst prevToken = tokens[i - 1];\n\t\t\t\t\tconst nextToken = tokens[i + 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\t!astUtils.isOpeningParenToken(token) &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 11,
            "lineCount": 84,
            "parameterCount": 2,
            "snippet": "(token, i) => {\n\t\t\t\t\tconst prevToken = tokens[i - 1];\n\t\t\t\t\tconst nextToken = tokens[i + 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\t!astUtils.isOpeningParenToken(token) &&\n\t\t\t\t\t\t!astUtils.isClosingParenToken(token)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/space-infix-ops.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 186,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst int32Hint = context.options[0]\n\t\t\t? context.options[0].int32Hint === true\n\t\t\t: false;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Returns the first token which violates the rule\n\t\t * @param {ASTNode} left The left node of the main node\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 186 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/space-unary-ops.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 33,
            "lineCount": 309,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst options = context.options[0] || { words: true, nonwords: false };\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Check if the node is the first \"!\" in a \"!!\" convert to Boolean expression\n\t\t * @param {ASTnode} node AST node\n\t\t * @returns {boolean} Whether or not the node is first \"!\" in \"!!\"\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 309 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/spaced-comment.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 32,
            "lineCount": 189,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst requireSpace = context.options[0] !== \"never\";\n\t\t/*\n\t\t * Parse the second options.\n\t\t * If markers don't include `\"*\"`, it's added automatically for JSDoc\n\t\t * comments.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 189 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkCommentForSpace",
            "complexity": 16,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function checkCommentForSpace(node) {\n\t\t\tconst type = node.type.toLowerCase(),\n\t\t\t\trule = styleRules[type],\n\t\t\t\tcommentIdentifier = type === \"block\" ? \"/*\" : \"//\";\n\t\t\tif (node.value.length === 0 || rule.markers.has(node.value)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst beginMatch = rule.beginRegex.exec(node.value);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/strict.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 29,
            "lineCount": 210,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst ecmaFeatures = context.parserOptions.ecmaFeatures || {},\n\t\t\tscopes = [],\n\t\t\tclassScopes = [];\n\t\tlet [mode] = context.options;\n\t\tif (ecmaFeatures.impliedStrict) {\n\t\t\tmode = \"implied\";\n\t\t} else if (mode === \"safe\") {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 210 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/switch-colon-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 10,
            "lineCount": 88,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst options = context.options[0] || {};\n\t\tconst beforeSpacing = options.before === true; // false by default\n\t\tconst afterSpacing = options.after !== false; // true by default\n\t\t/**\n\t\t * Check whether the spacing between the given 2 tokens is valid or not.\n\t\t * @param {Token} left The left token to check.\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 88 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/template-curly-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 13,
            "lineCount": 105,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst always = context.options[0] === \"always\";\n\t\t/**\n\t\t * Checks spacing before `}` of a given token.\n\t\t * @param {Token} token A token to check. This is a Template token.\n\t\t * @returns {void}\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/template-tag-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 6,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst never = context.options[0] !== \"always\";\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Check if a space is present between a template tag and its literal\n\t\t * @param {ASTNode} node node to evaluate\n\t\t * @returns {void}\n\t\t * @private\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/unicode-bom.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/use-isnan.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 25,
            "lineCount": 177,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [{ enforceForIndexOf, enforceForSwitchCase }] = context.options;\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst fixableOperators = new Set([\"==\", \"===\", \"!=\", \"!==\"]);\n\t\tconst castableOperators = new Set([\"==\", \"!=\"]);\n\t\t/**\n\t\t * Get a fixer for a binary expression that compares to NaN.\n\t\t * @param  {ASTNode} node The node to fix.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 177 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkCallExpression",
            "complexity": 10,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function checkCallExpression(node) {\n\t\t\tconst callee = astUtils.skipChainExpression(node.callee);\n\t\t\tif (callee.type === \"MemberExpression\") {\n\t\t\t\tconst methodName = astUtils.getStaticPropertyName(callee);\n\t\t\t\tif (\n\t\t\t\t\t(methodName === \"indexOf\" ||\n\t\t\t\t\t\tmethodName === \"lastIndexOf\") &&\n\t\t\t\t\tnode.arguments.length <= 2 &&\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/valid-typeof.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 18,
            "lineCount": 116,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst VALID_TYPES = new Set([\n\t\t\t\t\"symbol\",\n\t\t\t\t\"undefined\",\n\t\t\t\t\"object\",\n\t\t\t\t\"boolean\",\n\t\t\t\t\"number\",\n\t\t\t\t\"string\",\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 116 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "UnaryExpression",
            "complexity": 15,
            "lineCount": 61,
            "parameterCount": 1,
            "snippet": "UnaryExpression(node) {\n\t\t\t\tif (isTypeofExpression(node)) {\n\t\t\t\t\tconst { parent } = node;\n\t\t\t\t\tif (\n\t\t\t\t\t\tparent.type === \"BinaryExpression\" &&\n\t\t\t\t\t\tOPERATORS.has(parent.operator)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst sibling =\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/vars-on-top.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 24,
            "lineCount": 134,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\t/**\n\t\t * Has AST suggesting a directive.\n\t\t * @param {ASTNode} node any node\n\t\t * @returns {boolean} whether the given node structurally represents a directive\n\t\t */\n\t\tfunction looksLikeDirective(node) {\n\t\t\treturn (\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/wrap-iife.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 19,
            "lineCount": 139,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst style = context.options[0] || \"outside\";\n\t\tconst includeFunctionPrototypeMethods =\n\t\t\tcontext.options[1] && context.options[1].functionPrototypeMethods;\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Check if the node is wrapped in any (). All parens count: grouping parens and parens for constructs such as if()\n\t\t * @param {ASTNode} node node to evaluate\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 139 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "CallExpression",
            "complexity": 11,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "CallExpression(node) {\n\t\t\t\tconst innerNode = getFunctionNodeFromIIFE(node);\n\t\t\t\tif (!innerNode) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst isCallExpressionWrapped = isWrappedInAnyParens(node),\n\t\t\t\t\tisFunctionExpressionWrapped =\n\t\t\t\t\t\tisWrappedInAnyParens(innerNode);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/rules/wrap-regex.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "lib/rules/yield-star-spacing.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 12,
            "lineCount": 86,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst sourceCode = context.sourceCode;\n\t\tconst mode = (function (option) {\n\t\t\tif (!option || typeof option === \"string\") {\n\t\t\t\treturn {\n\t\t\t\t\tbefore: { before: true, after: false },\n\t\t\t\t\tafter: { before: false, after: true },\n\t\t\t\t\tboth: { before: true, after: true },\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/rules/yoda.js",
        "criticalFunctions": [
          {
            "name": "create",
            "complexity": 40,
            "lineCount": 206,
            "parameterCount": 1,
            "snippet": "create(context) {\n\t\tconst [when, { exceptRange, onlyEquality }] = context.options;\n\t\tconst always = when === \"always\";\n\t\tconst sourceCode = context.sourceCode;\n\t\t/**\n\t\t * Determines whether node represents a range test.\n\t\t * A range test is a \"between\" test like `(0 <= x && x < 1)` or an \"outside\"\n\t\t * test like `(x < 0 || 1 <= x)`. It must be wrapped in parentheses, and\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 40 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 206 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isRangeTest",
            "complexity": 22,
            "lineCount": 79,
            "parameterCount": 1,
            "snippet": "function isRangeTest(node) {\n\t\t\tconst left = node.left,\n\t\t\t\tright = node.right;\n\t\t\t/**\n\t\t\t * Determines whether node is of the form `0 <= x && x < 1`.\n\t\t\t * @returns {boolean} Whether node is a \"between\" range test.\n\t\t\t */\n\t\t\tfunction isBetweenTest() {\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFlippedString",
            "complexity": 7,
            "lineCount": 59,
            "parameterCount": 1,
            "snippet": "function getFlippedString(node) {\n\t\t\tconst operatorToken = sourceCode.getFirstTokenBetween(\n\t\t\t\tnode.left,\n\t\t\t\tnode.right,\n\t\t\t\ttoken => token.value === node.operator,\n\t\t\t);\n\t\t\tconst lastLeftToken = sourceCode.getTokenBefore(operatorToken);\n\t\t\tconst firstRightToken = sourceCode.getTokenAfter(operatorToken);\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/cli-engine/formatters/html.js",
        "criticalFunctions": [
          {
            "name": "pageTemplate",
            "complexity": 1,
            "lineCount": 148,
            "parameterCount": 1,
            "snippet": "function pageTemplate(it) {\n\tconst { reportColor, reportSummary, date, results } = it;\n\treturn `\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>ESLint Report</title>\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/languages/js/index.js",
        "criticalFunctions": [
          {
            "name": "matchesSelectorClass",
            "complexity": 15,
            "lineCount": 67,
            "parameterCount": 3,
            "snippet": "matchesSelectorClass(className, node, ancestry) {\n\t\t/*\n\t\t * Copyright (c) 2013, Joel Feenstra\n\t\t * All rights reserved.\n\t\t *\n\t\t * Redistribution and use in source and binary forms, with or without\n\t\t * modification, are permitted provided that the following conditions are met:\n\t\t *    * Redistributions of source code must retain the above copyright\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              }
            ]
          },
          {
            "name": "parse",
            "complexity": 3,
            "lineCount": 70,
            "parameterCount": 2,
            "snippet": "parse(file, { languageOptions }) {\n\t\tconst { body: text, path: filePath } = file;\n\t\tconst textToParse = text.replace(\n\t\t\tastUtils.shebangPattern,\n\t\t\t(match, captured) => `//${captured}`,\n\t\t);\n\t\tconst { ecmaVersion, sourceType, parser } = languageOptions;\n\t\tconst parserOptions = Object.assign(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/languages/js/validate-language-options.js",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/code-path-analysis/code-path-analyzer.js",
        "criticalFunctions": [
          {
            "name": "preprocess",
            "complexity": 37,
            "lineCount": 125,
            "parameterCount": 2,
            "snippet": "function preprocess(analyzer, node) {\n\tconst codePath = analyzer.codePath;\n\tconst state = CodePath.getState(codePath);\n\tconst parent = node.parent;\n\tswitch (parent.type) {\n\t\tcase \"CallExpression\":\n\t\t\tif (\n\t\t\t\tparent.optional === true &&\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 125 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processCodePathToExit",
            "complexity": 35,
            "lineCount": 116,
            "parameterCount": 2,
            "snippet": "function processCodePathToExit(analyzer, node) {\n\tconst codePath = analyzer.codePath;\n\tconst state = CodePath.getState(codePath);\n\tlet dontForward = false;\n\tswitch (node.type) {\n\t\tcase \"ChainExpression\":\n\t\t\tstate.popChainContext();\n\t\t\tbreak;\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 116 lines, consider splitting"
              }
            ]
          },
          {
            "name": "processCodePathToEnter",
            "complexity": 32,
            "lineCount": 148,
            "parameterCount": 2,
            "snippet": "function processCodePathToEnter(analyzer, node) {\n\tlet codePath = analyzer.codePath;\n\tlet state = codePath && CodePath.getState(codePath);\n\tconst parent = node.parent;\n\t/**\n\t * Creates a new code path and trigger the onCodePathStart event\n\t * based on the currently selected node.\n\t * @param {string} origin The reason the code path was started.\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isIdentifierReference",
            "complexity": 22,
            "lineCount": 35,
            "parameterCount": 1,
            "snippet": "function isIdentifierReference(node) {\n\tconst parent = node.parent;\n\tswitch (parent.type) {\n\t\tcase \"LabeledStatement\":\n\t\tcase \"BreakStatement\":\n\t\tcase \"ContinueStatement\":\n\t\tcase \"ArrayPattern\":\n\t\tcase \"RestElement\":\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "postprocess",
            "complexity": 11,
            "lineCount": 67,
            "parameterCount": 2,
            "snippet": "function postprocess(analyzer, node) {\n\t/**\n\t * Ends the code path for the current node.\n\t * @returns {void}\n\t */\n\tfunction endCodePath() {\n\t\tlet codePath = analyzer.codePath;\n\t\tCodePath.getState(codePath).makeFinal();\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/code-path-analysis/code-path-state.js",
        "criticalFunctions": [
          {
            "name": "popLoopContext",
            "complexity": 10,
            "lineCount": 85,
            "parameterCount": 0,
            "snippet": "popLoopContext() {\n\t\tconst context = this.loopContext;\n\t\tthis.loopContext = context.upper;\n\t\tconst forkContext = this.forkContext;\n\t\tconst brokenForkContext = this.popBreakContext().brokenForkContext;\n\t\tswitch (context.type) {\n\t\t\tcase \"WhileStatement\":\n\t\t\tcase \"ForStatement\":\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "popChoiceContext",
            "complexity": 9,
            "lineCount": 90,
            "parameterCount": 0,
            "snippet": "popChoiceContext() {\n\t\tconst poppedChoiceContext = this.choiceContext;\n\t\tconst forkContext = this.forkContext;\n\t\tconst head = forkContext.head;\n\t\tthis.choiceContext = poppedChoiceContext.upper;\n\t\tswitch (poppedChoiceContext.kind) {\n\t\t\tcase \"&&\":\n\t\t\tcase \"||\":\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              }
            ]
          },
          {
            "name": "makeLogicalRight",
            "complexity": 8,
            "lineCount": 96,
            "parameterCount": 0,
            "snippet": "makeLogicalRight() {\n\t\tconst currentChoiceContext = this.choiceContext;\n\t\tconst forkContext = this.forkContext;\n\t\tif (currentChoiceContext.processed) {\n\t\t\t/*\n\t\t\t * This context was already assigned segments from a child\n\t\t\t * choice context. In this case, we are concerned only about\n\t\t\t * the path that does not short-circuit and so ends up on the\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              }
            ]
          },
          {
            "name": "popTryContext",
            "complexity": 8,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "popTryContext() {\n\t\tconst context = this.tryContext;\n\t\tthis.tryContext = context.upper;\n\t\t/*\n\t\t * If we're inside the `catch` block, that means there is no `finally`,\n\t\t * so we can process the `try` and `catch` blocks the simple way and\n\t\t * merge their two paths.\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "makeFinallyBlock",
            "complexity": 7,
            "lineCount": 71,
            "parameterCount": 0,
            "snippet": "makeFinallyBlock() {\n\t\tconst context = this.tryContext;\n\t\tlet forkContext = this.forkContext;\n\t\tconst originalReturnedForkContext = context.returnedForkContext;\n\t\tconst originalThrownForContext = context.thrownForkContext;\n\t\tconst headOfLeavingSegments = forkContext.head;\n\t\tif (context.position === \"catch\") {\n\t\t\tthis.popForkContext();\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/code-path-analysis/code-path.js",
        "criticalFunctions": [
          {
            "name": "traverseSegments",
            "complexity": 19,
            "lineCount": 184,
            "parameterCount": 2,
            "snippet": "traverseSegments(optionsOrCallback, callback) {\n\t\tlet resolvedOptions;\n\t\tlet resolvedCallback;\n\t\tif (typeof optionsOrCallback === \"function\") {\n\t\t\tresolvedCallback = optionsOrCallback;\n\t\t\tresolvedOptions = {};\n\t\t} else {\n\t\t\tresolvedOptions = optionsOrCallback || {};\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 184 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/linter/code-path-analysis/debug-helpers.js",
        "criticalFunctions": [
          {
            "name": "makeDotArrows",
            "complexity": 9,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "makeDotArrows(codePath, traceMap) {\n\t\tconst stack = [[codePath.initialSegment, 0]];\n\t\tconst done = traceMap || Object.create(null);\n\t\tlet lastId = codePath.initialSegment.id;\n\t\tlet text = `initial->${codePath.initialSegment.id}`;\n\t\twhile (stack.length > 0) {\n\t\t\tconst item = stack.pop();\n\t\t\tconst segment = item[0];\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/languages/js/source-code/source-code.js",
        "criticalFunctions": [
          {
            "name": "getJSDocComment",
            "complexity": 22,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "getJSDocComment(node) {\n\t\t/**\n\t\t * Checks for the presence of a JSDoc comment for the given node and returns it.\n\t\t * @param {ASTNode} astNode The AST node to get the comment for.\n\t\t * @returns {Token|null} The Block comment token containing the JSDoc comment\n\t\t *      for the given node or null if not found.\n\t\t * @private\n\t\t */\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addDeclaredGlobals",
            "complexity": 13,
            "lineCount": 94,
            "parameterCount": 3,
            "snippet": "function addDeclaredGlobals(\n\tglobalScope,\n\tconfigGlobals = {},\n\tinlineGlobals = {},\n) {\n\tfor (const id of new Set([\n\t\t...Object.keys(configGlobals),\n\t\t...Object.keys(inlineGlobals),\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getIndexFromLoc",
            "complexity": 13,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "getIndexFromLoc(loc) {\n\t\tif (\n\t\t\tloc === null ||\n\t\t\ttypeof loc !== \"object\" ||\n\t\t\ttypeof loc.line !== \"number\" ||\n\t\t\ttypeof loc.column !== \"number\"\n\t\t) {\n\t\t\tthrow new TypeError(\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getDisableDirectives",
            "complexity": 10,
            "lineCount": 71,
            "parameterCount": 0,
            "snippet": "getDisableDirectives() {\n\t\tconst cachedDirectives = this[caches].get(\"disableDirectives\");\n\t\tif (cachedDirectives) {\n\t\t\treturn cachedDirectives;\n\t\t}\n\t\tconst problems = [];\n\t\tconst directives = [];\n\t\tthis.getInlineConfigNodes().forEach(comment => {\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 9,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "comment => {\n\t\t\tconst {\n\t\t\t\tlabel,\n\t\t\t\tvalue,\n\t\t\t\tjustification: justificationPart,\n\t\t\t} = commentParser.parseDirective(comment.value);\n\t\t\tconst lineCommentSupported = /^eslint-disable-(next-)?line$/u.test(\n\t\t\t\tlabel,\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/languages/js/source-code/token-store/index.js",
        "criticalFunctions": [
          {
            "name": "createCursorWithCount",
            "complexity": 7,
            "lineCount": 43,
            "parameterCount": 7,
            "snippet": "function createCursorWithCount(\n\tfactory,\n\ttokens,\n\tcomments,\n\tindexMap,\n\tstartLoc,\n\tendLoc,\n\topts,\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCursorWithSkip",
            "complexity": 6,
            "lineCount": 40,
            "parameterCount": 7,
            "snippet": "function createCursorWithSkip(\n\tfactory,\n\ttokens,\n\tcomments,\n\tindexMap,\n\tstartLoc,\n\tendLoc,\n\topts,\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCursorWithPadding",
            "complexity": 5,
            "lineCount": 42,
            "parameterCount": 7,
            "snippet": "function createCursorWithPadding(\n\ttokens,\n\tcomments,\n\tindexMap,\n\tstartLoc,\n\tendLoc,\n\tbeforeCount,\n\tafterCount,\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      }
    ]
  },
  "durationMs": 21740
}