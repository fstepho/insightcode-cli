{
  "project": "typescript",
  "repo": "https://github.com/microsoft/TypeScript.git",
  "type": "language compiler",
  "stars": "104k",
  "stableVersion": "v5.8.3",
  "description": "TypeScript language compiler",
  "category": "large",
  "emblematicFiles": {
    "coreFiles": [
      "src/compiler/checker.ts",
      "src/compiler/parser.ts",
      "src/compiler/binder.ts"
    ],
    "architecturalFiles": [
      "src/compiler/program.ts",
      "src/compiler/builder.ts",
      "src/services/services.ts"
    ],
    "performanceCriticalFiles": [
      "src/compiler/transformers/ts.ts",
      "src/compiler/emitter.ts",
      "src/compiler/scanner.ts"
    ],
    "complexAlgorithmFiles": [
      "src/compiler/types.ts",
      "src/compiler/utilities.ts"
    ]
  },
  "analysis": {
    "details": [
      {
        "file": "deprecatedCompat/deprecate.ts",
        "metrics": {
          "complexity": 22,
          "loc": 62,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 50
      },
      {
        "file": "deprecatedCompat/deprecations.ts",
        "metrics": {
          "complexity": 11,
          "loc": 77,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 91
      },
      {
        "file": "compiler/binder.ts",
        "metrics": {
          "complexity": 1125,
          "loc": 3256,
          "functionCount": 184,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 56.25
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.26
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 362,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getModuleInstanceStateWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 434,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getModuleInstanceStateForAliasTarget"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 674,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getDeclarationName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 762,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "declareSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 900,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "declareModuleMember"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 945,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "jsdocTreatAsExported"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 966,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "bindContainer"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1102,
            "threshold": 10,
            "excessRatio": 4.9,
            "function": "bindChildren"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1237,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isNarrowingExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1264,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "isNarrowableReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1310,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "isNarrowingBinaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1375,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "createFlowCondition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2259,
            "threshold": 10,
            "excessRatio": 3,
            "function": "declareSymbolAndAddToSymbolTable"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2347,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "bindModuleDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2453,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "delayedBindJSDocTypedefTag"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2553,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "checkContextualIdentifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2859,
            "threshold": 10,
            "excessRatio": 11.6,
            "function": "bindWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3277,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "bindThisPropertyAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3480,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "bindPotentiallyNewExpandoMemberToNamespace"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3552,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "isExpandoSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3804,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "checkUnreachable"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3886,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isExportsOrModuleExportsOrAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3912,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "getContainerFlags"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/builder.ts",
        "metrics": {
          "complexity": 367,
          "loc": 1961,
          "functionCount": 89,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 18.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.96
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 321,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "createBuilderProgramState"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1235,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getBuildInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1741,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "emitNextAffectedFileOrDtsErrors"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2126,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getSemanticDiagnosticsOfNextAffectedFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2254,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "createBuilderProgramUsingIncrementalBuildInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/builderPublic.ts",
        "metrics": {
          "complexity": 3,
          "loc": 155,
          "functionCount": 3,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/builderState.ts",
        "metrics": {
          "complexity": 108,
          "loc": 447,
          "functionCount": 31,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.4
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.49
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 215,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getReferencedFiles"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 308,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "create"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/builderStatePublic.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/checker.ts",
        "metrics": {
          "complexity": 17368,
          "loc": 43234,
          "functionCount": 2388,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 868.4
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 43.23
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2389,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isDefinitelyReferenceToGlobalSymbolObject"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2411,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getJsxNamespace"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2614,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getExcludedSymbolFlags"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2659,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "mergeSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2724,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "reportMergeSymbolError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2767,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "addDuplicateDeclarationError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2816,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "mergeModuleAugmentation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2941,
            "threshold": 10,
            "excessRatio": 3.9,
            "function": "isBlockScopedNameDeclaredBeforeUse"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3344,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkAndReportErrorForMissingPrefix"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3459,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkAndReportErrorForUsingTypeAsValue"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3544,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkResolvedBlockScopedVariable"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3627,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "isAliasSymbolDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3729,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "canHaveSyntheticDefault"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3780,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getTargetofModuleDefault"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3944,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getExternalModuleMember"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4068,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getTargetOfImportSpecifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4148,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getTargetOfAliasDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4246,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getSymbolFlags"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4428,
            "threshold": 10,
            "excessRatio": 4.7,
            "function": "resolveEntityName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4542,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getAssignmentDeclarationLocation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4625,
            "threshold": 10,
            "excessRatio": 10.5,
            "function": "resolveExternalModule"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4842,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getSuggestedImportSource"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4921,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "resolveESModuleSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5129,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "visit"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5216,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getAlternativeContainingModules"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5516,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "forEachSymbolTableInScope"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5740,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isAnySymbolAccessible"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5872,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "getIsDeclarationVisible"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5941,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getMeaningOfEntityNameReference"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6308,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "setTextRange"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6346,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "withContext"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 6425,
            "threshold": 10,
            "excessRatio": 8.7,
            "function": "typeToTypeNodeWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 6749,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "createMappedTypeNodeFromType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 6814,
            "threshold": 10,
            "excessRatio": 2,
            "function": "createAnonymousTypeNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 6888,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "visitAndTransformType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6979,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "createTypeNodeFromObjectType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7036,
            "threshold": 10,
            "excessRatio": 4.5,
            "function": "typeReferenceToTypeNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 7161,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "appendReferenceToType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7263,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "createTypeNodesFromResolvedType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7358,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "addPropertyToElementList"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7477,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "mapToTypeNodes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7588,
            "threshold": 10,
            "excessRatio": 3,
            "function": "signatureToSignatureDeclarationHelper"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 7961,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "symbolToParameterDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8053,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getSymbolChain"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8176,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getSpecifierForModuleSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8242,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "symbolToTypeNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8333,
            "threshold": 10,
            "excessRatio": 2,
            "function": "createAccessFromSymbolChain"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8408,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "typeParameterToName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8490,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "createExpressionFromSymbolChain"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8666,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "serializeTypeForDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8752,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "trackExistingEntityName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8853,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "canReuseTypeNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8987,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "flattenExportAssignedNamespace"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9192,
            "threshold": 10,
            "excessRatio": 8,
            "function": "serializeSymbolWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9416,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "addResult"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9705,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "serializeAsClass"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9806,
            "threshold": 10,
            "excessRatio": 5.1,
            "function": "serializeAsAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 10041,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "serializeMaybeAliasAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10150,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isTypeRepresentableAsFunctionNamespaceMerge"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10344,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "serializeSignatures"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10524,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "formatUnionTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 10606,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "getNameOfSymbolAsWritten"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 10671,
            "threshold": 10,
            "excessRatio": 5.4,
            "function": "determineIfDeclarationIsVisible"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10947,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getRestType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11082,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getBindingElementTypeFromParentType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11180,
            "threshold": 10,
            "excessRatio": 5.6,
            "function": "getTypeForVariableLikeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11419,
            "threshold": 10,
            "excessRatio": 3.8,
            "function": "getWidenedTypeForAssignmentDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11544,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getInitializerTypeFromAssignmentDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 11816,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "widenTypeForVariableLikeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11890,
            "threshold": 10,
            "excessRatio": 5.7,
            "function": "getTypeOfVariableOrParameterOrPropertyWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 12042,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "getTypeOfAccessors"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 12139,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getTypeOfFuncClassEnumModuleWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12180,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getTypeOfAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 12372,
            "threshold": 10,
            "excessRatio": 4.9,
            "function": "getOuterTypeParameters"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 12541,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getBaseConstructorTypeOfClass"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12614,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getBaseTypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12649,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "resolveBaseTypesOfClass"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12732,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "resolveBaseTypesOfInterface"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12770,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isThislessInterface"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12832,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getDeclaredTypeOfTypeAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 12973,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "isThislessType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 13031,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isThisless"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 13215,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "lateBindMember"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 13283,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getResolvedMembersOrExportsOfSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 13647,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getUnionSignatures"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 13734,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "combineUnionParameters"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 13781,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "combineSignaturesOfUnionMembers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 13929,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "resolveAnonymousTypeMembers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 14046,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "resolveReverseMappedTypeMembers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 14094,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getLowerBoundOfKeyType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14175,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "addMemberForKeyTypeWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14498,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "isConstTypeVariable"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14591,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getEffectiveConstraintOfIntersection"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 14663,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getImmediateBaseConstraint"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14703,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "computeBaseConstraint"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14870,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getApparentType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14895,
            "threshold": 10,
            "excessRatio": 6.8,
            "function": "createUnionOrIntersectionProperty"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 15211,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getPropertyOfType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 15469,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "fillMissingTypeArguments"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 15495,
            "threshold": 10,
            "excessRatio": 4.9,
            "function": "getSignatureFromDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 15657,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "traverse"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 15683,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getSignaturesOfSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 15741,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getTypePredicateOfSignature"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 15790,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getReturnTypeOfSignature"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 15829,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getReturnTypeFromAnnotation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 16027,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "getIndexInfosOfIndexSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 16098,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getInferredTypeParameterConstraint"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 16292,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getTypeArguments"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 16324,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getTypeFromClassOrInterfaceReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 16384,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getTypeFromTypeAliasReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 16601,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getConditionalFlowTypeOfType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 16650,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "getIntendedTypeFromJSDocTypeReference"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17106,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isResolvedByTypeAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17128,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "mayResolveTypeAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17270,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "createNormalizedTupleType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17415,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "addTypeToUnion"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17456,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "removeSubtypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17535,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "removeRedundantLiteralTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17573,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "removeConstrainedTypeVariables"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17647,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getUnionType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17669,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "getUnionTypeWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17733,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getUnionOrIntersectionTypePredicate"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17804,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "addTypeToIntersection"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17848,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "removeRedundantSupertypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 17868,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "eachUnionContains"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17924,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "intersectUnionsOfPrimitiveTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 17993,
            "threshold": 10,
            "excessRatio": 6.9,
            "function": "getIntersectionType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 18218,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getIndexTypeForMappedType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 18329,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "shouldDeferIndexType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 18337,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getIndexType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 18393,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getTemplateLiteralType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 18583,
            "threshold": 10,
            "excessRatio": 8.8,
            "function": "getPropertyTypeForIndexType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 18878,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getSimplifiedIndexedAccessType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 18927,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getSimplifiedConditionalType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 18999,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "getIndexedAccessTypeOrUndefined"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 19117,
            "threshold": 10,
            "excessRatio": 3.7,
            "function": "getConditionalType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 19342,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getTypeFromImportTypeNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 19501,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getSpreadType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 19711,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getThisType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 19781,
            "threshold": 10,
            "excessRatio": 5.7,
            "function": "getTypeFromTypeNodeWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 19921,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getMappedType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20076,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getObjectTypeInstantiation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20168,
            "threshold": 10,
            "excessRatio": 2,
            "function": "containsReference"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 20234,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "instantiateConstituent"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20382,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "instantiateTypeWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20506,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "isContextSensitive"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 20623,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "isTypeDerivedFrom"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20685,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "elaborateError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 20763,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "elaborateArrowFunction"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20854,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "elaborateElementwise"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 20934,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "elaborateIterableOrArrayLikeTargetElementwise"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21036,
            "threshold": 10,
            "excessRatio": 2,
            "function": "elaborateJsxComponents"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 21173,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "generateObjectLiteralElements"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21238,
            "threshold": 10,
            "excessRatio": 8.1,
            "function": "compareSignaturesRelated"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 21375,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "compareTypePredicateRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21477,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "isEnumTypeRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21542,
            "threshold": 10,
            "excessRatio": 6.8,
            "function": "isSimpleTypeRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21596,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "isTypeRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 21632,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getNormalizedType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21694,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "checkTypeRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21806,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "reportIncompatibleStack"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 21942,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "reportRelationError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 22014,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "tryElaborateErrorsForPrimitivesAndObjects"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22073,
            "threshold": 10,
            "excessRatio": 6.4,
            "function": "isRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22188,
            "threshold": 10,
            "excessRatio": 3,
            "function": "reportErrorResults"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22294,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "hasExcessProperties"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22380,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "unionOrIntersectionRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22449,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "typeRelatedToSomeType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 22565,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "typeArgumentsRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22627,
            "threshold": 10,
            "excessRatio": 3.8,
            "function": "recursiveTypeRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22777,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "structuredTypeRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 22852,
            "threshold": 10,
            "excessRatio": 22.2,
            "function": "structuredTypeRelatedToWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 23477,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "typeRelatedToDiscriminatedType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 23596,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "propertyRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 23664,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "reportUnmatchedProperty"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 23719,
            "threshold": 10,
            "excessRatio": 7.3,
            "function": "propertiesRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 23891,
            "threshold": 10,
            "excessRatio": 3.8,
            "function": "signaturesRelatedTo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 24056,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "membersRelatedToIndexInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 24231,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "discriminateTypeByDiscriminableItems"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 24305,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getVariancesWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 24583,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getRecursionIdentity"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 24680,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "compareSignaturesIdentical"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 24820,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getSingleBaseForNonAugmentingSubtype"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 24934,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getWidenedLiteralType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 25046,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getDefinitelyFalsyPartOfType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 25294,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getWidenedTypeWithContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 25339,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "reportWideningErrorsInType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 25377,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "reportImplicitAny"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 25658,
            "threshold": 10,
            "excessRatio": 2,
            "function": "couldContainTypeVariables"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 25817,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getUnmatchedProperties"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 25929,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isValidTypeForTemplateLiteralPlaceholder"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 25989,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "inferFromLiteralPartsToTemplateLiteral"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 26065,
            "threshold": 10,
            "excessRatio": 7.8,
            "function": "inferFromTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 26424,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "inferToMultipleTypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 26499,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "inferToMappedType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 26565,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "inferToTemplateLiteralType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 26643,
            "threshold": 10,
            "excessRatio": 5.1,
            "function": "inferFromObjectTypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 26803,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "inferFromIndexTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 26894,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getInferredType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 26969,
            "threshold": 10,
            "excessRatio": 3.9,
            "function": "getCannotFindNameDiagnosticForName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 27054,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getFlowCacheKey"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 27097,
            "threshold": 10,
            "excessRatio": 4.3,
            "function": "isMatchingReference"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 27179,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "tryGetNameFromEntityNameExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 27420,
            "threshold": 10,
            "excessRatio": 4.9,
            "function": "getTypeFactsWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 27831,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "mapType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 27958,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isEvolvingArrayOperationTarget"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 27983,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getExplicitTypeOfSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 28019,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getTypeOfDottedName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 28053,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getEffectsSignature"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28124,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "isReachableFlowNodeWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 28196,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isPostSuperFlowNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28239,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "isConstantReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28297,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "getTypeAtFlowNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28407,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getTypeAtFlowAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 28478,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getTypeAtFlowCall"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28580,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getTypeAtFlowBranchLabel"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 28633,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getTypeAtFlowLoopLabel"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28731,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getCandidateDiscriminantPropertyAccess"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 28814,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "narrowTypeByDiscriminantProperty"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 28885,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "narrowTypeByBinaryExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29014,
            "threshold": 10,
            "excessRatio": 2,
            "function": "narrowTypeByEquality"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29082,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "narrowTypeBySwitchOnDiscriminant"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29124,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "narrowTypeByTypeName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29217,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "narrowTypeByConstructor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29267,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "narrowTypeByInstanceof"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29323,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getNarrowedTypeWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29375,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "narrowTypeByCallExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29398,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "narrowTypeByTypePredicate"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29426,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "narrowType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29485,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getTypeOfSymbolAtLocation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29584,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "markNodeAssignments"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 29628,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "extendAssignmentPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29797,
            "threshold": 10,
            "excessRatio": 4.1,
            "function": "markLinkedReferences"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29883,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "markPropertyAliasReferenced"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 29938,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "markJsxAliasReferenced"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 30004,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "markExportSpecifierAliasReferenced"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30025,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "markDecoratorAliasReferenced"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30132,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "markEntityNameOrEntityExpressionAsReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30185,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getNarrowedTypeOfSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30278,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "checkIdentifierCalculateNodeCheckFlags"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30343,
            "threshold": 10,
            "excessRatio": 7.6,
            "function": "checkIdentifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30533,
            "threshold": 10,
            "excessRatio": 2,
            "function": "checkNestedBlockScopedBinding"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30680,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkThisExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30750,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "tryGetThisTypeAt"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30814,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "getClassNameFromPrototypeMethod"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 30892,
            "threshold": 10,
            "excessRatio": 4.1,
            "function": "checkSuperExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 31074,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "isLegalUsageOfSuperExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 31146,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getContextualThisParameterType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 31199,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getContextuallyTypedParameterType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 31247,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getContextualTypeForBindingElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 31461,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getContextualTypeForBinaryOperand"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 31521,
            "threshold": 10,
            "excessRatio": 3.7,
            "function": "getContextualTypeForAssignmentDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 31742,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getContextualTypeForObjectLiteralElement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 31868,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "isPossiblyDiscriminantValue"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 32038,
            "threshold": 10,
            "excessRatio": 3.9,
            "function": "getContextualType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 32331,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "combineIntersectionParameters"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 32378,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "combineSignaturesOfIntersectionMembers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 32447,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getContextualSignature"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 32552,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "checkArrayLiteral"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 32662,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "checkComputedPropertyName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 32750,
            "threshold": 10,
            "excessRatio": 6.1,
            "function": "checkObjectLiteral"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 33044,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "createJsxAttributesTypeFromAttributesProperty"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 33277,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getJsxNamespaceContainerForImplicitImport"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 33303,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getJsxNamespaceAt"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 33611,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isKnownProperty"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 33714,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "checkPropertyAccessibilityAtLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 33874,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "reportObjectPossiblyNullOrUndefinedError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 34108,
            "threshold": 10,
            "excessRatio": 6.2,
            "function": "checkPropertyAccessExpressionOrQualifiedName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 34236,
            "threshold": 10,
            "excessRatio": 2,
            "function": "isUncheckedJSSuggestion"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 34253,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getFlowTypeOfAccessExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 34306,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkPropertyNotUsedBeforeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 34396,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "reportNonexistentProperty"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 34623,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "markPropertyAsReferenced"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 34788,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkElementAccessExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 34921,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "hasCorrectArity"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 35022,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getSingleSignature"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35076,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "inferTypeArguments"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35176,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getSpreadArgumentType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35306,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "checkTagNameDoesNotExpectTooManyArguments"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35395,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getSignatureApplicabilityError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35509,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getEffectiveCallArguments"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 35589,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getLegacyDecoratorArgumentCount"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35659,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getArgumentArityError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 35746,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getTypeArgumentArityError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 35789,
            "threshold": 10,
            "excessRatio": 4.4,
            "function": "resolveCall"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 36035,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "chooseOverload"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 36257,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "resolveCallExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 36384,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "resolveNewExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 36498,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isConstructorAccessible"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 36535,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "invocationErrorDetails"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 36765,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getJSXFragmentType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 36949,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isJSConstructor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 36998,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getSymbolOfExpando"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 37063,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "checkCallExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 37144,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getDeprecatedSuggestionNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 37187,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkImportCallExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 37327,
            "threshold": 10,
            "excessRatio": 2,
            "function": "isValidConstAssertionArgument"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 37464,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getInstantiatedTypePart"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 37593,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getTupleElementLabelFromBindingElement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 37811,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getMinArgumentCount"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 37900,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "assignContextualParameterTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 38083,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getESDecoratorCallSignature"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 38263,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getLegacyDecoratorCallSignature"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 38436,
            "threshold": 10,
            "excessRatio": 4.4,
            "function": "getReturnTypeFromBody"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 38788,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 38836,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkFunctionExpressionOrObjectLiteralMethod"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 38876,
            "threshold": 10,
            "excessRatio": 2,
            "function": "contextuallyCheckFunctionExpressionOrObjectLiteralMethod"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 38975,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isReadonlyAssignmentDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39022,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "isAssignmentToReadonlyEntity"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39126,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "checkAwaitGrammar"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39219,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkPrefixUnaryExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39335,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "isTypeAssignableToKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 39427,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkInExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 39476,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkObjectLiteralDestructuringPropertyAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 39540,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkArrayLiteralDestructuringElementAssignment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39641,
            "threshold": 10,
            "excessRatio": 3.7,
            "function": "isSideEffectFree"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39896,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "getSyntacticNullishnessSemantics"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 39957,
            "threshold": 10,
            "excessRatio": 11.9,
            "function": "checkBinaryLikeExpressionWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 40401,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkNaNEquality"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 40435,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "checkYieldExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 40605,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkDeclarationInitializer"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 40663,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "padTupleType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 40702,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "isLiteralOfContextualType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 40730,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "isConstContext"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 40772,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "instantiateTypeWithSingleGenericCallSignature"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 40953,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getQuickTypeOfExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41014,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkConstEnumAccess"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41066,
            "threshold": 10,
            "excessRatio": 5.6,
            "function": "checkExpressionWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 41214,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkTypeParameterDeferred"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41237,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "checkParameter"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 41282,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "checkTypePredicate"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41374,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "checkSignatureDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41419,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "checkSignatureDeclarationDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41483,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkClassForDuplicateDeclarations"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 41688,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkMethodDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 41777,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "checkConstructorDeclarationDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 41860,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkAccessorDeclarationDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 42032,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkTupleType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 42075,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkIndexedAccessIndexType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 42216,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getEffectiveDeclarationFlags"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 42242,
            "threshold": 10,
            "excessRatio": 4.4,
            "function": "checkFunctionOrConstructorSymbolWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 42318,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "reportImplementationExpectedError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 42517,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkExportsOnMergedDeclarationsWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 42577,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getDeclarationSpaces"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 42651,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getPromisedTypeOfPromise"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 42855,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getAwaitedTypeNoAlias"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 42993,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkAsyncFunctionReturnType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 43092,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkGrammarDecorator"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 43165,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkDecorator"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 43272,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getEntityNameForDecoratorMetadataFromTypeList"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 43318,
            "threshold": 10,
            "excessRatio": 2,
            "function": "checkDecorators"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 43502,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkFunctionOrMethodDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 43593,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "checkUnusedIdentifiers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 43651,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "checkUnusedClassMembers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 43954,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "needCollisionCheckForIdentifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 44139,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkVarDeclaredNamesNotShadowed"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 44212,
            "threshold": 10,
            "excessRatio": 7.5,
            "function": "checkVariableLikeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 44500,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "helper"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 44649,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getSyntacticTruthySemantics"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 44714,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "checkForOfStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 44847,
            "threshold": 10,
            "excessRatio": 4,
            "function": "getIteratedTypeOrElementType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 44967,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isES2015OrLaterIterable"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 45028,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "combineIterationTypes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 45082,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getIterationTypesOfIterable"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 45164,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getIterationTypesOfIterableWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 45306,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getIterationTypesOfIterableSlow"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 45506,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "getIterationTypesOfMethod"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 45685,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkReturnStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 45905,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "checkIndexConstraints"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 45937,
            "threshold": 10,
            "excessRatio": 2,
            "function": "checkIndexConstraintForProperty"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 45965,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "checkIndexConstraintForIndexSignature"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 45984,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkTypeNameIsReserved"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46015,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkUnmatchedJSDocParameters"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46136,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "areTypeParametersIdentical"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46182,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getFirstTransformableStaticClassElement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46210,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkClassExpressionExternalHelpers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46259,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkClassLikeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 46467,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "checkMemberForOverrideModifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46565,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "issueMemberSpecificError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 46662,
            "threshold": 10,
            "excessRatio": 5.1,
            "function": "checkKindsOfPropertyMemberOverrides"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 46913,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "checkPropertyInitialization"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 47054,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "computeEnumMemberValue"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 47092,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "computeConstantEnumMemberValue"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47125,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "evaluateEntityNameExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47304,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "checkModuleDeclarationDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47427,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkModuleAugmentationElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47492,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "checkExternalImportOrExportDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47550,
            "threshold": 10,
            "excessRatio": 6.6,
            "function": "checkAliasSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 47717,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "resolveAliasWithDeprecationCheck"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47762,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "checkImportAttributes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47814,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "checkImportDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47861,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkImportEqualsDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 47902,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "checkExportDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 47970,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "checkExportSpecifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 48003,
            "threshold": 10,
            "excessRatio": 5.4,
            "function": "checkExportAssignment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 48214,
            "threshold": 10,
            "excessRatio": 10.8,
            "function": "checkSourceElementWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 48495,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getTypeFromJSDocVariadicType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 48558,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "checkDeferredNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 48847,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "populateSymbols"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 49054,
            "threshold": 10,
            "excessRatio": 6.1,
            "function": "getSymbolOfNameOrPropertyAccessExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 49235,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "resolveJSDocMemberName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 49256,
            "threshold": 10,
            "excessRatio": 7.8,
            "function": "getSymbolAtLocation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 49444,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getTypeOfNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 49675,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getReferencedExportContainer"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 49736,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isSymbolOfDeclarationWithCollidingName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 49809,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isValueAliasDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 49992,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "calculateNodeCheckFlagWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 50158,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "getTypeReferenceSerializationKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 50614,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "initializeTypeChecker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 50744,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "checkExternalEmitHelpers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 50786,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getHelperNames"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 50855,
            "threshold": 10,
            "excessRatio": 17.9,
            "function": "checkGrammarModifiers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 51290,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "findFirstIllegalModifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 51379,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkGrammarParameterList"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 51474,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkGrammarIndexSignatureParameters"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 51656,
            "threshold": 10,
            "excessRatio": 4,
            "function": "checkGrammarObjectLiteralExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 51811,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "checkGrammarForInOrForOfStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 51918,
            "threshold": 10,
            "excessRatio": 2,
            "function": "checkGrammarAccessor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 51978,
            "threshold": 10,
            "excessRatio": 2,
            "function": "checkGrammarTypeOperatorNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 52037,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "checkGrammarMethod"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 52087,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkGrammarBreakOrContinueStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 52181,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "checkAmbientInitializer"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 52202,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "checkGrammarVariableDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 52424,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "checkGrammarProperty"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 52642,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "checkGrammarImportCallExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/commandLineParser.ts",
        "metrics": {
          "complexity": 564,
          "loc": 3583,
          "functionCount": 128,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 28.2
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.58
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1970,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "parseResponseFile"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2003,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "parseOptionValue"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2455,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "convertObjectLiteralExpressionToJson"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2502,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "convertPropertyValueToJson"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2609,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "convertToTSConfig"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2744,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "serializeOptionBaseObject"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3017,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "parseJsonConfigFileContentWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3067,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getConfigFileSpecs"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3218,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "handleOptionConfigDirTemplateSubstitution"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3363,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "parseConfig"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3555,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "onPropertySet"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3886,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getFileNamesFromConfigSpecs"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4071,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getWildcardDirectories"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4167,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "hasFileWithHigherPriorityExtension"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4234,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getOptionValueWithEmptyStrings"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4260,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getDefaultValueForOption"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/core.ts",
        "metrics": {
          "complexity": 514,
          "loc": 1626,
          "functionCount": 165,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 25.7
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.63
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 871,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "relativeComplement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1370,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "equalOwnProperties"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2196,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "levenshteinWithMax"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2269,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "removeMinAndVersionNumbers"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/corePublic.ts",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "compiler/debug.ts",
        "metrics": {
          "complexity": 276,
          "loc": 1089,
          "functionCount": 82,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.8
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.09
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 389,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "formatEnum"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1081,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getHeader"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1128,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "renderGraph"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1203,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getBoxCharacter"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/emitter.ts",
        "metrics": {
          "complexity": 1606,
          "loc": 5241,
          "functionCount": 415,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 80.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 5.24
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 516,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getOutputPathsFor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 869,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "emitDeclarationFileOrBundle"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 976,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "printSourceFileOrBundle"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1481,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getPipelinePhase"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1538,
            "threshold": 10,
            "excessRatio": 22,
            "function": "pipelineEmitWithHintWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2030,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "emitHelpers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3165,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "emitTokenWithComment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3229,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "parenthesizeExpressionForNoAsi"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4435,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "emitDecoratorsAndModifiers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4597,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "canEmitSimpleArrowHead"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4665,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "emitNodeList"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4715,
            "threshold": 10,
            "excessRatio": 3.7,
            "function": "emitNodeListItems"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4996,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getLeadingLineTerminatorCount"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5053,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getSeparatingLineTerminatorCount"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5096,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getClosingLineTerminatorCount"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5227,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getTextOfNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5255,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getLiteralTextOfNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5326,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "generateNames"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5557,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "makeTempVariableName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5612,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "makeUniqueName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5704,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "generateNameForNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5817,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "emitLeadingCommentsOfNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 6251,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "emitTokenWithSourceMap"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/executeCommandLine.ts",
        "metrics": {
          "complexity": 225,
          "loc": 1143,
          "functionCount": 62,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 11.25
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.14
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 238,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "generateOptionOutput"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 557,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "executeCommandLineWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 799,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "performBuild"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1147,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "reportStatistics"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/expressionToTypeNode.ts",
        "metrics": {
          "complexity": 387,
          "loc": 1254,
          "functionCount": 55,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 19.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.25
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 306,
            "threshold": 10,
            "excessRatio": 8.4,
            "function": "visitExistingNodeTreeSymbolsWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 673,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "serializeTypeOfDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 700,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "typeFromPropertyAssignment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 718,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "serializeReturnTypeForSignature"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 892,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "typeFromExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1053,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "typeFromObjectLiteral"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1246,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "canAddUndefined"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1282,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "typeFromSingleReturnExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/moduleNameResolver.ts",
        "metrics": {
          "complexity": 850,
          "loc": 2478,
          "functionCount": 162,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 42.5
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.48
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 535,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "resolveTypeReferenceDirective"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 810,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getAutomaticTypeDirectiveNames"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1401,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "resolveModuleName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1577,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "tryLoadModuleUsingRootDirs"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1795,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "nodeModuleNameResolverWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1905,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "tryResolve"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1978,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "nodeLoadModuleByRelativeName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2104,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "loadFileNameFromPackageJsonField"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2123,
            "threshold": 10,
            "excessRatio": 6.1,
            "function": "tryAddingExtensions"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2295,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "loadEntrypointsFromTargetExports"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2437,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getPackageJsonInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2481,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "loadNodeModuleFromDirectoryWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2547,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "extensionIsOk"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2611,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "loadModuleFromExports"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2745,
            "threshold": 10,
            "excessRatio": 4.4,
            "function": "loadModuleFromTargetExportOrImport"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2867,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "tryLoadInputFileForPath"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3081,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "loadModuleFromSpecificNodeModulesDirectory"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/moduleSpecifiers.ts",
        "metrics": {
          "complexity": 325,
          "loc": 793,
          "functionCount": 44,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 16.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.64
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 453,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "computeModuleSpecifiers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 583,
            "threshold": 10,
            "excessRatio": 3.7,
            "function": "getLocalModuleSpecifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 809,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getAllModulePathsWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 926,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "tryGetModuleNameFromPaths"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1020,
            "threshold": 10,
            "excessRatio": 5,
            "function": "tryGetModuleNameFromExportsOrImports"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1186,
            "threshold": 10,
            "excessRatio": 2,
            "function": "tryGetModuleNameAsNodeModule"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1249,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "tryDirectoryWithPackageJson"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1364,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "processEnding"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1429,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "tryGetJSExtensionForFile"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/parser.ts",
        "metrics": {
          "complexity": 2444,
          "loc": 6761,
          "functionCount": 558,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 122.2
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 6.76
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1271,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "forEachChildRecursively"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1645,
            "threshold": 10,
            "excessRatio": 2,
            "function": "parseJsonText"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2363,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "parseErrorForMissingSemicolonAfter"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2834,
            "threshold": 10,
            "excessRatio": 5.9,
            "function": "isListElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2999,
            "threshold": 10,
            "excessRatio": 4,
            "function": "isListTerminator"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3124,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "currentNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3185,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isReusableParsingContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3202,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "canReuseNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3317,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "isReusableStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3419,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "parsingContextErrors"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3491,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "parseDelimitedList"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4204,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isUnambiguouslyIndexSignature"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4291,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "isTypeMemberStart"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4587,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "parseNonArrayType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4657,
            "threshold": 10,
            "excessRatio": 4.3,
            "function": "isStartOfType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4964,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "isStartOfLeftHandSideExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4993,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isStartOfExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5249,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "isParenthesizedArrowFunctionExpressionWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5428,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "parseParenthesizedArrowFunctionExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5791,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "parseSimpleUnaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5834,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isUpdateExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6035,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "parseJsxElementOrSelfClosingElementOrFragment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6440,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "parseMemberExpressionRest"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6507,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "parseCallExpressionRest"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 6595,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "parsePrimaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6915,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "parseForOrForInOrForOfStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7155,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "isDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7254,
            "threshold": 10,
            "excessRatio": 4.3,
            "function": "isStartOfStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7358,
            "threshold": 10,
            "excessRatio": 4.6,
            "function": "parseStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7480,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "parseDeclarationWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7839,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isClassMemberStart"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 7988,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "parseModifiers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8041,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "parseClassElement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8357,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "parseImportDeclarationOrImportEqualsDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8565,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "parseImportOrExportSpecifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8876,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "doJSDocScan"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9031,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "skipWhitespaceOrAsterisk"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9056,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "parseTag"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9156,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "parseTagComments"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9571,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "parseTypedefTag"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9719,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "parseChildParameterOrPropertyTag"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9756,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "tryParseChildTag"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 10676,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "extractPragmas"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/path.ts",
        "metrics": {
          "complexity": 203,
          "loc": 535,
          "functionCount": 52,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.78
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 165,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getEncodedRootLength"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 627,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "getNormalizedAbsolutePath"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 967,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "containsPath"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/performance.ts",
        "metrics": {
          "complexity": 35,
          "loc": 120,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.75
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 40
      },
      {
        "file": "compiler/performanceCore.ts",
        "metrics": {
          "complexity": 15,
          "loc": 68,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 79
      },
      {
        "file": "compiler/program.ts",
        "metrics": {
          "complexity": 1043,
          "loc": 4248,
          "functionCount": 212,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 52.15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 4.25
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 935,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getModeForUsageLocationWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 984,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getResolutionModeOverride"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1227,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isProgramUptoDate"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1514,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "createProgram"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2245,
            "threshold": 10,
            "excessRatio": 2,
            "function": "resolveNamesReusingOldState"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2359,
            "threshold": 10,
            "excessRatio": 4.6,
            "function": "tryReuseStructureFromOldProgram"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3041,
            "threshold": 10,
            "excessRatio": 4,
            "function": "walk"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3144,
            "threshold": 10,
            "excessRatio": 4.4,
            "function": "walkArray"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3242,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "checkModifiers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3359,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "collectExternalModuleReferences"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3406,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "collectModuleReferences"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3473,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getSourceFileFromReferenceWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3586,
            "threshold": 10,
            "excessRatio": 4.3,
            "function": "findSourceFileWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3936,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "pathForLibFileWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4013,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "processImportedModules"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4152,
            "threshold": 10,
            "excessRatio": 13.7,
            "function": "verifyCompilerOptions"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4767,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isEmittedFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5149,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getResolutionDiagnostic"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/programDiagnostics.ts",
        "metrics": {
          "complexity": 74,
          "loc": 374,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.7
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.25
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 205,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "createDiagnosticExplainingFile"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 327,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "fileIncludeReasonToRelatedInformation"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/resolutionCache.ts",
        "metrics": {
          "complexity": 288,
          "loc": 1453,
          "functionCount": 68,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14.4
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.45
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 854,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "resolveNamesWithLocalCache"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1146,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "watchFailedLookupLocationOfResolution"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1178,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "createFileWatcherOfAffectingLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1373,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "stopWatchFailedLookupLocationOfResolution"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1500,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "scheduleInvalidateResolutionOfFailedLookupLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1561,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "invalidateResolutionsOfFailedLookupLocations"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/scanner.ts",
        "metrics": {
          "complexity": 1057,
          "loc": 3367,
          "functionCount": 127,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 52.85
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.37
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 474,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "computePositionOfLineAndCharacter"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 556,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isWhiteSpaceSingleLine"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 612,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "couldStartTrivia"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 640,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "skipTrivia"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 761,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "scanConflictMarkerTrivia"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 825,
            "threshold": 10,
            "excessRatio": 3.4,
            "function": "iterateCommentRanges"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1232,
            "threshold": 10,
            "excessRatio": 2,
            "function": "scanNumber"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1377,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "scanHexDigits"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1461,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "scanTemplateAndSetTokenValue"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1542,
            "threshold": 10,
            "excessRatio": 6.8,
            "function": "scanEscapeSequence"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1707,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "scanExtendedUnicodeEscape"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1890,
            "threshold": 10,
            "excessRatio": 16.7,
            "function": "scan"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2466,
            "threshold": 10,
            "excessRatio": 4.6,
            "function": "reScanSlashToken"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2684,
            "threshold": 10,
            "excessRatio": 5.3,
            "function": "scanAlternative"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2941,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "scanCharacterEscape"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3022,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "scanClassRanges"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3081,
            "threshold": 10,
            "excessRatio": 4.1,
            "function": "scanClassSetExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3222,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "scanClassSetSubExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3357,
            "threshold": 10,
            "excessRatio": 4.6,
            "function": "scanClassSetCharacter"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3465,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "scanCharacterClassEscape"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3694,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "scanJsxToken"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3812,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "scanJSDocCommentTextToken"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3840,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "scanJsDocToken"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/semver.ts",
        "metrics": {
          "complexity": 122,
          "loc": 311,
          "functionCount": 24,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.04
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 157,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "comparePrereleaseIdentifiers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 334,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "parseComparator"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/sourcemap.ts",
        "metrics": {
          "complexity": 191,
          "loc": 654,
          "functionCount": 44,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.18
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 176,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "appendSourceMap"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 408,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isRawSourceMap"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/symbolWalker.ts",
        "metrics": {
          "complexity": 35,
          "loc": 190,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.75
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 71,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "visitType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 34
      },
      {
        "file": "compiler/sys.ts",
        "metrics": {
          "complexity": 296,
          "loc": 1627,
          "functionCount": 99,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14.8
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.63
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1286,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "callbackChangingToMissingFileSystemEntry"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1468,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getNodeSystem"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1787,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "readFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1838,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getAccessibleFileSystemEntries"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/tracing.ts",
        "metrics": {
          "complexity": 50,
          "loc": 290,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.5
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.45
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 217,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "dumpTypes"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformer.ts",
        "metrics": {
          "complexity": 98,
          "loc": 526,
          "functionCount": 34,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.75
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 78,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getModuleTransformer"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 126,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getScriptTransformers"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/tsbuild.ts",
        "metrics": {
          "complexity": 2,
          "loc": 115,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/tsbuildPublic.ts",
        "metrics": {
          "complexity": 391,
          "loc": 2119,
          "functionCount": 84,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 19.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.12
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1203,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getNextInvalidatedProjectCreateInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1469,
            "threshold": 10,
            "excessRatio": 7.4,
            "function": "getUpToDateStatusWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1816,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "updateOutputTimestampsWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1890,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "queueReferencingProjects"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1995,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "cleanWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2353,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "reportUpToDateStatus"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/types.ts",
        "metrics": {
          "complexity": 2,
          "loc": 7260,
          "functionCount": 1,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 7.26
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/utilities.ts",
        "metrics": {
          "complexity": 3593,
          "loc": 9148,
          "functionCount": 757,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 179.65
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 9.15
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1086,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "isGrammarError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1918,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "getLiteralText"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2104,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isEffectiveStrictModeSourceFile"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2140,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isBlockScope"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2184,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "isDeclarationWithTypeParameterChildren"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2235,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isLateVisibilityPaintedStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2302,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "tryGetTextOfPropertyName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2328,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "entityNameToString"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2478,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "getErrorSpanForNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2720,
            "threshold": 10,
            "excessRatio": 5.4,
            "function": "isPartOfTypeNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2828,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "traverse"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2856,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "traverse"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3117,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getThisContainer"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3185,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isThisContainerOrFunctionBlock"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3266,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getSuperContainer"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3407,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "nodeCanBeDecorated"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3504,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "classElementOrClassElementParameterIsDecorated"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3559,
            "threshold": 10,
            "excessRatio": 6.6,
            "function": "isExpressionNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3630,
            "threshold": 10,
            "excessRatio": 3.8,
            "function": "isInExpressionContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3976,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isSameEntityName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4090,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getAssignmentDeclarationKindWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4154,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getAssignmentDeclarationPropertyAccessKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4242,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "canHaveModuleSpecifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4261,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "tryGetModuleSpecifierFromDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4293,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "tryGetImportFromModuleSpecifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4319,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getExternalModuleName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4447,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "canHaveFlowNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4473,
            "threshold": 10,
            "excessRatio": 6.8,
            "function": "canHaveJSDoc"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4570,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getJSDocCommentsAndTags"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4622,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getNextJSDocCommentLocation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4766,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getAssignmentTarget"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4876,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "isNodeWithPossibleHoistedDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4991,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getDeclarationFromName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5032,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isIdentifierName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5309,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getPropertyNameForPropertyNameNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5434,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isNamedEvaluationSource"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5556,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getOperatorAssociativity"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5808,
            "threshold": 10,
            "excessRatio": 6.5,
            "function": "getOperatorPrecedence"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5909,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getBinaryOperatorPrecedence"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6573,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "sourceFileMayBeEmitted"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7276,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "modifierToFlag"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 7948,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getDeclarationModifierFlagsFromSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8002,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "accessKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 8233,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "isTypeNodeKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8323,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getLeftmostExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 8718,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "compareMessageText"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9311,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getJSXImplicitImportBase"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9594,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getSubPatternFromSpec"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 9746,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "visitDirectory"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9844,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getScriptKindFromFileName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9960,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getModuleSpecifierEndingPreference"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 9992,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "inferPreference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 10360,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "parsePseudoBigInt"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10667,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "expressionResultIsUnused"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 10708,
            "threshold": 10,
            "excessRatio": 4.5,
            "function": "getContainingNodeArray"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10865,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getNodeModulePathParts"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 10924,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isTypeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11108,
            "threshold": 10,
            "excessRatio": 9.4,
            "function": "isSourceElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11220,
            "threshold": 10,
            "excessRatio": 3.8,
            "function": "evaluate"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11409,
            "threshold": 10,
            "excessRatio": 16.1,
            "function": "resolveNameHelper"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 11835,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "requiresScopeChangeWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 11868,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getIsDeferredContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 11928,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isPrimitiveLiteralValue"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 11962,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "hasInferredType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 12072,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "forEachDynamicImportOrRequireCall"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/utilitiesPublic.ts",
        "metrics": {
          "complexity": 922,
          "loc": 1952,
          "functionCount": 234,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 46.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.95
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 326,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getDefaultLibFileName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 880,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "nameForNamelessJSDocTypedef"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 949,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getNonAssignedNameOfDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1316,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getEffectiveTypeParameterDeclarations"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1609,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "isModifierKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1996,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "isLeftHandSideExpressionKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2087,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isExpressionKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2205,
            "threshold": 10,
            "excessRatio": 6.6,
            "function": "canHaveSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2280,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "canHaveLocals"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2318,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "isDeclarationKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2357,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isDeclarationStatementKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2372,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "isStatementKindButNotDeclarationKind"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/visitorPublic.ts",
        "metrics": {
          "complexity": 67,
          "loc": 1474,
          "functionCount": 15,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.47
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 328,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "visitArrayWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/watch.ts",
        "metrics": {
          "complexity": 157,
          "loc": 830,
          "functionCount": 37,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.77
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 445,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "fileIncludeReasonToDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 787,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getSourceFileVersionAsHashFromText"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/watchPublic.ts",
        "metrics": {
          "complexity": 157,
          "loc": 979,
          "functionCount": 46,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.26
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 420,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "createWatchProgram"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 758,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getVersionedSourceFileByPath"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/watchUtilities.ts",
        "metrics": {
          "complexity": 129,
          "loc": 670,
          "functionCount": 43,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.45
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.23
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 572,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "isIgnoredFileFromWildCardWatching"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "jsTyping/jsTyping.ts",
        "metrics": {
          "complexity": 61,
          "loc": 294,
          "functionCount": 13,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.47
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 103,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "discoverTypings"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 203,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getTypingNames"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "jsTyping/shared.ts",
        "metrics": {
          "complexity": 7,
          "loc": 46,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "jsTyping/types.ts",
        "metrics": {
          "complexity": 1,
          "loc": 99,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/client.ts",
        "metrics": {
          "complexity": 164,
          "loc": 918,
          "functionCount": 106,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.06
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/collectionsImpl.ts",
        "metrics": {
          "complexity": 81,
          "loc": 272,
          "functionCount": 30,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.36
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "harness/compilerImpl.ts",
        "metrics": {
          "complexity": 90,
          "loc": 251,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.5
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.25
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 244,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "compileFiles"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/documentsUtil.ts",
        "metrics": {
          "complexity": 37,
          "loc": 160,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.85
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 37
      },
      {
        "file": "harness/evaluatorImpl.ts",
        "metrics": {
          "complexity": 179,
          "loc": 636,
          "functionCount": 38,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.12
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "harness/fakesHosts.ts",
        "metrics": {
          "complexity": 104,
          "loc": 324,
          "functionCount": 55,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.08
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/findUpDir.ts",
        "metrics": {
          "complexity": 5,
          "loc": 17,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "harness/harnessGlobals.ts",
        "metrics": {
          "complexity": 3,
          "loc": 31,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/harnessIO.ts",
        "metrics": {
          "complexity": 355,
          "loc": 1316,
          "functionCount": 72,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 17.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.32
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 377,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "compileFiles"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 447,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "prepareDeclarationCompilationContext"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 872,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "iterateBaseLine"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 920,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "doSourcemapBaseline"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 966,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "doJsEmitBaseline"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1125,
            "threshold": 10,
            "excessRatio": 2,
            "function": "splitVaryBySettingValue"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1308,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "makeUnitsFromTest"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1568,
            "threshold": 10,
            "excessRatio": 3,
            "function": "runMultifileBaseline"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 2,
          "instability": 0.8,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/harnessLanguageService.ts",
        "metrics": {
          "complexity": 108,
          "loc": 566,
          "functionCount": 88,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.4
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.89
          }
        ],
        "dependencies": {
          "outgoingDependencies": 10,
          "incomingDependencies": 3,
          "instability": 0.77,
          "cohesionScore": 0.4,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/harnessUtils.ts",
        "metrics": {
          "complexity": 93,
          "loc": 313,
          "functionCount": 23,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.04
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 75,
            "threshold": 10,
            "excessRatio": 2,
            "function": "assertInvariantsWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 186,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "serializeNode"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/incrementalUtils.ts",
        "metrics": {
          "complexity": 42,
          "loc": 610,
          "functionCount": 33,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.03
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 7,
          "instability": 0.13,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "harness/projectServiceStateLogger.ts",
        "metrics": {
          "complexity": 58,
          "loc": 459,
          "functionCount": 18,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.53
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 390,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "printPropertyWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 2,
          "instability": 0.6,
          "cohesionScore": 0.39,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/runnerbase.ts",
        "metrics": {
          "complexity": 9,
          "loc": 42,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/sourceMapRecorder.ts",
        "metrics": {
          "complexity": 72,
          "loc": 305,
          "functionCount": 21,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/tsserverLogger.ts",
        "metrics": {
          "complexity": 20,
          "loc": 141,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 12,
          "instability": 0.14,
          "cohesionScore": 0.42,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "healthScore": 58
      },
      {
        "file": "harness/typeWriter.ts",
        "metrics": {
          "complexity": 68,
          "loc": 292,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.46
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "harness/util.ts",
        "metrics": {
          "complexity": 46,
          "loc": 106,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.3
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 84,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getByteOrderMarkLength"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 14
      },
      {
        "file": "harness/vfsUtil.ts",
        "metrics": {
          "complexity": 463,
          "loc": 1222,
          "functionCount": 97,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 23.15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.22
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1587,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "normalizeFileSetEntry"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1611,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "formatPatchWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/vpathUtil.ts",
        "metrics": {
          "complexity": 46,
          "loc": 106,
          "functionCount": 8,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.3
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 66,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "validateComponents"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 8
      },
      {
        "file": "harness/watchUtils.ts",
        "metrics": {
          "complexity": 47,
          "loc": 227,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.35
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.14
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 208,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "diffMap"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "healthScore": 4
      },
      {
        "file": "server/editorServices.ts",
        "metrics": {
          "complexity": 854,
          "loc": 4403,
          "functionCount": 234,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 42.7
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 4.4
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 764,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "forEachAncestorProjectLoad"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 929,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "updateProjectFoundUsingFind"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "server/moduleSpecifierCache.ts",
        "metrics": {
          "complexity": 7,
          "loc": 98,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "server/packageJsonCache.ts",
        "metrics": {
          "complexity": 6,
          "loc": 72,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "server/project.ts",
        "metrics": {
          "complexity": 587,
          "loc": 2500,
          "functionCount": 230,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 29.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.5
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 321,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "setIsEqualTo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "server/protocol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1473,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.47
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 8,
          "instability": 0.11,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "healthScore": 52
      },
      {
        "file": "server/scriptInfo.ts",
        "metrics": {
          "complexity": 172,
          "loc": 545,
          "functionCount": 58,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.82
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "server/scriptVersionCache.ts",
        "metrics": {
          "complexity": 177,
          "loc": 733,
          "functionCount": 59,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.44
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "server/session.ts",
        "metrics": {
          "complexity": 591,
          "loc": 3496,
          "functionCount": 217,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 29.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.5
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2871,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "navigateToItemIsEqualTo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "server/types.ts",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "server/typingInstallerAdapter.ts",
        "metrics": {
          "complexity": 30,
          "loc": 224,
          "functionCount": 8,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.12
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 38
      },
      {
        "file": "server/utilities.ts",
        "metrics": {
          "complexity": 20,
          "loc": 62,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 58
      },
      {
        "file": "server/utilitiesPublic.ts",
        "metrics": {
          "complexity": 17,
          "loc": 115,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 67
      },
      {
        "file": "tsc/tsc.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.33,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/compilerRunner.ts",
        "metrics": {
          "complexity": 52,
          "loc": 299,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.5
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/projectsRunner.ts",
        "metrics": {
          "complexity": 77,
          "loc": 408,
          "functionCount": 26,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.85
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 454,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "createCompilerOptions"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/runner.ts",
        "metrics": {
          "complexity": 58,
          "loc": 237,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.19
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 120,
            "threshold": 10,
            "excessRatio": 3,
            "function": "handleTestConfig"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.36,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/tests.ts",
        "metrics": {
          "complexity": 1,
          "loc": 232,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.16
          }
        ],
        "dependencies": {
          "outgoingDependencies": 232,
          "incomingDependencies": 1,
          "instability": 1,
          "cohesionScore": 0.26,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 92
      },
      {
        "file": "testRunner/transpileRunner.ts",
        "metrics": {
          "complexity": 13,
          "loc": 121,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 85
      },
      {
        "file": "services/breakpoints.ts",
        "metrics": {
          "complexity": 238,
          "loc": 580,
          "functionCount": 29,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 11.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.93
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 152,
            "threshold": 10,
            "excessRatio": 10.5,
            "function": "spanInNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 666,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "spanInCloseBraceToken"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 751,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "spanInCloseParenToken"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/callHierarchy.ts",
        "metrics": {
          "complexity": 211,
          "loc": 578,
          "functionCount": 33,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.93
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 162,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isPossibleCallHierarchyDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 181,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isValidCallHierarchyDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 214,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getCallHierarchyItemName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 260,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getCallHierarchItemContainerName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 347,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "resolveCallHierarchyDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 507,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "collect"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 644,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "collectCallSites"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/classifier.ts",
        "metrics": {
          "complexity": 365,
          "loc": 473,
          "functionCount": 37,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 18.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.58
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 166,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "handleToken"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 281,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getNewEndOfLineState"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 369,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "convertClassification"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 447,
            "threshold": 10,
            "excessRatio": 4.4,
            "function": "isBinaryExpressionOperatorToken"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 511,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "classFromKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 609,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "classifySymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 645,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "getClassificationTypeName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 739,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "classifyLeadingTriviaAndGetTokenStart"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 827,
            "threshold": 10,
            "excessRatio": 3,
            "function": "classifyJSDocComment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 929,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "tryClassifyTripleSlashComment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1108,
            "threshold": 10,
            "excessRatio": 4.1,
            "function": "classifyTokenType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/classifier2020.ts",
        "metrics": {
          "complexity": 96,
          "loc": 276,
          "functionCount": 14,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.8
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 127,
            "threshold": 10,
            "excessRatio": 4.1,
            "function": "visit"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 210,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "classifySymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 236,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "reclassifyByType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codeFixProvider.ts",
        "metrics": {
          "complexity": 26,
          "loc": 111,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 48
      },
      {
        "file": "services/completions.ts",
        "metrics": {
          "complexity": 1523,
          "loc": 5038,
          "functionCount": 178,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 76.15
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 5.04
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 667,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "tryResolve"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 704,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "getCompletionsAtPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1155,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getJSDocParamAnnotation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1272,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "completionInfoFromData"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1431,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getExhaustiveCaseSnippets"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1530,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "typeNodeToExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1687,
            "threshold": 10,
            "excessRatio": 9,
            "function": "createCompletionEntry"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1968,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isClassLikeMemberCompletion"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2016,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getEntryForMemberCompletion"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2303,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "createObjectLiteralMethod"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2587,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getInsertTextAndReplacementSpanForImportCompletion"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2640,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getCompletionEntriesFromSymbols"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2739,
            "threshold": 10,
            "excessRatio": 3,
            "function": "shouldIncludeSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2943,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getCompletionEntryDetails"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3056,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getCompletionEntryCodeActionsAndSourceDisplay"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3256,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getContextualType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3300,
            "threshold": 10,
            "excessRatio": 9.2,
            "function": "getCompletionData"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3707,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "getTypeScriptMemberSymbols"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3803,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "addTypeProperties"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3842,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "addPropertySymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3980,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "getGlobalCompletions"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4107,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "isContextTokenTypeLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4346,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isInJsxText"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4376,
            "threshold": 10,
            "excessRatio": 4.8,
            "function": "computeCommitCharactersAndIsNewIdentifier"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4541,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "tryGetObjectLikeCompletionSymbols"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4640,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "tryGetImportOrExportClauseCompletionSymbols"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4728,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "tryGetClassLikeCompletionSymbols"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4830,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "tryGetContainingJsxElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 4907,
            "threshold": 10,
            "excessRatio": 9.4,
            "function": "isSolelyIdentifierDefinitionLocation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5121,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "filterObjectMembersList"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5317,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "tryGetObjectLikeCompletionContainer"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5399,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getCompletionEntryDisplayNameForSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5505,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "isTypeScriptOnlyKeyword"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5673,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "tryGetObjectTypeDeclarationCompletionContainer"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5792,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "isValidTrigger"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 5885,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "getCandidate"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6093,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "charactersFuzzyMatchInString"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/documentHighlights.ts",
        "metrics": {
          "complexity": 143,
          "loc": 477,
          "functionCount": 29,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.59
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 138,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "getHighlightSpans"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 294,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getNodesToSearchForModifier"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/documentRegistry.ts",
        "metrics": {
          "complexity": 45,
          "loc": 280,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.25
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.4
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 254,
            "threshold": 10,
            "excessRatio": 2,
            "function": "acquireOrUpdateDocument"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/exportInfoMap.ts",
        "metrics": {
          "complexity": 101,
          "loc": 551,
          "functionCount": 21,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.84
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 281,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "rehydrateCachedInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 368,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "isImportable"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 635,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "forEachNameOfDefaultExport"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/findAllReferences.ts",
        "metrics": {
          "complexity": 706,
          "loc": 2177,
          "functionCount": 114,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 35.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.18
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 338,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getContextNodeForNodeEntry"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 408,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getContextNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 758,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "getPrefixAndSuffixText"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 921,
            "threshold": 10,
            "excessRatio": 4,
            "function": "declarationIsWriteAccess"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 985,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getReferencedSymbolsForNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1172,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getReferencedSymbolsForModule"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1247,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getReferencedSymbolsSpecial"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1301,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getReferencedSymbolsForSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1519,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "searchForImportsOfExport"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1556,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "eachExportReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1629,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getSymbolScope"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1705,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "eachSymbolReferenceInFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1749,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "someSignatureUsage"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1828,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "isValidReferencePosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1910,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getReferencesAtLocation"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2002,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "getReferencesAtExportSpecifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2244,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "addImplementationReferences"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2406,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getReferencesForThisKeyword"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2536,
            "threshold": 10,
            "excessRatio": 3,
            "function": "forEachRelatedSymbol"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/getEditsForFileRename.ts",
        "metrics": {
          "complexity": 58,
          "loc": 263,
          "functionCount": 19,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.9
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/goToDefinition.ts",
        "metrics": {
          "complexity": 215,
          "loc": 595,
          "functionCount": 31,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 116,
            "threshold": 10,
            "excessRatio": 5.6,
            "function": "getDefinitionAtPosition"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 342,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getReferenceAtPosition"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 427,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getFirstTypeArgumentDefinitions"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 452,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getTypeDefinitionAtPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 695,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isDefinitionVisible"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/importTracker.ts",
        "metrics": {
          "complexity": 206,
          "loc": 635,
          "functionCount": 36,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.12
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 186,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "handleDirectImports"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 338,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "handleImport"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 586,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getExport"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 762,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "skipExportSpecifierSymbol"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/inlayHints.ts",
        "metrics": {
          "complexity": 239,
          "loc": 875,
          "functionCount": 34,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 11.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.92
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 158,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "visitor"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 264,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "visitVariableLikeDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 293,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "visitCallOrNewExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 369,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isHintableLiteral"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 525,
            "threshold": 10,
            "excessRatio": 8.3,
            "function": "visitForDisplayParts"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/jsDoc.ts",
        "metrics": {
          "complexity": 130,
          "loc": 543,
          "functionCount": 24,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.81
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 288,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getCommentDisplayParts"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 476,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getDocCommentTemplateAtPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 561,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getCommentOwnerInfoWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/mapCode.ts",
        "metrics": {
          "complexity": 42,
          "loc": 282,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.41
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 256,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "matchNode"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 5
      },
      {
        "file": "services/navigateTo.ts",
        "metrics": {
          "complexity": 46,
          "loc": 153,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 20
      },
      {
        "file": "services/navigationBar.ts",
        "metrics": {
          "complexity": 304,
          "loc": 916,
          "functionCount": 49,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.05
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 324,
            "threshold": 10,
            "excessRatio": 8.2,
            "function": "addChildrenRecursively"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 627,
            "threshold": 10,
            "excessRatio": 4.6,
            "function": "tryMergeEs5Class"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 738,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "shouldReallyMerge"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 827,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getItemName"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 895,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "shouldAppearInPrimaryNavBarMenu"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1029,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getFunctionOrClassName"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/organizeImports.ts",
        "metrics": {
          "complexity": 195,
          "loc": 741,
          "functionCount": 44,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.47
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 76,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "organizeImports"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 297,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "removeUnusedImports"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 422,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "coalesceImportsWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 712,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "detectNamedImportOrganizationBySort"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/outliningElementsCollector.ts",
        "metrics": {
          "complexity": 133,
          "loc": 365,
          "functionCount": 25,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.22
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 90,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "visitNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 234,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "getOutliningSpanForNode"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/pasteEdits.ts",
        "metrics": {
          "complexity": 12,
          "loc": 163,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 88
      },
      {
        "file": "services/patternMatcher.ts",
        "metrics": {
          "complexity": 132,
          "loc": 348,
          "functionCount": 29,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.16
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 175,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "matchTextChunk"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 301,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "tryCamelCaseMatch"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 531,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "charIsPunctuation"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/preProcess.ts",
        "metrics": {
          "complexity": 109,
          "loc": 368,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.45
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.23
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 97,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "tryConsumeImport"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 203,
            "threshold": 10,
            "excessRatio": 2,
            "function": "tryConsumeExport"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 295,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "tryConsumeDefine"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 337,
            "threshold": 10,
            "excessRatio": 2,
            "function": "processImports"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/preparePasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 44,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/refactorProvider.ts",
        "metrics": {
          "complexity": 4,
          "loc": 24,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/rename.ts",
        "metrics": {
          "complexity": 64,
          "loc": 220,
          "functionCount": 10,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.2
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.1
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 67,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "getRenameInfoForNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 130,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "wouldRenameInOtherNodeModules"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/services.ts",
        "metrics": {
          "complexity": 704,
          "loc": 2816,
          "functionCount": 238,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 35.2
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.82
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1186,
            "threshold": 10,
            "excessRatio": 4.5,
            "function": "visit"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1469,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "updateLanguageServiceSourceFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1701,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "synchronizeHostDataWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2355,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "shouldGetType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2497,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getNameOrDottedNameSpan"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2767,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getJsxClosingTagAtPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2783,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getLinkedEditingRangeAtPosition"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2853,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "toggleLineComment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2919,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "toggleMultilineComment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3522,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getContainingObjectLiteralElementWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3560,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getPropertySymbolsFromContextualType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/signatureHelp.ts",
        "metrics": {
          "complexity": 164,
          "loc": 643,
          "functionCount": 37,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.14
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 181,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getCandidateOrTypeInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 315,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getImmediatelyContainingArgumentInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 448,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getContextualSignatureLocationInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 500,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getArgumentIndexOrCount"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 647,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "createSignatureHelpItems"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/smartSelection.ts",
        "metrics": {
          "complexity": 97,
          "loc": 263,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.85
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 52,
            "threshold": 10,
            "excessRatio": 4.5,
            "function": "getSmartSelectionRange"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/sourcemaps.ts",
        "metrics": {
          "complexity": 57,
          "loc": 192,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.85
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 9
      },
      {
        "file": "services/stringCompletions.ts",
        "metrics": {
          "complexity": 304,
          "loc": 940,
          "functionCount": 57,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.13
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 353,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "kindModifiersFromExtension"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 404,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "getStringLiteralCompletionEntries"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 758,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getCompletionEntriesForDirectoryFragment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 846,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getFilenameWithExtensionOption"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 915,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "addCompletionEntriesFromPathsOrExportsOrImports"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 978,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getCompletionEntriesForNonRelativeModules"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1162,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "getModulesForPathsPattern"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/suggestionDiagnostics.ts",
        "metrics": {
          "complexity": 109,
          "loc": 276,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.45
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 68,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "computeSuggestionDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 107,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "check"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 260,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isFixablePromiseArgument"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/symbolDisplay.ts",
        "metrics": {
          "complexity": 267,
          "loc": 806,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.69
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 116,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getSymbolKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 138,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 258,
            "threshold": 10,
            "excessRatio": 17.4,
            "function": "getSymbolDisplayPartsDocumentationAndSymbolKindWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/textChanges.ts",
        "metrics": {
          "complexity": 387,
          "loc": 1471,
          "functionCount": 143,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 19.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.47
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 355,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getAdjustedStartPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1582,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getInsertionPositionAtSourceFileTop"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1675,
            "threshold": 10,
            "excessRatio": 3,
            "function": "deleteDeclaration"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/transform.ts",
        "metrics": {
          "complexity": 2,
          "loc": 20,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/transpile.ts",
        "metrics": {
          "complexity": 26,
          "loc": 183,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 115,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "transpileWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 36
      },
      {
        "file": "services/types.ts",
        "metrics": {
          "complexity": 9,
          "loc": 1162,
          "functionCount": 6,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.16
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 55
      },
      {
        "file": "services/utilities.ts",
        "metrics": {
          "complexity": 1228,
          "loc": 3347,
          "functionCount": 276,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 61.4
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.35
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 411,
            "threshold": 10,
            "excessRatio": 3.9,
            "function": "getMeaningFromDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 477,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getMeaningFromLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 724,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "isLiteralNameOfPropertyDeclarationOrIndexAccess"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 754,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getContainerNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 785,
            "threshold": 10,
            "excessRatio": 6,
            "function": "getNodeKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 969,
            "threshold": 10,
            "excessRatio": 7,
            "function": "isCompletedNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1329,
            "threshold": 10,
            "excessRatio": 10.5,
            "function": "getAdjustedLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1649,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "nodeContainsPosition"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1744,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "find"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1868,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isInsideJsxElementOrAttribute"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1931,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isInsideJsxElementTraversal"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2039,
            "threshold": 10,
            "excessRatio": 3.7,
            "function": "getPossibleTypeArgumentsInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2166,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getNodeModifiers"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2617,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "insertImports"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2868,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "displayPartKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2970,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "buildLinkParts"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3470,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "syntaxRequiresTrailingSemicolonOrASI"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3495,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "nodeIsASICandidate"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4194,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "newCaseClauseTracker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4259,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "fileShouldUseJavaScriptRequire"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "tsserver/common.ts",
        "metrics": {
          "complexity": 5,
          "loc": 31,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "tsserver/nodeServer.ts",
        "metrics": {
          "complexity": 156,
          "loc": 612,
          "functionCount": 42,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.04
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 624,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getGlobalTypingsCacheLocation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 649,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getNonWindowsCacheLocation"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "tsserver/server.ts",
        "metrics": {
          "complexity": 6,
          "loc": 45,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0.33,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "typescript/typescript.ts",
        "metrics": {
          "complexity": 1,
          "loc": 22,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0.33,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/decorators.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 105,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/decorators.legacy.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/dom.asynciterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "lib/dom.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15363,
          "functionCount": 0,
          "duplicationRatio": 0.27
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 15.36
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.82
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "lib/dom.iterable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 50,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/dom.iterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 300,
          "functionCount": 0,
          "duplicationRatio": 0.45
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.5
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.51
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 31
      },
      {
        "file": "lib/es2015.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 60,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.core.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 128,
          "functionCount": 0,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.generator.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.iterable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 204,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.02
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 94
      },
      {
        "file": "lib/es2015.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 0,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.proxy.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.reflect.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 38,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.symbol.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2015.symbol.wellknown.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2016.array.include.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2016.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2016.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2016.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.arraybuffer.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.date.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0.5
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.67
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 31
      },
      {
        "file": "lib/es2017.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.sharedmemory.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 30,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2017.typedarrays.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 27,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.asyncgenerator.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.asynciterable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 55,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2018.regexp.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 25,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2019.symbol.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.bigint.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 147,
          "functionCount": 0,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.date.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 195,
          "functionCount": 0,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.number.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.sharedmemory.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2020.symbol.wellknown.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2021.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2021.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2021.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 50,
          "functionCount": 0,
          "duplicationRatio": 0.05
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2021.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2021.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2021.weakref.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 19,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.error.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 46,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.regexp.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 14,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2022.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2023.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 316,
          "functionCount": 0,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.05
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 80
      },
      {
        "file": "lib/es2023.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2023.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2023.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2023.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 32,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.arraybuffer.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.object.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 8,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.regexp.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.sharedmemory.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 12,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es2024.string.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/es5.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1105,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 56
      },
      {
        "file": "lib/es5.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.array.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.collection.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 23,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.decorators.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.disposable.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 54,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.float16.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 88,
          "functionCount": 0,
          "duplicationRatio": 0.52
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.04
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 16
      },
      {
        "file": "lib/esnext.full.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.intl.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.iterator.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 31,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/esnext.promise.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/header.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/scripthost.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 87,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/webworker.asynciterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "lib/webworker.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5939,
          "functionCount": 0,
          "duplicationRatio": 0.79
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 5.94
          },
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.58
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "lib/webworker.importscripts.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "lib/webworker.iterable.generated.d.ts",
        "metrics": {
          "complexity": 1,
          "loc": 157,
          "functionCount": 0,
          "duplicationRatio": 0.76
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.52
          }
        ],
        "dependencies": {
          "incomingDependencies": 0,
          "outgoingDependencies": 0,
          "instability": 0,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "typingsInstallerCore/typingsInstaller.ts",
        "metrics": {
          "complexity": 84,
          "loc": 473,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.58
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "watchGuard/watchGuard.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "typingsInstaller/nodeTypingsInstaller.ts",
        "metrics": {
          "complexity": 38,
          "loc": 190,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.9
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 0,
          "instability": 1,
          "cohesionScore": 0,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 36
      },
      {
        "file": "deprecatedCompat/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 5,
          "instability": 0.29,
          "cohesionScore": 0.17,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/_namespaces/ts.moduleSpecifiers.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/_namespaces/ts.performance.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 10,
          "instability": 0.09,
          "cohesionScore": 0.33,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 77,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 74,
          "incomingDependencies": 82,
          "instability": 0.47,
          "cohesionScore": 0.34,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/factory/baseNodeFactory.ts",
        "metrics": {
          "complexity": 11,
          "loc": 41,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 91
      },
      {
        "file": "compiler/factory/emitHelpers.ts",
        "metrics": {
          "complexity": 78,
          "loc": 1112,
          "functionCount": 42,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.9
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/factory/emitNode.ts",
        "metrics": {
          "complexity": 54,
          "loc": 229,
          "functionCount": 40,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.7
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.15
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 2
      },
      {
        "file": "compiler/factory/nodeChildren.ts",
        "metrics": {
          "complexity": 10,
          "loc": 45,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/factory/nodeConverters.ts",
        "metrics": {
          "complexity": 28,
          "loc": 177,
          "functionCount": 10,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 47
      },
      {
        "file": "compiler/factory/nodeFactory.ts",
        "metrics": {
          "complexity": 1444,
          "loc": 6081,
          "functionCount": 504,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 72.2
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 6.08
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1452,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "createToken"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1554,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "createModifiersFromModifierFlags"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1764,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "createPropertyDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1793,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "updatePropertyDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6363,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "cloneNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 6968,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "mergeLexicalEnvironment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7061,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "replaceModifiers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7182,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "getDefaultTagNameForKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 7232,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getCookedText"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7314,
            "threshold": 10,
            "excessRatio": 4.9,
            "function": "getTransformFlagsSubtreeExclusions"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 7425,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "mergeEmitNode"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/factory/nodeTests.ts",
        "metrics": {
          "complexity": 228,
          "loc": 912,
          "functionCount": 227,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 11.4
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.04
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/factory/parenthesizerRules.ts",
        "metrics": {
          "complexity": 123,
          "loc": 416,
          "functionCount": 37,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 6.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.39
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 123,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "binaryOperandNeedsParentheses"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 609,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "hasJSDocPostfixQuestion"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/factory/utilities.ts",
        "metrics": {
          "complexity": 359,
          "loc": 1248,
          "functionCount": 104,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 17.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.25
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 697,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "createExternalHelpersImportDeclarationIfNeeded"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 785,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getLocalNameForExternalImport"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1014,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "tryGetPropertyNameOfBindingOrAssignmentElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1119,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "canHaveIllegalDecorators"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1369,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "nextState"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/factory/utilitiesPublic.ts",
        "metrics": {
          "complexity": 34,
          "loc": 49,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 14,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "canHaveModifiers"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 29
      },
      {
        "file": "compiler/transformers/classFields.ts",
        "metrics": {
          "complexity": 637,
          "loc": 2583,
          "functionCount": 115,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 31.85
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.58
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 459,
            "threshold": 10,
            "excessRatio": 3.2,
            "function": "visitor"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 587,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "classElementVisitor"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 963,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "transformPrivateFieldInitializer"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1148,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "visitPropertyAccessExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1216,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "visitPreOrPostfixUnaryExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1489,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "visitBinaryExpression"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1711,
            "threshold": 10,
            "excessRatio": 3.8,
            "function": "getClassFacts"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1796,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "visitInNewClassLexicalEnvironment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1861,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "visitClassDeclarationInNewClassLexicalEnvironment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1956,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "visitClassExpressionInNewClassLexicalEnvironment"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2098,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "transformClassMembers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2311,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "transformConstructorBody"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2533,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "transformPropertyWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3009,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "visitDestructuringAssignmentTarget"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3178,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "onEmitNode"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/classThis.ts",
        "metrics": {
          "complexity": 14,
          "loc": 91,
          "functionCount": 4,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 82
      },
      {
        "file": "compiler/transformers/declarations.ts",
        "metrics": {
          "complexity": 426,
          "loc": 1772,
          "functionCount": 70,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 21.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.77
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 673,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "ensureType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 720,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isDeclarationAndNotVisible"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 869,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "transformImportDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1003,
            "threshold": 10,
            "excessRatio": 6.6,
            "function": "visitDeclarationSubtree"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1384,
            "threshold": 10,
            "excessRatio": 4.3,
            "function": "transformTopLevelDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1912,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isPreservedDeclarationStatement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1950,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "isProcessedComponent"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/destructuring.ts",
        "metrics": {
          "complexity": 113,
          "loc": 475,
          "functionCount": 23,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.65
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.58
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 99,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "flattenDestructuringAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 386,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "flattenObjectBindingOrAssignmentPattern"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 446,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "flattenArrayBindingOrAssignmentPattern"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/es2015.ts",
        "metrics": {
          "complexity": 797,
          "loc": 3382,
          "functionCount": 174,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 39.85
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 3.38
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 577,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isOrMayContainReturnCompletion"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 633,
            "threshold": 10,
            "excessRatio": 5.3,
            "function": "visitorWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 892,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "visitBreakOrContinueStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1216,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "containsSuperCall"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1533,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "simplifyConstructorInlineSuperReturn"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1618,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "elideUnusedThisCaptureWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1701,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "injectSuperPresenceCheckWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2254,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "addClassMembers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2548,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "transformFunctionBody"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3424,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "convertIterationStatementBodyIfNecessary"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3551,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "createConvertedLoopState"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 3600,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "addExtraDeclarationsForConvertedLoop"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3777,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "createFunctionForBodyOfIterationStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4049,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "processLoopVariableDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4343,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "visitTypeScriptClassWrapper"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 4522,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "visitCallExpressionWithPotentialCapturedThisAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 5033,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "hasSynthesizedDefaultSuperCall"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/es2016.ts",
        "metrics": {
          "complexity": 15,
          "loc": 109,
          "functionCount": 6,
          "duplicationRatio": 0.14
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 79
      },
      {
        "file": "compiler/transformers/es2017.ts",
        "metrics": {
          "complexity": 195,
          "loc": 950,
          "functionCount": 47,
          "duplicationRatio": 0.1
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.75
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.17
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 211,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "argumentsVisitor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 233,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "visitor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 284,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "asyncBodyVisitor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 738,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "transformAsyncFunctionBody"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/es2018.ts",
        "metrics": {
          "complexity": 227,
          "loc": 1265,
          "functionCount": 58,
          "duplicationRatio": 0.11
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 11.35
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.26
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 270,
            "threshold": 10,
            "excessRatio": 3.9,
            "function": "visitorWorker"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/es2019.ts",
        "metrics": {
          "complexity": 9,
          "loc": 45,
          "functionCount": 4,
          "duplicationRatio": 0.12
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/transformers/es2020.ts",
        "metrics": {
          "complexity": 61,
          "loc": 243,
          "functionCount": 12,
          "duplicationRatio": 0.07
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.22
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 166,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "visitOptionalExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/es2021.ts",
        "metrics": {
          "complexity": 13,
          "loc": 96,
          "functionCount": 4,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 85
      },
      {
        "file": "compiler/transformers/esDecorators.ts",
        "metrics": {
          "complexity": 399,
          "loc": 1883,
          "functionCount": 82,
          "duplicationRatio": 0.07
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 19.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.88
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 423,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "visitor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 548,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getHelperVariableName"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 578,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "createClassInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 670,
            "threshold": 10,
            "excessRatio": 5.2,
            "function": "transformClassLike"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1236,
            "threshold": 10,
            "excessRatio": 3.6,
            "function": "partialTransformClassElement"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1495,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "visitPropertyDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1754,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "visitBinaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1860,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "visitPreOrPostfixUnaryExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/esnext.ts",
        "metrics": {
          "complexity": 112,
          "loc": 575,
          "functionCount": 30,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.92
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/generators.ts",
        "metrics": {
          "complexity": 428,
          "loc": 2121,
          "functionCount": 131,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 21.4
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.12
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 461,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "visitJavaScriptInGeneratorFunctionBody"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 500,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "visitJavaScriptContainingYield"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1306,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "transformAndEmitStatementWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1820,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "transformAndEmitSwitchStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2981,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "tryEnterOrLeaveBlock"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 3027,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "writeOperation"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/jsx.ts",
        "metrics": {
          "complexity": 145,
          "loc": 803,
          "functionCount": 38,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.68
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 468,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "transformJsxAttributesToExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/legacyDecorators.ts",
        "metrics": {
          "complexity": 102,
          "loc": 526,
          "functionCount": 39,
          "duplicationRatio": 0.1
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.75
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 123,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "visitor"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 236,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "transformClassDeclarationWithClassDecorators"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/namedEvaluation.ts",
        "metrics": {
          "complexity": 55,
          "loc": 300,
          "functionCount": 17,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.75
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.5
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/taggedTemplate.ts",
        "metrics": {
          "complexity": 12,
          "loc": 95,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 88
      },
      {
        "file": "compiler/transformers/ts.ts",
        "metrics": {
          "complexity": 484,
          "loc": 1876,
          "functionCount": 120,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 24.2
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.88
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 432,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "isElisionBlocked"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 642,
            "threshold": 10,
            "excessRatio": 7.9,
            "function": "visitTypeScript"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 880,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "visitClassDeclaration"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/typeSerializer.ts",
        "metrics": {
          "complexity": 156,
          "loc": 438,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 7.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.46
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 271,
            "threshold": 10,
            "excessRatio": 4.2,
            "function": "serializeTypeNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 367,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "serializeLiteralOfLiteralTypeNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 402,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "serializeUnionOrIntersectionConstituents"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 449,
            "threshold": 10,
            "excessRatio": 2.6,
            "function": "equateSerializedTypeNodes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 490,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "serializeTypeReferenceNode"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/utilities.ts",
        "metrics": {
          "complexity": 203,
          "loc": 654,
          "functionCount": 52,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 10.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.18
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 179,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "collectExternalModuleInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 496,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getNonAssignmentOperatorForCompoundAssignment"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 729,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getAllDecoratorsOfAccessors"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "jsTyping/_namespaces/ts.JsTyping.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "jsTyping/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 8,
          "instability": 0.2,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "jsTyping/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 9,
          "instability": 0.25,
          "cohesionScore": 0.44,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/FourSlash.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 1,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/FourSlashInterface.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 0,
          "incomingDependencies": 0,
          "instability": 0,
          "cohesionScore": 1,
          "percentileUsageRank": 0,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/Harness.LanguageService.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/Harness.SourceMapRecorder.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/Harness.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 11,
          "instability": 0.31,
          "cohesionScore": 0.47,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/Utils.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 4,
          "instability": 0.43,
          "cohesionScore": 0.33,
          "percentileUsageRank": 92,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/collections.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0.33,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/compiler.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/documents.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 6,
          "instability": 0.14,
          "cohesionScore": 0.33,
          "percentileUsageRank": 94,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/evaluator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/fakes.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 5,
          "instability": 0.17,
          "cohesionScore": 0.33,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 4,
          "instability": 0.5,
          "cohesionScore": 0.08,
          "percentileUsageRank": 92,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 21,
          "instability": 0.28,
          "cohesionScore": 0.13,
          "percentileUsageRank": 98,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "harness/_namespaces/vfs.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 7,
          "instability": 0.13,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "harness/_namespaces/vpath.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 7,
          "instability": 0.13,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "server/_namespaces/ts.server.protocol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "server/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 14,
          "incomingDependencies": 14,
          "instability": 0.5,
          "cohesionScore": 0.31,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "server/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 15,
          "instability": 0.25,
          "cohesionScore": 0.13,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "tsc/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/FourSlash.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/Harness.Parallel.Host.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/Harness.Parallel.Worker.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/Harness.Parallel.ts",
        "metrics": {
          "complexity": 1,
          "loc": 5,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.56,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/Harness.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 49,
          "instability": 0.09,
          "cohesionScore": 0.33,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/Utils.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 67,
          "instability": 0.01,
          "cohesionScore": 0,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/documents.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 5,
          "instability": 0.17,
          "cohesionScore": 0,
          "percentileUsageRank": 93,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/evaluator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 21,
          "instability": 0.05,
          "cohesionScore": 0,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/fakes.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 13,
          "instability": 0.07,
          "cohesionScore": 0,
          "percentileUsageRank": 97,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/project.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 7,
          "instability": 0.36,
          "cohesionScore": 0,
          "percentileUsageRank": 95,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 1
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 190,
          "instability": 0.04,
          "cohesionScore": 0.08,
          "percentileUsageRank": 100,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/_namespaces/vfs.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 15,
          "instability": 0.06,
          "cohesionScore": 0,
          "percentileUsageRank": 97,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/_namespaces/vpath.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 4,
          "instability": 0.2,
          "cohesionScore": 0,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/parallel/host.ts",
        "metrics": {
          "complexity": 105,
          "loc": 595,
          "functionCount": 30,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 215,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "startDelayed"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/parallel/shared.ts",
        "metrics": {
          "complexity": 1,
          "loc": 72,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/parallel/worker.ts",
        "metrics": {
          "complexity": 65,
          "loc": 263,
          "functionCount": 23,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.25
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 165,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "executeUnitTests"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/asserts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/base64.ts",
        "metrics": {
          "complexity": 1,
          "loc": 18,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/builder.ts",
        "metrics": {
          "complexity": 3,
          "loc": 115,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/canWatch.ts",
        "metrics": {
          "complexity": 14,
          "loc": 217,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.08
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 75
      },
      {
        "file": "testRunner/unittests/comments.ts",
        "metrics": {
          "complexity": 1,
          "loc": 25,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/compilerCore.ts",
        "metrics": {
          "complexity": 1,
          "loc": 162,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/convertToBase64.ts",
        "metrics": {
          "complexity": 1,
          "loc": 27,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/customTransforms.ts",
        "metrics": {
          "complexity": 18,
          "loc": 196,
          "functionCount": 9,
          "duplicationRatio": 0.13
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 64
      },
      {
        "file": "testRunner/unittests/debugDeprecation.ts",
        "metrics": {
          "complexity": 1,
          "loc": 97,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.17,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/diagnosticCollection.ts",
        "metrics": {
          "complexity": 1,
          "loc": 102,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/factory.ts",
        "metrics": {
          "complexity": 5,
          "loc": 77,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers.ts",
        "metrics": {
          "complexity": 27,
          "loc": 164,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 135,
          "instability": 0.01,
          "cohesionScore": 0.33,
          "percentileUsageRank": 99,
          "isInCycle": false
        },
        "healthScore": 48
      },
      {
        "file": "testRunner/unittests/incrementalParser.ts",
        "metrics": {
          "complexity": 30,
          "loc": 453,
          "functionCount": 22,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.51
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 17
      },
      {
        "file": "testRunner/unittests/jsDocParsing.ts",
        "metrics": {
          "complexity": 4,
          "loc": 424,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.41
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 73
      },
      {
        "file": "testRunner/unittests/jsonParserRecovery.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/moduleResolution.ts",
        "metrics": {
          "complexity": 65,
          "loc": 730,
          "functionCount": 34,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.43
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/parsePseudoBigInt.ts",
        "metrics": {
          "complexity": 1,
          "loc": 70,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/paths.ts",
        "metrics": {
          "complexity": 1,
          "loc": 407,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 74
      },
      {
        "file": "testRunner/unittests/printer.ts",
        "metrics": {
          "complexity": 1,
          "loc": 316,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.05
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 80
      },
      {
        "file": "testRunner/unittests/programApi.ts",
        "metrics": {
          "complexity": 5,
          "loc": 191,
          "functionCount": 2,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/publicApi.ts",
        "metrics": {
          "complexity": 9,
          "loc": 284,
          "functionCount": 4,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.42
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 88
      },
      {
        "file": "testRunner/unittests/regExpScannerRecovery.ts",
        "metrics": {
          "complexity": 1,
          "loc": 80,
          "functionCount": 0,
          "duplicationRatio": 0.24
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.58
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 81
      },
      {
        "file": "testRunner/unittests/reuseProgramStructure.ts",
        "metrics": {
          "complexity": 24,
          "loc": 804,
          "functionCount": 17,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.68
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 15
      },
      {
        "file": "testRunner/unittests/semver.ts",
        "metrics": {
          "complexity": 6,
          "loc": 839,
          "functionCount": 3,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.8
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 66
      },
      {
        "file": "testRunner/unittests/skipJSDocParsing.ts",
        "metrics": {
          "complexity": 3,
          "loc": 54,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/transform.ts",
        "metrics": {
          "complexity": 45,
          "loc": 682,
          "functionCount": 34,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.27
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/typeParameterIsPossiblyReferenced.ts",
        "metrics": {
          "complexity": 1,
          "loc": 38,
          "functionCount": 0,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.BreakpointResolver.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.CallHierarchy.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.Completions.StringCompletions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.Completions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.5,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.FindAllReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 3,
          "instability": 0.4,
          "cohesionScore": 0.33,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.GoToDefinition.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.InlayHints.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.JsDoc.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.MapCode.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.NavigateTo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.NavigationBar.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 2,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.OrganizeImports.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.OutliningElementsCollector.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.PasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.Rename.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.SignatureHelp.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.SmartSelectionRange.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.SymbolDisplay.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.classifier.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.67,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.classifier.v2020.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.codefix.ts",
        "metrics": {
          "complexity": 1,
          "loc": 74,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 74,
          "incomingDependencies": 73,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.formatting.ts",
        "metrics": {
          "complexity": 1,
          "loc": 7,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 8,
          "instability": 0.47,
          "cohesionScore": 0.33,
          "percentileUsageRank": 95,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.preparePasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.addOrRemoveBracesToArrowFunction.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.convertArrowFunctionOrFunctionExpression.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.convertParamsToDestructuredObject.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.convertStringOrTemplateLiteral.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.convertToOptionalChainExpression.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.extractSymbol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.generateGetAccessorAndSetAccessor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.inferFunctionReturnType.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.refactor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 24,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 16,
          "incomingDependencies": 19,
          "instability": 0.46,
          "cohesionScore": 0.5,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.textChanges.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "services/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 62,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 39,
          "incomingDependencies": 138,
          "instability": 0.22,
          "cohesionScore": 0.51,
          "percentileUsageRank": 100,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/formatting/formatting.ts",
        "metrics": {
          "complexity": 314,
          "loc": 1096,
          "functionCount": 50,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.7
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.1
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 489,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "formatSpanWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 657,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getFirstNonDecoratorTokenOfNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 727,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "shouldAddDelta"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 807,
            "threshold": 10,
            "excessRatio": 2.3,
            "function": "processChildNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 900,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "processChildNodes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 978,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "consumeTokenAndAdvanceScanner"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1317,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "applyRuleEdits"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1415,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getOpenTokenForList"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1487,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getIndentationString"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/formatting/formattingContext.ts",
        "metrics": {
          "complexity": 16,
          "loc": 90,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 70
      },
      {
        "file": "services/formatting/formattingScanner.ts",
        "metrics": {
          "complexity": 69,
          "loc": 267,
          "functionCount": 17,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.45
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 176,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "readTokenInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 247,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getNextToken"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/formatting/rule.ts",
        "metrics": {
          "complexity": 1,
          "loc": 34,
          "functionCount": 0,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/formatting/rules.ts",
        "metrics": {
          "complexity": 241,
          "loc": 731,
          "functionCount": 74,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 12.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.44
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 501,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "isBinaryOpContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 629,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isFunctionDeclContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 667,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "nodeIsTypeScriptDeclWithBlockContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 685,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "isAfterCodeBlockContext"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 705,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "isControlDeclContext"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 840,
            "threshold": 10,
            "excessRatio": 2,
            "function": "isTypeArgumentOrParameterOrAssertion"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 911,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "isSemicolonDeletionContext"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/formatting/rulesMap.ts",
        "metrics": {
          "complexity": 27,
          "loc": 119,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 48
      },
      {
        "file": "services/formatting/smartIndenter.ts",
        "metrics": {
          "complexity": 241,
          "loc": 542,
          "functionCount": 31,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 12.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.81
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 82,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getIndentation"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 240,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getIndentationForNodeWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 489,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getListByRange"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 633,
            "threshold": 10,
            "excessRatio": 8.6,
            "function": "nodeWillIndentChild"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/addOrRemoveBracesToArrowFunction.ts",
        "metrics": {
          "complexity": 26,
          "loc": 139,
          "functionCount": 3,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 126,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getConvertibleArrowFunctionAtPosition"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 42
      },
      {
        "file": "services/refactors/convertArrowFunctionOrFunctionExpression.ts",
        "metrics": {
          "complexity": 66,
          "loc": 276,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.38
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 101,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getRefactorActionsToConvertFunctionExpressions"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 197,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getFunctionInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/convertExport.ts",
        "metrics": {
          "complexity": 74,
          "loc": 297,
          "functionCount": 10,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.7
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.49
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 121,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "getInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 184,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "changeExport"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/convertImport.ts",
        "metrics": {
          "complexity": 43,
          "loc": 251,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.25
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 111,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getImportConversionInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 11
      },
      {
        "file": "services/refactors/convertOverloadListToSingleSignature.ts",
        "metrics": {
          "complexity": 42,
          "loc": 252,
          "functionCount": 7,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.26
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 227,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getConvertableOverloadListAtPosition"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 13
      },
      {
        "file": "services/refactors/convertParamsToDestructuredObject.ts",
        "metrics": {
          "complexity": 171,
          "loc": 673,
          "functionCount": 36,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.24
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 216,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "groupReferences"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 365,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "entryToFunctionCall"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 465,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "isValidFunctionDeclaration"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/convertStringOrTemplateLiteral.ts",
        "metrics": {
          "complexity": 48,
          "loc": 246,
          "functionCount": 16,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.4
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.23
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 6
      },
      {
        "file": "services/refactors/convertToOptionalChainExpression.ts",
        "metrics": {
          "complexity": 104,
          "loc": 271,
          "functionCount": 18,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.2
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 213,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "chainStartsWith"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 309,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "convertOccurrences"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/extractSymbol.ts",
        "metrics": {
          "complexity": 471,
          "loc": 1770,
          "functionCount": 55,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 23.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.77
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 195,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "getRefactorActionsToExtractSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 458,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "getRangeToExtract"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 548,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "refineNode"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 610,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "checkNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 657,
            "threshold": 10,
            "excessRatio": 4.8,
            "function": "visit"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1037,
            "threshold": 10,
            "excessRatio": 4.3,
            "function": "extractFunctionInScope"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1368,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "extractConstantInScope"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1494,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "transformFunctionInitializerAndType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1610,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "transformFunctionBody"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1825,
            "threshold": 10,
            "excessRatio": 3.9,
            "function": "collectReadsAndWrites"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2006,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "collectUsages"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 2058,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "recordUsagebySymbol"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/extractType.ts",
        "metrics": {
          "complexity": 70,
          "loc": 395,
          "functionCount": 12,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.32
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 185,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getRangeToExtract"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 237,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "flattenTypeLiteralNodeReference"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 283,
            "threshold": 10,
            "excessRatio": 3,
            "function": "visitor"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/generateGetAccessorAndSetAccessor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 58,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/refactors/helpers.ts",
        "metrics": {
          "complexity": 11,
          "loc": 60,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 2,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 87,
          "isInCycle": true
        },
        "healthScore": 91
      },
      {
        "file": "services/refactors/inferFunctionReturnType.ts",
        "metrics": {
          "complexity": 33,
          "loc": 146,
          "functionCount": 5,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 104,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 36
      },
      {
        "file": "services/refactors/inlineVariable.ts",
        "metrics": {
          "complexity": 34,
          "loc": 207,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.03
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 139,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getInliningInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 232,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getReplacementExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 17
      },
      {
        "file": "services/refactors/moveToFile.ts",
        "metrics": {
          "complexity": 280,
          "loc": 1004,
          "functionCount": 54,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 14
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 467,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "forEachAliasDeclarationInImportOrRequire"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 577,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "addEs6Export"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 619,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getNamesToExportInCommonJS"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 640,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "filterImport"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 977,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "forEachTopLevelDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1055,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "moveStatementsToTargetFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1120,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getExistingLocals"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 4,
          "instability": 0.33,
          "cohesionScore": 0.33,
          "percentileUsageRank": 92,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/refactors/moveToNewFile.ts",
        "metrics": {
          "complexity": 3,
          "loc": 82,
          "functionCount": 1,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addConvertToUnknownForNonOverlappingTypes.ts",
        "metrics": {
          "complexity": 4,
          "loc": 48,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addEmptyExportDeclaration.ts",
        "metrics": {
          "complexity": 1,
          "loc": 29,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addMissingAsync.ts",
        "metrics": {
          "complexity": 9,
          "loc": 111,
          "functionCount": 6,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addMissingAwait.ts",
        "metrics": {
          "complexity": 76,
          "loc": 317,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.06
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 169,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "findAwaitableInitializers"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 285,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "makeChange"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/addMissingConst.ts",
        "metrics": {
          "complexity": 34,
          "loc": 116,
          "functionCount": 6,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 41
      },
      {
        "file": "services/codefixes/addMissingDeclareProperty.ts",
        "metrics": {
          "complexity": 5,
          "loc": 46,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addMissingInvocationForDecorator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 1,
          "duplicationRatio": 0.3
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 65
      },
      {
        "file": "services/codefixes/addMissingResolutionModeImportAttribute.ts",
        "metrics": {
          "complexity": 6,
          "loc": 105,
          "functionCount": 1,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addNameToNamelessParameter.ts",
        "metrics": {
          "complexity": 10,
          "loc": 70,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/addOptionalPropertyUndefined.ts",
        "metrics": {
          "complexity": 32,
          "loc": 118,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.6
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 82,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "getSourceTarget"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 32
      },
      {
        "file": "services/codefixes/annotateWithTypeFromJSDoc.ts",
        "metrics": {
          "complexity": 64,
          "loc": 213,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.2
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.06
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 92,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "doChange"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 126,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "transformJSDocType"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 190,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "transformJSDocTypeReference"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/convertConstToLet.ts",
        "metrics": {
          "complexity": 5,
          "loc": 67,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/convertFunctionToEs6Class.ts",
        "metrics": {
          "complexity": 56,
          "loc": 286,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.8
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.43
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 176,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "createClassElement"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/convertLiteralTypeToMappedType.ts",
        "metrics": {
          "complexity": 4,
          "loc": 75,
          "functionCount": 2,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/convertToAsyncFunction.ts",
        "metrics": {
          "complexity": 164,
          "loc": 705,
          "functionCount": 42,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.35
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 137,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "convertToAsyncFunction"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 632,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "transformCallbackArgument"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/convertToEsModule.ts",
        "metrics": {
          "complexity": 111,
          "loc": 561,
          "functionCount": 32,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 5.55
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.87
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/convertToMappedObjectType.ts",
        "metrics": {
          "complexity": 9,
          "loc": 84,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/convertToTypeOnlyExport.ts",
        "metrics": {
          "complexity": 6,
          "loc": 95,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/convertToTypeOnlyImport.ts",
        "metrics": {
          "complexity": 14,
          "loc": 141,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 82
      },
      {
        "file": "services/codefixes/convertTypedefToType.ts",
        "metrics": {
          "complexity": 39,
          "loc": 190,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.95
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 73,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "doChange"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 28
      },
      {
        "file": "services/codefixes/correctQualifiedNameToIndexedAccessType.ts",
        "metrics": {
          "complexity": 3,
          "loc": 51,
          "functionCount": 2,
          "duplicationRatio": 0.08
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/disableJsDiagnostics.ts",
        "metrics": {
          "complexity": 3,
          "loc": 72,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixAddMissingConstraint.ts",
        "metrics": {
          "complexity": 22,
          "loc": 127,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 88,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "getInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 44
      },
      {
        "file": "services/codefixes/fixAddMissingMember.ts",
        "metrics": {
          "complexity": 176,
          "loc": 703,
          "functionCount": 25,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.34
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 304,
            "threshold": 10,
            "excessRatio": 6.9,
            "function": "getInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 672,
            "threshold": 10,
            "excessRatio": 3.1,
            "function": "tryGetValueFromType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/fixAddMissingNewOperator.ts",
        "metrics": {
          "complexity": 3,
          "loc": 42,
          "functionCount": 2,
          "duplicationRatio": 0.07
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixAddMissingParam.ts",
        "metrics": {
          "complexity": 48,
          "loc": 327,
          "functionCount": 11,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.4
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.09
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 134,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "getInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/fixAddModuleReferTypeMissingTypeof.ts",
        "metrics": {
          "complexity": 2,
          "loc": 39,
          "functionCount": 2,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixAddVoidToPromise.ts",
        "metrics": {
          "complexity": 27,
          "loc": 100,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 54,
            "threshold": 10,
            "excessRatio": 2,
            "function": "makeChange"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 36
      },
      {
        "file": "services/codefixes/fixAwaitInSyncFunction.ts",
        "metrics": {
          "complexity": 20,
          "loc": 105,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 58
      },
      {
        "file": "services/codefixes/fixCannotFindModule.ts",
        "metrics": {
          "complexity": 8,
          "loc": 76,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixClassDoesntImplementInheritedAbstractMember.ts",
        "metrics": {
          "complexity": 4,
          "loc": 70,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixClassIncorrectlyImplementsInterface.ts",
        "metrics": {
          "complexity": 12,
          "loc": 119,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 88
      },
      {
        "file": "services/codefixes/fixClassSuperMustPrecedeThisAccess.ts",
        "metrics": {
          "complexity": 9,
          "loc": 68,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixConstructorForDerivedNeedSuperCall.ts",
        "metrics": {
          "complexity": 2,
          "loc": 38,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixEnableJsxFlag.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixExpectedComma.ts",
        "metrics": {
          "complexity": 6,
          "loc": 55,
          "functionCount": 2,
          "duplicationRatio": 0.07
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixExtendsInterfaceBecomesImplements.ts",
        "metrics": {
          "complexity": 8,
          "loc": 60,
          "functionCount": 2,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixForgottenThisPropertyAccess.ts",
        "metrics": {
          "complexity": 6,
          "loc": 57,
          "functionCount": 2,
          "duplicationRatio": 0.09
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixImplicitThis.ts",
        "metrics": {
          "complexity": 10,
          "loc": 71,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixImportNonExportedMember.ts",
        "metrics": {
          "complexity": 34,
          "loc": 183,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.7
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 113,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 35
      },
      {
        "file": "services/codefixes/fixIncorrectNamedTupleSyntax.ts",
        "metrics": {
          "complexity": 13,
          "loc": 64,
          "functionCount": 2,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 40,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "doChange"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 79
      },
      {
        "file": "services/codefixes/fixInvalidImportSyntax.ts",
        "metrics": {
          "complexity": 16,
          "loc": 115,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 70
      },
      {
        "file": "services/codefixes/fixInvalidJsxCharacters.ts",
        "metrics": {
          "complexity": 4,
          "loc": 50,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixJSDocTypes.ts",
        "metrics": {
          "complexity": 28,
          "loc": 121,
          "functionCount": 5,
          "duplicationRatio": 0.11
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.4
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 96,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "isTypeContainer"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 35
      },
      {
        "file": "services/codefixes/fixMissingCallParentheses.ts",
        "metrics": {
          "complexity": 5,
          "loc": 53,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixMissingTypeAnnotationOnExports.ts",
        "metrics": {
          "complexity": 192,
          "loc": 1047,
          "functionCount": 34,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 9.6
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.05
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 339,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "addInlineAssertion"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 416,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "extractAsVariable"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 493,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "findExpandoFunction"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 523,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "fixIsolatedDeclarationError"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 665,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "transformDestructuringPatterns"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 874,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "inferType"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1054,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "relativeType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/fixModuleAndTargetOptions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 56,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixNaNEquality.ts",
        "metrics": {
          "complexity": 15,
          "loc": 82,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 79
      },
      {
        "file": "services/codefixes/fixNoPropertyAccessFromIndexSignature.ts",
        "metrics": {
          "complexity": 3,
          "loc": 48,
          "functionCount": 2,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixOverrideModifier.ts",
        "metrics": {
          "complexity": 33,
          "loc": 208,
          "functionCount": 5,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.65
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.04
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 152,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "dispatchChanges"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 29
      },
      {
        "file": "services/codefixes/fixPropertyAssignment.ts",
        "metrics": {
          "complexity": 2,
          "loc": 37,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixPropertyOverrideAccessor.ts",
        "metrics": {
          "complexity": 6,
          "loc": 72,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixReturnTypeInAsyncFunction.ts",
        "metrics": {
          "complexity": 6,
          "loc": 76,
          "functionCount": 2,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/fixSpelling.ts",
        "metrics": {
          "complexity": 42,
          "loc": 172,
          "functionCount": 4,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.1
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 83,
            "threshold": 10,
            "excessRatio": 2.8,
            "function": "getInfo"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 16
      },
      {
        "file": "services/codefixes/fixStrictClassInitialization.ts",
        "metrics": {
          "complexity": 30,
          "loc": 173,
          "functionCount": 9,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.5
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 161,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getDefaultValueFromType"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 40
      },
      {
        "file": "services/codefixes/fixUnmatchedParameter.ts",
        "metrics": {
          "complexity": 13,
          "loc": 120,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 85
      },
      {
        "file": "services/codefixes/fixUnreachableCode.ts",
        "metrics": {
          "complexity": 14,
          "loc": 83,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 37,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "doChange"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 76
      },
      {
        "file": "services/codefixes/fixUnreferenceableDecoratorMetadata.ts",
        "metrics": {
          "complexity": 11,
          "loc": 78,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 91
      },
      {
        "file": "services/codefixes/fixUnusedIdentifier.ts",
        "metrics": {
          "complexity": 92,
          "loc": 409,
          "functionCount": 20,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 370,
            "threshold": 10,
            "excessRatio": 2.7,
            "function": "mayDeleteParameter"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/fixUnusedLabel.ts",
        "metrics": {
          "complexity": 2,
          "loc": 37,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/generateAccessors.ts",
        "metrics": {
          "complexity": 61,
          "loc": 297,
          "functionCount": 17,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.05
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.49
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/helpers.ts",
        "metrics": {
          "complexity": 179,
          "loc": 828,
          "functionCount": 38,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 8.95
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.76
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 176,
            "threshold": 10,
            "excessRatio": 3.5,
            "function": "addNewNodeForMemberSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 377,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "createSignatureDeclarationFromSignature"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 489,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "createSignatureDeclarationFromCallExpression"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/importFixes.ts",
        "metrics": {
          "complexity": 413,
          "loc": 1841,
          "functionCount": 76,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 20.65
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.84
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 283,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "addImportFromExportedSymbol"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 325,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "addImportForModuleSymbol"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 455,
            "threshold": 10,
            "excessRatio": 1.8,
            "function": "addImport"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 568,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "writeFixes"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1119,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "getAddToExistingImportFix"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1210,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "shouldUseRequire"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1535,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getUmdImportKind"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1666,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getExportEqualsImportKind"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1710,
            "threshold": 10,
            "excessRatio": 1.9,
            "function": "codeActionForFixWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1835,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "promoteImportClause"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1870,
            "threshold": 10,
            "excessRatio": 2.4,
            "function": "doAddExistingFix"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2036,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "getNewImports"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/inferFromUsage.ts",
        "metrics": {
          "complexity": 311,
          "loc": 1081,
          "functionCount": 48,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 15.55
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.08
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 222,
            "threshold": 10,
            "excessRatio": 3.3,
            "function": "doChange"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 513,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getFunctionReferences"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 700,
            "threshold": 10,
            "excessRatio": 2,
            "function": "calculateUsageOfNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 787,
            "threshold": 10,
            "excessRatio": 5.5,
            "function": "inferTypeFromBinaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1018,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "combineAnonymousTypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1064,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "inferTypes"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1164,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "inferTypeParameters"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/removeAccidentalCallParentheses.ts",
        "metrics": {
          "complexity": 1,
          "loc": 29,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/removeUnnecessaryAwait.ts",
        "metrics": {
          "complexity": 7,
          "loc": 57,
          "functionCount": 1,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/requireInTs.ts",
        "metrics": {
          "complexity": 14,
          "loc": 103,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.4
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 82
      },
      {
        "file": "services/codefixes/returnValueCorrect.ts",
        "metrics": {
          "complexity": 63,
          "loc": 270,
          "functionCount": 11,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.15
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 130,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "getFixInfo"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 214,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getInfo"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 239,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "getVariableLikeInitializer"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "services/codefixes/splitTypeOnlyImport.ts",
        "metrics": {
          "complexity": 3,
          "loc": 66,
          "functionCount": 2,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/useBigintLiteral.ts",
        "metrics": {
          "complexity": 2,
          "loc": 40,
          "functionCount": 1,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/useDefaultImport.ts",
        "metrics": {
          "complexity": 7,
          "loc": 60,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "services/codefixes/wrapDecoratorInParentheses.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 1,
          "duplicationRatio": 0.3
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 65
      },
      {
        "file": "services/codefixes/wrapJsxInFragment.ts",
        "metrics": {
          "complexity": 13,
          "loc": 72,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 85
      },
      {
        "file": "typescript/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 2,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "typescript/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 6,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.13,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "typingsInstallerCore/_namespaces/ts.server.ts",
        "metrics": {
          "complexity": 1,
          "loc": 3,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 5,
          "instability": 0.29,
          "cohesionScore": 0.33,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "typingsInstallerCore/_namespaces/ts.server.typingsInstaller.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "typingsInstallerCore/_namespaces/ts.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.22,
          "percentileUsageRank": 90,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "compiler/transformers/declarations/diagnostics.ts",
        "metrics": {
          "complexity": 238,
          "loc": 733,
          "functionCount": 31,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 11.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.44
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 138,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "canProduceDiagnostics"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 238,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "createGetSymbolAccessibilityDiagnosticForNode"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 270,
            "threshold": 10,
            "excessRatio": 2,
            "function": "getVariableDeclarationTypeVisibilityDiagnosticMessage"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 356,
            "threshold": 10,
            "excessRatio": 2.1,
            "function": "getReturnTypeVisibilityError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 431,
            "threshold": 10,
            "excessRatio": 2.9,
            "function": "getParameterDeclarationTypeVisibilityDiagnosticMessage"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 502,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "getTypeParameterConstraintVisibilityError"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 664,
            "threshold": 10,
            "excessRatio": 2.5,
            "function": "getDiagnostic"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/module/esnextAnd2015.ts",
        "metrics": {
          "complexity": 66,
          "loc": 374,
          "functionCount": 14,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 3.3
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.25
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 90,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "transformSourceFile"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 143,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "visitor"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/module/impliedNodeFormatDependent.ts",
        "metrics": {
          "complexity": 17,
          "loc": 80,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.13
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 67
      },
      {
        "file": "compiler/transformers/module/module.ts",
        "metrics": {
          "complexity": 375,
          "loc": 1861,
          "functionCount": 75,
          "duplicationRatio": 0.1
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 18.75
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.86
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 734,
            "threshold": 10,
            "excessRatio": 2,
            "function": "topLevelNestedVisitor"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 795,
            "threshold": 10,
            "excessRatio": 1.6,
            "function": "visitorWorker"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 844,
            "threshold": 10,
            "excessRatio": 2,
            "function": "destructuringNeedsFlattening"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1140,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "visitPreOrPostfixUnaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1208,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "visitImportCallExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1437,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "visitTopLevelImportDeclaration"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1627,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "visitTopLevelExportDeclaration"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1817,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "visitVariableStatement"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2375,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "substituteExpressionIdentifier"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 2460,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "getExports"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "compiler/transformers/module/system.ts",
        "metrics": {
          "complexity": 279,
          "loc": 1331,
          "functionCount": 71,
          "duplicationRatio": 0.12
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.95
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.33
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 428,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "addExportStarIfNeeded"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 592,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "createSettersArray"
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1231,
            "threshold": 10,
            "excessRatio": 2,
            "function": "topLevelNestedVisitor"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1558,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "visitorWorker"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1690,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "visitPrefixOrPostfixUnaryExpression"
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1897,
            "threshold": 10,
            "excessRatio": 1.1,
            "function": "substituteExpressionIdentifier"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/config/commandLineParsing.ts",
        "metrics": {
          "complexity": 5,
          "loc": 223,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.33,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 92
      },
      {
        "file": "testRunner/unittests/config/configurationExtension.ts",
        "metrics": {
          "complexity": 3,
          "loc": 268,
          "functionCount": 3,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.34
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 89
      },
      {
        "file": "testRunner/unittests/config/convertCompilerOptionsFromJson.ts",
        "metrics": {
          "complexity": 2,
          "loc": 271,
          "functionCount": 2,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.35
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 89
      },
      {
        "file": "testRunner/unittests/config/convertTypeAcquisitionFromJson.ts",
        "metrics": {
          "complexity": 1,
          "loc": 71,
          "functionCount": 1,
          "duplicationRatio": 0.17
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 92
      },
      {
        "file": "testRunner/unittests/config/helpers.ts",
        "metrics": {
          "complexity": 6,
          "loc": 100,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 6,
          "instability": 0.4,
          "cohesionScore": 0.25,
          "percentileUsageRank": 94,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/config/initializeTSConfig.ts",
        "metrics": {
          "complexity": 1,
          "loc": 25,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/config/matchFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 739,
          "functionCount": 1,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.46
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 67
      },
      {
        "file": "testRunner/unittests/config/showConfig.ts",
        "metrics": {
          "complexity": 18,
          "loc": 72,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 144,
            "threshold": 10,
            "excessRatio": 1.7,
            "function": "baselineOption"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 52
      },
      {
        "file": "testRunner/unittests/config/tsconfigParsing.ts",
        "metrics": {
          "complexity": 4,
          "loc": 390,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 81
      },
      {
        "file": "testRunner/unittests/config/tsconfigParsingWatchOptions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 122,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/arraySpread.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/asyncArrow.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/asyncGenerator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 107,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/autoAccessors.ts",
        "metrics": {
          "complexity": 1,
          "loc": 123,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/awaitUsingDeclarations.ts",
        "metrics": {
          "complexity": 5,
          "loc": 1737,
          "functionCount": 5,
          "duplicationRatio": 0.17
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.74
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.13
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 41
      },
      {
        "file": "testRunner/unittests/evaluation/awaiter.ts",
        "metrics": {
          "complexity": 1,
          "loc": 24,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/constEnum.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/destructuring.ts",
        "metrics": {
          "complexity": 1,
          "loc": 87,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/esDecorators.ts",
        "metrics": {
          "complexity": 2,
          "loc": 2342,
          "functionCount": 2,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.34
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 42
      },
      {
        "file": "testRunner/unittests/evaluation/esDecoratorsMetadata.ts",
        "metrics": {
          "complexity": 1,
          "loc": 114,
          "functionCount": 1,
          "duplicationRatio": 0.07
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/externalModules.ts",
        "metrics": {
          "complexity": 1,
          "loc": 67,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/forAwaitOf.ts",
        "metrics": {
          "complexity": 1,
          "loc": 324,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.08
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 80
      },
      {
        "file": "testRunner/unittests/evaluation/forOf.ts",
        "metrics": {
          "complexity": 1,
          "loc": 117,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/generator.ts",
        "metrics": {
          "complexity": 1,
          "loc": 61,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/objectRest.ts",
        "metrics": {
          "complexity": 1,
          "loc": 28,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/optionalCall.ts",
        "metrics": {
          "complexity": 1,
          "loc": 199,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/superInStaticInitializer.ts",
        "metrics": {
          "complexity": 1,
          "loc": 217,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.08
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 93
      },
      {
        "file": "testRunner/unittests/evaluation/templateLiteral.ts",
        "metrics": {
          "complexity": 1,
          "loc": 36,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/updateExpressionInModule.ts",
        "metrics": {
          "complexity": 1,
          "loc": 141,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/evaluation/usingDeclarations.ts",
        "metrics": {
          "complexity": 3,
          "loc": 1625,
          "functionCount": 3,
          "duplicationRatio": 0.2
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.63
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.35
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 37
      },
      {
        "file": "testRunner/unittests/helpers/alternateResult.ts",
        "metrics": {
          "complexity": 10,
          "loc": 190,
          "functionCount": 7,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 3,
          "instability": 0.57,
          "cohesionScore": 0.56,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/baseline.ts",
        "metrics": {
          "complexity": 85,
          "loc": 487,
          "functionCount": 31,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.25
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.62
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 60,
            "threshold": 10,
            "excessRatio": 1.4,
            "function": "baselineProgram"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 19,
          "instability": 0.17,
          "cohesionScore": 0.44,
          "percentileUsageRank": 97,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/helpers/contents.ts",
        "metrics": {
          "complexity": 6,
          "loc": 31,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 23,
          "instability": 0.08,
          "cohesionScore": 0.13,
          "percentileUsageRank": 98,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/declarationEmit.ts",
        "metrics": {
          "complexity": 5,
          "loc": 86,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 2,
          "instability": 0.67,
          "cohesionScore": 0.44,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/demoProjectReferences.ts",
        "metrics": {
          "complexity": 2,
          "loc": 113,
          "functionCount": 2,
          "duplicationRatio": 0.05
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/extends.ts",
        "metrics": {
          "complexity": 4,
          "loc": 43,
          "functionCount": 4,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 5,
          "instability": 0.44,
          "cohesionScore": 0.56,
          "percentileUsageRank": 93,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 1,
          "loc": 27,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 3,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/libraryResolution.ts",
        "metrics": {
          "complexity": 10,
          "loc": 233,
          "functionCount": 7,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.17
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 5,
          "instability": 0.58,
          "cohesionScore": 0.57,
          "percentileUsageRank": 93,
          "isInCycle": false
        },
        "healthScore": 92
      },
      {
        "file": "testRunner/unittests/helpers/monorepoSymlinkedSiblingPackages.ts",
        "metrics": {
          "complexity": 25,
          "loc": 274,
          "functionCount": 12,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.25
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.37
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 2,
          "instability": 0.78,
          "cohesionScore": 0.57,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "healthScore": 38
      },
      {
        "file": "testRunner/unittests/helpers/noCheck.ts",
        "metrics": {
          "complexity": 3,
          "loc": 90,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 2,
          "instability": 0.67,
          "cohesionScore": 0.56,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/noEmit.ts",
        "metrics": {
          "complexity": 23,
          "loc": 458,
          "functionCount": 11,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.15
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.53
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 4,
          "instability": 0.64,
          "cohesionScore": 0.57,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "healthScore": 21
      },
      {
        "file": "testRunner/unittests/helpers/noEmitOnError.ts",
        "metrics": {
          "complexity": 15,
          "loc": 172,
          "functionCount": 6,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 4,
          "instability": 0.56,
          "cohesionScore": 0.6,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "healthScore": 79
      },
      {
        "file": "testRunner/unittests/helpers/projectRoots.ts",
        "metrics": {
          "complexity": 3,
          "loc": 50,
          "functionCount": 2,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 3,
          "instability": 0.57,
          "cohesionScore": 0.56,
          "percentileUsageRank": 90,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/sampleProjectReferences.ts",
        "metrics": {
          "complexity": 4,
          "loc": 85,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 4,
          "instability": 0.56,
          "cohesionScore": 0.6,
          "percentileUsageRank": 92,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/solutionBuilder.ts",
        "metrics": {
          "complexity": 7,
          "loc": 110,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 11,
          "instability": 0.31,
          "cohesionScore": 0.6,
          "percentileUsageRank": 96,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/transitiveReferences.ts",
        "metrics": {
          "complexity": 4,
          "loc": 19,
          "functionCount": 4,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 2,
          "instability": 0.67,
          "cohesionScore": 0.56,
          "percentileUsageRank": 87,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/helpers/tsc.ts",
        "metrics": {
          "complexity": 52,
          "loc": 459,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.6
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.53
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 165,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "verifyTscEditDiscrepancies"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 45,
          "instability": 0.1,
          "cohesionScore": 0.5,
          "percentileUsageRank": 98,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/helpers/tscWatch.ts",
        "metrics": {
          "complexity": 13,
          "loc": 266,
          "functionCount": 9,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 39,
          "instability": 0.11,
          "cohesionScore": 0.4,
          "percentileUsageRank": 98,
          "isInCycle": true
        },
        "healthScore": 75
      },
      {
        "file": "testRunner/unittests/helpers/tsserver.ts",
        "metrics": {
          "complexity": 98,
          "loc": 593,
          "functionCount": 49,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.9
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.98
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 309,
            "threshold": 10,
            "excessRatio": 1.3,
            "function": "eventHandler"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 11,
          "incomingDependencies": 79,
          "instability": 0.12,
          "cohesionScore": 0.39,
          "percentileUsageRank": 99,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/helpers/typingsInstaller.ts",
        "metrics": {
          "complexity": 22,
          "loc": 215,
          "functionCount": 12,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.07
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 5,
          "instability": 0.58,
          "cohesionScore": 0.46,
          "percentileUsageRank": 93,
          "isInCycle": true
        },
        "healthScore": 43
      },
      {
        "file": "testRunner/unittests/helpers/virtualFileSystemWithWatch.ts",
        "metrics": {
          "complexity": 262,
          "loc": 1202,
          "functionCount": 114,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 13.1
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.2
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 1307,
            "threshold": 10,
            "excessRatio": 2,
            "function": "diffFsEntry"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 10,
          "incomingDependencies": 163,
          "instability": 0.06,
          "cohesionScore": 0.28,
          "percentileUsageRank": 100,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/sys/symlinkWatching.ts",
        "metrics": {
          "complexity": 84,
          "loc": 789,
          "functionCount": 29,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 4.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.63
          },
          {
            "type": "complexity",
            "severity": "high",
            "line": 567,
            "threshold": 10,
            "excessRatio": 2.2,
            "function": "watchDirectoryOperation"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.31,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/services/cancellableLanguageServiceOperations.ts",
        "metrics": {
          "complexity": 5,
          "loc": 89,
          "functionCount": 2,
          "duplicationRatio": 0.08
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/services/colorization.ts",
        "metrics": {
          "complexity": 19,
          "loc": 122,
          "functionCount": 13,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 61
      },
      {
        "file": "testRunner/unittests/services/convertToAsyncFunction.ts",
        "metrics": {
          "complexity": 20,
          "loc": 1843,
          "functionCount": 6,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.84
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 6
      },
      {
        "file": "testRunner/unittests/services/documentRegistry.ts",
        "metrics": {
          "complexity": 1,
          "loc": 46,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/services/hostNewLineSupport.ts",
        "metrics": {
          "complexity": 11,
          "loc": 69,
          "functionCount": 5,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 91
      },
      {
        "file": "testRunner/unittests/services/languageService.ts",
        "metrics": {
          "complexity": 5,
          "loc": 256,
          "functionCount": 4,
          "duplicationRatio": 0.11
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.28
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/services/organizeImports.ts",
        "metrics": {
          "complexity": 29,
          "loc": 1080,
          "functionCount": 10,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.45
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.08
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1145,
            "threshold": 10,
            "excessRatio": 1.5,
            "function": "assertEqual"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/services/patternMatcher.ts",
        "metrics": {
          "complexity": 7,
          "loc": 260,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.3
          }
        ],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/services/preProcessFile.ts",
        "metrics": {
          "complexity": 3,
          "loc": 779,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.6
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 66
      },
      {
        "file": "testRunner/unittests/services/textChanges.ts",
        "metrics": {
          "complexity": 20,
          "loc": 716,
          "functionCount": 14,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.33
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.39
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.37,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 25
      },
      {
        "file": "testRunner/unittests/services/transpile.ts",
        "metrics": {
          "complexity": 4,
          "loc": 574,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.91
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 68
      },
      {
        "file": "testRunner/unittests/services/utilities.ts",
        "metrics": {
          "complexity": 1,
          "loc": 9,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/configFileErrors.ts",
        "metrics": {
          "complexity": 2,
          "loc": 71,
          "functionCount": 1,
          "duplicationRatio": 0.25
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.67
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 79
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/demo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 57,
          "functionCount": 0,
          "duplicationRatio": 0.09
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 15,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 223,
          "functionCount": 0,
          "duplicationRatio": 0.47
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.56
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 33
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/noEmit.ts",
        "metrics": {
          "complexity": 2,
          "loc": 41,
          "functionCount": 1,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/programUpdates.ts",
        "metrics": {
          "complexity": 2,
          "loc": 787,
          "functionCount": 2,
          "duplicationRatio": 0.14
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.62
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 66
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/projectsBuilding.ts",
        "metrics": {
          "complexity": 8,
          "loc": 198,
          "functionCount": 5,
          "duplicationRatio": 0.1
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/publicApi.ts",
        "metrics": {
          "complexity": 11,
          "loc": 111,
          "functionCount": 7,
          "duplicationRatio": 0.39
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.31
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 48
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/reexport.ts",
        "metrics": {
          "complexity": 1,
          "loc": 65,
          "functionCount": 0,
          "duplicationRatio": 0.26
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.76
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 77
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/roots.ts",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/watchEnvironment.ts",
        "metrics": {
          "complexity": 6,
          "loc": 118,
          "functionCount": 5,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/cancellationToken.ts",
        "metrics": {
          "complexity": 8,
          "loc": 161,
          "functionCount": 7,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.39,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/commandLine.ts",
        "metrics": {
          "complexity": 1,
          "loc": 47,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/composite.ts",
        "metrics": {
          "complexity": 1,
          "loc": 158,
          "functionCount": 0,
          "duplicationRatio": 0.33
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 64
      },
      {
        "file": "testRunner/unittests/tsc/declarationEmit.ts",
        "metrics": {
          "complexity": 12,
          "loc": 353,
          "functionCount": 8,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.18
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 66
      },
      {
        "file": "testRunner/unittests/tsc/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 31,
          "functionCount": 0,
          "duplicationRatio": 0.44
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.48
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 46
      },
      {
        "file": "testRunner/unittests/tsc/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/incremental.ts",
        "metrics": {
          "complexity": 18,
          "loc": 629,
          "functionCount": 13,
          "duplicationRatio": 0.15
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 31
      },
      {
        "file": "testRunner/unittests/tsc/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 76,
          "functionCount": 1,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/listFilesOnly.ts",
        "metrics": {
          "complexity": 1,
          "loc": 37,
          "functionCount": 0,
          "duplicationRatio": 0.26
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.73
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 78
      },
      {
        "file": "testRunner/unittests/tsc/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 189,
          "functionCount": 0,
          "duplicationRatio": 0.03
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/noCheck.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/noEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 33,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 119,
          "functionCount": 0,
          "duplicationRatio": 0.09
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsc/projectReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 152,
          "functionCount": 0,
          "duplicationRatio": 0.25
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.65
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 79
      },
      {
        "file": "testRunner/unittests/tsc/projectReferencesConfig.ts",
        "metrics": {
          "complexity": 4,
          "loc": 201,
          "functionCount": 3,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 94
      },
      {
        "file": "testRunner/unittests/tsc/redirect.ts",
        "metrics": {
          "complexity": 1,
          "loc": 17,
          "functionCount": 0,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/consoleClearing.ts",
        "metrics": {
          "complexity": 3,
          "loc": 77,
          "functionCount": 2,
          "duplicationRatio": 0.05
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/emit.ts",
        "metrics": {
          "complexity": 5,
          "loc": 513,
          "functionCount": 5,
          "duplicationRatio": 0.15
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.71
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 62
      },
      {
        "file": "testRunner/unittests/tscWatch/emitAndErrorUpdates.ts",
        "metrics": {
          "complexity": 4,
          "loc": 321,
          "functionCount": 4,
          "duplicationRatio": 0.02
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.07
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 80
      },
      {
        "file": "testRunner/unittests/tscWatch/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 24,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 4,
          "loc": 408,
          "functionCount": 4,
          "duplicationRatio": 0.1
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.36
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 74
      },
      {
        "file": "testRunner/unittests/tscWatch/incremental.ts",
        "metrics": {
          "complexity": 11,
          "loc": 375,
          "functionCount": 4,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.25
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 67
      },
      {
        "file": "testRunner/unittests/tscWatch/libraryResolution.ts",
        "metrics": {
          "complexity": 2,
          "loc": 66,
          "functionCount": 2,
          "duplicationRatio": 0.22
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.47
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 84
      },
      {
        "file": "testRunner/unittests/tscWatch/listFilesOnly.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/moduleResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 721,
          "functionCount": 1,
          "duplicationRatio": 0.21
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.4
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.37
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 52
      },
      {
        "file": "testRunner/unittests/tscWatch/noEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/nodeNextWatch.ts",
        "metrics": {
          "complexity": 1,
          "loc": 66,
          "functionCount": 0,
          "duplicationRatio": 0.17
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.13
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 91
      },
      {
        "file": "testRunner/unittests/tscWatch/programUpdates.ts",
        "metrics": {
          "complexity": 8,
          "loc": 1012,
          "functionCount": 7,
          "duplicationRatio": 0.13
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 57
      },
      {
        "file": "testRunner/unittests/tscWatch/projectsWithReferences.ts",
        "metrics": {
          "complexity": 5,
          "loc": 152,
          "functionCount": 3,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 1,
          "instability": 0.89,
          "cohesionScore": 0.47,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/resolutionCache.ts",
        "metrics": {
          "complexity": 2,
          "loc": 734,
          "functionCount": 2,
          "duplicationRatio": 0.09
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.45
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 67
      },
      {
        "file": "testRunner/unittests/tscWatch/resolveJsonModuleWithIncremental.ts",
        "metrics": {
          "complexity": 1,
          "loc": 22,
          "functionCount": 0,
          "duplicationRatio": 0.08
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts",
        "metrics": {
          "complexity": 12,
          "loc": 184,
          "functionCount": 8,
          "duplicationRatio": 0.19
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.28
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 76
      },
      {
        "file": "testRunner/unittests/tscWatch/symlinks.ts",
        "metrics": {
          "complexity": 1,
          "loc": 13,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tscWatch/watchApi.ts",
        "metrics": {
          "complexity": 21,
          "loc": 792,
          "functionCount": 14,
          "duplicationRatio": 0.1
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.05
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.64
          }
        ],
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 1,
          "instability": 0.89,
          "cohesionScore": 0.41,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 16
      },
      {
        "file": "testRunner/unittests/tscWatch/watchEnvironment.ts",
        "metrics": {
          "complexity": 8,
          "loc": 794,
          "functionCount": 5,
          "duplicationRatio": 0.13
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.65
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 66
      },
      {
        "file": "testRunner/unittests/tsbuild/amdModulesWithOut.ts",
        "metrics": {
          "complexity": 1,
          "loc": 81,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/clean.ts",
        "metrics": {
          "complexity": 1,
          "loc": 43,
          "functionCount": 0,
          "duplicationRatio": 0.22
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.46
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 84
      },
      {
        "file": "testRunner/unittests/tsbuild/commandLine.ts",
        "metrics": {
          "complexity": 16,
          "loc": 305,
          "functionCount": 12,
          "duplicationRatio": 0.21
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.07
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.42
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 36
      },
      {
        "file": "testRunner/unittests/tsbuild/configFileErrors.ts",
        "metrics": {
          "complexity": 2,
          "loc": 96,
          "functionCount": 1,
          "duplicationRatio": 0.16
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.04
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 93
      },
      {
        "file": "testRunner/unittests/tsbuild/configFileExtends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 53,
          "functionCount": 1,
          "duplicationRatio": 0.12
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/containerOnlyReferenced.ts",
        "metrics": {
          "complexity": 1,
          "loc": 92,
          "functionCount": 0,
          "duplicationRatio": 0.1
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/declarationEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 138,
          "functionCount": 1,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/demo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 40,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/emitDeclarationOnly.ts",
        "metrics": {
          "complexity": 4,
          "loc": 93,
          "functionCount": 2,
          "duplicationRatio": 0.07
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/emptyFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 52,
          "functionCount": 0,
          "duplicationRatio": 0.18
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.23
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 89
      },
      {
        "file": "testRunner/unittests/tsbuild/exitCodeOnBogusFile.ts",
        "metrics": {
          "complexity": 1,
          "loc": 11,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 19,
          "functionCount": 0,
          "duplicationRatio": 0.8
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.6
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/tsbuild/fileDelete.ts",
        "metrics": {
          "complexity": 3,
          "loc": 84,
          "functionCount": 1,
          "duplicationRatio": 0.07
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/graphOrdering.ts",
        "metrics": {
          "complexity": 12,
          "loc": 82,
          "functionCount": 3,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 88
      },
      {
        "file": "testRunner/unittests/tsbuild/inferredTypeFromTransitiveModule.ts",
        "metrics": {
          "complexity": 4,
          "loc": 134,
          "functionCount": 4,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/javascriptProjectEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 160,
          "functionCount": 0,
          "duplicationRatio": 0.31
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.02
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 65
      },
      {
        "file": "testRunner/unittests/tsbuild/lateBoundSymbol.ts",
        "metrics": {
          "complexity": 1,
          "loc": 48,
          "functionCount": 0,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 16,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/moduleResolution.ts",
        "metrics": {
          "complexity": 2,
          "loc": 183,
          "functionCount": 2,
          "duplicationRatio": 0.26
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.74
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 77
      },
      {
        "file": "testRunner/unittests/tsbuild/moduleSpecifiers.ts",
        "metrics": {
          "complexity": 1,
          "loc": 173,
          "functionCount": 0,
          "duplicationRatio": 0.2
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.34
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 86
      },
      {
        "file": "testRunner/unittests/tsbuild/noCheck.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/noEmit.ts",
        "metrics": {
          "complexity": 1,
          "loc": 10,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/noEmitOnError.ts",
        "metrics": {
          "complexity": 1,
          "loc": 4,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 1,
          "incomingDependencies": 1,
          "instability": 0.5,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/outFile.ts",
        "metrics": {
          "complexity": 2,
          "loc": 267,
          "functionCount": 2,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.33
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/tsbuild/outputPaths.ts",
        "metrics": {
          "complexity": 1,
          "loc": 117,
          "functionCount": 1,
          "duplicationRatio": 0.07
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/publicApi.ts",
        "metrics": {
          "complexity": 10,
          "loc": 96,
          "functionCount": 6,
          "duplicationRatio": 0.38
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.25
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 60
      },
      {
        "file": "testRunner/unittests/tsbuild/referencesWithRootDirInParent.ts",
        "metrics": {
          "complexity": 1,
          "loc": 153,
          "functionCount": 1,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/resolveJsonModule.ts",
        "metrics": {
          "complexity": 3,
          "loc": 186,
          "functionCount": 2,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/roots.ts",
        "metrics": {
          "complexity": 1,
          "loc": 132,
          "functionCount": 0,
          "duplicationRatio": 0.13
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsbuild/sample.ts",
        "metrics": {
          "complexity": 4,
          "loc": 565,
          "functionCount": 3,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.88
          }
        ],
        "dependencies": {
          "outgoingDependencies": 9,
          "incomingDependencies": 1,
          "instability": 0.9,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 68
      },
      {
        "file": "testRunner/unittests/tsbuild/transitiveReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 44,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/applyChangesToOpenFiles.ts",
        "metrics": {
          "complexity": 2,
          "loc": 145,
          "functionCount": 2,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/autoImportProvider.ts",
        "metrics": {
          "complexity": 5,
          "loc": 384,
          "functionCount": 5,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.28
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 76
      },
      {
        "file": "testRunner/unittests/tsserver/auxiliaryProject.ts",
        "metrics": {
          "complexity": 1,
          "loc": 148,
          "functionCount": 0,
          "duplicationRatio": 0.13
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/cachingFileSystemInformation.ts",
        "metrics": {
          "complexity": 19,
          "loc": 202,
          "functionCount": 15,
          "duplicationRatio": 0.07
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "high",
            "line": 1,
            "threshold": 15,
            "excessRatio": 1.27
          },
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.29,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 55
      },
      {
        "file": "testRunner/unittests/tsserver/cancellationToken.ts",
        "metrics": {
          "complexity": 3,
          "loc": 168,
          "functionCount": 1,
          "duplicationRatio": 0.05
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/codeFix.ts",
        "metrics": {
          "complexity": 1,
          "loc": 57,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/compileOnSave.ts",
        "metrics": {
          "complexity": 15,
          "loc": 959,
          "functionCount": 10,
          "duplicationRatio": 0.07
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.5
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 3.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 44
      },
      {
        "file": "testRunner/unittests/tsserver/completions.ts",
        "metrics": {
          "complexity": 7,
          "loc": 332,
          "functionCount": 3,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 79
      },
      {
        "file": "testRunner/unittests/tsserver/completionsIncomplete.ts",
        "metrics": {
          "complexity": 9,
          "loc": 253,
          "functionCount": 8,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.26
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/tsserver/configFileSearch.ts",
        "metrics": {
          "complexity": 2,
          "loc": 122,
          "functionCount": 2,
          "duplicationRatio": 0.16
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.05
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 93
      },
      {
        "file": "testRunner/unittests/tsserver/configuredProjects.ts",
        "metrics": {
          "complexity": 13,
          "loc": 1128,
          "functionCount": 5,
          "duplicationRatio": 0.11
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.3
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.13
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.46,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 41
      },
      {
        "file": "testRunner/unittests/tsserver/declarationFileMaps.ts",
        "metrics": {
          "complexity": 7,
          "loc": 368,
          "functionCount": 5,
          "duplicationRatio": 0.05
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.23
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 77
      },
      {
        "file": "testRunner/unittests/tsserver/documentRegistry.ts",
        "metrics": {
          "complexity": 5,
          "loc": 139,
          "functionCount": 5,
          "duplicationRatio": 0.08
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/duplicatePackages.ts",
        "metrics": {
          "complexity": 1,
          "loc": 45,
          "functionCount": 0,
          "duplicationRatio": 0.23
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.52
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 82
      },
      {
        "file": "testRunner/unittests/tsserver/dynamicFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 243,
          "functionCount": 1,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.22
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 91
      },
      {
        "file": "testRunner/unittests/tsserver/exportMapCache.ts",
        "metrics": {
          "complexity": 4,
          "loc": 325,
          "functionCount": 3,
          "duplicationRatio": 0.16
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.08
          },
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.06
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 72
      },
      {
        "file": "testRunner/unittests/tsserver/extends.ts",
        "metrics": {
          "complexity": 1,
          "loc": 36,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/externalProjects.ts",
        "metrics": {
          "complexity": 12,
          "loc": 615,
          "functionCount": 5,
          "duplicationRatio": 0.13
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.2
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.05
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 56
      },
      {
        "file": "testRunner/unittests/tsserver/findAllReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 135,
          "functionCount": 0,
          "duplicationRatio": 0.19
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.25
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 88
      },
      {
        "file": "testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts",
        "metrics": {
          "complexity": 5,
          "loc": 347,
          "functionCount": 5,
          "duplicationRatio": 0.14
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.16
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 78
      },
      {
        "file": "testRunner/unittests/tsserver/formatSettings.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 0,
          "duplicationRatio": 0.17
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 92
      },
      {
        "file": "testRunner/unittests/tsserver/getApplicableRefactors.ts",
        "metrics": {
          "complexity": 1,
          "loc": 84,
          "functionCount": 0,
          "duplicationRatio": 0.09
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/getEditsForFileRename.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 0,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/getExportReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 75,
          "functionCount": 1,
          "duplicationRatio": 0.13
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/getFileReferences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 64,
          "functionCount": 1,
          "duplicationRatio": 0.09
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/getMoveToRefactoringFileSuggestions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 171,
          "functionCount": 0,
          "duplicationRatio": 0.12
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/goToDefinition.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 0,
          "duplicationRatio": 0.26
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.73
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 78
      },
      {
        "file": "testRunner/unittests/tsserver/importHelpers.ts",
        "metrics": {
          "complexity": 1,
          "loc": 84,
          "functionCount": 0,
          "duplicationRatio": 0.18
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.18
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/tsserver/inconsistentErrorInEditor.ts",
        "metrics": {
          "complexity": 1,
          "loc": 67,
          "functionCount": 0,
          "duplicationRatio": 0.23
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.52
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 82
      },
      {
        "file": "testRunner/unittests/tsserver/inferredProjects.ts",
        "metrics": {
          "complexity": 3,
          "loc": 307,
          "functionCount": 3,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.02
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 81
      },
      {
        "file": "testRunner/unittests/tsserver/inlayHints.ts",
        "metrics": {
          "complexity": 1,
          "loc": 69,
          "functionCount": 1,
          "duplicationRatio": 0.18
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.21
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 89
      },
      {
        "file": "testRunner/unittests/tsserver/jsdocTag.ts",
        "metrics": {
          "complexity": 3,
          "loc": 186,
          "functionCount": 3,
          "duplicationRatio": 0.02
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/languageService.ts",
        "metrics": {
          "complexity": 1,
          "loc": 78,
          "functionCount": 0,
          "duplicationRatio": 0.16
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.05
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 93
      },
      {
        "file": "testRunner/unittests/tsserver/libraryResolution.ts",
        "metrics": {
          "complexity": 1,
          "loc": 22,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts",
        "metrics": {
          "complexity": 1,
          "loc": 73,
          "functionCount": 0,
          "duplicationRatio": 0.29
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.96
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 72
      },
      {
        "file": "testRunner/unittests/tsserver/metadataInResponse.ts",
        "metrics": {
          "complexity": 1,
          "loc": 83,
          "functionCount": 1,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/moduleResolution.ts",
        "metrics": {
          "complexity": 6,
          "loc": 263,
          "functionCount": 4,
          "duplicationRatio": 0.07
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.31
          }
        ],
        "dependencies": {
          "outgoingDependencies": 7,
          "incomingDependencies": 1,
          "instability": 0.88,
          "cohesionScore": 0.43,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/tsserver/moduleSpecifierCache.ts",
        "metrics": {
          "complexity": 3,
          "loc": 146,
          "functionCount": 3,
          "duplicationRatio": 0.12
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/navTo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 136,
          "functionCount": 0,
          "duplicationRatio": 0.19
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.25
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 88
      },
      {
        "file": "testRunner/unittests/tsserver/occurences.ts",
        "metrics": {
          "complexity": 1,
          "loc": 34,
          "functionCount": 0,
          "duplicationRatio": 0.3
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 65
      },
      {
        "file": "testRunner/unittests/tsserver/openFile.ts",
        "metrics": {
          "complexity": 4,
          "loc": 236,
          "functionCount": 4,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.18
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 92
      },
      {
        "file": "testRunner/unittests/tsserver/packageJsonInfo.ts",
        "metrics": {
          "complexity": 1,
          "loc": 122,
          "functionCount": 1,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/partialSemanticServer.ts",
        "metrics": {
          "complexity": 2,
          "loc": 210,
          "functionCount": 2,
          "duplicationRatio": 0.34
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.05
          },
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.13
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 57
      },
      {
        "file": "testRunner/unittests/tsserver/pasteEdits.ts",
        "metrics": {
          "complexity": 1,
          "loc": 84,
          "functionCount": 0,
          "duplicationRatio": 0.18
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.17
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 90
      },
      {
        "file": "testRunner/unittests/tsserver/plugins.ts",
        "metrics": {
          "complexity": 2,
          "loc": 393,
          "functionCount": 2,
          "duplicationRatio": 0.13
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.31
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 75
      },
      {
        "file": "testRunner/unittests/tsserver/pluginsAsync.ts",
        "metrics": {
          "complexity": 1,
          "loc": 190,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/projectErrors.ts",
        "metrics": {
          "complexity": 11,
          "loc": 661,
          "functionCount": 5,
          "duplicationRatio": 0.09
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "medium",
            "line": 1,
            "threshold": 10,
            "excessRatio": 1.1
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.2
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 58
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts",
        "metrics": {
          "complexity": 1,
          "loc": 1430,
          "functionCount": 0,
          "duplicationRatio": 0.01
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.43
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.45,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 53
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferenceErrors.ts",
        "metrics": {
          "complexity": 3,
          "loc": 172,
          "functionCount": 3,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferences.ts",
        "metrics": {
          "complexity": 48,
          "loc": 1341,
          "functionCount": 26,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 2.4
          },
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.34
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 0
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferencesSourcemap.ts",
        "metrics": {
          "complexity": 36,
          "loc": 501,
          "functionCount": 26,
          "duplicationRatio": 0.03
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.8
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.67
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 7
      },
      {
        "file": "testRunner/unittests/tsserver/projectRootFiles.ts",
        "metrics": {
          "complexity": 1,
          "loc": 20,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/projects.ts",
        "metrics": {
          "complexity": 6,
          "loc": 1381,
          "functionCount": 4,
          "duplicationRatio": 0.1
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 1.38
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 53
      },
      {
        "file": "testRunner/unittests/tsserver/projectsWithReferences.ts",
        "metrics": {
          "complexity": 2,
          "loc": 54,
          "functionCount": 2,
          "duplicationRatio": 0.04
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/refactors.ts",
        "metrics": {
          "complexity": 1,
          "loc": 184,
          "functionCount": 0,
          "duplicationRatio": 0.15
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "medium",
            "line": 1,
            "threshold": 0.15,
            "excessRatio": 1.01
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 94
      },
      {
        "file": "testRunner/unittests/tsserver/regionDiagnostics.ts",
        "metrics": {
          "complexity": 1,
          "loc": 222,
          "functionCount": 0,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 93
      },
      {
        "file": "testRunner/unittests/tsserver/reload.ts",
        "metrics": {
          "complexity": 2,
          "loc": 92,
          "functionCount": 2,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/reloadProjects.ts",
        "metrics": {
          "complexity": 1,
          "loc": 124,
          "functionCount": 1,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/rename.ts",
        "metrics": {
          "complexity": 1,
          "loc": 180,
          "functionCount": 0,
          "duplicationRatio": 0.05
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/resolutionCache.ts",
        "metrics": {
          "complexity": 6,
          "loc": 675,
          "functionCount": 6,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.25
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 67
      },
      {
        "file": "testRunner/unittests/tsserver/session.ts",
        "metrics": {
          "complexity": 27,
          "loc": 608,
          "functionCount": 18,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.35
          },
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.03
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.13,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 16
      },
      {
        "file": "testRunner/unittests/tsserver/skipLibCheck.ts",
        "metrics": {
          "complexity": 1,
          "loc": 198,
          "functionCount": 0,
          "duplicationRatio": 0.08
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/smartSelection.ts",
        "metrics": {
          "complexity": 1,
          "loc": 39,
          "functionCount": 0,
          "duplicationRatio": 0.1
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/symLinks.ts",
        "metrics": {
          "complexity": 3,
          "loc": 103,
          "functionCount": 2,
          "duplicationRatio": 0.11
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 1,
          "instability": 0.86,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/symlinkCache.ts",
        "metrics": {
          "complexity": 1,
          "loc": 82,
          "functionCount": 0,
          "duplicationRatio": 0.13
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/syntacticServer.ts",
        "metrics": {
          "complexity": 6,
          "loc": 147,
          "functionCount": 5,
          "duplicationRatio": 0.37
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.24
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 60
      },
      {
        "file": "testRunner/unittests/tsserver/syntaxOperations.ts",
        "metrics": {
          "complexity": 1,
          "loc": 72,
          "functionCount": 0,
          "duplicationRatio": 0.15
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/telemetry.ts",
        "metrics": {
          "complexity": 3,
          "loc": 191,
          "functionCount": 2,
          "duplicationRatio": 0.01
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.44,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/textStorage.ts",
        "metrics": {
          "complexity": 1,
          "loc": 109,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/typeAquisition.ts",
        "metrics": {
          "complexity": 1,
          "loc": 56,
          "functionCount": 0,
          "duplicationRatio": 0.52
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "critical",
            "line": 1,
            "threshold": 0.5,
            "excessRatio": 1.05
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 15
      },
      {
        "file": "testRunner/unittests/tsserver/typeOnlyImportChains.ts",
        "metrics": {
          "complexity": 1,
          "loc": 154,
          "functionCount": 1,
          "duplicationRatio": 0.34
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.14
          }
        ],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.42,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 63
      },
      {
        "file": "testRunner/unittests/tsserver/typeReferenceDirectives.ts",
        "metrics": {
          "complexity": 1,
          "loc": 87,
          "functionCount": 0,
          "duplicationRatio": 0.14
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 3,
          "incomingDependencies": 1,
          "instability": 0.75,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/typingsInstaller.ts",
        "metrics": {
          "complexity": 8,
          "loc": 2394,
          "functionCount": 8,
          "duplicationRatio": 0.04
        },
        "issues": [
          {
            "type": "size",
            "severity": "critical",
            "line": 1,
            "threshold": 1000,
            "excessRatio": 2.39
          }
        ],
        "dependencies": {
          "outgoingDependencies": 8,
          "incomingDependencies": 1,
          "instability": 0.89,
          "cohesionScore": 0.38,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 42
      },
      {
        "file": "testRunner/unittests/tsserver/versionCache.ts",
        "metrics": {
          "complexity": 3,
          "loc": 268,
          "functionCount": 3,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "medium",
            "line": 1,
            "threshold": 200,
            "excessRatio": 1.34
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.25,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 89
      },
      {
        "file": "testRunner/unittests/tsserver/watchEnvironment.ts",
        "metrics": {
          "complexity": 10,
          "loc": 553,
          "functionCount": 9,
          "duplicationRatio": 0.08
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.84
          }
        ],
        "dependencies": {
          "outgoingDependencies": 5,
          "incomingDependencies": 1,
          "instability": 0.83,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 68
      },
      {
        "file": "testRunner/unittests/services/extract/constants.ts",
        "metrics": {
          "complexity": 2,
          "loc": 334,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 79
      },
      {
        "file": "testRunner/unittests/services/extract/functions.ts",
        "metrics": {
          "complexity": 1,
          "loc": 651,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 2.17
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 67
      },
      {
        "file": "testRunner/unittests/services/extract/helpers.ts",
        "metrics": {
          "complexity": 26,
          "loc": 188,
          "functionCount": 8,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "complexity",
            "severity": "critical",
            "line": 1,
            "threshold": 20,
            "excessRatio": 1.3
          },
          {
            "type": "complexity",
            "severity": "medium",
            "line": 43,
            "threshold": 10,
            "excessRatio": 1.2,
            "function": "extractTest"
          }
        ],
        "dependencies": {
          "outgoingDependencies": 6,
          "incomingDependencies": 6,
          "instability": 0.5,
          "cohesionScore": 0.2,
          "percentileUsageRank": 94,
          "isInCycle": true
        },
        "healthScore": 42
      },
      {
        "file": "testRunner/unittests/services/extract/ranges.ts",
        "metrics": {
          "complexity": 2,
          "loc": 457,
          "functionCount": 2,
          "duplicationRatio": 0
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.52
          }
        ],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.5,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 71
      },
      {
        "file": "testRunner/unittests/services/extract/symbolWalker.ts",
        "metrics": {
          "complexity": 1,
          "loc": 54,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.2,
          "percentileUsageRank": 1,
          "isInCycle": true
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/events/largeFileReferenced.ts",
        "metrics": {
          "complexity": 5,
          "loc": 62,
          "functionCount": 4,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/events/projectLanguageServiceState.ts",
        "metrics": {
          "complexity": 1,
          "loc": 68,
          "functionCount": 0,
          "duplicationRatio": 0.33
        },
        "issues": [
          {
            "type": "duplication",
            "severity": "high",
            "line": 1,
            "threshold": 0.3,
            "excessRatio": 1.09
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 65
      },
      {
        "file": "testRunner/unittests/tsserver/events/projectLoading.ts",
        "metrics": {
          "complexity": 5,
          "loc": 159,
          "functionCount": 3,
          "duplicationRatio": 0.06
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      },
      {
        "file": "testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts",
        "metrics": {
          "complexity": 9,
          "loc": 332,
          "functionCount": 5,
          "duplicationRatio": 0.06
        },
        "issues": [
          {
            "type": "size",
            "severity": "high",
            "line": 1,
            "threshold": 300,
            "excessRatio": 1.11
          }
        ],
        "dependencies": {
          "outgoingDependencies": 4,
          "incomingDependencies": 1,
          "instability": 0.8,
          "cohesionScore": 0.35,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 79
      },
      {
        "file": "testRunner/unittests/tsserver/events/watchEvents.ts",
        "metrics": {
          "complexity": 3,
          "loc": 59,
          "functionCount": 1,
          "duplicationRatio": 0
        },
        "issues": [],
        "dependencies": {
          "outgoingDependencies": 2,
          "incomingDependencies": 1,
          "instability": 0.67,
          "cohesionScore": 0.4,
          "percentileUsageRank": 1,
          "isInCycle": false
        },
        "healthScore": 100
      }
    ],
    "overview": {
      "grade": "F",
      "statistics": {
        "totalFiles": 697,
        "totalLOC": 316214,
        "avgComplexity": 92.03,
        "avgLOC": 454,
        "avgDuplicationRatio": 0.04
      },
      "scores": {
        "complexity": 16,
        "duplication": 99,
        "maintainability": 19,
        "overall": 38
      },
      "summary": "228 critical files found requiring attention"
    },
    "context": {
      "project": {
        "name": "typescript",
        "path": "/Users/fstepho/dev/insightcode-cli/temp-analysis/typescript",
        "version": "5.9.0",
        "repository": "https://github.com/microsoft/TypeScript.git"
      },
      "analysis": {
        "timestamp": "2025-07-13T00:47:22.929Z",
        "durationMs": 67384,
        "toolVersion": "0.6.0",
        "filesAnalyzed": 697,
        "duplicationMode": "legacy"
      }
    },
    "codeContext": [
      {
        "file": "deprecatedCompat/deprecate.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/binder.ts",
        "criticalFunctions": [
          {
            "name": "bindWorker",
            "complexity": 116,
            "lineCount": 247,
            "parameterCount": 1,
            "snippet": "function bindWorker(node: Node) {\r\n        switch (node.kind) {\r\n            /* Strict mode checks */\r\n            case SyntaxKind.Identifier:\r\n                if (node.flags & NodeFlags.IdentifierIsInJSDocNamespace) {\r\n                    let parentNode = node.parent;\r\n                    while (parentNode && !isJSDocTypeAlias(parentNode)) {\r\n                        parentNode = parentNode.parent;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 116 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 247 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "bindChildren",
            "complexity": 49,
            "lineCount": 134,
            "parameterCount": 1,
            "snippet": "function bindChildren(node: Node): void {\r\n        const saveInAssignmentPattern = inAssignmentPattern;\r\n        inAssignmentPattern = false;\r\n        if (checkUnreachable(node)) {\r\n            if (canHaveFlowNode(node) && node.flowNode) {\r\n                node.flowNode = undefined;\r\n            }\r\n            bindEachChild(node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 49 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getContainerFlags",
            "complexity": 42,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "export function getContainerFlags(node: Node): ContainerFlags {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ClassExpression:\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.EnumDeclaration:\r\n        case SyntaxKind.ObjectLiteralExpression:\r\n        case SyntaxKind.TypeLiteral:\r\n        case SyntaxKind.JSDocTypeLiteral:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          },
          {
            "name": "declareSymbol",
            "complexity": 34,
            "lineCount": 137,
            "parameterCount": 7,
            "snippet": "function declareSymbol(symbolTable: SymbolTable, parent: Symbol | undefined, node: Declaration, includes: SymbolFlags, excludes: SymbolFlags, isReplaceableByMethod?: boolean, isComputedName?: boolean): Symbol {\r\n        Debug.assert(isComputedName || !hasDynamicName(node));\r\n        const isDefaultExport = hasSyntacticModifier(node, ModifierFlags.Default) || isExportSpecifier(node) && moduleExportNameIsDefault(node.name);\r\n        const name = isComputedName ? InternalSymbolName.Computed\r\n            : isDefaultExport && parent ? InternalSymbolName.Default\r\n            : getDeclarationName(node);\r\n        let symbol: Symbol | undefined;\r\n        if (name === undefined) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "bindContainer",
            "complexity": 34,
            "lineCount": 118,
            "parameterCount": 2,
            "snippet": "function bindContainer(node: Mutable<HasContainerFlags>, containerFlags: ContainerFlags) {\r\n        const saveContainer = container;\r\n        const saveThisParentContainer = thisParentContainer;\r\n        const savedBlockScopeContainer = blockScopeContainer;\r\n        const savedInReturnPosition = inReturnPosition;\r\n        if (node.kind === SyntaxKind.ArrowFunction && node.body.kind !== SyntaxKind.Block) inReturnPosition = true;\r\n        if (containerFlags & ContainerFlags.IsContainer) {\r\n            if (node.kind !== SyntaxKind.ArrowFunction) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/builder.ts",
        "criticalFunctions": [
          {
            "name": "createBuilderProgramState",
            "complexity": 34,
            "lineCount": 183,
            "parameterCount": 2,
            "snippet": "function createBuilderProgramState(\r\n    newProgram: Program,\r\n    oldState: Readonly<ReusableBuilderProgramState> | undefined,\r\n): BuilderProgramState {\r\n    const state = BuilderState.create(newProgram, oldState, /*disableUseFileVersionAsSignature*/ false) as BuilderProgramState;\r\n    state.program = newProgram;\r\n    const compilerOptions = newProgram.getCompilerOptions();\r\n    state.compilerOptions = compilerOptions;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 183 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitNextAffectedFileOrDtsErrors",
            "complexity": 32,
            "lineCount": 134,
            "parameterCount": 5,
            "snippet": "function emitNextAffectedFileOrDtsErrors(\r\n        writeFile: WriteFileCallback | undefined,\r\n        cancellationToken: CancellationToken | undefined,\r\n        emitOnlyDtsFiles: boolean | undefined,\r\n        customTransformers: CustomTransformers | undefined,\r\n        isForDtsErrors: boolean,\r\n    ): AffectedFileResult<EmitResult> {\r\n        Debug.assert(isBuilderProgramStateWithDefinedProgram(state));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getBuildInfo",
            "complexity": 18,
            "lineCount": 333,
            "parameterCount": 1,
            "snippet": "function getBuildInfo(state: BuilderProgramStateWithDefinedProgram): BuildInfo {\r\n    const currentDirectory = state.program.getCurrentDirectory();\r\n    const buildInfoDirectory = getDirectoryPath(getNormalizedAbsolutePath(getTsBuildInfoEmitOutputFilePath(state.compilerOptions)!, currentDirectory));\r\n    const latestChangedDtsFile = state.latestChangedDtsFile ? relativeToBuildInfoEnsuringAbsolutePath(state.latestChangedDtsFile) : undefined;\r\n    const fileNames: string[] = [];\r\n    const fileNameToFileId = new Map<string, IncrementalBuildInfoFileId>();\r\n    const rootFileNames = new Set(state.program.getRootFileNames().map(f => toPath(f, currentDirectory, state.program.getCanonicalFileName)));\r\n    ensureHasErrorsForState(state);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 333 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createBuilderProgramUsingIncrementalBuildInfo",
            "complexity": 12,
            "lineCount": 139,
            "parameterCount": 3,
            "snippet": "export function createBuilderProgramUsingIncrementalBuildInfo(\r\n    buildInfo: IncrementalBuildInfo,\r\n    buildInfoPath: string,\r\n    host: ReadBuildProgramHost,\r\n): EmitAndSemanticDiagnosticsBuilderProgram {\r\n    const buildInfoDirectory = getDirectoryPath(getNormalizedAbsolutePath(buildInfoPath, host.getCurrentDirectory()));\r\n    const getCanonicalFileName = createGetCanonicalFileName(host.useCaseSensitiveFileNames());\r\n    let state: ReusableBuilderProgramState;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 139 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSemanticDiagnosticsOfNextAffectedFile",
            "complexity": 11,
            "lineCount": 52,
            "parameterCount": 2,
            "snippet": "function getSemanticDiagnosticsOfNextAffectedFile(\r\n        cancellationToken: CancellationToken | undefined,\r\n        ignoreSourceFile?: (sourceFile: SourceFile) => boolean,\r\n    ): AffectedFileResult<readonly Diagnostic[]> {\r\n        Debug.assert(isBuilderProgramStateWithDefinedProgram(state));\r\n        while (true) {\r\n            const affected = getNextAffectedFile(state, cancellationToken, host);\r\n            let result;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/builderState.ts",
        "criticalFunctions": [
          {
            "name": "getReferencedFiles",
            "complexity": 14,
            "lineCount": 76,
            "parameterCount": 3,
            "snippet": "function getReferencedFiles(program: Program, sourceFile: SourceFile, getCanonicalFileName: GetCanonicalFileName): Set<Path> | undefined {\r\n        let referencedFiles: Set<Path> | undefined;\r\n        if (sourceFile.imports && sourceFile.imports.length > 0) {\r\n            const checker: TypeChecker = program.getTypeChecker();\r\n            for (const importName of sourceFile.imports) {\r\n                const declarationSourceFilePaths = getReferencedFilesFromImportLiteral(checker, importName);\r\n                declarationSourceFilePaths?.forEach(addReferencedFile);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/checker.ts",
        "criticalFunctions": [
          {
            "name": "structuredTypeRelatedToWorker",
            "complexity": 222,
            "lineCount": 604,
            "parameterCount": 5,
            "snippet": "function structuredTypeRelatedToWorker(source: Type, target: Type, reportErrors: boolean, intersectionState: IntersectionState, saveErrorInfo: ReturnType<typeof captureErrorCalculationState>): Ternary {\r\n            let result: Ternary;\r\n            let originalErrorInfo: DiagnosticMessageChain | undefined;\r\n            let varianceCheckFailed = false;\r\n            let sourceFlags = source.flags;\r\n            const targetFlags = target.flags;\r\n            if (relation === identityRelation) {\r\n                if (sourceFlags & TypeFlags.UnionOrIntersection) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 222 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 604 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkGrammarModifiers",
            "complexity": 179,
            "lineCount": 418,
            "parameterCount": 1,
            "snippet": "function checkGrammarModifiers(node: HasModifiers | HasDecorators | HasIllegalModifiers | HasIllegalDecorators): boolean {\r\n        const quickResult = reportObviousDecoratorErrors(node) || reportObviousModifierErrors(node);\r\n        if (quickResult !== undefined) {\r\n            return quickResult;\r\n        }\r\n        if (isParameter(node) && parameterIsThisKeyword(node)) {\r\n            return grammarErrorOnFirstToken(node, Diagnostics.Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 179 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 418 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkBinaryLikeExpressionWorker",
            "complexity": 119,
            "lineCount": 465,
            "parameterCount": 7,
            "snippet": "function checkBinaryLikeExpressionWorker(\r\n        left: Expression,\r\n        operatorToken: BinaryOperatorToken,\r\n        right: Expression,\r\n        leftType: Type,\r\n        rightType: Type,\r\n        checkMode?: CheckMode,\r\n        errorNode?: Node,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 119 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 465 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkSourceElementWorker",
            "complexity": 108,
            "lineCount": 210,
            "parameterCount": 1,
            "snippet": "function checkSourceElementWorker(node: Node): void {\r\n        if (getNodeCheckFlags(node) & NodeCheckFlags.PartiallyTypeChecked) {\r\n            return;\r\n        }\r\n        if (canHaveJSDoc(node)) {\r\n            forEach(node.jsDoc, ({ comment, tags }) => {\r\n                checkJSDocCommentWorker(comment);\r\n                forEach(tags, tag => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 108 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 210 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveExternalModule",
            "complexity": 105,
            "lineCount": 233,
            "parameterCount": 5,
            "snippet": "function resolveExternalModule(location: Node, moduleReference: string, moduleNotFoundError: DiagnosticMessage | undefined, errorNode: Node | undefined, isForAugmentation = false): Symbol | undefined {\r\n        if (errorNode && startsWith(moduleReference, \"@types/\")) {\r\n            const diag = Diagnostics.Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1;\r\n            const withoutAtTypePrefix = removePrefix(moduleReference, \"@types/\");\r\n            error(errorNode, diag, withoutAtTypePrefix, moduleReference);\r\n        }\r\n        const ambientModule = tryFindAmbientModule(moduleReference, /*withAugmentations*/ true);\r\n        if (ambientModule) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 105 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 233 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/commandLineParser.ts",
        "criticalFunctions": [
          {
            "name": "parseOptionValue",
            "complexity": 22,
            "lineCount": 78,
            "parameterCount": 6,
            "snippet": "function parseOptionValue(\r\n    args: readonly string[],\r\n    i: number,\r\n    diagnostics: ParseCommandLineWorkerDiagnostics,\r\n    opt: CommandLineOption,\r\n    options: OptionsBase,\r\n    errors: Diagnostic[],\r\n) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getConfigFileSpecs",
            "complexity": 20,
            "lineCount": 80,
            "parameterCount": 0,
            "snippet": "function getConfigFileSpecs(): ConfigFileSpecs {\r\n        const referencesOfRaw = getPropFromRaw<ProjectReference>(\"references\", element => typeof element === \"object\", \"object\");\r\n        const filesSpecs = toPropValue(getSpecsFromRaw(\"files\"));\r\n        if (filesSpecs) {\r\n            const hasZeroOrNoReferences = referencesOfRaw === \"no-prop\" || isArray(referencesOfRaw) && referencesOfRaw.length === 0;\r\n            const hasExtends = hasProperty(raw, \"extends\");\r\n            if (filesSpecs.length === 0 && hasZeroOrNoReferences && !hasExtends) {\r\n                if (sourceFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getWildcardDirectories",
            "complexity": 19,
            "lineCount": 55,
            "parameterCount": 3,
            "snippet": "function getWildcardDirectories({ validatedIncludeSpecs: include, validatedExcludeSpecs: exclude }: ConfigFileSpecs, basePath: string, useCaseSensitiveFileNames: boolean): MapLike<WatchDirectoryFlags> {\r\n    const rawExcludeRegex = getRegularExpressionForWildcard(exclude, basePath, \"exclude\");\r\n    const excludeRegex = rawExcludeRegex && new RegExp(rawExcludeRegex, useCaseSensitiveFileNames ? \"\" : \"i\");\r\n    const wildcardDirectories: MapLike<WatchDirectoryFlags> = {};\r\n    const wildCardKeyToPath = new Map<CanonicalKey, string>();\r\n    if (include !== undefined) {\r\n        const recursiveKeys: CanonicalKey[] = [];\r\n        for (const file of include) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "parseConfig",
            "complexity": 18,
            "lineCount": 90,
            "parameterCount": 8,
            "snippet": "function parseConfig(\r\n    json: any,\r\n    sourceFile: TsConfigSourceFile | undefined,\r\n    host: ParseConfigHost,\r\n    basePath: string,\r\n    configFileName: string | undefined,\r\n    resolutionStack: string[],\r\n    errors: Diagnostic[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "onPropertySet",
            "complexity": 16,
            "lineCount": 47,
            "parameterCount": 5,
            "snippet": "function onPropertySet(\r\n        keyText: string,\r\n        value: any,\r\n        propertyAssignment: PropertyAssignment,\r\n        parentOption: TsConfigOnlyOption | undefined,\r\n        option: CommandLineOption | undefined,\r\n    ) {\r\n        if (option && option !== extendsOptionDeclaration) value = convertJsonOption(option, value, basePath, errors, propertyAssignment, propertyAssignment.initializer, sourceFile);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/core.ts",
        "criticalFunctions": [
          {
            "name": "removeMinAndVersionNumbers",
            "complexity": 17,
            "lineCount": 48,
            "parameterCount": 1,
            "snippet": "export function removeMinAndVersionNumbers(fileName: string): string {\r\n    let end: number = fileName.length;\r\n    for (let pos = end - 1; pos > 0; pos--) {\r\n        let ch: number = fileName.charCodeAt(pos);\r\n        if (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) {\r\n            do {\r\n                --pos;\r\n                ch = fileName.charCodeAt(pos);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSet",
            "complexity": 1,
            "lineCount": 122,
            "parameterCount": 2,
            "snippet": "export function createSet<TElement, THash = number>(getHashCode: (element: TElement) => THash, equals: EqualityComparer<TElement>): Set<TElement> {\r\n    const multiMap = new Map<THash, TElement | TElement[]>();\r\n    let size = 0;\r\n    function* getElementIterator(): IterableIterator<TElement> {\r\n        for (const value of multiMap.values()) {\r\n            if (isArray(value)) {\r\n                yield* value;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 122 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/debug.ts",
        "criticalFunctions": [
          {
            "name": "renderGraph",
            "complexity": 26,
            "lineCount": 74,
            "parameterCount": 0,
            "snippet": "function renderGraph() {\r\n            const columnCount = columnWidths.length;\r\n            const laneCount = maxBy(nodes, 0, n => n.lane) + 1;\r\n            const lanes: string[] = fill(Array(laneCount), \"\");\r\n            const grid: (FlowGraphNode | undefined)[][] = columnWidths.map(() => Array(laneCount));\r\n            const connectors: Connection[][] = columnWidths.map(() => fill(Array(laneCount), 0));\r\n            for (const node of nodes) {\r\n                grid[node.level][node.lane] = node;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "enableDebugInfo",
            "complexity": 4,
            "lineCount": 195,
            "parameterCount": 0,
            "snippet": "export function enableDebugInfo(): void {\r\n        if (isDebugInfoEnabled) return;\r\n        const weakTypeTextMap = new WeakMap<Type, string>();\r\n        const weakNodeTextMap = new WeakMap<Node, string>();\r\n        Object.defineProperties(objectAllocator.getSymbolConstructor().prototype, {\r\n            __tsDebuggerDisplay: {\r\n                value(this: Symbol) {\r\n                    const symbolHeader = this.flags & SymbolFlags.Transient ? \"TransientSymbol\" :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 195 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "formatControlFlowGraph",
            "complexity": 2,
            "lineCount": 386,
            "parameterCount": 1,
            "snippet": "export function formatControlFlowGraph(flowNode: FlowNode): string {\r\n        let nextDebugFlowId = -1;\r\n        function getDebugFlowNodeId(f: FlowNode) {\r\n            if (!f.id) {\r\n                f.id = nextDebugFlowId;\r\n                nextDebugFlowId--;\r\n            }\r\n            return f.id;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 386 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/emitter.ts",
        "criticalFunctions": [
          {
            "name": "pipelineEmitWithHintWorker",
            "complexity": 220,
            "lineCount": 475,
            "parameterCount": 3,
            "snippet": "function pipelineEmitWithHintWorker(hint: EmitHint, node: Node, allowSnippets = true): void {\r\n        if (allowSnippets) {\r\n            const snippet = getSnippetElement(node);\r\n            if (snippet) {\r\n                return emitSnippetNode(hint, node, snippet);\r\n            }\r\n        }\r\n        if (hint === EmitHint.SourceFile) return emitSourceFile(cast(node, isSourceFile));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 220 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 475 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitNodeListItems",
            "complexity": 37,
            "lineCount": 129,
            "parameterCount": 9,
            "snippet": "function emitNodeListItems<Child extends Node>(emit: EmitFunction, parentNode: Node | undefined, children: readonly Child[], format: ListFormat, parenthesizerRule: ParenthesizerRuleOrSelector<Child> | undefined, start: number, count: number, hasTrailingComma: boolean, childrenTextRange: TextRange | undefined) {\r\n        const mayEmitInterveningComments = (format & ListFormat.NoInterveningComments) === 0;\r\n        let shouldEmitInterveningComments = mayEmitInterveningComments;\r\n        const leadingLineTerminatorCount = getLeadingLineTerminatorCount(parentNode, children[start], format);\r\n        if (leadingLineTerminatorCount) {\r\n            writeLine(leadingLineTerminatorCount);\r\n            shouldEmitInterveningComments = false;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 129 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateNames",
            "complexity": 34,
            "lineCount": 85,
            "parameterCount": 1,
            "snippet": "function generateNames(node: Node | undefined) {\r\n        if (!node) return;\r\n        switch (node.kind) {\r\n            case SyntaxKind.Block:\r\n                forEach((node as Block).statements, generateNames);\r\n                break;\r\n            case SyntaxKind.LabeledStatement:\r\n            case SyntaxKind.WithStatement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              }
            ]
          },
          {
            "name": "generateNameForNode",
            "complexity": 28,
            "lineCount": 46,
            "parameterCount": 5,
            "snippet": "function generateNameForNode(node: Node, privateName: boolean, flags: GeneratedIdentifierFlags, prefix: string, suffix: string): string {\r\n        switch (node.kind) {\r\n            case SyntaxKind.Identifier:\r\n            case SyntaxKind.PrivateIdentifier:\r\n                return makeUniqueName(\r\n                    getTextOfNode(node as Identifier),\r\n                    isUniqueName,\r\n                    !!(flags & GeneratedIdentifierFlags.Optimistic),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitNodeList",
            "complexity": 22,
            "lineCount": 44,
            "parameterCount": 7,
            "snippet": "function emitNodeList<Child extends Node, Children extends NodeArray<Child>>(emit: EmitFunction, parentNode: Node | undefined, children: Children | undefined, format: ListFormat, parenthesizerRule: ParenthesizerRuleOrSelector<Child> | undefined, start = 0, count = children ? children.length - start : 0) {\r\n        const isUndefined = children === undefined;\r\n        if (isUndefined && format & ListFormat.OptionalIfUndefined) {\r\n            return;\r\n        }\r\n        const isEmpty = children === undefined || start >= children.length || count === 0;\r\n        if (isEmpty && format & ListFormat.OptionalIfEmpty) {\r\n            onBeforeEmitNodeArray?.(children);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/executeCommandLine.ts",
        "criticalFunctions": [
          {
            "name": "executeCommandLineWorker",
            "complexity": 29,
            "lineCount": 173,
            "parameterCount": 3,
            "snippet": "function executeCommandLineWorker(\r\n    sys: System,\r\n    cb: ExecuteCommandLineCallbacks,\r\n    commandLine: ParsedCommandLine,\r\n) {\r\n    let reportDiagnostic = createDiagnosticReporter(sys);\r\n    let configFileName: string | undefined;\r\n    if (commandLine.options.locale) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 173 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reportStatistics",
            "complexity": 17,
            "lineCount": 96,
            "parameterCount": 3,
            "snippet": "function reportStatistics(sys: System, program: Program, solutionPerformance: SolutionPerformance | undefined) {\r\n    const compilerOptions = program.getCompilerOptions();\r\n    if (canTrace(sys, compilerOptions)) {\r\n        tracing?.stopTracing();\r\n    }\r\n    let statistics: Statistic[];\r\n    if (canReportDiagnostics(sys, compilerOptions)) {\r\n        statistics = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateOptionOutput",
            "complexity": 14,
            "lineCount": 175,
            "parameterCount": 4,
            "snippet": "function generateOptionOutput(sys: System, option: CommandLineOption, rightAlignOfLeft: number, leftAlignOfRight: number) {\r\n    interface ValueCandidate {\r\n        valueType: string;\r\n        possibleValues: string;\r\n    }\r\n    const text: string[] = [];\r\n    const colors = createColors(sys);\r\n    const name = getDisplayNameTextOfOption(option);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 175 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "performBuild",
            "complexity": 12,
            "lineCount": 89,
            "parameterCount": 6,
            "snippet": "function performBuild(\r\n    sys: System,\r\n    cb: ExecuteCommandLineCallbacks,\r\n    buildOptions: BuildOptions,\r\n    watchOptions: WatchOptions | undefined,\r\n    projects: string[],\r\n    errors: Diagnostic[],\r\n) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createColors",
            "complexity": 5,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function createColors(sys: System) {\r\n    const showColors = defaultIsPretty(sys);\r\n    if (!showColors) {\r\n        return {\r\n            bold: (str: string) => str,\r\n            blue: (str: string) => str,\r\n            blueBackground: (str: string) => str,\r\n            brightWhite: (str: string) => str,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/expressionToTypeNode.ts",
        "criticalFunctions": [
          {
            "name": "visitExistingNodeTreeSymbolsWorker",
            "complexity": 84,
            "lineCount": 314,
            "parameterCount": 1,
            "snippet": "function visitExistingNodeTreeSymbolsWorker(node: Node): Node | undefined {\r\n            if (isJSDocTypeExpression(node)) {\r\n                return visitNode(node.type, visitExistingNodeTreeSymbols, isTypeNode);\r\n            }\r\n            if (isJSDocAllType(node) || node.kind === SyntaxKind.JSDocNamepathType) {\r\n                return factory.createKeywordTypeNode(SyntaxKind.AnyKeyword);\r\n            }\r\n            if (isJSDocUnknownType(node)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 84 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 314 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "typeFromExpression",
            "complexity": 31,
            "lineCount": 78,
            "parameterCount": 5,
            "snippet": "function typeFromExpression(node: Expression | JsxAttributeValue, context: SyntacticTypeNodeBuilderContext, isConstContext = false, requiresAddingUndefined = false, preserveLiterals = false): SyntacticResult {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ParenthesizedExpression:\r\n                if (isJSDocTypeAssertion(node)) {\r\n                    return typeFromTypeAssertion(node.expression, getJSDocTypeAssertionType(node), context, requiresAddingUndefined);\r\n                }\r\n                return typeFromExpression((node as ParenthesizedExpression).expression, context, isConstContext, requiresAddingUndefined);\r\n            case SyntaxKind.Identifier:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              }
            ]
          },
          {
            "name": "serializeReturnTypeForSignature",
            "complexity": 17,
            "lineCount": 23,
            "parameterCount": 3,
            "snippet": "function serializeReturnTypeForSignature(node: SignatureDeclaration | JSDocSignature, symbol: Symbol, context: SyntacticTypeNodeBuilderContext) {\r\n        switch (node.kind) {\r\n            case SyntaxKind.GetAccessor:\r\n                return serializeTypeOfAccessor(node, symbol, context);\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.ConstructSignature:\r\n            case SyntaxKind.MethodSignature:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "tryReuseExistingTypeNode",
            "complexity": 2,
            "lineCount": 423,
            "parameterCount": 2,
            "snippet": "function tryReuseExistingTypeNode(context: SyntacticTypeNodeBuilderContext, existing: TypeNode): TypeNode | undefined {\r\n        const { finalizeBoundary, startRecoveryScope, hadError, markError } = resolver.createRecoveryBoundary(context);\r\n        const transformed = visitNode(existing, visitExistingNodeTreeSymbols, isTypeNode);\r\n        if (!finalizeBoundary()) {\r\n            return undefined;\r\n        }\r\n        context.approximateLength += existing.end - existing.pos;\r\n        return transformed;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 423 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSyntacticTypeNodeBuilder",
            "complexity": 1,
            "lineCount": 1157,
            "parameterCount": 2,
            "snippet": "export function createSyntacticTypeNodeBuilder(\r\n    options: CompilerOptions,\r\n    resolver: SyntacticTypeNodeBuilderResolver,\r\n): SyntacticNodeBuilder {\r\n    const strictNullChecks = getStrictOptionValue(options, \"strictNullChecks\");\r\n    return {\r\n        serializeTypeOfDeclaration,\r\n        serializeReturnTypeForSignature,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1157 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/moduleNameResolver.ts",
        "criticalFunctions": [
          {
            "name": "tryAddingExtensions",
            "complexity": 61,
            "lineCount": 56,
            "parameterCount": 5,
            "snippet": "function tryAddingExtensions(candidate: string, extensions: Extensions, originalExtension: string, onlyRecordFailures: boolean, state: ModuleResolutionState): PathAndExtension | undefined {\r\n    if (!onlyRecordFailures) {\r\n        const directory = getDirectoryPath(candidate);\r\n        if (directory) {\r\n            onlyRecordFailures = !directoryProbablyExists(directory, state.host);\r\n        }\r\n    }\r\n    switch (originalExtension) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 61 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "loadModuleFromTargetExportOrImport",
            "complexity": 44,
            "lineCount": 231,
            "parameterCount": 4,
            "snippet": "function loadModuleFromTargetExportOrImport(target: unknown, subpath: string, pattern: boolean, key: string): SearchResult<Resolved> | undefined {\r\n        if (typeof target === \"string\") {\r\n            if (!pattern && subpath.length > 0 && !endsWith(target, \"/\")) {\r\n                if (state.traceEnabled) {\r\n                    trace(state.host, Diagnostics.package_json_scope_0_has_invalid_type_for_target_of_specifier_1, scope.packageDirectory, moduleName);\r\n                }\r\n                return toSearchResult(/*value*/ undefined);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 44 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 231 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveTypeReferenceDirective",
            "complexity": 28,
            "lineCount": 187,
            "parameterCount": 7,
            "snippet": "export function resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, cache?: TypeReferenceDirectiveResolutionCache, resolutionMode?: ResolutionMode): ResolvedTypeReferenceDirectiveWithFailedLookupLocations {\r\n    Debug.assert(typeof typeReferenceDirectiveName === \"string\", \"Non-string value passed to `ts.resolveTypeReferenceDirective`, likely by a wrapping package working with an outdated `resolveTypeReferenceDirectives` signature. This is probably not a problem in TS itself.\");\r\n    const traceEnabled = isTraceEnabled(options, host);\r\n    if (redirectedReference) {\r\n        options = redirectedReference.commandLine.options;\r\n    }\r\n    const containingDirectory = containingFile ? getDirectoryPath(containingFile) : undefined;\r\n    let result = containingDirectory ? cache?.getFromDirectoryCache(typeReferenceDirectiveName, resolutionMode, containingDirectory, redirectedReference) : undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 187 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "nodeModuleNameResolverWorker",
            "complexity": 26,
            "lineCount": 157,
            "parameterCount": 10,
            "snippet": "function nodeModuleNameResolverWorker(\r\n    features: NodeResolutionFeatures,\r\n    moduleName: string,\r\n    containingDirectory: string,\r\n    compilerOptions: CompilerOptions,\r\n    host: ModuleResolutionHost,\r\n    cache: ModuleResolutionCache | undefined,\r\n    extensions: Extensions,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 157 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryLoadInputFileForPath",
            "complexity": 26,
            "lineCount": 108,
            "parameterCount": 4,
            "snippet": "function tryLoadInputFileForPath(finalPath: string, entry: string, packagePath: string, isImports: boolean) {\r\n            if (\r\n                !state.isConfigLookup\r\n                && (state.compilerOptions.declarationDir || state.compilerOptions.outDir)\r\n                && !finalPath.includes(\"/node_modules/\")\r\n                && (state.compilerOptions.configFile ? containsPath(scope.packageDirectory, toAbsolutePath(state.compilerOptions.configFile.fileName), !useCaseSensitiveFileNames(state)) : true)\r\n            ) {\r\n                const getCanonicalFileName = hostGetCanonicalFileName({ useCaseSensitiveFileNames: () => useCaseSensitiveFileNames(state) });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/moduleSpecifiers.ts",
        "criticalFunctions": [
          {
            "name": "tryGetModuleNameFromExportsOrImports",
            "complexity": 50,
            "lineCount": 101,
            "parameterCount": 10,
            "snippet": "function tryGetModuleNameFromExportsOrImports(\r\n    options: CompilerOptions,\r\n    host: ModuleSpecifierResolutionHost,\r\n    targetFilePath: string,\r\n    packageDirectory: string,\r\n    packageName: string,\r\n    exports: unknown,\r\n    conditions: string[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 50 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 101 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getLocalModuleSpecifier",
            "complexity": 37,
            "lineCount": 95,
            "parameterCount": 7,
            "snippet": "function getLocalModuleSpecifier(moduleFileName: string, info: Info, compilerOptions: CompilerOptions, host: ModuleSpecifierResolutionHost, importMode: ResolutionMode, { getAllowedEndingsInPreferredOrder: getAllowedEndingsInPrefererredOrder, relativePreference, excludeRegexes }: ModuleSpecifierPreferences, pathsOnly?: boolean): string | undefined {\r\n    const { baseUrl, paths, rootDirs } = compilerOptions;\r\n    if (pathsOnly && !paths) {\r\n        return undefined;\r\n    }\r\n    const { sourceDirectory, canonicalSourceDirectory, getCanonicalFileName } = info;\r\n    const allowedEndings = getAllowedEndingsInPrefererredOrder(importMode);\r\n    const relativePath = rootDirs && tryGetModuleNameFromRootDirs(rootDirs, moduleFileName, sourceDirectory, getCanonicalFileName, allowedEndings, compilerOptions) ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryDirectoryWithPackageJson",
            "complexity": 29,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "function tryDirectoryWithPackageJson(packageRootIndex: number): { moduleFileToTry: string; packageRootPath?: string; blockedByExports?: true; verbatimFromExports?: true; } {\r\n        const packageRootPath = path.substring(0, packageRootIndex);\r\n        const packageJsonPath = combinePaths(packageRootPath, \"package.json\");\r\n        let moduleFileToTry = path;\r\n        let maybeBlockedByTypesVersions = false;\r\n        const cachedPackageJson = host.getPackageJsonInfoCache?.()?.getPackageJsonInfo(packageJsonPath);\r\n        if (isPackageJsonInfo(cachedPackageJson) || cachedPackageJson === undefined && host.fileExists(packageJsonPath)) {\r\n            const packageJsonContent: Record<string, any> | undefined = cachedPackageJson?.contents.packageJsonContent || tryParseJson(host.readFile!(packageJsonPath)!);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "computeModuleSpecifiers",
            "complexity": 23,
            "lineCount": 104,
            "parameterCount": 7,
            "snippet": "function computeModuleSpecifiers(\r\n    modulePaths: readonly ModulePath[],\r\n    compilerOptions: CompilerOptions,\r\n    importingSourceFile: SourceFile | FutureSourceFile,\r\n    host: ModuleSpecifierResolutionHost,\r\n    userPreferences: UserPreferences,\r\n    options: ModuleSpecifierOptions = {},\r\n    forAutoImport: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processEnding",
            "complexity": 21,
            "lineCount": 50,
            "parameterCount": 4,
            "snippet": "function processEnding(fileName: string, allowedEndings: readonly ModuleSpecifierEnding[], options: CompilerOptions, host?: ModuleSpecifierResolutionHost): string {\r\n    if (fileExtensionIsOneOf(fileName, [Extension.Json, Extension.Mjs, Extension.Cjs])) {\r\n        return fileName;\r\n    }\r\n    const noExtension = removeFileExtension(fileName);\r\n    if (fileName === noExtension) {\r\n        return fileName;\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/parser.ts",
        "criticalFunctions": [
          {
            "name": "isListElement",
            "complexity": 59,
            "lineCount": 109,
            "parameterCount": 2,
            "snippet": "function isListElement(parsingContext: ParsingContext, inErrorRecovery: boolean): boolean {\r\n        const node = currentNode(parsingContext);\r\n        if (node) {\r\n            return true;\r\n        }\r\n        switch (parsingContext) {\r\n            case ParsingContext.SourceElements:\r\n            case ParsingContext.BlockStatements:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 59 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              }
            ]
          },
          {
            "name": "parseStatement",
            "complexity": 46,
            "lineCount": 82,
            "parameterCount": 0,
            "snippet": "function parseStatement(): Statement {\r\n        switch (token()) {\r\n            case SyntaxKind.SemicolonToken:\r\n                return parseEmptyStatement();\r\n            case SyntaxKind.OpenBraceToken:\r\n                return parseBlock(/*ignoreMissingOpenBrace*/ false);\r\n            case SyntaxKind.VarKeyword:\r\n                return parseVariableStatement(getNodePos(), hasPrecedingJSDocComment(), /*modifiers*/ undefined);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isStartOfType",
            "complexity": 43,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function isStartOfType(inStartOfParameter?: boolean): boolean {\r\n        switch (token()) {\r\n            case SyntaxKind.AnyKeyword:\r\n            case SyntaxKind.UnknownKeyword:\r\n            case SyntaxKind.StringKeyword:\r\n            case SyntaxKind.NumberKeyword:\r\n            case SyntaxKind.BigIntKeyword:\r\n            case SyntaxKind.BooleanKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isStartOfStatement",
            "complexity": 43,
            "lineCount": 61,
            "parameterCount": 0,
            "snippet": "function isStartOfStatement(): boolean {\r\n        switch (token()) {\r\n            case SyntaxKind.AtToken:\r\n            case SyntaxKind.SemicolonToken:\r\n            case SyntaxKind.OpenBraceToken:\r\n            case SyntaxKind.VarKeyword:\r\n            case SyntaxKind.LetKeyword:\r\n            case SyntaxKind.UsingKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          },
          {
            "name": "parseNonArrayType",
            "complexity": 42,
            "lineCount": 69,
            "parameterCount": 0,
            "snippet": "function parseNonArrayType(): TypeNode {\r\n        switch (token()) {\r\n            case SyntaxKind.AnyKeyword:\r\n            case SyntaxKind.UnknownKeyword:\r\n            case SyntaxKind.StringKeyword:\r\n            case SyntaxKind.NumberKeyword:\r\n            case SyntaxKind.BigIntKeyword:\r\n            case SyntaxKind.SymbolKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/path.ts",
        "criticalFunctions": [
          {
            "name": "getNormalizedAbsolutePath",
            "complexity": 25,
            "lineCount": 93,
            "parameterCount": 2,
            "snippet": "export function getNormalizedAbsolutePath(path: string, currentDirectory: string | undefined): string {\r\n    let rootLength = getRootLength(path);\r\n    if (rootLength === 0 && currentDirectory) {\r\n        path = combinePaths(currentDirectory, path);\r\n        rootLength = getRootLength(path);\r\n    }\r\n    else {\r\n        path = normalizeSlashes(path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getEncodedRootLength",
            "complexity": 21,
            "lineCount": 57,
            "parameterCount": 1,
            "snippet": "function getEncodedRootLength(path: string): number {\r\n    if (!path) return 0;\r\n    const ch0 = path.charCodeAt(0);\r\n    if (ch0 === CharacterCodes.slash || ch0 === CharacterCodes.backslash) {\r\n        if (path.charCodeAt(1) !== ch0) return 1; // POSIX: \"/\" (or non-normalized \"\\\")\r\n        const p1 = path.indexOf(ch0 === CharacterCodes.slash ? directorySeparator : altDirectorySeparator, 2);\r\n        if (p1 < 0) return path.length; // UNC: \"//server\" or \"\\\\server\"\r\n        return p1 + 1; // UNC: \"//server/\" or \"\\\\server\\\"\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/performance.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/performanceCore.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/program.ts",
        "criticalFunctions": [
          {
            "name": "verifyCompilerOptions",
            "complexity": 137,
            "lineCount": 326,
            "parameterCount": 0,
            "snippet": "function verifyCompilerOptions() {\r\n        if (options.strictPropertyInitialization && !getStrictOptionValue(options, \"strictNullChecks\")) {\r\n            createDiagnosticForOptionName(Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"strictPropertyInitialization\", \"strictNullChecks\");\r\n        }\r\n        if (options.exactOptionalPropertyTypes && !getStrictOptionValue(options, \"strictNullChecks\")) {\r\n            createDiagnosticForOptionName(Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"exactOptionalPropertyTypes\", \"strictNullChecks\");\r\n        }\r\n        if (options.isolatedModules || options.verbatimModuleSyntax) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 137 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 326 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryReuseStructureFromOldProgram",
            "complexity": 46,
            "lineCount": 254,
            "parameterCount": 0,
            "snippet": "function tryReuseStructureFromOldProgram(): StructureIsReused {\r\n        if (!oldProgram) {\r\n            return StructureIsReused.Not;\r\n        }\r\n        const oldOptions = oldProgram.getCompilerOptions();\r\n        if (changesAffectModuleResolution(oldOptions, options)) {\r\n            return StructureIsReused.Not;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 254 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "walkArray",
            "complexity": 44,
            "lineCount": 97,
            "parameterCount": 2,
            "snippet": "function walkArray(nodes: NodeArray<Node>, parent: Node) {\r\n                if (canHaveIllegalDecorators(parent)) {\r\n                    const decorator = find(parent.modifiers, isDecorator);\r\n                    if (decorator) {\r\n                        diagnostics.push(createDiagnosticForNode(decorator, Diagnostics.Decorators_are_not_valid_here));\r\n                    }\r\n                }\r\n                else if (canHaveDecorators(parent) && parent.modifiers) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 44 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "findSourceFileWorker",
            "complexity": 43,
            "lineCount": 167,
            "parameterCount": 5,
            "snippet": "function findSourceFileWorker(fileName: string, isDefaultLib: boolean, ignoreNoDefaultLib: boolean, reason: FileIncludeReason, packageId: PackageId | undefined): SourceFile | undefined {\r\n        const path = toPath(fileName);\r\n        if (useSourceOfProjectReferenceRedirect) {\r\n            let source = getSourceOfProjectReferenceRedirect(path);\r\n            if (\r\n                !source &&\r\n                host.realpath &&\r\n                options.preserveSymlinks &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 167 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createProgram",
            "complexity": 42,
            "lineCount": 3338,
            "parameterCount": 5,
            "snippet": "export function createProgram(_rootNamesOrOptions: readonly string[] | CreateProgramOptions, _options?: CompilerOptions, _host?: CompilerHost, _oldProgram?: Program, _configFileParsingDiagnostics?: readonly Diagnostic[]): Program {\r\n    let _createProgramOptions = isArray(_rootNamesOrOptions) ? createCreateProgramOptions(_rootNamesOrOptions, _options!, _host, _oldProgram, _configFileParsingDiagnostics) : _rootNamesOrOptions; // TODO: GH#18217\r\n    const { rootNames, options, configFileParsingDiagnostics, projectReferences, typeScriptVersion, host: createProgramOptionsHost } = _createProgramOptions;\r\n    let { oldProgram } = _createProgramOptions;\r\n    _createProgramOptions = undefined!;\r\n    _rootNamesOrOptions = undefined!;\r\n    for (const option of commandLineOptionOfCustomType) {\r\n        if (hasProperty(options, option.name)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 3338 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/programDiagnostics.ts",
        "criticalFunctions": [
          {
            "name": "createDiagnosticExplainingFile",
            "complexity": 34,
            "lineCount": 115,
            "parameterCount": 5,
            "snippet": "function createDiagnosticExplainingFile(program: Program, file: SourceFile | undefined, fileProcessingReason: FileIncludeReason | undefined, diagnostic: DiagnosticMessage, args: DiagnosticArguments): Diagnostic {\r\n        let seenReasons: Set<FileIncludeReason> | undefined;\r\n        let fileIncludeReasons: DiagnosticMessageChain[] | undefined;\r\n        let relatedInfo: DiagnosticWithLocation[] | undefined;\r\n        let fileIncludeReasonDetails: DiagnosticMessageChain | undefined;\r\n        let redirectInfo: DiagnosticMessageChain[] | undefined;\r\n        let chain: DiagnosticMessageChain | undefined;\r\n        const reasons = file && fileReasons.get(file.path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 34 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fileIncludeReasonToRelatedInformation",
            "complexity": 27,
            "lineCount": 99,
            "parameterCount": 2,
            "snippet": "function fileIncludeReasonToRelatedInformation(program: Program, reason: FileIncludeReason): DiagnosticWithLocation | undefined {\r\n        if (isReferencedFile(reason)) {\r\n            const referenceLocation = getReferencedFileLocation(program, reason);\r\n            let message: DiagnosticMessage;\r\n            switch (reason.kind) {\r\n                case FileIncludeKind.Import:\r\n                    message = Diagnostics.File_is_included_via_import_here;\r\n                    break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createProgramDiagnostics",
            "complexity": 1,
            "lineCount": 339,
            "parameterCount": 1,
            "snippet": "export function createProgramDiagnostics(getCompilerOptionsObjectLiteralSyntax: () => ObjectLiteralExpression | undefined): ProgramDiagnostics {\r\n    let computedDiagnostics: DiagnosticCollection | undefined;\r\n    let fileReasons = createMultiMap<Path, FileIncludeReason>();\r\n    let fileProcessingDiagnostics: FilePreprocessingDiagnostics[] | undefined;\r\n    let commonSourceDirectory: string | undefined;\r\n    let configDiagnostics: DiagnosticCollection | undefined;\r\n    let lazyConfigDiagnostics: LazyConfigDiagnostic[] | undefined;\r\n    let fileReasonsToChain: Map<Path, FileReasonToChainCache> | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 339 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/resolutionCache.ts",
        "criticalFunctions": [
          {
            "name": "resolveNamesWithLocalCache",
            "complexity": 33,
            "lineCount": 121,
            "parameterCount": 1,
            "snippet": "function resolveNamesWithLocalCache<Entry, SourceFile, T extends ResolutionWithFailedLookupLocations, R extends ResolutionWithResolvedFileName>({\r\n        entries,\r\n        containingFile,\r\n        containingSourceFile,\r\n        redirectedReference,\r\n        options,\r\n        perFileCache,\r\n        reusedNames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createFileWatcherOfAffectingLocation",
            "complexity": 14,
            "lineCount": 56,
            "parameterCount": 2,
            "snippet": "function createFileWatcherOfAffectingLocation(affectingLocation: string, forResolution: boolean) {\r\n        const fileWatcher = fileWatchesOfAffectingLocations.get(affectingLocation);\r\n        if (fileWatcher) {\r\n            if (forResolution) fileWatcher.resolutions++;\r\n            else fileWatcher.files++;\r\n            return;\r\n        }\r\n        let locationToWatch = affectingLocation;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scheduleInvalidateResolutionOfFailedLookupLocation",
            "complexity": 11,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "function scheduleInvalidateResolutionOfFailedLookupLocation(fileOrDirectoryPath: Path, isCreatingWatchedDirectory: boolean) {\r\n        if (isCreatingWatchedDirectory) {\r\n            (isInDirectoryChecks ||= new Set()).add(fileOrDirectoryPath);\r\n        }\r\n        else {\r\n            const updatedPath = removeIgnoredPath(fileOrDirectoryPath);\r\n            if (!updatedPath) return false;\r\n            fileOrDirectoryPath = updatedPath;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDirectoryToWatchFailedLookupLocation",
            "complexity": 8,
            "lineCount": 51,
            "parameterCount": 8,
            "snippet": "export function getDirectoryToWatchFailedLookupLocation(\r\n    failedLookupLocation: string,\r\n    failedLookupLocationPath: Path,\r\n    rootDir: string,\r\n    rootPath: Path,\r\n    rootPathComponents: Readonly<PathPathComponents>,\r\n    isRootWatchable: boolean,\r\n    getCurrentDirectory: () => string | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveModuleNameUsingGlobalCache",
            "complexity": 7,
            "lineCount": 42,
            "parameterCount": 7,
            "snippet": "function resolveModuleNameUsingGlobalCache(\r\n    resolutionHost: ResolutionCacheHost,\r\n    moduleResolutionCache: ModuleResolutionCache,\r\n    moduleName: string,\r\n    containingFile: string,\r\n    compilerOptions: CompilerOptions,\r\n    redirectedReference?: ResolvedProjectReference,\r\n    mode?: ResolutionMode,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/scanner.ts",
        "criticalFunctions": [
          {
            "name": "scan",
            "complexity": 167,
            "lineCount": 498,
            "parameterCount": 0,
            "snippet": "function scan(): SyntaxKind {\r\n        fullStartPos = pos;\r\n        tokenFlags = TokenFlags.None;\r\n        while (true) {\r\n            tokenStart = pos;\r\n            if (pos >= end) {\r\n                return token = SyntaxKind.EndOfFileToken;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 167 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 498 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scanEscapeSequence",
            "complexity": 68,
            "lineCount": 164,
            "parameterCount": 1,
            "snippet": "function scanEscapeSequence(flags: EscapeSequenceScanningFlags): string {\r\n        const start = pos;\r\n        pos++;\r\n        if (pos >= end) {\r\n            error(Diagnostics.Unexpected_end_of_text);\r\n            return \"\";\r\n        }\r\n        const ch = charCodeUnchecked(pos);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 68 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scanAlternative",
            "complexity": 53,
            "lineCount": 176,
            "parameterCount": 1,
            "snippet": "function scanAlternative(isInGroup: boolean) {\r\n            let isPreviousTermQuantifiable = false;\r\n            while (true) {\r\n                const start = pos;\r\n                const ch = charCodeChecked(pos);\r\n                switch (ch) {\r\n                    case CharacterCodes.EOF:\r\n                        return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 53 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 176 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reScanSlashToken",
            "complexity": 46,
            "lineCount": 145,
            "parameterCount": 1,
            "snippet": "function reScanSlashToken(reportErrors?: boolean): SyntaxKind {\r\n        if (token === SyntaxKind.SlashToken || token === SyntaxKind.SlashEqualsToken) {\r\n            const startOfRegExpBody = tokenStart + 1;\r\n            pos = startOfRegExpBody;\r\n            let inEscape = false;\r\n            let namedCaptureGroups = false;\r\n            let inCharacterClass = false;\r\n            while (true) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 145 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "scanClassSetCharacter",
            "complexity": 46,
            "lineCount": 73,
            "parameterCount": 0,
            "snippet": "function scanClassSetCharacter(): string {\r\n            const ch = charCodeChecked(pos);\r\n            if (ch === CharacterCodes.EOF) {\r\n                return \"\";\r\n            }\r\n            if (ch === CharacterCodes.backslash) {\r\n                pos++;\r\n                const ch = charCodeChecked(pos);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/semver.ts",
        "criticalFunctions": [
          {
            "name": "parseComparator",
            "complexity": 28,
            "lineCount": 64,
            "parameterCount": 3,
            "snippet": "function parseComparator(operator: string, text: string, comparators: Comparator[]) {\r\n    const result = parsePartial(text);\r\n    if (!result) return false;\r\n    const { version, major, minor, patch } = result;\r\n    if (!isWildcard(major)) {\r\n        switch (operator) {\r\n            case \"~\":\r\n                comparators.push(createComparator(\">=\", version));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/sourcemap.ts",
        "criticalFunctions": [
          {
            "name": "appendSourceMap",
            "complexity": 23,
            "lineCount": 63,
            "parameterCount": 6,
            "snippet": "function appendSourceMap(generatedLine: number, generatedCharacter: number, map: RawSourceMap, sourceMapPath: string, start?: LineAndCharacter, end?: LineAndCharacter) {\r\n        Debug.assert(generatedLine >= pendingGeneratedLine, \"generatedLine cannot backtrack\");\r\n        Debug.assert(generatedCharacter >= 0, \"generatedCharacter cannot be negative\");\r\n        enter();\r\n        const sourceIndexToNewSourceIndexMap: number[] = [];\r\n        let nameIndexToNewNameIndexMap: number[] | undefined;\r\n        const mappingIterator = decodeMappings(map.mappings);\r\n        for (const raw of mappingIterator) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isRawSourceMap",
            "complexity": 18,
            "lineCount": 11,
            "parameterCount": 1,
            "snippet": "function isRawSourceMap(x: any): x is RawSourceMap {\r\n    return x !== null\r\n        && typeof x === \"object\"\r\n        && x.version === 3\r\n        && typeof x.file === \"string\"\r\n        && typeof x.mappings === \"string\"\r\n        && isArray(x.sources) && every(x.sources, isString)\r\n        && (x.sourceRoot === undefined || x.sourceRoot === null || typeof x.sourceRoot === \"string\")\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "commitPendingMapping",
            "complexity": 8,
            "lineCount": 53,
            "parameterCount": 0,
            "snippet": "function commitPendingMapping() {\r\n        if (!hasPending || !shouldCommitMapping()) {\r\n            return;\r\n        }\r\n        enter();\r\n        if (lastGeneratedLine < pendingGeneratedLine) {\r\n            do {\r\n                appendMappingCharCode(CharacterCodes.semicolon);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSourceMapGenerator",
            "complexity": 2,
            "lineCount": 324,
            "parameterCount": 5,
            "snippet": "export function createSourceMapGenerator(host: EmitHost, file: string, sourceRoot: string, sourcesDirectoryPath: string, generatorOptions: SourceMapGeneratorOptions): SourceMapGenerator {\r\n    /* eslint-disable no-var */\r\n    var { enter, exit } = generatorOptions.extendedDiagnostics\r\n        ? performance.createTimer(\"Source Map\", \"beforeSourcemap\", \"afterSourcemap\")\r\n        : performance.nullTimer;\r\n    var rawSources: string[] = [];\r\n    var sources: string[] = [];\r\n    var sourceToSourceIndexMap = new Map<string, number>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 324 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDocumentPositionMapper",
            "complexity": 2,
            "lineCount": 119,
            "parameterCount": 3,
            "snippet": "export function createDocumentPositionMapper(host: DocumentPositionMapperHost, map: RawSourceMap, mapPath: string): DocumentPositionMapper {\r\n    const mapDirectory = getDirectoryPath(mapPath);\r\n    const sourceRoot = map.sourceRoot ? getNormalizedAbsolutePath(map.sourceRoot, mapDirectory) : mapDirectory;\r\n    const generatedAbsoluteFilePath = getNormalizedAbsolutePath(map.file, mapDirectory);\r\n    const generatedFile = host.getSourceFileLike(generatedAbsoluteFilePath);\r\n    const sourceFileAbsolutePaths = map.sources.map(source => getNormalizedAbsolutePath(source, sourceRoot));\r\n    const sourceToSourceIndexMap = new Map(sourceFileAbsolutePaths.map((source, i) => [host.getCanonicalFileName(source), i]));\r\n    let decodedMappings: readonly MappedPosition[] | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 119 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/symbolWalker.ts",
        "criticalFunctions": [
          {
            "name": "createGetSymbolWalker",
            "complexity": 1,
            "lineCount": 187,
            "parameterCount": 10,
            "snippet": "export function createGetSymbolWalker(\r\n    getRestTypeOfSignature: (sig: Signature) => Type,\r\n    getTypePredicateOfSignature: (sig: Signature) => TypePredicate | undefined,\r\n    getReturnTypeOfSignature: (sig: Signature) => Type,\r\n    getBaseTypes: (type: InterfaceType) => BaseType[],\r\n    resolveStructuredTypeMembers: (type: ObjectType) => ResolvedType,\r\n    getTypeOfSymbol: (sym: Symbol) => Type,\r\n    getResolvedSymbol: (node: Identifier) => Symbol,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 187 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSymbolWalker",
            "complexity": 1,
            "lineCount": 172,
            "parameterCount": 1,
            "snippet": "function getSymbolWalker(accept: (symbol: Symbol) => boolean = () => true): SymbolWalker {\r\n        const visitedTypes: Type[] = []; // Sparse array from id to type\r\n        const visitedSymbols: Symbol[] = []; // Sparse array from id to symbol\r\n        return {\r\n            walkType: type => {\r\n                try {\r\n                    visitType(type);\r\n                    return { visitedTypes: getOwnValues(visitedTypes), visitedSymbols: getOwnValues(visitedSymbols) };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 172 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/sys.ts",
        "criticalFunctions": [
          {
            "name": "getNodeSystem",
            "complexity": 12,
            "lineCount": 486,
            "parameterCount": 0,
            "snippet": "function getNodeSystem(): System {\r\n        const nativePattern = /^native |^\\([^)]+\\)$|^(?:internal[\\\\/]|[\\w\\s]+(?:\\.js)?$)/;\r\n        const _fs: typeof import(\"fs\") = require(\"fs\");\r\n        const _path: typeof import(\"path\") = require(\"path\");\r\n        const _os = require(\"os\");\r\n        let _crypto: typeof import(\"crypto\") | undefined;\r\n        try {\r\n            _crypto = require(\"crypto\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 486 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "pollWatchedFileQueue",
            "complexity": 8,
            "lineCount": 55,
            "parameterCount": 5,
            "snippet": "function pollWatchedFileQueue<T extends WatchedFileWithIsClosed>(\r\n    host: { getModifiedTime: NonNullable<System[\"getModifiedTime\"]>; },\r\n    queue: (T | undefined)[],\r\n    pollIndex: number,\r\n    chunkSize: number,\r\n    callbackOnWatchFileStat?: (watchedFile: T, pollIndex: number, fileChanged: boolean) => void,\r\n) {\r\n    let definedValueCopyToIndex = pollIndex;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "updateChildWatches",
            "complexity": 7,
            "lineCount": 51,
            "parameterCount": 3,
            "snippet": "function updateChildWatches(parentDir: string, parentDirPath: Path, options: WatchOptions | undefined) {\r\n        const parentWatcher = cache.get(parentDirPath);\r\n        if (!parentWatcher) return false;\r\n        const target = normalizePath(realpath(parentDir));\r\n        let hasChanges;\r\n        let newChildWatches: ChildDirectoryWatcher[] | undefined;\r\n        if (filePathComparer(target, parentDir) === Comparison.EqualTo) {\r\n            hasChanges = enumerateInsertsAndDeletes<string, ChildDirectoryWatcher>(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDirectoryWatcher",
            "complexity": 5,
            "lineCount": 66,
            "parameterCount": 4,
            "snippet": "function createDirectoryWatcher(\r\n        dirName: string,\r\n        options: WatchOptions | undefined,\r\n        callback?: DirectoryWatcherCallback,\r\n        link?: string,\r\n    ): ChildDirectoryWatcher {\r\n        const dirPath = toCanonicalFilePath(dirName);\r\n        let directoryWatcher = cache.get(dirPath);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fsWatchHandlingExistenceOnHost",
            "complexity": 3,
            "lineCount": 144,
            "parameterCount": 6,
            "snippet": "function fsWatchHandlingExistenceOnHost(\r\n        fileOrDirectory: string,\r\n        entryKind: FileSystemEntryKind,\r\n        callback: FsWatchCallback,\r\n        recursive: boolean,\r\n        fallbackPollingInterval: PollingInterval,\r\n        fallbackOptions: WatchOptions | undefined,\r\n    ): FileWatcher {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 144 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/tracing.ts",
        "criticalFunctions": [
          {
            "name": "dumpTypes",
            "complexity": 18,
            "lineCount": 133,
            "parameterCount": 1,
            "snippet": "function dumpTypes(types: readonly Type[]) {\r\n        performance.mark(\"beginDumpTypes\");\r\n        const typesPath = legend[legend.length - 1].typesPath!;\r\n        const typesFd = fs.openSync(typesPath, \"w\");\r\n        const recursionIdentityMap = new Map<object, number>();\r\n        fs.writeSync(typesFd, \"[\");\r\n        const numTypes = types.length;\r\n        for (let i = 0; i < numTypes; i++) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformer.ts",
        "criticalFunctions": [
          {
            "name": "getScriptTransformers",
            "complexity": 17,
            "lineCount": 64,
            "parameterCount": 3,
            "snippet": "function getScriptTransformers(compilerOptions: CompilerOptions, customTransformers?: CustomTransformers, emitOnly?: boolean | EmitOnly) {\r\n    if (emitOnly) return emptyArray;\r\n    const languageVersion = getEmitScriptTarget(compilerOptions);\r\n    const moduleKind = getEmitModuleKind(compilerOptions);\r\n    const useDefineForClassFields = getUseDefineForClassFields(compilerOptions);\r\n    const transformers: TransformerFactory<SourceFile | Bundle>[] = [];\r\n    addRange(transformers, customTransformers && map(customTransformers.before, wrapScriptTransformerFactory));\r\n    transformers.push(transformTypeScript);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              }
            ]
          },
          {
            "name": "endLexicalEnvironment",
            "complexity": 10,
            "lineCount": 55,
            "parameterCount": 0,
            "snippet": "function endLexicalEnvironment(): Statement[] | undefined {\r\n        Debug.assert(state > TransformationState.Uninitialized, \"Cannot modify the lexical environment during initialization.\");\r\n        Debug.assert(state < TransformationState.Completed, \"Cannot modify the lexical environment after transformation has completed.\");\r\n        Debug.assert(!lexicalEnvironmentSuspended, \"Lexical environment is suspended.\");\r\n        let statements: Statement[] | undefined;\r\n        if (\r\n            lexicalEnvironmentVariableDeclarations ||\r\n            lexicalEnvironmentFunctionDeclarations ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformNodes",
            "complexity": 5,
            "lineCount": 419,
            "parameterCount": 7,
            "snippet": "export function transformNodes<T extends Node>(resolver: EmitResolver | undefined, host: EmitHost | undefined, factory: NodeFactory, options: CompilerOptions, nodes: readonly T[], transformers: readonly TransformerFactory<T>[], allowDtsFiles: boolean): TransformationResult<T> {\r\n    const enabledSyntaxKindFeatures = new Array<SyntaxKindFeatureFlags>(SyntaxKind.Count);\r\n    let lexicalEnvironmentVariableDeclarations: VariableDeclaration[];\r\n    let lexicalEnvironmentFunctionDeclarations: FunctionDeclaration[];\r\n    let lexicalEnvironmentStatements: Statement[];\r\n    let lexicalEnvironmentFlags = LexicalEnvironmentFlags.None;\r\n    let lexicalEnvironmentVariableDeclarationsStack: VariableDeclaration[][] = [];\r\n    let lexicalEnvironmentFunctionDeclarationsStack: FunctionDeclaration[][] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 419 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/tsbuildPublic.ts",
        "criticalFunctions": [
          {
            "name": "getUpToDateStatusWorker",
            "complexity": 74,
            "lineCount": 323,
            "parameterCount": 3,
            "snippet": "function getUpToDateStatusWorker<T extends BuilderProgram>(state: SolutionBuilderState<T>, project: ParsedCommandLine, resolvedPath: ResolvedConfigFilePath): UpToDateStatus {\r\n    if (isSolutionConfig(project)) return { type: UpToDateStatusType.ContainerOnly };\r\n    let referenceStatuses;\r\n    const force = !!state.options.force;\r\n    if (project.projectReferences) {\r\n        state.projectStatus.set(resolvedPath, { type: UpToDateStatusType.ComputingUpstream });\r\n        for (const ref of project.projectReferences) {\r\n            const resolvedRef = resolveProjectReferencePath(ref);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 74 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 323 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "reportUpToDateStatus",
            "complexity": 24,
            "lineCount": 132,
            "parameterCount": 3,
            "snippet": "function reportUpToDateStatus<T extends BuilderProgram>(state: SolutionBuilderState<T>, configFileName: string, status: UpToDateStatus) {\r\n    switch (status.type) {\r\n        case UpToDateStatusType.OutOfDateWithSelf:\r\n            return reportStatus(\r\n                state,\r\n                Diagnostics.Project_0_is_out_of_date_because_output_1_is_older_than_input_2,\r\n                relName(state, configFileName),\r\n                relName(state, status.outOfDateOutputFileName),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 132 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getNextInvalidatedProjectCreateInfo",
            "complexity": 18,
            "lineCount": 112,
            "parameterCount": 3,
            "snippet": "function getNextInvalidatedProjectCreateInfo<T extends BuilderProgram>(\r\n    state: SolutionBuilderState<T>,\r\n    buildOrder: AnyBuildOrder,\r\n    reportQueue: boolean,\r\n): InvalidateProjectCreateInfo | undefined {\r\n    if (!state.projectPendingBuild.size) return undefined;\r\n    if (isCircularBuildOrder(buildOrder)) return undefined;\r\n    const { options, projectPendingBuild } = state;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "queueReferencingProjects",
            "complexity": 18,
            "lineCount": 59,
            "parameterCount": 7,
            "snippet": "function queueReferencingProjects<T extends BuilderProgram>(\r\n    state: SolutionBuilderState<T>,\r\n    project: ResolvedConfigFileName,\r\n    projectPath: ResolvedConfigFilePath,\r\n    projectIndex: number,\r\n    config: ParsedCommandLine,\r\n    buildOrder: readonly ResolvedConfigFileName[],\r\n    buildResult: BuildResultFlags,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "updateOutputTimestampsWorker",
            "complexity": 14,
            "lineCount": 51,
            "parameterCount": 5,
            "snippet": "function updateOutputTimestampsWorker<T extends BuilderProgram>(\r\n    state: SolutionBuilderState<T>,\r\n    proj: ParsedCommandLine,\r\n    projectPath: ResolvedConfigFilePath,\r\n    verboseMessage: DiagnosticMessage,\r\n    skipOutputs?: Map<Path, string>,\r\n) {\r\n    if (proj.options.noEmit) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/types.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/utilities.ts",
        "criticalFunctions": [
          {
            "name": "resolveNameHelper",
            "complexity": 161,
            "lineCount": 394,
            "parameterCount": 6,
            "snippet": "function resolveNameHelper(\r\n        location: Node | undefined,\r\n        nameArg: __String | Identifier,\r\n        meaning: SymbolFlags,\r\n        nameNotFoundMessage: DiagnosticMessage | undefined,\r\n        isUse: boolean,\r\n        excludeGlobals?: boolean,\r\n    ): Symbol | undefined {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 161 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 394 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isSourceElement",
            "complexity": 94,
            "lineCount": 99,
            "parameterCount": 1,
            "snippet": "export function isSourceElement(node: Node): boolean {\r\n    switch (node.kind) {\r\n        case SyntaxKind.TypeParameter:\r\n        case SyntaxKind.Parameter:\r\n        case SyntaxKind.PropertyDeclaration:\r\n        case SyntaxKind.PropertySignature:\r\n        case SyntaxKind.ConstructorType:\r\n        case SyntaxKind.FunctionType:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 94 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          },
          {
            "name": "canHaveJSDoc",
            "complexity": 68,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "export function canHaveJSDoc(node: Node): node is HasJSDoc {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ArrowFunction:\r\n        case SyntaxKind.BinaryExpression:\r\n        case SyntaxKind.Block:\r\n        case SyntaxKind.BreakStatement:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.CaseClause:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 68 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isExpressionNode",
            "complexity": 66,
            "lineCount": 69,
            "parameterCount": 1,
            "snippet": "export function isExpressionNode(node: Node): boolean {\r\n    switch (node.kind) {\r\n        case SyntaxKind.SuperKeyword:\r\n        case SyntaxKind.NullKeyword:\r\n        case SyntaxKind.TrueKeyword:\r\n        case SyntaxKind.FalseKeyword:\r\n        case SyntaxKind.RegularExpressionLiteral:\r\n        case SyntaxKind.ArrayLiteralExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 66 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getOperatorPrecedence",
            "complexity": 65,
            "lineCount": 99,
            "parameterCount": 3,
            "snippet": "export function getOperatorPrecedence(nodeKind: SyntaxKind, operatorKind: SyntaxKind, hasArguments?: boolean): OperatorPrecedence {\r\n    switch (nodeKind) {\r\n        case SyntaxKind.CommaListExpression:\r\n            return OperatorPrecedence.Comma;\r\n        case SyntaxKind.SpreadElement:\r\n            return OperatorPrecedence.Spread;\r\n        case SyntaxKind.YieldExpression:\r\n            return OperatorPrecedence.Yield;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 65 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/utilitiesPublic.ts",
        "criticalFunctions": [
          {
            "name": "canHaveSymbol",
            "complexity": 66,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "export function canHaveSymbol(node: Node): node is Declaration {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ArrowFunction:\r\n        case SyntaxKind.BinaryExpression:\r\n        case SyntaxKind.BindingElement:\r\n        case SyntaxKind.CallExpression:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.ClassDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 66 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              }
            ]
          },
          {
            "name": "isDeclarationKind",
            "complexity": 36,
            "lineCount": 38,
            "parameterCount": 1,
            "snippet": "function isDeclarationKind(kind: SyntaxKind) {\r\n    return kind === SyntaxKind.ArrowFunction\r\n        || kind === SyntaxKind.BindingElement\r\n        || kind === SyntaxKind.ClassDeclaration\r\n        || kind === SyntaxKind.ClassExpression\r\n        || kind === SyntaxKind.ClassStaticBlockDeclaration\r\n        || kind === SyntaxKind.Constructor\r\n        || kind === SyntaxKind.EnumDeclaration\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "isLeftHandSideExpressionKind",
            "complexity": 33,
            "lineCount": 38,
            "parameterCount": 1,
            "snippet": "function isLeftHandSideExpressionKind(kind: SyntaxKind): boolean {\r\n    switch (kind) {\r\n        case SyntaxKind.PropertyAccessExpression:\r\n        case SyntaxKind.ElementAccessExpression:\r\n        case SyntaxKind.NewExpression:\r\n        case SyntaxKind.CallExpression:\r\n        case SyntaxKind.JsxElement:\r\n        case SyntaxKind.JsxSelfClosingElement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "canHaveLocals",
            "complexity": 32,
            "lineCount": 37,
            "parameterCount": 1,
            "snippet": "export function canHaveLocals(node: Node): node is HasLocals {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ArrowFunction:\r\n        case SyntaxKind.Block:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.CaseBlock:\r\n        case SyntaxKind.CatchClause:\r\n        case SyntaxKind.ClassStaticBlockDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getNonAssignedNameOfDeclaration",
            "complexity": 21,
            "lineCount": 45,
            "parameterCount": 1,
            "snippet": "export function getNonAssignedNameOfDeclaration(declaration: Declaration | Expression): DeclarationName | undefined {\r\n    switch (declaration.kind) {\r\n        case SyntaxKind.Identifier:\r\n            return declaration as Identifier;\r\n        case SyntaxKind.JSDocPropertyTag:\r\n        case SyntaxKind.JSDocParameterTag: {\r\n            const { name } = declaration as JSDocPropertyLikeTag;\r\n            if (name.kind === SyntaxKind.QualifiedName) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/visitorPublic.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/watch.ts",
        "criticalFunctions": [
          {
            "name": "fileIncludeReasonToDiagnostics",
            "complexity": 35,
            "lineCount": 107,
            "parameterCount": 3,
            "snippet": "export function fileIncludeReasonToDiagnostics(program: Program, reason: FileIncludeReason, fileNameConvertor?: (fileName: string) => string): DiagnosticMessageChain {\r\n    const options = program.getCompilerOptions();\r\n    if (isReferencedFile(reason)) {\r\n        const referenceLocation = getReferencedFileLocation(program, reason);\r\n        const referenceText = isReferenceFileLocation(referenceLocation) ? referenceLocation.file.text.substring(referenceLocation.pos, referenceLocation.end) : `\"${referenceLocation.text}\"`;\r\n        let message: DiagnosticMessage;\r\n        Debug.assert(isReferenceFileLocation(referenceLocation) || reason.kind === FileIncludeKind.Import, \"Only synthetic references are imports\");\r\n        switch (reason.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "explainIfFileIsRedirectAndImpliedFormat",
            "complexity": 10,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "export function explainIfFileIsRedirectAndImpliedFormat(\r\n    file: SourceFile,\r\n    options: CompilerOptions,\r\n    fileNameConvertor?: (fileName: string) => string,\r\n): DiagnosticMessageChain[] | undefined {\r\n    let result: DiagnosticMessageChain[] | undefined;\r\n    if (file.path !== file.resolvedPath) {\r\n        (result ??= []).push(chainDiagnosticMessages(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitFilesAndReportErrors",
            "complexity": 10,
            "lineCount": 68,
            "parameterCount": 8,
            "snippet": "export function emitFilesAndReportErrors<T extends BuilderProgram>(\r\n    program: Program | T,\r\n    reportDiagnostic: DiagnosticReporter,\r\n    write?: (s: string) => void,\r\n    reportSummary?: ReportEmitErrorSummary,\r\n    writeFile?: WriteFileCallback,\r\n    cancellationToken?: CancellationToken,\r\n    emitOnlyDtsFiles?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "emitFilesAndReportErrorsAndGetExitStatus",
            "complexity": 4,
            "lineCount": 32,
            "parameterCount": 8,
            "snippet": "export function emitFilesAndReportErrorsAndGetExitStatus<T extends BuilderProgram>(\r\n    program: Program | T,\r\n    reportDiagnostic: DiagnosticReporter,\r\n    write?: (s: string) => void,\r\n    reportSummary?: ReportEmitErrorSummary,\r\n    writeFile?: WriteFileCallback,\r\n    cancellationToken?: CancellationToken,\r\n    emitOnlyDtsFiles?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/watchPublic.ts",
        "criticalFunctions": [
          {
            "name": "createWatchProgram",
            "complexity": 24,
            "lineCount": 844,
            "parameterCount": 1,
            "snippet": "export function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfFilesAndCompilerOptionsOrConfigFile<T>): WatchOfFilesAndCompilerOptions<T> | WatchOfConfigFile<T> {\r\n    interface FilePresentOnHost {\r\n        version: string;\r\n        sourceFile: SourceFile;\r\n        fileWatcher: FileWatcher;\r\n    }\r\n    type FileMissingOnHost = false;\r\n    interface FilePresenceUnknownOnHost {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 844 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "synchronizeProgram",
            "complexity": 10,
            "lineCount": 68,
            "parameterCount": 0,
            "snippet": "function synchronizeProgram() {\r\n        writeLog(`Synchronizing program`);\r\n        Debug.assert(compilerOptions);\r\n        Debug.assert(rootFileNames);\r\n        clearInvalidateResolutionsOfFailedLookupLocations();\r\n        const program = getCurrentBuilderProgram();\r\n        if (hasChangedCompilerOptions) {\r\n            newLine = updateNewLine();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "watchReferencedProject",
            "complexity": 3,
            "lineCount": 68,
            "parameterCount": 3,
            "snippet": "function watchReferencedProject(configFileName: string, configPath: Path, commandLine: ParsedConfig) {\r\n        commandLine.watcher ||= watchFile(\r\n            configFileName,\r\n            (_fileName, eventKind) => {\r\n                updateCachedSystemWithFile(configFileName, configPath, eventKind);\r\n                const config = parsedConfigs?.get(configPath);\r\n                if (config) config.updateLevel = ProgramUpdateLevel.Full;\r\n                resolutionCache.removeResolutionsFromProjectReferenceRedirects(configPath);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createWatchCompilerHost",
            "complexity": 2,
            "lineCount": 26,
            "parameterCount": 8,
            "snippet": "export function createWatchCompilerHost<T extends BuilderProgram>(rootFilesOrConfigFileName: string | string[], options: CompilerOptions | undefined, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, projectReferencesOrWatchOptionsToExtend?: readonly ProjectReference[] | WatchOptions, watchOptionsOrExtraFileExtensions?: WatchOptions | readonly FileExtensionInfo[]): WatchCompilerHostOfFilesAndCompilerOptions<T> | WatchCompilerHostOfConfigFile<T> {\r\n    if (isArray(rootFilesOrConfigFileName)) {\r\n        return createWatchCompilerHostOfFilesAndCompilerOptions({\r\n            rootFiles: rootFilesOrConfigFileName,\r\n            options: options!,\r\n            watchOptions: watchOptionsOrExtraFileExtensions as WatchOptions,\r\n            projectReferences: projectReferencesOrWatchOptionsToExtend as readonly ProjectReference[],\r\n            system,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/watchUtilities.ts",
        "criticalFunctions": [
          {
            "name": "isIgnoredFileFromWildCardWatching",
            "complexity": 19,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "export function isIgnoredFileFromWildCardWatching({\r\n    watchedDirPath,\r\n    fileOrDirectory,\r\n    fileOrDirectoryPath,\r\n    configFileName,\r\n    options,\r\n    program,\r\n    extraFileExtensions,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCachedDirectoryStructureHost",
            "complexity": 7,
            "lineCount": 262,
            "parameterCount": 3,
            "snippet": "export function createCachedDirectoryStructureHost(host: DirectoryStructureHost, currentDirectory: string, useCaseSensitiveFileNames: boolean): CachedDirectoryStructureHost | undefined {\r\n    if (!host.getDirectories || !host.readDirectory) {\r\n        return undefined;\r\n    }\r\n    const cachedReadDirectoryResult = new Map<string, MutableFileSystemEntries | false>();\r\n    const getCanonicalFileName = createGetCanonicalFileName(useCaseSensitiveFileNames) as ((name: string) => Canonicalized);\r\n    return {\r\n        useCaseSensitiveFileNames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 262 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getWatchFactory",
            "complexity": 6,
            "lineCount": 133,
            "parameterCount": 4,
            "snippet": "export function getWatchFactory<X, Y = undefined>(host: WatchFactoryHost, watchLogLevel: WatchLogLevel, log: (s: string) => void, getDetailWatchInfo?: GetDetailWatchInfo<X, Y>): WatchFactory<X, Y> {\r\n    setSysLog(watchLogLevel === WatchLogLevel.Verbose ? log : noop);\r\n    const plainInvokeFactory: WatchFactory<X, Y> = {\r\n        watchFile: (file, callback, pollingInterval, options) => host.watchFile(file, callback, pollingInterval, options),\r\n        watchDirectory: (directory, callback, flags, options) => host.watchDirectory(directory, callback, (flags & WatchDirectoryFlags.Recursive) !== 0, options),\r\n    };\r\n    const triggerInvokingFactory: WatchFactory<X, Y> | undefined = watchLogLevel !== WatchLogLevel.None ?\r\n        {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "jsTyping/jsTyping.ts",
        "criticalFunctions": [
          {
            "name": "discoverTypings",
            "complexity": 12,
            "lineCount": 218,
            "parameterCount": 10,
            "snippet": "export function discoverTypings(\r\n    host: TypingResolutionHost,\r\n    log: ((message: string) => void) | undefined,\r\n    fileNames: string[],\r\n    projectRootPath: Path,\r\n    safeList: SafeList,\r\n    packageNameToTypingLocation: ReadonlyMap<string, CachedTyping>,\r\n    typeAcquisition: TypeAcquisition,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 218 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTypingNames",
            "complexity": 12,
            "lineCount": 92,
            "parameterCount": 4,
            "snippet": "function getTypingNames(projectRootPath: string, manifestName: string, modulesDirName: string, filesToWatch: string[]): void {\r\n        const manifestPath = combinePaths(projectRootPath, manifestName);\r\n        let manifest;\r\n        let manifestTypingNames;\r\n        if (host.fileExists(manifestPath)) {\r\n            filesToWatch.push(manifestPath);\r\n            manifest = readConfigFile(manifestPath, path => host.readFile(path)).config;\r\n            manifestTypingNames = flatMap([manifest.dependencies, manifest.devDependencies, manifest.optionalDependencies, manifest.peerDependencies], getOwnKeys);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "harness/client.ts",
        "criticalFunctions": [
          {
            "name": "getEditsForRefactor",
            "complexity": 6,
            "lineCount": 44,
            "parameterCount": 7,
            "snippet": "getEditsForRefactor(\r\n        fileName: string,\r\n        _formatOptions: FormatCodeSettings,\r\n        positionOrRange: number | TextRange,\r\n        refactorName: string,\r\n        actionName: string,\r\n        preferences: UserPreferences | undefined,\r\n        interactiveRefactorArguments?: InteractiveRefactorArguments,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "getCompletionEntryDetails",
            "complexity": 1,
            "lineCount": 8,
            "parameterCount": 7,
            "snippet": "getCompletionEntryDetails(fileName: string, position: number, entryName: string, _options: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, _preferences: UserPreferences | undefined, data: unknown): CompletionEntryDetails {\r\n        const args: protocol.CompletionDetailsRequestArgs = { ...this.createFileLocationRequestArgs(fileName, position), entryNames: [{ name: entryName, source, data }] };\r\n        const request = this.processRequest<protocol.CompletionDetailsRequest>(protocol.CommandTypes.CompletionDetailsFull, args);\r\n        const response = this.processResponse<protocol.Response>(request);\r\n        Debug.assert(response.body.length === 1, \"Unexpected length of completion details response body.\");\r\n        return response.body[0];\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "harness/collectionsImpl.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "harness/compilerImpl.ts",
        "criticalFunctions": [
          {
            "name": "compileFiles",
            "complexity": 24,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "export function compileFiles(host: fakes.CompilerHost, rootFiles: string[] | undefined, compilerOptions: ts.CompilerOptions, typeScriptVersion?: string, captureSuggestions?: boolean): CompilationResult {\r\n    if (compilerOptions.project || !rootFiles || rootFiles.length === 0) {\r\n        const project = readProject(host.parseConfigHost, compilerOptions.project, compilerOptions);\r\n        if (project) {\r\n            if (project.errors && project.errors.length > 0) {\r\n                return new CompilationResult(host, compilerOptions, /*program*/ undefined, /*result*/ undefined, project.errors);\r\n            }\r\n            if (project.config) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 22,
            "lineCount": 78,
            "parameterCount": 5,
            "snippet": "constructor(host: fakes.CompilerHost, options: ts.CompilerOptions, program: ts.Program | undefined, result: ts.EmitResult | undefined, diagnostics: readonly ts.Diagnostic[]) {\r\n        this.host = host;\r\n        this.program = program;\r\n        this.result = result;\r\n        this.diagnostics = diagnostics;\r\n        this.options = program ? program.getCompilerOptions() : options;\r\n        const js = this.js = new collections.SortedMap<string, documents.TextDocument>({ comparer: this.vfs.stringComparer, sort: \"insertion\" });\r\n        const dts = this.dts = new collections.SortedMap<string, documents.TextDocument>({ comparer: this.vfs.stringComparer, sort: \"insertion\" });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/documentsUtil.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 15,
            "lineCount": 59,
            "parameterCount": 2,
            "snippet": "constructor(mapFile: string | undefined, data: string | RawSourceMap) {\r\n        this.raw = typeof data === \"string\" ? JSON.parse(data) as RawSourceMap : data;\r\n        this.mapFile = mapFile;\r\n        this.version = this.raw.version;\r\n        this.file = this.raw.file;\r\n        this.sourceRoot = this.raw.sourceRoot;\r\n        this.sources = this.raw.sources;\r\n        this.sourcesContent = this.raw.sourcesContent;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "harness/evaluatorImpl.ts",
        "criticalFunctions": [
          {
            "name": "linkModule",
            "complexity": 24,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "private linkModule(module: SystemModule) {\r\n        try {\r\n            for (;;) {\r\n                switch (module.state) {\r\n                    case SystemModuleState.Uninstantiated: {\r\n                        throw new Error(\"Module not yet instantiated\");\r\n                    }\r\n                    case SystemModuleState.Instantiated: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "linkModule",
            "complexity": 23,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "private linkModule(module: AmdModule) {\r\n        try {\r\n            for (;;) {\r\n                switch (module.state) {\r\n                    case AmdModuleState.Uninstantiated: {\r\n                        throw new Error(\"Module not yet instantiated\");\r\n                    }\r\n                    case AmdModuleState.Instantiated: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "harness/fakesHosts.ts",
        "criticalFunctions": [
          {
            "name": "getSourceFile",
            "complexity": 18,
            "lineCount": 69,
            "parameterCount": 2,
            "snippet": "public getSourceFile(fileName: string, languageVersionOrOptions: ts.ScriptTarget | ts.CreateSourceFileOptions): ts.SourceFile | undefined {\r\n        const canonicalFileName = this.getCanonicalFileName(vpath.resolve(this.getCurrentDirectory(), fileName));\r\n        const existing = this._sourceFiles.get(canonicalFileName);\r\n        if (existing) return existing;\r\n        const content = this.readFile(canonicalFileName);\r\n        if (content === undefined) return undefined;\r\n        const cacheKey = this.vfs.shadowRoot && `SourceFile[languageVersionOrOptions=${languageVersionOrOptions},setParentNodes=${this._setParentNodes}]`;\r\n        if (cacheKey) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/harnessIO.ts",
        "criticalFunctions": [
          {
            "name": "runMultifileBaseline",
            "complexity": 30,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "export function runMultifileBaseline(relativeFileBase: string, extension: string, generateContent: () => IterableIterator<[string, string, number]> | IterableIterator<[string, string]> | null, opts?: BaselineOptions, referencedExtensions?: string[]): void { // eslint-disable-line no-restricted-syntax\r\n        const gen = generateContent();\r\n        const writtenFiles = new Map<string, true>();\r\n        const errors: Error[] = [];\r\n        if (gen !== null) {\r\n            for (const value of gen) {\r\n                const [name, content, count] = value as [string, string, number | undefined];\r\n                if (count === 0) continue; // Allow error reporter to skip writing files without errors\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "splitVaryBySettingValue",
            "complexity": 20,
            "lineCount": 60,
            "parameterCount": 2,
            "snippet": "function splitVaryBySettingValue(text: string, varyBy: string): string[] | undefined {\r\n    if (!text) return undefined;\r\n    let star = false;\r\n    const includes: string[] = [];\r\n    const excludes: string[] = [];\r\n    for (let s of text.split(/,/)) {\r\n        s = s.trim().toLowerCase();\r\n        if (s.length === 0) continue;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "iterateBaseLine",
            "complexity": 18,
            "lineCount": 46,
            "parameterCount": 2,
            "snippet": "function* iterateBaseLine(isSymbolBaseline: boolean, skipBaseline?: boolean): IterableIterator<[string, string]> {\r\n            if (skipBaseline) {\r\n                return;\r\n            }\r\n            const dupeCase = new Map<string, number>();\r\n            for (const file of allFiles) {\r\n                const { unitName } = file;\r\n                let typeLines = \"=== \" + unitName + \" ===\\r\\n\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "makeUnitsFromTest",
            "complexity": 16,
            "lineCount": 133,
            "parameterCount": 3,
            "snippet": "export function makeUnitsFromTest(code: string, fileName: string, settings: CompilerSettings = extractCompilerSettings(code)): TestCaseContent {\r\n        const testUnitData: TestUnitData[] = [];\r\n        const lines = Utils.splitContentByNewlines(code);\r\n        let currentFileContent: string | undefined;\r\n        let currentFileOptions: any = {};\r\n        let currentFileName: any;\r\n        let refs: string[] = [];\r\n        let symlinks: vfs.FileSet | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 133 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "prepareDeclarationCompilationContext",
            "complexity": 14,
            "lineCount": 74,
            "parameterCount": 6,
            "snippet": "export function prepareDeclarationCompilationContext(\r\n        inputFiles: readonly TestFile[],\r\n        otherFiles: readonly TestFile[],\r\n        result: compiler.CompilationResult,\r\n        harnessSettings: TestCaseParser.CompilerSettings & HarnessOptions,\r\n        options: ts.CompilerOptions,\r\n        currentDirectory: string | undefined,\r\n    ): DeclarationCompilationContext | undefined {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/harnessLanguageService.ts",
        "criticalFunctions": [
          {
            "name": "require",
            "complexity": 6,
            "lineCount": 100,
            "parameterCount": 2,
            "snippet": "require(_initialDir: string, _moduleName: string): ts.ModuleImportResult {\r\n        switch (_moduleName) {\r\n            case \"quickinfo-augmeneter\":\r\n                return {\r\n                    module: () => ({\r\n                        create(info: ts.server.PluginCreateInfo) {\r\n                            const proxy = makeDefaultProxy(info);\r\n                            const langSvc: any = info.languageService;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/harnessUtils.ts",
        "criticalFunctions": [
          {
            "name": "serializeNode",
            "complexity": 26,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "function serializeNode(n: ts.Node): any {\r\n        const o: any = { kind: getKindName(n.kind) };\r\n        if (ts.containsParseError(n)) {\r\n            o.containsParseError = true;\r\n        }\r\n        for (const propertyName of Object.getOwnPropertyNames(n) as readonly (keyof ts.SourceFile | keyof ts.Identifier | keyof ts.StringLiteral)[]) {\r\n            switch (propertyName) {\r\n                case \"parent\":\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "assertInvariantsWorker",
            "complexity": 20,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function assertInvariantsWorker(node: ts.Node | undefined, parent: ts.Node | undefined): void {\r\n        if (node) {\r\n            assert.isFalse(node.pos < 0, \"node.pos < 0\");\r\n            assert.isFalse(node.end < 0, \"node.end < 0\");\r\n            assert.isFalse(node.end < node.pos, \"node.end < node.pos\");\r\n            assert.equal(node.parent, parent, \"node.parent !== parent\");\r\n            if (parent) {\r\n                assert.isFalse(node.pos < parent.pos, \"node.pos < parent.pos\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "assertInvariants",
            "complexity": 2,
            "lineCount": 78,
            "parameterCount": 2,
            "snippet": "export function assertInvariants(node: ts.Node | undefined, parent: ts.Node | undefined): void {\r\n    const queue: [ts.Node | undefined, ts.Node | undefined][] = [[node, parent]];\r\n    for (const [node, parent] of queue) {\r\n        assertInvariantsWorker(node, parent);\r\n    }\r\n    function assertInvariantsWorker(node: ts.Node | undefined, parent: ts.Node | undefined): void {\r\n        if (node) {\r\n            assert.isFalse(node.pos < 0, \"node.pos < 0\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "sourceFileToJSON",
            "complexity": 1,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "export function sourceFileToJSON(file: ts.Node): string {\r\n    return JSON.stringify(file, (_, v) => isNodeOrArray(v) ? serializeNode(v) : v, \"    \");\r\n    function getKindName(k: number | string | undefined): string | undefined {\r\n        if (k === undefined || ts.isString(k)) {\r\n            return k;\r\n        }\r\n        return ts.Debug.formatSyntaxKind(k);\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/incrementalUtils.ts",
        "criticalFunctions": [
          {
            "name": "collectResolution",
            "complexity": 2,
            "lineCount": 30,
            "parameterCount": 7,
            "snippet": "function collectResolution<T extends ts.ResolutionWithFailedLookupLocations>(\r\n        cacheType: string,\r\n        fileName: ts.Path,\r\n        resolved: T,\r\n        resolvedFileName: string | undefined,\r\n        name: string,\r\n        mode: ts.ResolutionMode,\r\n        deferWatchingNonRelativeResolution: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "verifyProgram",
            "complexity": 2,
            "lineCount": 112,
            "parameterCount": 2,
            "snippet": "function verifyProgram(service: ts.server.ProjectService, project: ts.server.Project) {\r\n    if (service.serverMode === ts.LanguageServiceMode.Syntactic) return;\r\n    const options = project.getCompilerOptions();\r\n    const compilerHost = ts.createCompilerHostWorker(options, /*setParentNodes*/ undefined, service.host);\r\n    compilerHost.useSourceOfProjectReferenceRedirect = project.useSourceOfProjectReferenceRedirect?.bind(project);\r\n    compilerHost.getCurrentDirectory = project.getCurrentDirectory.bind(project);\r\n    const getDefaultLibLocation = compilerHost.getDefaultLibLocation!;\r\n    compilerHost.getDefaultLibLocation = () => ts.getNormalizedAbsolutePath(getDefaultLibLocation(), service.host.getCurrentDirectory());\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyDocumentRegistryStats",
            "complexity": 1,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function verifyDocumentRegistryStats(\r\n    documentRegistry: ts.DocumentRegistry,\r\n    stats: DocumentRegistryExpectedStats,\r\n) {\r\n    documentRegistry.getBuckets().forEach((bucketEntries, key) => {\r\n        const statsByPath = stats.get(key);\r\n        bucketEntries.forEach((entry, path) => {\r\n            const expected = statsByPath?.get(path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyResolutionCache",
            "complexity": 1,
            "lineCount": 230,
            "parameterCount": 4,
            "snippet": "export function verifyResolutionCache(\r\n    actual: ts.ResolutionCache,\r\n    actualProgram: ts.Program,\r\n    resolutionHostCacheHost: ts.ResolutionCacheHost,\r\n    projectName: string,\r\n): void {\r\n    const currentDirectory = resolutionHostCacheHost.getCurrentDirectory!();\r\n    const expected = ts.createResolutionCache(resolutionHostCacheHost, actual.rootDirForResolution, /*logChangesWhenResolvingModule*/ false);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 230 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/projectServiceStateLogger.ts",
        "criticalFunctions": [
          {
            "name": "printMapOrSetPropertyValueWorker",
            "complexity": 5,
            "lineCount": 39,
            "parameterCount": 8,
            "snippet": "function printMapOrSetPropertyValueWorker<T extends Map<string, any> | Set<any>>(\r\n        printWhen: PrintPropertyWhen.Always | PrintPropertyWhen.DefinedOrChangedOrNew | PrintPropertyWhen.Changed,\r\n        dataValue: T | undefined,\r\n        propertyName: string,\r\n        propertyValue: T | undefined,\r\n        dataDiff: Diff,\r\n        propertyLogs: StatePropertyLog[],\r\n        getPropertyDiff: (value: MapOrSetPropertyValue<T>, key: MapOrSetPropertyKey<T>) => Diff,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "patchServiceForStateBaseline",
            "complexity": 4,
            "lineCount": 413,
            "parameterCount": 1,
            "snippet": "export function patchServiceForStateBaseline(service: ProjectService): void {\r\n    if (!service.logger.isTestLogger || !service.logger.hasLevel(LogLevel.verbose)) return;\r\n    if (service.baseline !== noop) return; // Already patched\r\n    const projects = new Map<Project, ProjectData>();\r\n    const scriptInfos = new Map<ScriptInfo, ScriptInfoData>();\r\n    const documentPositionMappers = new Map<DocumentPositionMapper, DocumentPositionMapper>();\r\n    let nextDocumentPositionMapperId = 1;\r\n    const mapperToId = new Map<DocumentPositionMapper, number>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 413 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "printProperty",
            "complexity": 4,
            "lineCount": 18,
            "parameterCount": 7,
            "snippet": "function printProperty<Data, Key extends keyof Data & string>(\r\n        printWhen: PrintPropertyWhen,\r\n        data: Data | undefined,\r\n        key: Key,\r\n        value: Data[Key],\r\n        dataDiff: Diff,\r\n        propertyLogs: StatePropertyLog[],\r\n        stringValue?: Data[Key] | string,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "baselineProjects",
            "complexity": 1,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function baselineProjects(currentMappers: Set<DocumentPositionMapper>) {\r\n        const autoImportProviderProjects = [] as AutoImportProviderProject[];\r\n        const auxiliaryProjects = [] as AuxiliaryProject[];\r\n        const orphanConfiguredProjects = service.getOrphanConfiguredProjects(\r\n            /*toRetainConfiguredProjects*/ undefined,\r\n            /*openFilesWithRetainedConfiguredProject*/ undefined,\r\n            /*externalProjectsRetainingConfiguredProjects*/ undefined,\r\n        );\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          },
          {
            "name": "baselineScriptInfos",
            "complexity": 1,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function baselineScriptInfos(currentMappers: Set<DocumentPositionMapper>) {\r\n        return baselineState(\r\n            [service.filenameToScriptInfo],\r\n            scriptInfos,\r\n            (logs, info, data) => {\r\n                let infoDiff = newOrDeleted(info, scriptInfos, data);\r\n                if (infoDiff !== Diff.Deleted && info.documentPositionMapper) currentMappers.add(info.documentPositionMapper);\r\n                const infoPropertyLogs = [] as string[];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "harness/sourceMapRecorder.ts",
        "criticalFunctions": [
          {
            "name": "writeRecordedSpans",
            "complexity": 3,
            "lineCount": 107,
            "parameterCount": 0,
            "snippet": "function writeRecordedSpans() {\r\n        const markerIds: string[] = [];\r\n        function getMarkerId(markerIndex: number) {\r\n            let markerId = \"\";\r\n            if (spanMarkerContinues) {\r\n                assert.isTrue(markerIndex === 0);\r\n                markerId = \"1->\";\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "harness/tsserverLogger.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/typeWriter.ts",
        "criticalFunctions": [
          {
            "name": "writeTypeOrSymbol",
            "complexity": 33,
            "lineCount": 102,
            "parameterCount": 2,
            "snippet": "private writeTypeOrSymbol(node: ts.Node, isSymbolWalk: boolean): TypeWriterResult | undefined {\r\n        const actualPos = ts.skipTrivia(this.currentSourceFile.text, node.pos);\r\n        const lineAndCharacter = this.currentSourceFile.getLineAndCharacterOfPosition(actualPos);\r\n        const sourceText = ts.getSourceTextOfNodeFromSourceFile(this.currentSourceFile, node);\r\n        if (!isSymbolWalk) {\r\n            if (ts.isPartOfTypeNode(node) || ts.isIdentifier(node) && !(ts.getMeaningFromDeclaration(node.parent) & ts.SemanticMeaning.Value) && !(ts.isTypeAliasDeclaration(node.parent) && node.parent.name === node)) {\r\n                return undefined;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/util.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/vfsUtil.ts",
        "criticalFunctions": [
          {
            "name": "_scan",
            "complexity": 19,
            "lineCount": 31,
            "parameterCount": 6,
            "snippet": "private _scan(path: string, stats: Stats, axis: Axis, traversal: Traversal, noFollow: boolean, results: string[]) {\r\n        if (axis === \"ancestors-or-self\" || axis === \"self\" || axis === \"descendants-or-self\") {\r\n            if (!traversal.accept || traversal.accept(path, stats)) {\r\n                results.push(path);\r\n            }\r\n        }\r\n        if (axis === \"ancestors-or-self\" || axis === \"ancestors\") {\r\n            const dirname = vpath.dirname(path);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fileDiff",
            "complexity": 19,
            "lineCount": 50,
            "parameterCount": 7,
            "snippet": "private static fileDiff(container: FileSet, basename: string, changed: FileSystem, changedNode: FileInode, base: FileSystem, baseNode: FileInode, options: DiffOptions) {\r\n        changedNode = walkSameNodes(changedNode);\r\n        baseNode = walkSameNodes(baseNode);\r\n        if (changedNode === baseNode) return false;\r\n        if (isEmptyNonShadowedFile(changedNode) && isEmptyNonShadowedFile(baseNode)) return false;\r\n        if (\r\n            !changedNode.buffer && !baseNode.buffer &&\r\n            changedNode.resolver && changedNode.source !== undefined &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "renameSync",
            "complexity": 18,
            "lineCount": 26,
            "parameterCount": 2,
            "snippet": "public renameSync(oldpath: string, newpath: string): void {\r\n        if (this.isReadonly) throw createIOError(\"EROFS\");\r\n        const { parent: oldParent, links: oldParentLinks, node, basename: oldBasename } = this._walk(this._resolve(oldpath), /*noFollow*/ true);\r\n        if (!oldParent) throw createIOError(\"EPERM\");\r\n        if (!node) throw createIOError(\"ENOENT\");\r\n        const { parent: newParent, links: newParentLinks, node: existingNode, basename: newBasename } = this._walk(this._resolve(newpath), /*noFollow*/ true);\r\n        if (!newParent) throw createIOError(\"EPERM\");\r\n        const time = this.time();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "directoryDiff",
            "complexity": 15,
            "lineCount": 26,
            "parameterCount": 7,
            "snippet": "private static directoryDiff(container: FileSet, basename: string, changed: FileSystem, changedNode: DirectoryInode, base: FileSystem, baseNode: DirectoryInode, options: DiffOptions) {\r\n        while (!changedNode.links && changedNode.shadowRoot) changedNode = changedNode.shadowRoot;\r\n        while (!baseNode.links && baseNode.shadowRoot) baseNode = baseNode.shadowRoot;\r\n        if (changedNode === baseNode) return false;\r\n        if (isEmptyNonShadowedDirectory(changedNode) && isEmptyNonShadowedDirectory(baseNode)) return false;\r\n        if (\r\n            !changedNode.links && !baseNode.links &&\r\n            changedNode.resolver && changedNode.source !== undefined &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "_walk",
            "complexity": 13,
            "lineCount": 57,
            "parameterCount": 3,
            "snippet": "private _walk(path: string, noFollow?: boolean, onError?: (error: NodeJS.ErrnoException, fragment: WalkResult) => \"stop\" | \"retry\" | \"throw\"): WalkResult | undefined {\r\n        let links = this._getRootLinks();\r\n        let parent: DirectoryInode | undefined;\r\n        let components = vpath.parse(path);\r\n        let step = 0;\r\n        let depth = 0;\r\n        let retry = false;\r\n        while (true) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "too-many-params",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/vpathUtil.ts",
        "criticalFunctions": [
          {
            "name": "validateComponents",
            "complexity": 33,
            "lineCount": 38,
            "parameterCount": 3,
            "snippet": "function validateComponents(components: string[], flags: ValidationFlags, hasTrailingSeparator: boolean) {\r\n    const hasRoot = !!components[0];\r\n    const hasDirname = components.length > 2;\r\n    const hasBasename = components.length > 1;\r\n    const hasExtname = hasBasename && extRegExp.test(components[components.length - 1]);\r\n    const invalidComponentRegExp = flags & ValidationFlags.AllowNavigation\r\n        ? flags & ValidationFlags.AllowWildcard ? invalidNavigableComponentWithWildcardsRegExp : invalidNavigableComponentRegExp\r\n        : flags & ValidationFlags.AllowWildcard ? invalidNonNavigableComponentWithWildcardsRegExp : invalidNonNavigableComponentRegExp;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/watchUtils.ts",
        "criticalFunctions": [
          {
            "name": "createWatchUtils",
            "complexity": 1,
            "lineCount": 145,
            "parameterCount": 4,
            "snippet": "export function createWatchUtils<PollingWatcherData, FsWatcherData>(\r\n    pollingWatchesName: string,\r\n    fsWatchesName: string,\r\n    getCanonicalFileName: GetCanonicalFileName,\r\n    system: Required<Pick<System, \"realpath\">>,\r\n): WatchUtils<PollingWatcherData, FsWatcherData> {\r\n    const pollingWatches = initializeWatches<PollingWatcherData>(pollingWatchesName);\r\n    const fsWatches = initializeWatches<FsWatcherData>(fsWatchesName);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 145 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "initializeWatches",
            "complexity": 1,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "function initializeWatches<Data>(name: string): Watches<Data> {\r\n        const actuals = createMultiMap<string, Data>();\r\n        let serialized: Map<string, Data[]> | undefined;\r\n        let canonicalPathsToStrings: Map<string, Set<string>> | undefined;\r\n        let realToLinked: MultiMap<string, string> | undefined;\r\n        let pathToReal: Map<string, string> | undefined;\r\n        return {\r\n            add,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "server/editorServices.ts",
        "criticalFunctions": [
          {
            "name": "getOrCreateScriptInfoWorker",
            "complexity": 24,
            "lineCount": 52,
            "parameterCount": 8,
            "snippet": "private getOrCreateScriptInfoWorker(\r\n        fileName: NormalizedPath,\r\n        currentDirectory: string,\r\n        openedByClient: boolean,\r\n        fileContent: string | undefined,\r\n        scriptKind: ScriptKind | undefined,\r\n        hasMixedContent: boolean,\r\n        hostToQueryFileExistsOn: { fileExists(path: string): boolean; } | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "applySafeListWorker",
            "complexity": 22,
            "lineCount": 112,
            "parameterCount": 3,
            "snippet": "private applySafeListWorker(proj: protocol.ExternalProject, rootFiles: protocol.ExternalFile[], typeAcquisition: TypeAcquisition) {\r\n        if (typeAcquisition.enable === false || typeAcquisition.disableFilenameBasedTypeAcquisition) {\r\n            return undefined;\r\n        }\r\n        const typeAcqInclude = typeAcquisition.include || (typeAcquisition.include = []);\r\n        const excludeRules: string[] = [];\r\n        const normalizedNames = rootFiles.map(f => normalizeSlashes(f.fileName)) as NormalizedPath[];\r\n        for (const name of Object.keys(this.safelist)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "findCreateOrReloadConfiguredProject",
            "complexity": 18,
            "lineCount": 69,
            "parameterCount": 9,
            "snippet": "findCreateOrReloadConfiguredProject(\r\n        configFileName: NormalizedPath,\r\n        kind: ConfiguredProjectLoadKind,\r\n        /** Used with ConfiguredProjectLoadKind.Create or ConfiguredProjectLoadKind.Reload for new projects or reload updates */\r\n        reason?: string,\r\n        /** Used with ConfiguredProjectLoadKind.Find to get deferredClosed projects as well */\r\n        allowDeferredClosed?: boolean,\r\n        /** Used with ConfiguredProjectLoadKind.Create to send configFileDiag */\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 69 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "assignOrphanScriptInfoToInferredProject",
            "complexity": 16,
            "lineCount": 52,
            "parameterCount": 2,
            "snippet": "assignOrphanScriptInfoToInferredProject(info: ScriptInfo, projectRootPath: NormalizedPath | undefined): InferredProject {\r\n        Debug.assert(info.isOrphan());\r\n        const project = this.getOrCreateInferredProjectForProjectRootPathIfEnabled(info, projectRootPath) ||\r\n            this.getOrCreateSingleInferredProjectIfEnabled() ||\r\n            this.getOrCreateSingleInferredWithoutProjectRoot(\r\n                info.isDynamic ?\r\n                    projectRootPath || this.currentDirectory :\r\n                    getDirectoryPath(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "openExternalProject",
            "complexity": 16,
            "lineCount": 74,
            "parameterCount": 2,
            "snippet": "openExternalProject(proj: protocol.ExternalProject, cleanupAfter?: boolean): void {\r\n        const existingExternalProject = this.findExternalProjectByProjectName(proj.projectFileName);\r\n        let configuredProjects: Set<ConfiguredProject> | undefined;\r\n        let rootFiles: protocol.ExternalFile[] = [];\r\n        for (const file of proj.rootFiles) {\r\n            const normalized = toNormalizedPath(file.fileName);\r\n            if (getBaseConfigFileName(normalized)) {\r\n                if (this.serverMode === LanguageServiceMode.Semantic && this.host.fileExists(normalized)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "async-heavy",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/project.ts",
        "criticalFunctions": [
          {
            "name": "updateGraphWorker",
            "complexity": 33,
            "lineCount": 156,
            "parameterCount": 0,
            "snippet": "private updateGraphWorker() {\r\n        const oldProgram = this.languageService.getCurrentProgram();\r\n        Debug.assert(oldProgram === this.program);\r\n        Debug.assert(!this.isClosed(), \"Called update graph worker of closed project\");\r\n        this.writeLog(`Starting updateGraphWorker: Project: ${this.getProjectName()}`);\r\n        const start = timestamp();\r\n        const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = this.resolutionCache.createHasInvalidatedResolutions(returnFalse, returnFalse);\r\n        this.hasInvalidatedResolutions = hasInvalidatedResolutions;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 156 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getRootFileNames",
            "complexity": 18,
            "lineCount": 164,
            "parameterCount": 4,
            "snippet": "static getRootFileNames(dependencySelection: PackageJsonAutoImportPreference, hostProject: Project, host: GetPackageJsonEntrypointsHost, compilerOptions: CompilerOptions): string[] {\r\n        if (!dependencySelection) {\r\n            return ts.emptyArray;\r\n        }\r\n        const program = hostProject.getCurrentProgram();\r\n        if (!program) {\r\n            return ts.emptyArray;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 14,
            "lineCount": 78,
            "parameterCount": 10,
            "snippet": "constructor(\r\n        projectName: string,\r\n        readonly projectKind: ProjectKind,\r\n        readonly projectService: ProjectService,\r\n        hasExplicitListOfFiles: boolean,\r\n        lastFileExceededProgramSize: string | undefined,\r\n        private compilerOptions: CompilerOptions,\r\n        public compileOnSaveEnabled: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getChangesSinceVersion",
            "complexity": 13,
            "lineCount": 103,
            "parameterCount": 2,
            "snippet": "getChangesSinceVersion(lastKnownVersion?: number, includeProjectReferenceRedirectInfo?: boolean): ProjectFilesWithTSDiagnostics {\r\n        const includeProjectReferenceRedirectInfoIfRequested = includeProjectReferenceRedirectInfo\r\n            ? (files: Map<string, boolean>) =>\r\n                arrayFrom(files.entries(), ([fileName, isSourceOfProjectReferenceRedirect]): protocol.FileWithProjectReferenceRedirectInfo => ({\r\n                    fileName,\r\n                    isSourceOfProjectReferenceRedirect,\r\n                }))\r\n            : (files: Map<string, boolean>) => arrayFrom(files.keys());\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "watchTypingLocations",
            "complexity": 10,
            "lineCount": 96,
            "parameterCount": 1,
            "snippet": "watchTypingLocations(files: readonly string[] | undefined): void {\r\n        if (!files) {\r\n            this.typingWatchers!.isInvoked = false;\r\n            return;\r\n        }\r\n        if (!files.length) {\r\n            this.closeWatchingTypingLocations();\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/protocol.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/scriptInfo.ts",
        "criticalFunctions": [
          {
            "name": "getDefaultProject",
            "complexity": 22,
            "lineCount": 50,
            "parameterCount": 0,
            "snippet": "getDefaultProject(): Project {\r\n        switch (this.containingProjects.length) {\r\n            case 0:\r\n                return Errors.ThrowNoProject();\r\n            case 1:\r\n                return isProjectDeferredClose(this.containingProjects[0]) || isBackgroundProject(this.containingProjects[0]) ?\r\n                    Errors.ThrowNoProject() :\r\n                    this.containingProjects[0];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/scriptVersionCache.ts",
        "criticalFunctions": [
          {
            "name": "pre",
            "complexity": 17,
            "lineCount": 75,
            "parameterCount": 5,
            "snippet": "pre(_relativeStart: number, _relativeLength: number, lineCollection: LineCollection, _parent: LineCollection, nodeType: CharRangeSection): void {\r\n        const currentNode = this.stack[this.stack.length - 1];\r\n        if ((this.state === CharRangeSection.Entire) && (nodeType === CharRangeSection.Start)) {\r\n            this.state = CharRangeSection.Start;\r\n            this.branchNode = currentNode;\r\n            this.lineCollectionAtBranch = lineCollection;\r\n        }\r\n        let child: LineCollection | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "insertLines",
            "complexity": 16,
            "lineCount": 80,
            "parameterCount": 2,
            "snippet": "insertLines(insertedText: string | undefined, suppressTrailingText: boolean) {\r\n        if (suppressTrailingText) {\r\n            this.trailingText = \"\";\r\n        }\r\n        if (insertedText) {\r\n            insertedText = this.initialText + insertedText + this.trailingText;\r\n        }\r\n        else {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "insertAt",
            "complexity": 14,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "insertAt(child: LineCollection, nodes: LineCollection[]): LineNode[] {\r\n        let childIndex = this.findChildIndex(child);\r\n        const clen = this.children.length;\r\n        const nodeCount = nodes.length;\r\n        if ((clen < lineCollectionCapacity) && (childIndex === (clen - 1)) && (nodeCount === 1)) {\r\n            this.add(nodes[0]);\r\n            this.updateCounts();\r\n            return [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "walk",
            "complexity": 13,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "walk(rangeStart: number, rangeLength: number, walkFns: LineIndexWalker): void {\r\n        if (this.children.length === 0) return;\r\n        let childIndex = 0;\r\n        let childCharCount = this.children[childIndex].charCount();\r\n        let adjustedStart = rangeStart;\r\n        while (adjustedStart >= childCharCount) {\r\n            this.skipChild(adjustedStart, rangeLength, childIndex, walkFns, CharRangeSection.PreStart);\r\n            adjustedStart -= childCharCount;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "edit",
            "complexity": 10,
            "lineCount": 53,
            "parameterCount": 3,
            "snippet": "edit(pos: number, deleteLength: number, newText?: string): LineIndex {\r\n        if (this.root.charCount() === 0) {\r\n            Debug.assert(deleteLength === 0); // Can't delete from empty document\r\n            if (newText !== undefined) {\r\n                this.load(LineIndex.linesFromText(newText).lines);\r\n                return this;\r\n            }\r\n            return undefined!; // TODO: GH#18217\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/session.ts",
        "criticalFunctions": [
          {
            "name": "findSourceDefinition",
            "complexity": 16,
            "lineCount": 155,
            "parameterCount": 1,
            "snippet": "private findSourceDefinition(args: protocol.FileLocationRequestArgs): readonly protocol.DefinitionInfo[] {\r\n        const { file, project } = this.getFileAndProject(args);\r\n        const position = this.getPositionInFile(args, file);\r\n        const unmappedDefinitions = project.getLanguageService().getDefinitionAtPosition(file, position);\r\n        let definitions: readonly DefinitionInfo[] = this.mapDefinitionInfoLocations(unmappedDefinitions || emptyArray, project).slice();\r\n        const needsJsResolution = this.projectService.serverMode === LanguageServiceMode.Semantic && (\r\n            !some(definitions, d => toNormalizedPath(d.fileName) !== file && !d.isAmbient) ||\r\n            some(definitions, d => !!d.failedAliasResolution)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 155 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "onMessage",
            "complexity": 13,
            "lineCount": 82,
            "parameterCount": 1,
            "snippet": "public onMessage(message: TMessage): void {\r\n        this.gcTimer.scheduleCollect();\r\n        let start: [number, number] | undefined;\r\n        const currentPerformanceData = this.performanceData;\r\n        if (this.logger.hasLevel(LogLevel.requestTime)) {\r\n            start = this.hrtime();\r\n            if (this.logger.hasLevel(LogLevel.verbose)) {\r\n                this.logger.info(`request:${indent(this.toStringMessage(message))}`);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFormattingEditsAfterKeystroke",
            "complexity": 12,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "private getFormattingEditsAfterKeystroke(args: protocol.FormatOnKeyRequestArgs): protocol.CodeEdit[] | undefined {\r\n        const { file, languageService } = this.getFileAndLanguageServiceForSyntacticOperation(args);\r\n        const scriptInfo = this.projectService.getScriptInfoForNormalizedPath(file)!;\r\n        const position = scriptInfo.lineOffsetToPosition(args.line, args.offset);\r\n        const formatOptions = this.getFormatOptions(file);\r\n        const edits = languageService.getFormattingEditsAfterKeystroke(file, position, args.key, formatOptions);\r\n        if ((args.key === \"\\n\") && ((!edits) || (edits.length === 0) || allEditsBeforePos(edits, position))) {\r\n            const { lineText, absolutePosition } = scriptInfo.textStorage.getAbsolutePositionAndLineText(args.line);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getPerProjectReferences",
            "complexity": 9,
            "lineCount": 131,
            "parameterCount": 7,
            "snippet": "function getPerProjectReferences<TResult>(\r\n    projects: Projects,\r\n    defaultProject: Project,\r\n    initialLocation: DocumentPosition,\r\n    defaultDefinition: DocumentPosition | undefined,\r\n    mapDefinitionInProject: (\r\n        definition: DocumentPosition,\r\n        project: Project,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 131 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "checkOne",
            "complexity": 9,
            "lineCount": 53,
            "parameterCount": 0,
            "snippet": "() => {\r\n            if (this.changeSeq !== seq) {\r\n                return;\r\n            }\r\n            let ranges: protocol.FileRange[] | undefined;\r\n            let item: string | protocol.FileRangesRequestArgs | PendingErrorCheck | undefined = checkList[index];\r\n            if (isString(item)) {\r\n                item = this.toPendingErrorCheck(item);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/typingInstallerAdapter.ts",
        "criticalFunctions": [
          {
            "name": "handleMessage",
            "complexity": 17,
            "lineCount": 102,
            "parameterCount": 1,
            "snippet": "handleMessage(response: TypesRegistryResponse | PackageInstalledResponse | SetTypings | InvalidateCachedTypings | BeginInstallTypes | EndInstallTypes | InitializationFailedResponse | server.WatchTypingLocations): void {\r\n        if (this.logger.hasLevel(LogLevel.verbose)) {\r\n            this.logger.info(`TIAdapter:: Received response:${stringifyIndented(response)}`);\r\n        }\r\n        switch (response.kind) {\r\n            case EventTypesRegistry:\r\n                this.typesRegistryCache = new Map(Object.entries(response.typesRegistry));\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/utilities.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "server/utilitiesPublic.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/compilerRunner.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 17,
            "lineCount": 91,
            "parameterCount": 3,
            "snippet": "constructor(fileName: string, testCaseContent?: TestCaseParser.TestCaseContent, configurationOverrides?: TestCaseParser.CompilerSettings) {\r\n        const absoluteRootDir = vfs.srcFolder;\r\n        this.fileName = fileName;\r\n        this.justName = vpath.basename(fileName);\r\n        this.configuredName = this.justName;\r\n        if (configurationOverrides) {\r\n            let configuredName = \"\";\r\n            const keys = Object\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/projectsRunner.ts",
        "criticalFunctions": [
          {
            "name": "compileDeclarations",
            "complexity": 2,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "private compileDeclarations(compilerResult: BatchCompileProjectTestCaseResult) {\r\n        if (!compilerResult.program) {\r\n            return;\r\n        }\r\n        const compilerOptions = compilerResult.program.getCompilerOptions();\r\n        const allInputFiles: documents.TextDocument[] = [];\r\n        const rootFiles: string[] = [];\r\n        ts.forEach(compilerResult.program.getSourceFiles(), sourceFile => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/runner.ts",
        "criticalFunctions": [
          {
            "name": "handleTestConfig",
            "complexity": 30,
            "lineCount": 109,
            "parameterCount": 0,
            "snippet": "function handleTestConfig() {\r\n    if (testConfigContent !== \"\") {\r\n        const testConfig = JSON.parse(testConfigContent) as TestConfig;\r\n        if (testConfig.light) {\r\n            setLightMode(true);\r\n        }\r\n        if (testConfig.timeout) {\r\n            globalTimeout = testConfig.timeout;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 109 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/breakpoints.ts",
        "criticalFunctions": [
          {
            "name": "spanInNode",
            "complexity": 105,
            "lineCount": 666,
            "parameterCount": 1,
            "snippet": "function spanInNode(node: Node | undefined): TextSpan | undefined {\r\n        if (node) {\r\n            const { parent } = node;\r\n            switch (node.kind) {\r\n                case SyntaxKind.VariableStatement:\r\n                    return spanInVariableDeclaration((node as VariableStatement).declarationList.declarations[0]);\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.PropertyDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 105 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 666 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "spanInCloseParenToken",
            "complexity": 17,
            "lineCount": 25,
            "parameterCount": 1,
            "snippet": "function spanInCloseParenToken(node: Node): TextSpan | undefined {\r\n            switch (node.parent.kind) {\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.GetAccessor:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "spanInSourceFileAtLocation",
            "complexity": 6,
            "lineCount": 739,
            "parameterCount": 2,
            "snippet": "export function spanInSourceFileAtLocation(sourceFile: SourceFile, position: number): TextSpan | undefined {\r\n    if (sourceFile.isDeclarationFile) {\r\n        return undefined;\r\n    }\r\n    let tokenAtLocation = getTokenAtPosition(sourceFile, position);\r\n    const lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;\r\n    if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {\r\n        const preceding = findPrecedingToken(tokenAtLocation.pos, sourceFile);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 739 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/callHierarchy.ts",
        "criticalFunctions": [
          {
            "name": "collect",
            "complexity": 29,
            "lineCount": 89,
            "parameterCount": 1,
            "snippet": "function collect(node: Node | undefined) {\r\n        if (!node) return;\r\n        if (node.flags & NodeFlags.Ambient) {\r\n            return;\r\n        }\r\n        if (isValidCallHierarchyDeclaration(node)) {\r\n            if (isClassLike(node)) {\r\n                for (const member of node.members) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "resolveCallHierarchyDeclaration",
            "complexity": 23,
            "lineCount": 68,
            "parameterCount": 2,
            "snippet": "export function resolveCallHierarchyDeclaration(program: Program, location: Node): CallHierarchyDeclaration | CallHierarchyDeclaration[] | undefined {\r\n    const typeChecker = program.getTypeChecker();\r\n    let followingSymbol = false;\r\n    while (true) {\r\n        if (isValidCallHierarchyDeclaration(location)) {\r\n            return findImplementationOrAllInitialDeclarations(typeChecker, location);\r\n        }\r\n        if (isPossibleCallHierarchyDeclaration(location)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCallHierarchyItemName",
            "complexity": 17,
            "lineCount": 45,
            "parameterCount": 2,
            "snippet": "function getCallHierarchyItemName(program: Program, node: CallHierarchyDeclaration): { text: string; pos: number; end: number; } {\r\n    if (isSourceFile(node)) {\r\n        return { text: node.fileName, pos: 0, end: 0 };\r\n    }\r\n    if ((isFunctionDeclaration(node) || isClassDeclaration(node)) && !isNamedDeclaration(node)) {\r\n        const defaultModifier = node.modifiers && find(node.modifiers, isDefaultModifier);\r\n        if (defaultModifier) {\r\n            return { text: \"default\", pos: defaultModifier.getStart(), end: defaultModifier.getEnd() };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCallHierarchItemContainerName",
            "complexity": 16,
            "lineCount": 27,
            "parameterCount": 1,
            "snippet": "function getCallHierarchItemContainerName(node: CallHierarchyDeclaration): string | undefined {\r\n    if (isAssignedExpression(node)) {\r\n        if (isPropertyDeclaration(node.parent) && isClassLike(node.parent.parent)) {\r\n            return isClassExpression(node.parent.parent) ? getAssignedName(node.parent.parent)?.getText() : node.parent.parent.name?.getText();\r\n        }\r\n        if (isModuleBlock(node.parent.parent.parent.parent) && isIdentifier(node.parent.parent.parent.parent.parent.name)) {\r\n            return node.parent.parent.parent.parent.parent.name.getText();\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCallSiteCollector",
            "complexity": 1,
            "lineCount": 112,
            "parameterCount": 2,
            "snippet": "function createCallSiteCollector(program: Program, callSites: CallSite[]): (node: Node | undefined) => void {\r\n    function recordCallSite(node: CallExpression | NewExpression | TaggedTemplateExpression | PropertyAccessExpression | ElementAccessExpression | Decorator | JsxOpeningLikeElement | ClassStaticBlockDeclaration) {\r\n        const target = isTaggedTemplateExpression(node) ? node.tag :\r\n            isJsxOpeningLikeElement(node) ? node.tagName :\r\n            isAccessExpression(node) ? node :\r\n            isClassStaticBlockDeclaration(node) ? node :\r\n            node.expression;\r\n        const declaration = resolveCallHierarchyDeclaration(program, target);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "services/classifier.ts",
        "criticalFunctions": [
          {
            "name": "isBinaryExpressionOperatorToken",
            "complexity": 44,
            "lineCount": 49,
            "parameterCount": 1,
            "snippet": "function isBinaryExpressionOperatorToken(token: SyntaxKind): boolean {\r\n    switch (token) {\r\n        case SyntaxKind.AsteriskToken:\r\n        case SyntaxKind.SlashToken:\r\n        case SyntaxKind.PercentToken:\r\n        case SyntaxKind.PlusToken:\r\n        case SyntaxKind.MinusToken:\r\n        case SyntaxKind.LessThanLessThanToken:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 44 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "classifyTokenType",
            "complexity": 41,
            "lineCount": 104,
            "parameterCount": 2,
            "snippet": "function classifyTokenType(tokenKind: SyntaxKind, token?: Node): ClassificationType | undefined {\r\n        if (isKeyword(tokenKind)) {\r\n            return ClassificationType.keyword;\r\n        }\r\n        if (tokenKind === SyntaxKind.LessThanToken || tokenKind === SyntaxKind.GreaterThanToken) {\r\n            if (token && getTypeArgumentOrTypeParameterList(token.parent)) {\r\n                return ClassificationType.punctuation;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 104 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "classifyJSDocComment",
            "complexity": 30,
            "lineCount": 101,
            "parameterCount": 1,
            "snippet": "function classifyJSDocComment(docComment: JSDoc) {\r\n        let pos = docComment.pos;\r\n        if (docComment.tags) {\r\n            for (const tag of docComment.tags) {\r\n                if (tag.pos !== pos) {\r\n                    pushCommentRange(pos, tag.pos - pos);\r\n                }\r\n                pushClassification(tag.pos, 1, ClassificationType.punctuation); // \"@\"\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 101 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "handleToken",
            "complexity": 29,
            "lineCount": 84,
            "parameterCount": 0,
            "snippet": "function handleToken(): void {\r\n            switch (token) {\r\n                case SyntaxKind.SlashToken:\r\n                case SyntaxKind.SlashEqualsToken:\r\n                    if (!noRegexTable[lastNonTriviaToken] && scanner.reScanSlashToken() === SyntaxKind.RegularExpressionLiteral) {\r\n                        token = SyntaxKind.RegularExpressionLiteral;\r\n                    }\r\n                    break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getClassificationTypeName",
            "complexity": 26,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "function getClassificationTypeName(type: ClassificationType): ClassificationTypeNames {\r\n    switch (type) {\r\n        case ClassificationType.comment:\r\n            return ClassificationTypeNames.comment;\r\n        case ClassificationType.identifier:\r\n            return ClassificationTypeNames.identifier;\r\n        case ClassificationType.keyword:\r\n            return ClassificationTypeNames.keyword;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/classifier2020.ts",
        "criticalFunctions": [
          {
            "name": "visit",
            "complexity": 41,
            "lineCount": 80,
            "parameterCount": 1,
            "snippet": "function visit(node: Node) {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.FunctionExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 41 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectTokens",
            "complexity": 1,
            "lineCount": 87,
            "parameterCount": 5,
            "snippet": "function collectTokens(program: Program, sourceFile: SourceFile, span: TextSpan, collector: (node: Node, tokenType: number, tokenModifier: number) => void, cancellationToken: CancellationToken) {\r\n    const typeChecker = program.getTypeChecker();\r\n    let inJSXElement = false;\r\n    function visit(node: Node) {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codeFixProvider.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/completions.ts",
        "criticalFunctions": [
          {
            "name": "isSolelyIdentifierDefinitionLocation",
            "complexity": 94,
            "lineCount": 183,
            "parameterCount": 1,
            "snippet": "function isSolelyIdentifierDefinitionLocation(contextToken: Node): boolean {\r\n        const parent = contextToken.parent;\r\n        const containingNodeKind = parent.kind;\r\n        switch (contextToken.kind) {\r\n            case SyntaxKind.CommaToken:\r\n                return containingNodeKind === SyntaxKind.VariableDeclaration ||\r\n                    isVariableDeclarationListButNotTypeArgument(contextToken) ||\r\n                    containingNodeKind === SyntaxKind.VariableStatement ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 94 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 183 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCompletionData",
            "complexity": 92,
            "lineCount": 2012,
            "parameterCount": 10,
            "snippet": "function getCompletionData(\r\n    program: Program,\r\n    log: (message: string) => void,\r\n    sourceFile: SourceFile,\r\n    compilerOptions: CompilerOptions,\r\n    position: number,\r\n    preferences: UserPreferences,\r\n    detailsEntryId: CompletionEntryIdentifier | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 92 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 2012 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCompletionEntry",
            "complexity": 90,
            "lineCount": 257,
            "parameterCount": 24,
            "snippet": "function createCompletionEntry(\r\n    symbol: Symbol,\r\n    sortText: SortText,\r\n    replacementToken: Node | undefined,\r\n    contextToken: Node | undefined,\r\n    location: Node,\r\n    position: number,\r\n    sourceFile: SourceFile,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 90 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 257 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "24 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "computeCommitCharactersAndIsNewIdentifier",
            "complexity": 48,
            "lineCount": 121,
            "parameterCount": 0,
            "snippet": "function computeCommitCharactersAndIsNewIdentifier(): { defaultCommitCharacters: string[]; isNewIdentifierLocation: boolean; } {\r\n        if (contextToken) {\r\n            const containingNodeKind = contextToken.parent.kind;\r\n            const tokenKind = keywordForNode(contextToken);\r\n            switch (tokenKind) {\r\n                case SyntaxKind.CommaToken:\r\n                    switch (containingNodeKind) {\r\n                        case SyntaxKind.CallExpression:                                               // func( a, |\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 121 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTypeScriptMemberSymbols",
            "complexity": 35,
            "lineCount": 95,
            "parameterCount": 0,
            "snippet": "function getTypeScriptMemberSymbols(): void {\r\n        completionKind = CompletionKind.PropertyAccess;\r\n        const isImportType = isLiteralImportTypeNode(node);\r\n        const isTypeLocation = (isImportType && !(node as ImportTypeNode).isTypeOf)\r\n            || isPartOfTypeNode(node.parent)\r\n            || isPossiblyTypeArgumentPosition(contextToken, sourceFile, typeChecker);\r\n        const isRhsOfImportDeclaration = isInRightSideOfInternalImportEqualsDeclaration(node);\r\n        if (isEntityName(node) || isImportType || isPropertyAccessExpression(node)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/documentHighlights.ts",
        "criticalFunctions": [
          {
            "name": "getHighlightSpans",
            "complexity": 32,
            "lineCount": 62,
            "parameterCount": 2,
            "snippet": "function getHighlightSpans(node: Node, sourceFile: SourceFile): HighlightSpan[] | undefined {\r\n        switch (node.kind) {\r\n            case SyntaxKind.IfKeyword:\r\n            case SyntaxKind.ElseKeyword:\r\n                return isIfStatement(node.parent) ? getIfElseOccurrences(node.parent, sourceFile) : undefined;\r\n            case SyntaxKind.ReturnKeyword:\r\n                return useParent(node.parent, isReturnStatement, getReturnOccurrences);\r\n            case SyntaxKind.ThrowKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNodesToSearchForModifier",
            "complexity": 20,
            "lineCount": 44,
            "parameterCount": 2,
            "snippet": "function getNodesToSearchForModifier(declaration: Node, modifierFlag: ModifierFlags): readonly Node[] | undefined {\r\n        const container = declaration.parent as ModuleBlock | SourceFile | Block | CaseClause | DefaultClause | ConstructorDeclaration | MethodDeclaration | FunctionDeclaration | ObjectTypeDeclaration;\r\n        switch (container.kind) {\r\n            case SyntaxKind.ModuleBlock:\r\n            case SyntaxKind.SourceFile:\r\n            case SyntaxKind.Block:\r\n            case SyntaxKind.CaseClause:\r\n            case SyntaxKind.DefaultClause:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/documentRegistry.ts",
        "criticalFunctions": [
          {
            "name": "acquireOrUpdateDocument",
            "complexity": 20,
            "lineCount": 111,
            "parameterCount": 9,
            "snippet": "function acquireOrUpdateDocument(\r\n        fileName: string,\r\n        path: Path,\r\n        compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost,\r\n        key: DocumentRegistryBucketKey,\r\n        scriptSnapshot: IScriptSnapshot,\r\n        version: string,\r\n        acquiring: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDocumentRegistryInternal",
            "complexity": 1,
            "lineCount": 215,
            "parameterCount": 4,
            "snippet": "export function createDocumentRegistryInternal(useCaseSensitiveFileNames?: boolean, currentDirectory = \"\", jsDocParsingMode?: JSDocParsingMode, externalCache?: ExternalDocumentCache): DocumentRegistry {\r\n    const buckets = new Map<DocumentRegistryBucketKeyWithMode, Map<Path, BucketEntry>>();\r\n    const getCanonicalFileName = createGetCanonicalFileName(!!useCaseSensitiveFileNames);\r\n    function reportStats() {\r\n        const bucketInfoArray = arrayFrom(buckets.keys()).filter(name => name && name.charAt(0) === \"_\").map(name => {\r\n            const entries = buckets.get(name)!;\r\n            const sourceFiles: { name: string; scriptKind: ScriptKind; refCount: number; }[] = [];\r\n            entries.forEach((entry, name) => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 215 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "acquireDocumentWithKey",
            "complexity": 1,
            "lineCount": 3,
            "parameterCount": 8,
            "snippet": "function acquireDocumentWithKey(fileName: string, path: Path, compilationSettings: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, languageVersionOrOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile {\r\n        return acquireOrUpdateDocument(fileName, path, compilationSettings, key, scriptSnapshot, version, /*acquiring*/ true, scriptKind, languageVersionOrOptions);\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "updateDocumentWithKey",
            "complexity": 1,
            "lineCount": 3,
            "parameterCount": 8,
            "snippet": "function updateDocumentWithKey(fileName: string, path: Path, compilationSettings: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind, languageVersionOrOptions?: CreateSourceFileOptions | ScriptTarget): SourceFile {\r\n        return acquireOrUpdateDocument(fileName, path, getCompilationSettings(compilationSettings), key, scriptSnapshot, version, /*acquiring*/ false, scriptKind, languageVersionOrOptions);\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/exportInfoMap.ts",
        "criticalFunctions": [
          {
            "name": "isImportable",
            "complexity": 15,
            "lineCount": 59,
            "parameterCount": 8,
            "snippet": "export function isImportable(\r\n    program: Program,\r\n    fromFile: SourceFile,\r\n    toFile: SourceFile | undefined,\r\n    toModule: Symbol,\r\n    preferences: UserPreferences,\r\n    packageJsonFilter: PackageJsonImportFilter | undefined,\r\n    moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getExportInfoMap",
            "complexity": 5,
            "lineCount": 64,
            "parameterCount": 5,
            "snippet": "export function getExportInfoMap(importingFile: SourceFile | FutureSourceFile, host: LanguageServiceHost, program: Program, preferences: UserPreferences, cancellationToken: CancellationToken | undefined): ExportInfoMap {\r\n    const start = timestamp();\r\n    host.getPackageJsonAutoImportProvider?.();\r\n    const cache = host.getCachedExportInfoMap?.() || createCacheableExportInfoMap({\r\n        getCurrentProgram: () => program,\r\n        getPackageJsonAutoImportProvider: () => host.getPackageJsonAutoImportProvider?.(),\r\n        getGlobalTypingsCacheLocation: () => host.getGlobalTypingsCacheLocation?.(),\r\n    });\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createCacheableExportInfoMap",
            "complexity": 2,
            "lineCount": 227,
            "parameterCount": 1,
            "snippet": "export function createCacheableExportInfoMap(host: CacheableExportInfoMapHost): ExportInfoMap {\r\n    let exportInfoId = 1;\r\n    const exportInfo = createMultiMap<ExportMapInfoKey, CachedSymbolExportInfo>();\r\n    const symbols = new Map<number, [symbol: Symbol, moduleSymbol: Symbol]>();\r\n    /**\r\n     * Key: node_modules package name (no @types).\r\n     * Value: path to deepest node_modules folder seen that is\r\n     * both visible to `usableByFileName` and contains the package.\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 227 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/findAllReferences.ts",
        "criticalFunctions": [
          {
            "name": "declarationIsWriteAccess",
            "complexity": 40,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function declarationIsWriteAccess(decl: Declaration): boolean {\r\n    if (!!(decl.flags & NodeFlags.Ambient)) return true;\r\n    switch (decl.kind) {\r\n        case SyntaxKind.BinaryExpression:\r\n        case SyntaxKind.BindingElement:\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.ClassExpression:\r\n        case SyntaxKind.DefaultKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 40 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          },
          {
            "name": "forEachRelatedSymbol",
            "complexity": 30,
            "lineCount": 123,
            "parameterCount": 7,
            "snippet": "function forEachRelatedSymbol<T>(\r\n        symbol: Symbol,\r\n        location: Node,\r\n        checker: TypeChecker,\r\n        isForRenamePopulateSearchSymbolSet: boolean,\r\n        onlyIncludeBindingElementAtReferenceLocation: boolean,\r\n        /**\r\n         * @param baseSymbol This symbol means one property/mehtod from base class or interface when it is not null or undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getContextNodeForNodeEntry",
            "complexity": 29,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "function getContextNodeForNodeEntry(node: Node): ContextNode | undefined {\r\n    if (isDeclaration(node)) {\r\n        return getContextNode(node);\r\n    }\r\n    if (!node.parent) return undefined;\r\n    if (!isDeclaration(node.parent) && !isExportAssignment(node.parent)) {\r\n        if (isInJSFile(node)) {\r\n            const binaryExpression = isBinaryExpression(node.parent) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getReferencesAtLocation",
            "complexity": 29,
            "lineCount": 80,
            "parameterCount": 5,
            "snippet": "function getReferencesAtLocation(sourceFile: SourceFile, position: number, search: Search, state: State, addReferencesHere: boolean): void {\r\n        const referenceLocation = getTouchingPropertyName(sourceFile, position);\r\n        if (!isValidReferencePosition(referenceLocation, search.text)) {\r\n            if (!state.options.implementations && (state.options.findInStrings && isInString(sourceFile, position) || state.options.findInComments && isInNonReferenceComment(sourceFile, position))) {\r\n                state.addStringOrCommentReference(sourceFile.fileName, createTextSpan(position, search.text.length));\r\n            }\r\n            return;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getPrefixAndSuffixText",
            "complexity": 25,
            "lineCount": 54,
            "parameterCount": 4,
            "snippet": "function getPrefixAndSuffixText(entry: Entry, originalNode: Node, checker: TypeChecker, quotePreference: QuotePreference): PrefixAndSuffix {\r\n    if (entry.kind !== EntryKind.Span && (isIdentifier(originalNode) || isStringLiteralLike(originalNode))) {\r\n        const { node, kind } = entry;\r\n        const parent = node.parent;\r\n        const name = originalNode.text;\r\n        const isShorthandAssignment = isShorthandPropertyAssignment(parent);\r\n        if (isShorthandAssignment || (isObjectBindingElementWithoutPropertyName(parent) && parent.name === node && parent.dotDotDotToken === undefined)) {\r\n            const prefixColon: PrefixAndSuffix = { prefixText: name + \": \" };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/getEditsForFileRename.ts",
        "criticalFunctions": [
          {
            "name": "updateTsconfigFiles",
            "complexity": 3,
            "lineCount": 72,
            "parameterCount": 7,
            "snippet": "function updateTsconfigFiles(program: Program, changeTracker: textChanges.ChangeTracker, oldToNew: PathUpdater, oldFileOrDirPath: string, newFileOrDirPath: string, currentDirectory: string, useCaseSensitiveFileNames: boolean): void {\r\n    const { configFile } = program.getCompilerOptions();\r\n    if (!configFile) return;\r\n    const configDir = getDirectoryPath(configFile.fileName);\r\n    const jsonObjectLiteral = getTsConfigObjectLiteralExpression(configFile);\r\n    if (!jsonObjectLiteral) return;\r\n    forEachProperty(jsonObjectLiteral, (property, propertyName) => {\r\n        switch (propertyName) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getEditsForFileRename",
            "complexity": 1,
            "lineCount": 18,
            "parameterCount": 7,
            "snippet": "export function getEditsForFileRename(\r\n    program: Program,\r\n    oldFileOrDirPath: string,\r\n    newFileOrDirPath: string,\r\n    host: LanguageServiceHost,\r\n    formatContext: formatting.FormatContext,\r\n    preferences: UserPreferences,\r\n    sourceMapper: SourceMapper,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/goToDefinition.ts",
        "criticalFunctions": [
          {
            "name": "getDefinitionAtPosition",
            "complexity": 56,
            "lineCount": 170,
            "parameterCount": 5,
            "snippet": "export function getDefinitionAtPosition(program: Program, sourceFile: SourceFile, position: number, searchOtherFilesOnly?: boolean, stopAtAlias?: boolean): readonly DefinitionInfo[] | undefined {\r\n    const resolvedRef = getReferenceAtPosition(sourceFile, position, program);\r\n    const fileReferenceDefinition = resolvedRef && [getDefinitionInfoForFileReference(resolvedRef.reference.fileName, resolvedRef.fileName, resolvedRef.unverified)] || emptyArray;\r\n    if (resolvedRef?.file) {\r\n        return fileReferenceDefinition;\r\n    }\r\n    const node = getTouchingPropertyName(sourceFile, position);\r\n    if (node === sourceFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 56 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 170 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isDefinitionVisible",
            "complexity": 18,
            "lineCount": 30,
            "parameterCount": 2,
            "snippet": "function isDefinitionVisible(checker: TypeChecker, declaration: Declaration): boolean {\r\n    if (checker.isDeclarationVisible(declaration)) return true;\r\n    if (!declaration.parent) return false;\r\n    if (hasInitializer(declaration.parent) && declaration.parent.initializer === declaration) return isDefinitionVisible(checker, declaration.parent as Declaration);\r\n    switch (declaration.kind) {\r\n        case SyntaxKind.PropertyDeclaration:\r\n        case SyntaxKind.GetAccessor:\r\n        case SyntaxKind.SetAccessor:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "createDefinitionInfoFromName",
            "complexity": 3,
            "lineCount": 24,
            "parameterCount": 8,
            "snippet": "function createDefinitionInfoFromName(checker: TypeChecker, declaration: Declaration, symbolKind: ScriptElementKind, symbolName: string, containerName: string, unverified?: boolean, failedAliasResolution?: boolean, textSpan?: TextSpan): DefinitionInfo {\r\n    const sourceFile = declaration.getSourceFile();\r\n    if (!textSpan) {\r\n        const name = getNameOfDeclaration(declaration) || declaration;\r\n        textSpan = createTextSpanFromNode(name, sourceFile);\r\n    }\r\n    return {\r\n        fileName: sourceFile.fileName,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/importTracker.ts",
        "criticalFunctions": [
          {
            "name": "handleDirectImports",
            "complexity": 29,
            "lineCount": 76,
            "parameterCount": 1,
            "snippet": "function handleDirectImports(exportingModuleSymbol: Symbol): void {\r\n        const theseDirectImports = getDirectImports(exportingModuleSymbol);\r\n        if (theseDirectImports) {\r\n            for (const direct of theseDirectImports) {\r\n                if (!markSeenDirectImport(direct)) {\r\n                    continue;\r\n                }\r\n                if (cancellationToken) cancellationToken.throwIfCancellationRequested();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "handleImport",
            "complexity": 24,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "function handleImport(decl: Importer): void {\r\n        if (decl.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n            if (isExternalModuleImportEquals(decl)) {\r\n                handleNamespaceImportLike(decl.name);\r\n            }\r\n            return;\r\n        }\r\n        if (decl.kind === SyntaxKind.Identifier) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getExport",
            "complexity": 17,
            "lineCount": 78,
            "parameterCount": 0,
            "snippet": "function getExport(): ExportedSymbol | ImportedSymbol | undefined {\r\n        const { parent } = node;\r\n        const grandparent = parent.parent;\r\n        if (symbol.exportSymbol) {\r\n            if (parent.kind === SyntaxKind.PropertyAccessExpression) {\r\n                return symbol.declarations?.some(d => d === parent) && isBinaryExpression(grandparent)\r\n                    ? getSpecialPropertyExport(grandparent, /*useLhsSymbol*/ false)\r\n                    : undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSearchesFromDirectImports",
            "complexity": 3,
            "lineCount": 127,
            "parameterCount": 5,
            "snippet": "function getSearchesFromDirectImports(directImports: Importer[], exportSymbol: Symbol, exportKind: ExportKind, checker: TypeChecker, isForRename: boolean): Pick<ImportsResult, \"importSearches\" | \"singleReferences\"> {\r\n    const importSearches: [ModuleExportName, Symbol][] = [];\r\n    const singleReferences: (Identifier | StringLiteral)[] = [];\r\n    function addSearch(location: ModuleExportName, symbol: Symbol): void {\r\n        importSearches.push([location, symbol]);\r\n    }\r\n    if (directImports) {\r\n        for (const decl of directImports) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getImportOrExportSymbol",
            "complexity": 3,
            "lineCount": 118,
            "parameterCount": 4,
            "snippet": "export function getImportOrExportSymbol(node: Node, symbol: Symbol, checker: TypeChecker, comingFromExport: boolean): ImportedSymbol | ExportedSymbol | undefined {\r\n    return comingFromExport ? getExport() : getExport() || getImport();\r\n    function getExport(): ExportedSymbol | ImportedSymbol | undefined {\r\n        const { parent } = node;\r\n        const grandparent = parent.parent;\r\n        if (symbol.exportSymbol) {\r\n            if (parent.kind === SyntaxKind.PropertyAccessExpression) {\r\n                return symbol.declarations?.some(d => d === parent) && isBinaryExpression(grandparent)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/inlayHints.ts",
        "criticalFunctions": [
          {
            "name": "visitForDisplayParts",
            "complexity": 83,
            "lineCount": 358,
            "parameterCount": 1,
            "snippet": "function visitForDisplayParts(node: Node) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n            const tokenString = tokenToString(node.kind);\r\n            if (tokenString) {\r\n                parts.push({ text: tokenString });\r\n                return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 83 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 358 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 28,
            "lineCount": 47,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): true | undefined {\r\n        if (!node || node.getFullWidth() === 0) {\r\n            return;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitCallOrNewExpression",
            "complexity": 19,
            "lineCount": 51,
            "parameterCount": 1,
            "snippet": "function visitCallOrNewExpression(expr: CallExpression | NewExpression) {\r\n        const args = expr.arguments;\r\n        if (!args || !args.length) {\r\n            return;\r\n        }\r\n        const signature = checker.getResolvedSignature(expr);\r\n        if (signature === undefined) return;\r\n        let signatureParamPos = 0;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "provideInlayHints",
            "complexity": 1,
            "lineCount": 807,
            "parameterCount": 1,
            "snippet": "export function provideInlayHints(context: InlayHintsContext): InlayHint[] {\r\n    const { file, program, span, cancellationToken, preferences } = context;\r\n    const sourceFileText = file.text;\r\n    const compilerOptions = program.getCompilerOptions();\r\n    const quotePreference = getQuotePreference(file, preferences);\r\n    const checker = program.getTypeChecker();\r\n    const result: InlayHint[] = [];\r\n    visitor(file);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 807 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getInlayHintDisplayParts",
            "complexity": 1,
            "lineCount": 411,
            "parameterCount": 1,
            "snippet": "function getInlayHintDisplayParts(node: Node) {\r\n        const parts: InlayHintDisplayPart[] = [];\r\n        visitForDisplayParts(node);\r\n        return parts;\r\n        function visitForDisplayParts(node: Node) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 411 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/jsDoc.ts",
        "criticalFunctions": [
          {
            "name": "getCommentOwnerInfoWorker",
            "complexity": 31,
            "lineCount": 66,
            "parameterCount": 2,
            "snippet": "function getCommentOwnerInfoWorker(commentOwner: Node, options: DocCommentTemplateOptions | undefined): CommentOwnerInfo | undefined | \"quit\" {\r\n    switch (commentOwner.kind) {\r\n        case SyntaxKind.FunctionDeclaration:\r\n        case SyntaxKind.FunctionExpression:\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.Constructor:\r\n        case SyntaxKind.MethodSignature:\r\n        case SyntaxKind.ArrowFunction:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCommentDisplayParts",
            "complexity": 22,
            "lineCount": 68,
            "parameterCount": 2,
            "snippet": "function getCommentDisplayParts(tag: JSDocTag, checker?: TypeChecker): SymbolDisplayPart[] | undefined {\r\n    const { comment, kind } = tag;\r\n    const namePart = getTagNameDisplayPart(kind);\r\n    switch (kind) {\r\n        case SyntaxKind.JSDocThrowsTag:\r\n            const typeExpression = (tag as JSDocThrowsTag).typeExpression;\r\n            return typeExpression ? withNode(typeExpression) :\r\n                comment === undefined ? undefined : getDisplayPartsFromComment(comment, checker);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDocCommentTemplateAtPosition",
            "complexity": 19,
            "lineCount": 56,
            "parameterCount": 4,
            "snippet": "export function getDocCommentTemplateAtPosition(newLine: string, sourceFile: SourceFile, position: number, options?: DocCommentTemplateOptions): TextInsertion | undefined {\r\n    const tokenAtPos = getTokenAtPosition(sourceFile, position);\r\n    const existingDocComment = findAncestor(tokenAtPos, isJSDoc);\r\n    if (existingDocComment && (existingDocComment.comment !== undefined || length(existingDocComment.tags))) {\r\n        return undefined;\r\n    }\r\n    const tokenStart = tokenAtPos.getStart(sourceFile);\r\n    if (!existingDocComment && tokenStart < position) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/mapCode.ts",
        "criticalFunctions": [
          {
            "name": "matchNode",
            "complexity": 19,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function matchNode(a: Node, b: Node): boolean {\r\n    if (a.kind !== b.kind) {\r\n        return false;\r\n    }\r\n    if (a.kind === SyntaxKind.Constructor) {\r\n        return a.kind === b.kind;\r\n    }\r\n    if (isNamedDeclaration(a) && isNamedDeclaration(b)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          },
          {
            "name": "placeStatements",
            "complexity": 7,
            "lineCount": 57,
            "parameterCount": 4,
            "snippet": "function placeStatements(\r\n    originalFile: SourceFile,\r\n    changeTracker: ChangeTracker,\r\n    changes: NodeArray<Statement>,\r\n    focusLocations?: TextSpan[],\r\n) {\r\n    if (!focusLocations?.length) {\r\n        changeTracker.insertNodesAtEndOfFile(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "parse",
            "complexity": 5,
            "lineCount": 52,
            "parameterCount": 2,
            "snippet": "function parse(sourceFile: SourceFile, content: string): NodeArray<Node> {\r\n    const nodeKinds = [\r\n        {\r\n            parse: () =>\r\n                createSourceFile(\r\n                    \"__mapcode_content_nodes.ts\",\r\n                    content,\r\n                    sourceFile.languageVersion,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/navigateTo.ts",
        "criticalFunctions": [
          {
            "name": "getNavigateToItems",
            "complexity": 8,
            "lineCount": 25,
            "parameterCount": 7,
            "snippet": "export function getNavigateToItems(sourceFiles: readonly SourceFile[], checker: TypeChecker, cancellationToken: CancellationToken, searchValue: string, maxResultCount: number | undefined, excludeDtsFiles: boolean, excludeLibFiles?: boolean): NavigateToItem[] {\r\n    const patternMatcher = createPatternMatcher(searchValue);\r\n    if (!patternMatcher) return emptyArray;\r\n    const rawItems: RawNavigateToItem[] = [];\r\n    const singleCurrentFile = sourceFiles.length === 1 ? sourceFiles[0] : undefined;\r\n    for (const sourceFile of sourceFiles) {\r\n        cancellationToken.throwIfCancellationRequested();\r\n        if (excludeDtsFiles && sourceFile.isDeclarationFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getItemsFromNamedDeclaration",
            "complexity": 6,
            "lineCount": 32,
            "parameterCount": 8,
            "snippet": "function getItemsFromNamedDeclaration(\r\n    patternMatcher: PatternMatcher,\r\n    name: string,\r\n    declarations: readonly Declaration[],\r\n    checker: TypeChecker,\r\n    fileName: string,\r\n    excludeLibFiles: boolean,\r\n    singleCurrentFile: SourceFile | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/navigationBar.ts",
        "criticalFunctions": [
          {
            "name": "addChildrenRecursively",
            "complexity": 82,
            "lineCount": 254,
            "parameterCount": 1,
            "snippet": "function addChildrenRecursively(node: Node | undefined): void {\r\n    curCancellationToken.throwIfCancellationRequested();\r\n    if (!node || isToken(node)) {\r\n        return;\r\n    }\r\n    switch (node.kind) {\r\n        case SyntaxKind.Constructor:\r\n            const ctr = node as ConstructorDeclaration;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 82 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 254 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryMergeEs5Class",
            "complexity": 46,
            "lineCount": 97,
            "parameterCount": 4,
            "snippet": "function tryMergeEs5Class(a: NavigationBarNode, b: NavigationBarNode, bIndex: number, parent: NavigationBarNode): boolean | undefined {\r\n    function isPossibleConstructor(node: Node) {\r\n        return isFunctionExpression(node) || isFunctionDeclaration(node) || isVariableDeclaration(node);\r\n    }\r\n    const bAssignmentDeclarationKind = isBinaryExpression(b.node) || isCallExpression(b.node) ?\r\n        getAssignmentDeclarationKind(b.node) :\r\n        AssignmentDeclarationKind.None;\r\n    const aAssignmentDeclarationKind = isBinaryExpression(a.node) || isCallExpression(a.node) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 46 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getItemName",
            "complexity": 22,
            "lineCount": 47,
            "parameterCount": 2,
            "snippet": "function getItemName(node: Node, name: Node | undefined): string {\r\n    if (node.kind === SyntaxKind.ModuleDeclaration) {\r\n        return cleanText(getModuleName(node as ModuleDeclaration));\r\n    }\r\n    if (name) {\r\n        const text = isIdentifier(name) ? name.text\r\n            : isElementAccessExpression(name) ? `[${nodeText(name.argumentExpression)}]`\r\n            : nodeText(name);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "primaryNavBarMenuItems",
            "complexity": 1,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function primaryNavBarMenuItems(root: NavigationBarNode): NavigationBarNode[] {\r\n    const primaryNavBarMenuItems: NavigationBarNode[] = [];\r\n    function recur(item: NavigationBarNode) {\r\n        if (shouldAppearInPrimaryNavBarMenu(item)) {\r\n            primaryNavBarMenuItems.push(item);\r\n            if (item.children) {\r\n                for (const child of item.children) {\r\n                    recur(child);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/organizeImports.ts",
        "criticalFunctions": [
          {
            "name": "coalesceImportsWorker",
            "complexity": 23,
            "lineCount": 115,
            "parameterCount": 4,
            "snippet": "function coalesceImportsWorker(importGroup: readonly ImportDeclaration[], comparer: Comparer<string>, specifierComparer: Comparer<ImportSpecifier>, sourceFile?: SourceFile): readonly ImportDeclaration[] {\r\n    if (importGroup.length === 0) {\r\n        return importGroup;\r\n    }\r\n    const importGroupsByAttributes = groupBy(importGroup, decl => {\r\n        if (decl.attributes) {\r\n            let attrs = decl.attributes.token + \" \";\r\n            for (const x of toSorted(decl.attributes.elements, (x, y) => compareStringsCaseSensitive(x.name.text, y.name.text))) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "removeUnusedImports",
            "complexity": 14,
            "lineCount": 74,
            "parameterCount": 3,
            "snippet": "function removeUnusedImports(oldImports: readonly ImportDeclaration[], sourceFile: SourceFile, program: Program) {\r\n    const typeChecker = program.getTypeChecker();\r\n    const compilerOptions = program.getCompilerOptions();\r\n    const jsxNamespace = typeChecker.getJsxNamespace(sourceFile);\r\n    const jsxFragmentFactory = typeChecker.getJsxFragmentFactory(sourceFile);\r\n    const jsxElementsPresent = !!(sourceFile.transformFlags & TransformFlags.ContainsJsx);\r\n    const usedImports: ImportDeclaration[] = [];\r\n    for (const importDecl of oldImports) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "organizeImports",
            "complexity": 13,
            "lineCount": 137,
            "parameterCount": 6,
            "snippet": "export function organizeImports(\r\n    sourceFile: SourceFile,\r\n    formatContext: formatting.FormatContext,\r\n    host: LanguageServiceHost,\r\n    program: Program,\r\n    preferences: UserPreferences,\r\n    mode: OrganizeImportsMode,\r\n): FileTextChanges[] {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 137 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "detectNamedImportOrganizationBySort",
            "complexity": 13,
            "lineCount": 61,
            "parameterCount": 3,
            "snippet": "function detectNamedImportOrganizationBySort(originalGroups: readonly (ImportDeclaration | JSDocImportTag)[], comparersToTest: Comparer<string>[], typesToTest: OrganizeImportsTypeOrder[]): { namedImportComparer: Comparer<string>; typeOrder: OrganizeImportsTypeOrder | undefined; isSorted: boolean; } | undefined {\r\n    let bothNamedImports = false;\r\n    const importDeclsWithNamed = originalGroups.filter(i => {\r\n        const namedImports = tryCast(i.importClause?.namedBindings, isNamedImports)?.elements;\r\n        if (!namedImports?.length) return false;\r\n        if (!bothNamedImports && namedImports.some(n => n.isTypeOnly) && namedImports.some(n => !n.isTypeOnly)) {\r\n            bothNamedImports = true;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "coalesceExportsWorker",
            "complexity": 7,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function coalesceExportsWorker(exportGroup: readonly ExportDeclaration[], specifierComparer: Comparer<ExportSpecifier>) {\r\n    if (exportGroup.length === 0) {\r\n        return exportGroup;\r\n    }\r\n    const { exportWithoutClause, namedExports, typeOnlyExports } = getCategorizedExports(exportGroup);\r\n    const coalescedExports: ExportDeclaration[] = [];\r\n    if (exportWithoutClause) {\r\n        coalescedExports.push(exportWithoutClause);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/outliningElementsCollector.ts",
        "criticalFunctions": [
          {
            "name": "getOutliningSpanForNode",
            "complexity": 42,
            "lineCount": 163,
            "parameterCount": 2,
            "snippet": "function getOutliningSpanForNode(n: Node, sourceFile: SourceFile): OutliningSpan | undefined {\r\n    switch (n.kind) {\r\n        case SyntaxKind.Block:\r\n            if (isFunctionLike(n.parent)) {\r\n                return functionSpan(n.parent, n as Block, sourceFile);\r\n            }\r\n            switch (n.parent.kind) {\r\n                case SyntaxKind.DoStatement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 163 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitNode",
            "complexity": 19,
            "lineCount": 44,
            "parameterCount": 1,
            "snippet": "function visitNode(n: Node) {\r\n        if (depthRemaining === 0) return;\r\n        cancellationToken.throwIfCancellationRequested();\r\n        if (isDeclaration(n) || isVariableStatement(n) || isReturnStatement(n) || isCallOrNewExpression(n) || n.kind === SyntaxKind.EndOfFileToken) {\r\n            addOutliningForLeadingCommentsForNode(n, sourceFile, cancellationToken, out);\r\n        }\r\n        if (isFunctionLike(n) && isBinaryExpression(n.parent) && isPropertyAccessExpression(n.parent.left)) {\r\n            addOutliningForLeadingCommentsForNode(n.parent.left, sourceFile, cancellationToken, out);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addNodeOutliningSpans",
            "complexity": 8,
            "lineCount": 68,
            "parameterCount": 3,
            "snippet": "function addNodeOutliningSpans(sourceFile: SourceFile, cancellationToken: CancellationToken, out: OutliningSpan[]): void {\r\n    let depthRemaining = 40;\r\n    let current = 0;\r\n    const statements = [...sourceFile.statements, sourceFile.endOfFileToken];\r\n    const n = statements.length;\r\n    while (current < n) {\r\n        while (current < n && !isAnyImportSyntax(statements[current])) {\r\n            visitNode(statements[current]);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "services/patternMatcher.ts",
        "criticalFunctions": [
          {
            "name": "charIsPunctuation",
            "complexity": 24,
            "lineCount": 30,
            "parameterCount": 1,
            "snippet": "function charIsPunctuation(ch: number) {\r\n    switch (ch) {\r\n        case CharacterCodes.exclamation:\r\n        case CharacterCodes.doubleQuote:\r\n        case CharacterCodes.hash:\r\n        case CharacterCodes.percent:\r\n        case CharacterCodes.ampersand:\r\n        case CharacterCodes.singleQuote:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "matchTextChunk",
            "complexity": 14,
            "lineCount": 51,
            "parameterCount": 3,
            "snippet": "function matchTextChunk(candidate: string, chunk: TextChunk, stringToWordSpans: Map<string, TextSpan[]>): PatternMatch | undefined {\r\n    const index = indexOfIgnoringCase(candidate, chunk.textLowerCase);\r\n    if (index === 0) {\r\n        return createPatternMatch(chunk.text.length === candidate.length ? PatternMatchKind.exact : PatternMatchKind.prefix, /*isCaseSensitive:*/ startsWith(candidate, chunk.text));\r\n    }\r\n    if (chunk.isLowerCase) {\r\n        if (index === -1) return undefined;\r\n        const wordSpans = getWordSpans(candidate, stringToWordSpans);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryCamelCaseMatch",
            "complexity": 13,
            "lineCount": 73,
            "parameterCount": 4,
            "snippet": "function tryCamelCaseMatch(candidate: string, candidateParts: TextSpan[], chunk: TextChunk, ignoreCase: boolean): boolean {\r\n    const chunkCharacterSpans = chunk.characterSpans;\r\n    let currentCandidate = 0;\r\n    let currentChunkSpan = 0;\r\n    let firstMatch: number | undefined;\r\n    let contiguous: boolean | undefined;\r\n    while (true) {\r\n        if (currentChunkSpan === chunkCharacterSpans.length) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "matchSegment",
            "complexity": 4,
            "lineCount": 56,
            "parameterCount": 3,
            "snippet": "function matchSegment(candidate: string, segment: Segment, stringToWordSpans: Map<string, TextSpan[]>): PatternMatch | undefined {\r\n    if (every(segment.totalTextChunk.text, ch => ch !== CharacterCodes.space && ch !== CharacterCodes.asterisk)) {\r\n        const match = matchTextChunk(candidate, segment.totalTextChunk, stringToWordSpans);\r\n        if (match) return match;\r\n    }\r\n    const subWordTextChunks = segment.subWordTextChunks;\r\n    let bestMatch: PatternMatch | undefined;\r\n    for (const subWordTextChunk of subWordTextChunks) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/preProcess.ts",
        "criticalFunctions": [
          {
            "name": "tryConsumeImport",
            "complexity": 28,
            "lineCount": 105,
            "parameterCount": 0,
            "snippet": "function tryConsumeImport(): boolean {\r\n        if (lastToken === SyntaxKind.DotToken) {\r\n            return false;\r\n        }\r\n        let token = scanner.getToken();\r\n        if (token === SyntaxKind.ImportKeyword) {\r\n            token = nextToken();\r\n            if (token === SyntaxKind.OpenParenToken) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryConsumeExport",
            "complexity": 20,
            "lineCount": 72,
            "parameterCount": 0,
            "snippet": "function tryConsumeExport(): boolean {\r\n        let token = scanner.getToken();\r\n        if (token === SyntaxKind.ExportKeyword) {\r\n            markAsExternalModuleIfTopLevel();\r\n            token = nextToken();\r\n            if (token === SyntaxKind.TypeKeyword) {\r\n                const skipTypeKeyword = scanner.lookAhead(() => {\r\n                    const token = scanner.scan();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processImports",
            "complexity": 20,
            "lineCount": 81,
            "parameterCount": 0,
            "snippet": "function processImports(): void {\r\n        scanner.setText(sourceText);\r\n        nextToken();\r\n        while (true) {\r\n            if (scanner.getToken() === SyntaxKind.EndOfFileToken) {\r\n                break;\r\n            }\r\n            if (scanner.getToken() === SyntaxKind.TemplateHead) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "preProcessFile",
            "complexity": 9,
            "lineCount": 437,
            "parameterCount": 3,
            "snippet": "export function preProcessFile(sourceText: string, readImportFiles = true, detectJavaScriptImports = false): PreProcessedFileInfo {\r\n    const pragmaContext: PragmaContext = {\r\n        languageVersion: ScriptTarget.ES5, // controls whether the token scanner considers unicode identifiers or not - shouldn't matter, since we're only using it for trivia\r\n        pragmas: undefined,\r\n        checkJsDirective: undefined,\r\n        referencedFiles: [],\r\n        typeReferenceDirectives: [],\r\n        libReferenceDirectives: [],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 437 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/rename.ts",
        "criticalFunctions": [
          {
            "name": "getRenameInfoForNode",
            "complexity": 24,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "function getRenameInfoForNode(\r\n    node: Node,\r\n    typeChecker: TypeChecker,\r\n    sourceFile: SourceFile,\r\n    program: Program,\r\n    preferences: UserPreferences,\r\n): RenameInfo | undefined {\r\n    const symbol = typeChecker.getSymbolAtLocation(node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/services.ts",
        "criticalFunctions": [
          {
            "name": "visit",
            "complexity": 45,
            "lineCount": 118,
            "parameterCount": 1,
            "snippet": "function visit(node: Node): void {\r\n            switch (node.kind) {\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    const functionDeclaration = node as FunctionLikeDeclaration;\r\n                    const declarationName = getDeclarationName(functionDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 45 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 118 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "toggleMultilineComment",
            "complexity": 27,
            "lineCount": 120,
            "parameterCount": 4,
            "snippet": "function toggleMultilineComment(fileName: string, textRange: TextRange, insertComment?: boolean, isInsideJsx?: boolean): TextChange[] {\r\n        const sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\r\n        const textChanges: TextChange[] = [];\r\n        const { text } = sourceFile;\r\n        let hasComment = false;\r\n        let isCommenting = insertComment || false;\r\n        const positions = [] as number[] as SortedArray<number>;\r\n        let { pos } = textRange;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 120 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNameOrDottedNameSpan",
            "complexity": 19,
            "lineCount": 58,
            "parameterCount": 3,
            "snippet": "function getNameOrDottedNameSpan(fileName: string, startPos: number, _endPos: number): TextSpan | undefined {\r\n        const sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\r\n        const node = getTouchingPropertyName(sourceFile, startPos);\r\n        if (node === sourceFile) {\r\n            return undefined;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.PropertyAccessExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getLinkedEditingRangeAtPosition",
            "complexity": 19,
            "lineCount": 61,
            "parameterCount": 2,
            "snippet": "function getLinkedEditingRangeAtPosition(fileName: string, position: number): LinkedEditingInfo | undefined {\r\n        const sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\r\n        const token = findPrecedingToken(position, sourceFile);\r\n        if (!token || token.parent.kind === SyntaxKind.SourceFile) return undefined;\r\n        const jsxTagWordPattern = \"[a-zA-Z0-9:\\\\-\\\\._$]*\";\r\n        if (isJsxFragment(token.parent.parent)) {\r\n            const openFragment = token.parent.parent.openingFragment;\r\n            const closeFragment = token.parent.parent.closingFragment;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "shouldGetType",
            "complexity": 17,
            "lineCount": 27,
            "parameterCount": 3,
            "snippet": "function shouldGetType(sourceFile: SourceFile, node: Node, position: number): boolean {\r\n        switch (node.kind) {\r\n            case SyntaxKind.Identifier:\r\n                if (\r\n                    node.flags & NodeFlags.JSDoc && !isInJSFile(node) &&\r\n                    ((node.parent.kind === SyntaxKind.PropertySignature && (node.parent as PropertySignature).name === node) ||\r\n                        findAncestor(node, n => n.kind === SyntaxKind.Parameter))\r\n                ) {\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/signatureHelp.ts",
        "criticalFunctions": [
          {
            "name": "getImmediatelyContainingArgumentInfo",
            "complexity": 16,
            "lineCount": 83,
            "parameterCount": 4,
            "snippet": "function getImmediatelyContainingArgumentInfo(node: Node, position: number, sourceFile: SourceFile, checker: TypeChecker): ArgumentListInfo | undefined {\r\n    const { parent } = node;\r\n    if (isCallOrNewExpression(parent)) {\r\n        const invocation = parent;\r\n        const info = getArgumentOrParameterListInfo(node, position, sourceFile, checker);\r\n        if (!info) return undefined;\r\n        const { list, argumentIndex, argumentCount, argumentsSpan } = info;\r\n        const isTypeParameterList = !!parent.typeArguments && parent.typeArguments.pos === list.pos;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/smartSelection.ts",
        "criticalFunctions": [
          {
            "name": "getSmartSelectionRange",
            "complexity": 45,
            "lineCount": 129,
            "parameterCount": 2,
            "snippet": "export function getSmartSelectionRange(pos: number, sourceFile: SourceFile): SelectionRange {\r\n    let selectionRange: SelectionRange = {\r\n        textSpan: createTextSpanFromBounds(sourceFile.getFullStart(), sourceFile.getEnd()),\r\n    };\r\n    let parentNode: Node = sourceFile;\r\n    outer:\r\n    while (true) {\r\n        const children = getSelectionChildren(parentNode);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 45 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 129 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSelectionChildren",
            "complexity": 9,
            "lineCount": 61,
            "parameterCount": 1,
            "snippet": "function getSelectionChildren(node: Node): readonly Node[] {\r\n    if (isSourceFile(node)) {\r\n        return groupChildren(node.getChildAt(0).getChildren(), isImport);\r\n    }\r\n    if (isMappedTypeNode(node)) {\r\n        const [openBraceToken, ...children] = node.getChildren();\r\n        const closeBraceToken = Debug.checkDefined(children.pop());\r\n        Debug.assertEqual(openBraceToken.kind, SyntaxKind.OpenBraceToken);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/sourcemaps.ts",
        "criticalFunctions": [
          {
            "name": "getSourceMapper",
            "complexity": 1,
            "lineCount": 117,
            "parameterCount": 1,
            "snippet": "export function getSourceMapper(host: SourceMapperHost): SourceMapper {\r\n    const getCanonicalFileName = createGetCanonicalFileName(host.useCaseSensitiveFileNames());\r\n    const currentDirectory = host.getCurrentDirectory();\r\n    const sourceFileLike = new Map<string, SourceFileLike | false>();\r\n    const documentPositionMappers = new Map<string, DocumentPositionMapper>();\r\n    return {\r\n        tryGetSourcePosition,\r\n        tryGetGeneratedPosition,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 117 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/stringCompletions.ts",
        "criticalFunctions": [
          {
            "name": "getStringLiteralCompletionEntries",
            "complexity": 35,
            "lineCount": 154,
            "parameterCount": 6,
            "snippet": "function getStringLiteralCompletionEntries(sourceFile: SourceFile, node: StringLiteralLike, position: number, program: Program, host: LanguageServiceHost, preferences: UserPreferences): StringLiteralCompletion | undefined {\r\n    const typeChecker = program.getTypeChecker();\r\n    const parent = walkUpParentheses(node.parent);\r\n    switch (parent.kind) {\r\n        case SyntaxKind.LiteralType: {\r\n            const grandParent = walkUpParentheses(parent.parent);\r\n            if (grandParent.kind === SyntaxKind.ImportType) {\r\n                return { kind: StringLiteralCompletionKind.Paths, paths: getStringLiteralCompletionsFromModuleNames(sourceFile, node, program, host, preferences) };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 154 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getModulesForPathsPattern",
            "complexity": 25,
            "lineCount": 112,
            "parameterCount": 9,
            "snippet": "function getModulesForPathsPattern(\r\n    fragment: string,\r\n    packageDirectory: string,\r\n    pattern: string,\r\n    extensionOptions: ExtensionOptions,\r\n    isExports: boolean,\r\n    isImports: boolean,\r\n    program: Program,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getCompletionEntriesForDirectoryFragment",
            "complexity": 19,
            "lineCount": 87,
            "parameterCount": 9,
            "snippet": "function getCompletionEntriesForDirectoryFragment(\r\n    fragment: string,\r\n    scriptDirectory: string,\r\n    extensionOptions: ExtensionOptions,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n    moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost,\r\n    moduleSpecifierIsRelative: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "kindModifiersFromExtension",
            "complexity": 16,
            "lineCount": 34,
            "parameterCount": 1,
            "snippet": "function kindModifiersFromExtension(extension: Extension | undefined): ScriptElementKindModifier {\r\n    switch (extension) {\r\n        case Extension.Dts:\r\n            return ScriptElementKindModifier.dtsModifier;\r\n        case Extension.Js:\r\n            return ScriptElementKindModifier.jsModifier;\r\n        case Extension.Json:\r\n            return ScriptElementKindModifier.jsonModifier;\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "addCompletionEntriesFromPathsOrExportsOrImports",
            "complexity": 15,
            "lineCount": 55,
            "parameterCount": 12,
            "snippet": "function addCompletionEntriesFromPathsOrExportsOrImports(\r\n    result: NameAndKindSet,\r\n    isExports: boolean,\r\n    isImports: boolean,\r\n    fragment: string,\r\n    baseDirectory: string,\r\n    extensionOptions: ExtensionOptions,\r\n    program: Program,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "12 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/suggestionDiagnostics.ts",
        "criticalFunctions": [
          {
            "name": "computeSuggestionDiagnostics",
            "complexity": 18,
            "lineCount": 74,
            "parameterCount": 3,
            "snippet": "export function computeSuggestionDiagnostics(sourceFile: SourceFile, program: Program, cancellationToken: CancellationToken): DiagnosticWithLocation[] {\r\n    program.getSemanticDiagnostics(sourceFile, cancellationToken);\r\n    const diags: DiagnosticWithLocation[] = [];\r\n    const checker = program.getTypeChecker();\r\n    const isCommonJSFile = program.getImpliedNodeFormatForEmit(sourceFile) === ModuleKind.CommonJS || fileExtensionIsOneOf(sourceFile.fileName, [Extension.Cts, Extension.Cjs]);\r\n    if (\r\n        !isCommonJSFile &&\r\n        sourceFile.commonJsModuleIndicator &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/symbolDisplay.ts",
        "criticalFunctions": [
          {
            "name": "getSymbolDisplayPartsDocumentationAndSymbolKindWorker",
            "complexity": 174,
            "lineCount": 614,
            "parameterCount": 8,
            "snippet": "function getSymbolDisplayPartsDocumentationAndSymbolKindWorker(typeChecker: TypeChecker, symbol: Symbol, sourceFile: SourceFile, enclosingDeclaration: Node | undefined, location: Node, type: Type | undefined, semanticMeaning: SemanticMeaning, alias?: Symbol): SymbolDisplayPartsDocumentationAndSymbolKind {\r\n    const displayParts: SymbolDisplayPart[] = [];\r\n    let documentation: SymbolDisplayPart[] = [];\r\n    let tags: JSDocTagInfo[] = [];\r\n    const symbolFlags = getCombinedLocalAndExportSymbolFlags(symbol);\r\n    let symbolKind = semanticMeaning & SemanticMeaning.Value ? getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(typeChecker, symbol, location) : ScriptElementKind.unknown;\r\n    let hasAddedSymbolInfo = false;\r\n    const isThisExpression = location.kind === SyntaxKind.ThisKeyword && isInExpressionContext(location) || isThisInTypeQuery(location);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 174 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 614 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar",
            "complexity": 31,
            "lineCount": 75,
            "parameterCount": 3,
            "snippet": "function getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(typeChecker: TypeChecker, symbol: Symbol, location: Node): ScriptElementKind {\r\n    const roots = typeChecker.getRootSymbols(symbol);\r\n    if (\r\n        roots.length === 1\r\n        && first(roots).flags & SymbolFlags.Method\r\n        && typeChecker.getTypeOfSymbolAtLocation(symbol, location).getNonNullableType().getCallSignatures().length !== 0\r\n    ) {\r\n        return ScriptElementKind.memberFunctionElement;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getSymbolDisplayPartsDocumentationAndSymbolKind",
            "complexity": 1,
            "lineCount": 11,
            "parameterCount": 7,
            "snippet": "export function getSymbolDisplayPartsDocumentationAndSymbolKind(\r\n    typeChecker: TypeChecker,\r\n    symbol: Symbol,\r\n    sourceFile: SourceFile,\r\n    enclosingDeclaration: Node | undefined,\r\n    location: Node,\r\n    semanticMeaning: SemanticMeaning = getMeaningFromLocation(location),\r\n    alias?: Symbol,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/textChanges.ts",
        "criticalFunctions": [
          {
            "name": "deleteDeclaration",
            "complexity": 30,
            "lineCount": 91,
            "parameterCount": 4,
            "snippet": "export function deleteDeclaration(changes: ChangeTracker, deletedNodesInLists: Set<Node>, sourceFile: SourceFile, node: Node): void {\r\n        switch (node.kind) {\r\n            case SyntaxKind.Parameter: {\r\n                const oldFunction = node.parent;\r\n                if (\r\n                    isArrowFunction(oldFunction) &&\r\n                    oldFunction.parameters.length === 1 &&\r\n                    !findChildOfKind(oldFunction, SyntaxKind.OpenParenToken, sourceFile)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getInsertionPositionAtSourceFileTop",
            "complexity": 17,
            "lineCount": 81,
            "parameterCount": 1,
            "snippet": "function getInsertionPositionAtSourceFileTop(sourceFile: SourceFile): number {\r\n    let lastPrologue: PrologueDirective | undefined;\r\n    for (const node of sourceFile.statements) {\r\n        if (isPrologueDirective(node)) {\r\n            lastPrologue = node;\r\n        }\r\n        else {\r\n            break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getAdjustedStartPosition",
            "complexity": 13,
            "lineCount": 52,
            "parameterCount": 4,
            "snippet": "function getAdjustedStartPosition(sourceFile: SourceFile, node: Node, options: ConfigurableStartEnd, hasTrailingComment = false): number {\r\n    const { leadingTriviaOption } = options;\r\n    if (leadingTriviaOption === LeadingTriviaOption.Exclude) {\r\n        return node.getStart(sourceFile);\r\n    }\r\n    if (leadingTriviaOption === LeadingTriviaOption.StartLine) {\r\n        const startPos = node.getStart(sourceFile);\r\n        const pos = getLineStartPositionForPosition(startPos, sourceFile);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "insertNodeInListAfter",
            "complexity": 13,
            "lineCount": 89,
            "parameterCount": 4,
            "snippet": "public insertNodeInListAfter(sourceFile: SourceFile, after: Node, newNode: Node, containingList: NodeArray<Node> | undefined = formatting.SmartIndenter.getContainingList(after, sourceFile)): void {\r\n        if (!containingList) {\r\n            Debug.fail(\"node is not a list element\");\r\n            return;\r\n        }\r\n        const index = indexOfNode(containingList, after);\r\n        if (index < 0) {\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFormattedTextOfNode",
            "complexity": 7,
            "lineCount": 20,
            "parameterCount": 8,
            "snippet": "function getFormattedTextOfNode(nodeIn: Node, targetSourceFile: SourceFile, sourceFile: SourceFile, pos: number, { indentation, prefix, delta }: InsertNodeOptions, newLineCharacter: string, formatContext: formatting.FormatContext, validate: ValidateNonFormattedText | undefined): string {\r\n        const { node, text } = getNonformattedText(nodeIn, targetSourceFile, newLineCharacter);\r\n        if (validate) validate(node, text);\r\n        const formatOptions = getFormatCodeSettingsForWriting(formatContext, targetSourceFile);\r\n        const initialIndentation = indentation !== undefined\r\n            ? indentation\r\n            : formatting.SmartIndenter.getIndentation(pos, sourceFile, formatOptions, prefix === newLineCharacter || getLineStartPositionForPosition(pos, targetSourceFile) === pos);\r\n        if (delta === undefined) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/transpile.ts",
        "criticalFunctions": [
          {
            "name": "transpileWorker",
            "complexity": 17,
            "lineCount": 105,
            "parameterCount": 3,
            "snippet": "function transpileWorker(input: string, transpileOptions: TranspileOptions, declaration?: boolean): TranspileOutput {\r\n    barebonesLibSourceFile ??= createSourceFile(barebonesLibName, barebonesLibContent, { languageVersion: ScriptTarget.Latest });\r\n    const diagnostics: Diagnostic[] = [];\r\n    const options: CompilerOptions = transpileOptions.compilerOptions ? fixupCompilerOptions(transpileOptions.compilerOptions, diagnostics) : {};\r\n    const defaultOptions = getDefaultCompilerOptions();\r\n    for (const key in defaultOptions) {\r\n        if (hasProperty(defaultOptions, key) && options[key] === undefined) {\r\n            options[key] = defaultOptions[key];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/types.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/utilities.ts",
        "criticalFunctions": [
          {
            "name": "getAdjustedLocation",
            "complexity": 105,
            "lineCount": 199,
            "parameterCount": 2,
            "snippet": "function getAdjustedLocation(node: Node, forRename: boolean): Node {\r\n    const { parent } = node;\r\n    if (\r\n        isModifier(node) && (forRename || node.kind !== SyntaxKind.DefaultKeyword) ? canHaveModifiers(parent) && contains(parent.modifiers, node) :\r\n            node.kind === SyntaxKind.ClassKeyword ? isClassDeclaration(parent) || isClassExpression(node) :\r\n            node.kind === SyntaxKind.FunctionKeyword ? isFunctionDeclaration(parent) || isFunctionExpression(node) :\r\n            node.kind === SyntaxKind.InterfaceKeyword ? isInterfaceDeclaration(parent) :\r\n            node.kind === SyntaxKind.EnumKeyword ? isEnumDeclaration(parent) :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 105 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 199 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isCompletedNode",
            "complexity": 70,
            "lineCount": 134,
            "parameterCount": 2,
            "snippet": "function isCompletedNode(n: Node | undefined, sourceFile: SourceFile): boolean {\r\n    if (n === undefined || nodeIsMissing(n)) {\r\n        return false;\r\n    }\r\n    switch (n.kind) {\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.InterfaceDeclaration:\r\n        case SyntaxKind.EnumDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 70 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getNodeKind",
            "complexity": 60,
            "lineCount": 106,
            "parameterCount": 1,
            "snippet": "export function getNodeKind(node: Node): ScriptElementKind {\r\n    switch (node.kind) {\r\n        case SyntaxKind.SourceFile:\r\n            return isExternalModule(node as SourceFile) ? ScriptElementKind.moduleElement : ScriptElementKind.scriptElement;\r\n        case SyntaxKind.ModuleDeclaration:\r\n            return ScriptElementKind.moduleElement;\r\n        case SyntaxKind.ClassDeclaration:\r\n        case SyntaxKind.ClassExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 60 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 106 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getMeaningFromDeclaration",
            "complexity": 39,
            "lineCount": 64,
            "parameterCount": 1,
            "snippet": "export function getMeaningFromDeclaration(node: Node): SemanticMeaning {\r\n    switch (node.kind) {\r\n        case SyntaxKind.VariableDeclaration:\r\n            return isInJSFile(node) && getJSDocEnumTag(node) ? SemanticMeaning.All : SemanticMeaning.Value;\r\n        case SyntaxKind.Parameter:\r\n        case SyntaxKind.BindingElement:\r\n        case SyntaxKind.PropertyDeclaration:\r\n        case SyntaxKind.PropertySignature:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 64 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getPossibleTypeArgumentsInfo",
            "complexity": 37,
            "lineCount": 101,
            "parameterCount": 2,
            "snippet": "export function getPossibleTypeArgumentsInfo(tokenIn: Node | undefined, sourceFile: SourceFile): PossibleTypeArgumentInfo | undefined {\r\n    if (sourceFile.text.lastIndexOf(\"<\", tokenIn ? tokenIn.pos : sourceFile.text.length) === -1) {\r\n        return undefined;\r\n    }\r\n    let token: Node | undefined = tokenIn;\r\n    let remainingLessThanTokens = 0;\r\n    let nTypeArguments = 0;\r\n    while (token) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 37 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 101 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "tsserver/nodeServer.ts",
        "criticalFunctions": [
          {
            "name": "getGlobalTypingsCacheLocation",
            "complexity": 17,
            "lineCount": 24,
            "parameterCount": 0,
            "snippet": "function getGlobalTypingsCacheLocation() {\r\n        switch (process.platform) {\r\n            case \"win32\": {\r\n                const basePath = process.env.LOCALAPPDATA ||\r\n                    process.env.APPDATA ||\r\n                    (os.homedir && os.homedir()) ||\r\n                    process.env.USERPROFILE ||\r\n                    (process.env.HOMEDRIVE && process.env.HOMEPATH && normalizeSlashes(process.env.HOMEDRIVE + process.env.HOMEPATH)) ||\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "createInstallerProcess",
            "complexity": 13,
            "lineCount": 54,
            "parameterCount": 0,
            "snippet": "createInstallerProcess() {\r\n            if (this.logger.hasLevel(ts.server.LogLevel.requestTime)) {\r\n                this.logger.info(\"Binding...\");\r\n            }\r\n            const args: string[] = [ts.server.Arguments.GlobalCacheLocation, this.globalTypingsCacheLocation];\r\n            if (this.telemetryEnabled) {\r\n                args.push(ts.server.Arguments.EnableTelemetry);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "initializeNodeSystem",
            "complexity": 7,
            "lineCount": 270,
            "parameterCount": 0,
            "snippet": "export function initializeNodeSystem(): StartInput {\r\n    const sys = Debug.checkDefined(ts.sys) as ts.server.ServerHost;\r\n    class Logger implements Logger {\r\n        private seq = 0;\r\n        private inGroup = false;\r\n        private firstInGroup = true;\r\n        private fd = -1;\r\n        constructor(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 270 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "startNodeSession",
            "complexity": 5,
            "lineCount": 279,
            "parameterCount": 3,
            "snippet": "function startNodeSession(options: StartSessionOptions, logger: ts.server.Logger, cancellationToken: ts.server.ServerCancellationToken) {\r\n    const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout,\r\n        terminal: false,\r\n    });\r\n    class NodeTypingsInstallerAdapter extends ts.server.TypingsInstallerAdapter {\r\n        protected override installer!: childProcess.ChildProcess;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 279 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 1,
            "lineCount": 20,
            "parameterCount": 9,
            "snippet": "constructor(\r\n            telemetryEnabled: boolean,\r\n            logger: ts.server.Logger,\r\n            host: ts.server.ServerHost,\r\n            globalTypingsCacheLocation: string,\r\n            readonly typingSafeListLocation: string,\r\n            readonly typesMapLocation: string,\r\n            private readonly npmLocation: string | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/dom.asynciterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/dom.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/dom.iterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/es2017.date.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/es5.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/esnext.float16.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/webworker.asynciterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "lib/webworker.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "lib/webworker.iterable.generated.d.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "typingsInstallerCore/typingsInstaller.ts",
        "criticalFunctions": [
          {
            "name": "processCacheLocation",
            "complexity": 21,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "private processCacheLocation(cacheLocation: string) {\r\n        if (this.log.isEnabled()) {\r\n            this.log.writeLine(`Processing cache location '${cacheLocation}'`);\r\n        }\r\n        if (this.knownCachesSet.has(cacheLocation)) {\r\n            if (this.log.isEnabled()) {\r\n                this.log.writeLine(`Cache location was already processed...`);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "installTypings",
            "complexity": 4,
            "lineCount": 77,
            "parameterCount": 4,
            "snippet": "private installTypings(req: DiscoverTypings, cachePath: string, currentlyCachedTypings: string[], typingsToInstall: string[]) {\r\n        if (this.log.isEnabled()) {\r\n            this.log.writeLine(`Installing typings ${JSON.stringify(typingsToInstall)}`);\r\n        }\r\n        const filteredTypings = this.filterTypings(typingsToInstall);\r\n        if (filteredTypings.length === 0) {\r\n            if (this.log.isEnabled()) {\r\n                this.log.writeLine(`All typings are known to be missing or invalid - no need to install more typings`);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "typingsInstaller/nodeTypingsInstaller.ts",
        "criticalFunctions": [
          {
            "name": "<anonymous>",
            "complexity": 12,
            "lineCount": 47,
            "parameterCount": 7,
            "snippet": "constructor(globalTypingsCacheLocation: string, typingSafeListLocation: string, typesMapLocation: string, npmLocation: string | undefined, validateDefaultNpmLocation: boolean, throttleLimit: number, log: ts.server.typingsInstaller.Log) {\r\n        const libDirectory = getDirectoryPath(normalizePath(sys.getExecutingFilePath()));\r\n        super(\r\n            sys,\r\n            globalTypingsCacheLocation,\r\n            typingSafeListLocation ? toPath(typingSafeListLocation, \"\", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath(\"typingSafeList.json\", libDirectory, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),\r\n            typesMapLocation ? toPath(typesMapLocation, \"\", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath(\"typesMap.json\", libDirectory, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),\r\n            throttleLimit,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/factory/emitHelpers.ts",
        "criticalFunctions": [
          {
            "name": "createEmitHelperFactory",
            "complexity": 1,
            "lineCount": 554,
            "parameterCount": 1,
            "snippet": "export function createEmitHelperFactory(context: TransformationContext): EmitHelperFactory {\r\n    const factory = context.factory;\r\n    const immutableTrue = memoize(() => setInternalEmitFlags(factory.createTrue(), InternalEmitFlags.Immutable));\r\n    const immutableFalse = memoize(() => setInternalEmitFlags(factory.createFalse(), InternalEmitFlags.Immutable));\r\n    return {\r\n        getUnscopedHelperName,\r\n        createDecorateHelper,\r\n        createMetadataHelper,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 554 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/factory/emitNode.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "compiler/factory/nodeConverters.ts",
        "criticalFunctions": [
          {
            "name": "createNodeConverters",
            "complexity": 1,
            "lineCount": 140,
            "parameterCount": 1,
            "snippet": "export function createNodeConverters(factory: NodeFactory): NodeConverters {\r\n    return {\r\n        convertToFunctionBlock,\r\n        convertToFunctionExpression,\r\n        convertToClassExpression,\r\n        convertToArrayAssignmentElement,\r\n        convertToObjectAssignmentElement,\r\n        convertToAssignmentPattern,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 140 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "compiler/factory/nodeFactory.ts",
        "criticalFunctions": [
          {
            "name": "getTransformFlagsSubtreeExclusions",
            "complexity": 49,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "function getTransformFlagsSubtreeExclusions(kind: SyntaxKind) {\r\n    if (kind >= SyntaxKind.FirstTypeNode && kind <= SyntaxKind.LastTypeNode) {\r\n        return TransformFlags.TypeExcludes;\r\n    }\r\n    switch (kind) {\r\n        case SyntaxKind.CallExpression:\r\n        case SyntaxKind.NewExpression:\r\n        case SyntaxKind.ArrayLiteralExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 49 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createToken",
            "complexity": 32,
            "lineCount": 62,
            "parameterCount": 1,
            "snippet": "function createToken<TKind extends SyntaxKind>(token: TKind) {\r\n        Debug.assert(token >= SyntaxKind.FirstToken && token <= SyntaxKind.LastToken, \"Invalid token\");\r\n        Debug.assert(token <= SyntaxKind.FirstTemplateToken || token >= SyntaxKind.LastTemplateToken, \"Invalid token. Use 'createTemplateLiteralLikeNode' to create template literals.\");\r\n        Debug.assert(token <= SyntaxKind.FirstLiteralToken || token >= SyntaxKind.LastLiteralToken, \"Invalid token. Use 'createLiteralLikeNode' to create literals.\");\r\n        Debug.assert(token !== SyntaxKind.Identifier, \"Invalid token. Use 'createIdentifier' to create identifiers\");\r\n        const node = createBaseToken<Token<TKind>>(token);\r\n        let transformFlags = TransformFlags.None;\r\n        switch (token) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              }
            ]
          },
          {
            "name": "replaceModifiers",
            "complexity": 27,
            "lineCount": 35,
            "parameterCount": 2,
            "snippet": "function replaceModifiers(node: HasModifiers, modifiers: readonly Modifier[] | ModifierFlags) {\r\n        let modifierArray;\r\n        if (typeof modifiers === \"number\") {\r\n            modifierArray = createModifiersFromModifierFlags(modifiers);\r\n        }\r\n        else {\r\n            modifierArray = modifiers;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getDefaultTagNameForKind",
            "complexity": 22,
            "lineCount": 46,
            "parameterCount": 1,
            "snippet": "function getDefaultTagNameForKind(kind: JSDocTag[\"kind\"]): string {\r\n    switch (kind) {\r\n        case SyntaxKind.JSDocTypeTag:\r\n            return \"type\";\r\n        case SyntaxKind.JSDocReturnTag:\r\n            return \"returns\";\r\n        case SyntaxKind.JSDocThisTag:\r\n            return \"this\";\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "createModifiersFromModifierFlags",
            "complexity": 17,
            "lineCount": 19,
            "parameterCount": 1,
            "snippet": "function createModifiersFromModifierFlags(flags: ModifierFlags) {\r\n        const result: Modifier[] = [];\r\n        if (flags & ModifierFlags.Export) result.push(createModifier(SyntaxKind.ExportKeyword));\r\n        if (flags & ModifierFlags.Ambient) result.push(createModifier(SyntaxKind.DeclareKeyword));\r\n        if (flags & ModifierFlags.Default) result.push(createModifier(SyntaxKind.DefaultKeyword));\r\n        if (flags & ModifierFlags.Const) result.push(createModifier(SyntaxKind.ConstKeyword));\r\n        if (flags & ModifierFlags.Public) result.push(createModifier(SyntaxKind.PublicKeyword));\r\n        if (flags & ModifierFlags.Private) result.push(createModifier(SyntaxKind.PrivateKeyword));\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/factory/nodeTests.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "compiler/factory/parenthesizerRules.ts",
        "criticalFunctions": [
          {
            "name": "binaryOperandNeedsParentheses",
            "complexity": 18,
            "lineCount": 100,
            "parameterCount": 4,
            "snippet": "function binaryOperandNeedsParentheses(binaryOperator: SyntaxKind, operand: Expression, isLeftSideOfBinary: boolean, leftOperand: Expression | undefined) {\r\n        const binaryOperatorPrecedence = getOperatorPrecedence(SyntaxKind.BinaryExpression, binaryOperator);\r\n        const binaryOperatorAssociativity = getOperatorAssociativity(SyntaxKind.BinaryExpression, binaryOperator);\r\n        const emittedOperand = skipPartiallyEmittedExpressions(operand);\r\n        if (!isLeftSideOfBinary && operand.kind === SyntaxKind.ArrowFunction && binaryOperatorPrecedence > OperatorPrecedence.Assignment) {\r\n            return true;\r\n        }\r\n        const operandPrecedence = getExpressionPrecedence(emittedOperand);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 100 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createParenthesizerRules",
            "complexity": 1,
            "lineCount": 606,
            "parameterCount": 1,
            "snippet": "export function createParenthesizerRules(factory: NodeFactory): ParenthesizerRules {\r\n    interface BinaryPlusExpression extends BinaryExpression {\r\n        cachedLiteralKind: SyntaxKind;\r\n    }\r\n    let binaryLeftOperandParenthesizerCache: Map<BinaryOperator, (node: Expression) => Expression> | undefined;\r\n    let binaryRightOperandParenthesizerCache: Map<BinaryOperator, (node: Expression) => Expression> | undefined;\r\n    return {\r\n        getParenthesizeLeftSideOfBinaryForOperator,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 606 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/factory/utilities.ts",
        "criticalFunctions": [
          {
            "name": "canHaveIllegalDecorators",
            "complexity": 17,
            "lineCount": 20,
            "parameterCount": 1,
            "snippet": "export function canHaveIllegalDecorators(node: Node): node is HasIllegalDecorators {\r\n    const kind = node.kind;\r\n    return kind === SyntaxKind.PropertyAssignment\r\n        || kind === SyntaxKind.ShorthandPropertyAssignment\r\n        || kind === SyntaxKind.FunctionDeclaration\r\n        || kind === SyntaxKind.Constructor\r\n        || kind === SyntaxKind.IndexSignature\r\n        || kind === SyntaxKind.ClassStaticBlockDeclaration\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "tryGetPropertyNameOfBindingOrAssignmentElement",
            "complexity": 16,
            "lineCount": 49,
            "parameterCount": 1,
            "snippet": "export function tryGetPropertyNameOfBindingOrAssignmentElement(bindingElement: BindingOrAssignmentElement): Exclude<PropertyName, PrivateIdentifier> | undefined {\r\n    switch (bindingElement.kind) {\r\n        case SyntaxKind.BindingElement:\r\n            if (bindingElement.propertyName) {\r\n                const propertyName = bindingElement.propertyName;\r\n                if (isPrivateIdentifier(propertyName)) {\r\n                    return Debug.failBadSyntaxKind(propertyName);\r\n                }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createExternalHelpersImportDeclarationIfNeeded",
            "complexity": 14,
            "lineCount": 61,
            "parameterCount": 7,
            "snippet": "export function createExternalHelpersImportDeclarationIfNeeded(nodeFactory: NodeFactory, helperFactory: EmitHelperFactory, sourceFile: SourceFile, compilerOptions: CompilerOptions, hasExportStarsToExportValues?: boolean, hasImportStar?: boolean, hasImportDefault?: boolean): ImportDeclaration | ImportEqualsDeclaration | undefined {\r\n    if (compilerOptions.importHelpers && isEffectiveExternalModule(sourceFile, compilerOptions)) {\r\n        const moduleKind = getEmitModuleKind(compilerOptions);\r\n        const impliedModuleKind = getImpliedNodeFormatForEmitWorker(sourceFile, compilerOptions);\r\n        const helpers = getImportedHelpers(sourceFile);\r\n        if (\r\n            (moduleKind >= ModuleKind.ES2015 && moduleKind <= ModuleKind.ESNext) ||\r\n            impliedModuleKind === ModuleKind.ESNext ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 61 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getTargetOfBindingOrAssignmentElement",
            "complexity": 8,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "export function getTargetOfBindingOrAssignmentElement(bindingElement: BindingOrAssignmentElement): BindingOrAssignmentElementTarget | undefined {\r\n    if (isDeclarationBindingElement(bindingElement)) {\r\n        return bindingElement.name;\r\n    }\r\n    if (isObjectLiteralElementLike(bindingElement)) {\r\n        switch (bindingElement.kind) {\r\n            case SyntaxKind.PropertyAssignment:\r\n                return getTargetOfBindingOrAssignmentElement(bindingElement.initializer as BindingOrAssignmentElement);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createExpressionForJsxFragment",
            "complexity": 5,
            "lineCount": 25,
            "parameterCount": 7,
            "snippet": "export function createExpressionForJsxFragment(factory: NodeFactory, jsxFactoryEntity: EntityName | undefined, jsxFragmentFactoryEntity: EntityName | undefined, reactNamespace: string, children: readonly Expression[], parentElement: JsxOpeningFragment, location: TextRange): LeftHandSideExpression {\r\n    const tagName = createJsxFragmentFactoryExpression(factory, jsxFragmentFactoryEntity, reactNamespace, parentElement);\r\n    const argumentsList = [tagName, factory.createNull()];\r\n    if (children && children.length > 0) {\r\n        if (children.length > 1) {\r\n            for (const child of children) {\r\n                startOnNewLine(child);\r\n                argumentsList.push(child);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/factory/utilitiesPublic.ts",
        "criticalFunctions": [
          {
            "name": "canHaveModifiers",
            "complexity": 25,
            "lineCount": 28,
            "parameterCount": 1,
            "snippet": "export function canHaveModifiers(node: Node): node is HasModifiers {\r\n    const kind = node.kind;\r\n    return kind === SyntaxKind.TypeParameter\r\n        || kind === SyntaxKind.Parameter\r\n        || kind === SyntaxKind.PropertySignature\r\n        || kind === SyntaxKind.PropertyDeclaration\r\n        || kind === SyntaxKind.MethodSignature\r\n        || kind === SyntaxKind.MethodDeclaration\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/transformers/classFields.ts",
        "criticalFunctions": [
          {
            "name": "getClassFacts",
            "complexity": 38,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "function getClassFacts(node: ClassLikeDeclaration) {\r\n        let facts = ClassFacts.None;\r\n        const original = getOriginalNode(node);\r\n        if (isClassLike(original) && classOrConstructorParameterIsDecorated(legacyDecorators, original)) {\r\n            facts |= ClassFacts.ClassWasDecorated;\r\n        }\r\n        if (shouldTransformPrivateElementsOrClassStaticBlocks && (classHasClassThisAssignment(node) || classHasExplicitlyAssignedName(node))) {\r\n            facts |= ClassFacts.NeedsClassConstructorReference;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 38 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 32,
            "lineCount": 74,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): VisitResult<Node> {\r\n        if (\r\n            !(node.transformFlags & TransformFlags.ContainsClassFields) &&\r\n            !(node.transformFlags & TransformFlags.ContainsLexicalThisOrSuper)\r\n        ) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 32 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformPropertyWorker",
            "complexity": 27,
            "lineCount": 99,
            "parameterCount": 2,
            "snippet": "function transformPropertyWorker(property: PropertyDeclaration, receiver: LeftHandSideExpression) {\r\n        const emitAssignment = !useDefineForClassFields;\r\n        if (isNamedEvaluation(property, isAnonymousClassNeedingAssignedName)) {\r\n            property = transformNamedEvaluation(context, property);\r\n        }\r\n        const propertyName = hasAccessorModifier(property) ?\r\n            factory.getGeneratedPrivateNameForNode(property.name) :\r\n            isComputedPropertyName(property.name) && !isSimpleInlineableExpression(property.name.expression) ?\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitPreOrPostfixUnaryExpression",
            "complexity": 25,
            "lineCount": 91,
            "parameterCount": 2,
            "snippet": "function visitPreOrPostfixUnaryExpression(node: PrefixUnaryExpression | PostfixUnaryExpression, discarded: boolean) {\r\n        if (\r\n            node.operator === SyntaxKind.PlusPlusToken ||\r\n            node.operator === SyntaxKind.MinusMinusToken\r\n        ) {\r\n            const operand = skipParentheses(node.operand);\r\n            if (isPrivateIdentifierPropertyAccessExpression(operand)) {\r\n                let info: PrivateIdentifierInfo | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitBinaryExpression",
            "complexity": 24,
            "lineCount": 148,
            "parameterCount": 2,
            "snippet": "function visitBinaryExpression(node: BinaryExpression, discarded: boolean) {\r\n        if (isDestructuringAssignment(node)) {\r\n            const savedPendingExpressions = pendingExpressions;\r\n            pendingExpressions = undefined;\r\n            node = factory.updateBinaryExpression(\r\n                node,\r\n                visitNode(node.left, assignmentTargetVisitor, isExpression),\r\n                node.operatorToken,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/declarations.ts",
        "criticalFunctions": [
          {
            "name": "visitDeclarationSubtree",
            "complexity": 66,
            "lineCount": 283,
            "parameterCount": 1,
            "snippet": "function visitDeclarationSubtree(input: Node): VisitResult<Node | undefined> {\r\n        if (shouldStripInternal(input)) return;\r\n        if (isDeclaration(input)) {\r\n            if (isDeclarationAndNotVisible(input)) return;\r\n            if (hasDynamicName(input)) {\r\n                if (isolatedDeclarations) {\r\n                    if (!resolver.isDefinitelyReferenceToGlobalSymbolObject(input.name.expression)) {\r\n                        if (isClassDeclaration(input.parent) || isObjectLiteralExpression(input.parent)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 66 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 283 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformTopLevelDeclaration",
            "complexity": 43,
            "lineCount": 371,
            "parameterCount": 1,
            "snippet": "function transformTopLevelDeclaration(input: LateVisibilityPaintedStatement) {\r\n        if (lateMarkedStatements) {\r\n            while (orderedRemoveItem(lateMarkedStatements, input));\r\n        }\r\n        if (shouldStripInternal(input)) return;\r\n        switch (input.kind) {\r\n            case SyntaxKind.ImportEqualsDeclaration: {\r\n                return transformImportEqualsDeclaration(input);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 371 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isProcessedComponent",
            "complexity": 19,
            "lineCount": 24,
            "parameterCount": 1,
            "snippet": "function isProcessedComponent(node: Node): node is ProcessedComponent {\r\n    switch (node.kind) {\r\n        case SyntaxKind.ConstructSignature:\r\n        case SyntaxKind.Constructor:\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.GetAccessor:\r\n        case SyntaxKind.SetAccessor:\r\n        case SyntaxKind.PropertyDeclaration:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "transformImportDeclaration",
            "complexity": 18,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "function transformImportDeclaration(decl: ImportDeclaration) {\r\n        if (!decl.importClause) {\r\n            return factory.updateImportDeclaration(\r\n                decl,\r\n                decl.modifiers,\r\n                decl.importClause,\r\n                rewriteModuleSpecifier(decl, decl.moduleSpecifier),\r\n                tryGetResolutionModeOverride(decl.attributes),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformRoot",
            "complexity": 9,
            "lineCount": 148,
            "parameterCount": 1,
            "snippet": "function transformRoot(node: SourceFile | Bundle): SourceFile | Bundle {\r\n        if (node.kind === SyntaxKind.SourceFile && node.isDeclarationFile) {\r\n            return node;\r\n        }\r\n        if (node.kind === SyntaxKind.Bundle) {\r\n            isBundledEmit = true;\r\n            rawReferencedFiles = [];\r\n            rawTypeReferenceDirectives = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 148 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/destructuring.ts",
        "criticalFunctions": [
          {
            "name": "flattenArrayBindingOrAssignmentPattern",
            "complexity": 22,
            "lineCount": 75,
            "parameterCount": 5,
            "snippet": "function flattenArrayBindingOrAssignmentPattern(flattenContext: FlattenContext, parent: BindingOrAssignmentElement, pattern: ArrayBindingOrAssignmentPattern, value: Expression, location: TextRange) {\r\n    const elements = getElementsOfBindingOrAssignmentPattern(pattern);\r\n    const numElements = elements.length;\r\n    if (flattenContext.level < FlattenLevel.ObjectRest && flattenContext.downlevelIteration) {\r\n        value = ensureIdentifier(\r\n            flattenContext,\r\n            setTextRange(\r\n                flattenContext.context.getEmitHelperFactory().createReadHelper(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "flattenDestructuringAssignment",
            "complexity": 15,
            "lineCount": 97,
            "parameterCount": 6,
            "snippet": "export function flattenDestructuringAssignment(\r\n    node: VariableDeclaration | DestructuringAssignment,\r\n    visitor: (node: Node) => VisitResult<Node | undefined>,\r\n    context: TransformationContext,\r\n    level: FlattenLevel,\r\n    needsValue?: boolean,\r\n    createAssignmentCallback?: (name: Identifier, value: Expression, location?: TextRange) => Expression,\r\n): Expression {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 97 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "flattenDestructuringBinding",
            "complexity": 10,
            "lineCount": 83,
            "parameterCount": 7,
            "snippet": "export function flattenDestructuringBinding(\r\n    node: VariableDeclaration | ParameterDeclaration,\r\n    visitor: (node: Node) => VisitResult<Node | undefined>,\r\n    context: TransformationContext,\r\n    level: FlattenLevel,\r\n    rval?: Expression,\r\n    hoistTempVariables = false,\r\n    skipInitializer?: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/es2015.ts",
        "criticalFunctions": [
          {
            "name": "visitorWorker",
            "complexity": 53,
            "lineCount": 147,
            "parameterCount": 2,
            "snippet": "function visitorWorker(node: Node, expressionResultIsUnused: boolean): VisitResult<Node | undefined> {\r\n        switch (node.kind) {\r\n            case SyntaxKind.StaticKeyword:\r\n                return undefined; // elide static keyword\r\n            case SyntaxKind.ClassDeclaration:\r\n                return visitClassDeclaration(node as ClassDeclaration);\r\n            case SyntaxKind.ClassExpression:\r\n                return visitClassExpression(node as ClassExpression);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 53 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 147 lines, consider splitting"
              }
            ]
          },
          {
            "name": "addExtraDeclarationsForConvertedLoop",
            "complexity": 17,
            "lineCount": 86,
            "parameterCount": 3,
            "snippet": "function addExtraDeclarationsForConvertedLoop(statements: Statement[], state: ConvertedLoopState, outerState: ConvertedLoopState | undefined) {\r\n        let extraVariableDeclarations: VariableDeclaration[] | undefined;\r\n        if (state.argumentsName) {\r\n            if (outerState) {\r\n                outerState.argumentsName = state.argumentsName;\r\n            }\r\n            else {\r\n                (extraVariableDeclarations || (extraVariableDeclarations = [])).push(\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "simplifyConstructorInlineSuperReturn",
            "complexity": 16,
            "lineCount": 83,
            "parameterCount": 2,
            "snippet": "function simplifyConstructorInlineSuperReturn(body: Block, original: Block) {\r\n        for (const statement of original.statements) {\r\n            if (statement.transformFlags & TransformFlags.ContainsLexicalSuper && !getSuperCallFromStatement(statement)) {\r\n                return body;\r\n            }\r\n        }\r\n        const canElideThisCapturingVariable = !(original.transformFlags & TransformFlags.ContainsLexicalThis) &&\r\n            !(hierarchyFacts & HierarchyFacts.LexicalThis) &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformFunctionBody",
            "complexity": 16,
            "lineCount": 94,
            "parameterCount": 1,
            "snippet": "function transformFunctionBody(node: FunctionLikeDeclaration) {\r\n        let multiLine = false; // indicates whether the block *must* be emitted as multiple lines\r\n        let singleLine = false; // indicates whether the block *may* be emitted as a single line\r\n        let statementsLocation: TextRange;\r\n        let closeBraceLocation: TextRange | undefined;\r\n        const prologue: Statement[] = [];\r\n        const statements: Statement[] = [];\r\n        const body = node.body!;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 94 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "convertIterationStatementBodyIfNecessary",
            "complexity": 16,
            "lineCount": 62,
            "parameterCount": 4,
            "snippet": "function convertIterationStatementBodyIfNecessary<T extends IterationStatement>(node: T, outermostLabeledStatement: LabeledStatement | undefined, ancestorFacts: HierarchyFacts, convert?: LoopConverter<T>): VisitResult<Statement> {\r\n        if (!shouldConvertIterationStatement(node)) {\r\n            let saveAllowedNonLabeledJumps: Jump | undefined;\r\n            if (convertedLoopState) {\r\n                saveAllowedNonLabeledJumps = convertedLoopState.allowedNonLabeledJumps;\r\n                convertedLoopState.allowedNonLabeledJumps = Jump.Break | Jump.Continue;\r\n            }\r\n            const result = convert\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 62 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/es2016.ts",
        "criticalFunctions": [
          {
            "name": "visitExponentiationAssignmentExpression",
            "complexity": 3,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "function visitExponentiationAssignmentExpression(node: BinaryExpression) {\r\n        let target: Expression;\r\n        let value: Expression;\r\n        const left = visitNode(node.left, visitor, isExpression);\r\n        const right = visitNode(node.right, visitor, isExpression);\r\n        if (isElementAccessExpression(left)) {\r\n            const expressionTemp = factory.createTempVariable(hoistVariableDeclaration);\r\n            const argumentExpressionTemp = factory.createTempVariable(hoistVariableDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformES2016",
            "complexity": 1,
            "lineCount": 102,
            "parameterCount": 1,
            "snippet": "export function transformES2016(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    return chainBundle(context, transformSourceFile);\r\n    function transformSourceFile(node: SourceFile) {\r\n        if (node.isDeclarationFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 102 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/transformers/es2017.ts",
        "criticalFunctions": [
          {
            "name": "transformAsyncFunctionBody",
            "complexity": 24,
            "lineCount": 135,
            "parameterCount": 2,
            "snippet": "function transformAsyncFunctionBody(node: FunctionLikeDeclaration, outerParameters: NodeArray<ParameterDeclaration>): ConciseBody {\r\n        const innerParameters = !isSimpleParameterList(node.parameters) ? visitParameterList(node.parameters, visitor, context) : undefined;\r\n        resumeLexicalEnvironment();\r\n        const original = getOriginalNode(node, isFunctionLike);\r\n        const nodeType = original.type;\r\n        const promiseConstructor = languageVersion < ScriptTarget.ES2015 ? getPromiseConstructor(nodeType) : undefined;\r\n        const isArrowFunction = node.kind === SyntaxKind.ArrowFunction;\r\n        const savedLexicalArgumentsBinding = lexicalArgumentsBinding;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 135 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 22,
            "lineCount": 50,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): VisitResult<Node | undefined> {\r\n        if ((node.transformFlags & TransformFlags.ContainsES2017) === 0) {\r\n            return lexicalArgumentsBinding ? argumentsVisitor(node) : node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.AsyncKeyword:\r\n                return undefined;\r\n            case SyntaxKind.AwaitExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "asyncBodyVisitor",
            "complexity": 19,
            "lineCount": 31,
            "parameterCount": 1,
            "snippet": "function asyncBodyVisitor(node: Node): VisitResult<Node | undefined> {\r\n        if (isNodeWithPossibleHoistedDeclaration(node)) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.VariableStatement:\r\n                    return visitVariableStatementInAsyncBody(node);\r\n                case SyntaxKind.ForStatement:\r\n                    return visitForStatementInAsyncBody(node);\r\n                case SyntaxKind.ForInStatement:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "transformES2017",
            "complexity": 1,
            "lineCount": 934,
            "parameterCount": 1,
            "snippet": "export function transformES2017(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 934 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSuperAccessVariableStatement",
            "complexity": 1,
            "lineCount": 96,
            "parameterCount": 4,
            "snippet": "export function createSuperAccessVariableStatement(factory: NodeFactory, resolver: EmitResolver, node: FunctionLikeDeclaration, names: Set<__String>): VariableStatement {\r\n    const hasBinding = resolver.hasNodeCheckFlag(node, NodeCheckFlags.MethodWithSuperPropertyAssignmentInAsync);\r\n    const accessors: PropertyAssignment[] = [];\r\n    names.forEach((_, key) => {\r\n        const name = unescapeLeadingUnderscores(key);\r\n        const getterAndSetter: PropertyAssignment[] = [];\r\n        getterAndSetter.push(factory.createPropertyAssignment(\r\n            \"get\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/es2018.ts",
        "criticalFunctions": [
          {
            "name": "visitorWorker",
            "complexity": 39,
            "lineCount": 124,
            "parameterCount": 2,
            "snippet": "function visitorWorker(node: Node, expressionResultIsUnused: boolean): VisitResult<Node> {\r\n        if ((node.transformFlags & TransformFlags.ContainsES2018) === 0) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.AwaitExpression:\r\n                return visitAwaitExpression(node as AwaitExpression);\r\n            case SyntaxKind.YieldExpression:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 124 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformAsyncGeneratorFunctionBody",
            "complexity": 10,
            "lineCount": 55,
            "parameterCount": 1,
            "snippet": "function transformAsyncGeneratorFunctionBody(node: MethodDeclaration | AccessorDeclaration | FunctionDeclaration | FunctionExpression): FunctionBody {\r\n        const innerParameters = !isSimpleParameterList(node.parameters) ? visitParameterList(node.parameters, visitor, context) : undefined;\r\n        resumeLexicalEnvironment();\r\n        const savedCapturedSuperProperties = capturedSuperProperties;\r\n        const savedHasSuperElementAccess = hasSuperElementAccess;\r\n        capturedSuperProperties = new Set();\r\n        hasSuperElementAccess = false;\r\n        const outerStatements: Statement[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "appendObjectRestAssignmentsIfNeeded",
            "complexity": 10,
            "lineCount": 89,
            "parameterCount": 2,
            "snippet": "function appendObjectRestAssignmentsIfNeeded(statements: Statement[] | undefined, node: FunctionLikeDeclaration): Statement[] | undefined {\r\n        let containsPrecedingObjectRestOrSpread = false;\r\n        for (const parameter of node.parameters) {\r\n            if (containsPrecedingObjectRestOrSpread) {\r\n                if (isBindingPattern(parameter.name)) {\r\n                    if (parameter.name.elements.length > 0) {\r\n                        const declarations = flattenDestructuringBinding(\r\n                            parameter,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 89 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformForAwaitOfStatement",
            "complexity": 4,
            "lineCount": 113,
            "parameterCount": 3,
            "snippet": "function transformForAwaitOfStatement(node: ForOfStatement, outermostLabeledStatement: LabeledStatement | undefined, ancestorFacts: HierarchyFacts) {\r\n        const expression = visitNode(node.expression, visitor, isExpression);\r\n        const iterator = isIdentifier(expression) ? factory.getGeneratedNameForNode(expression) : factory.createTempVariable(/*recordTempVariable*/ undefined);\r\n        const result = isIdentifier(expression) ? factory.getGeneratedNameForNode(iterator) : factory.createTempVariable(/*recordTempVariable*/ undefined);\r\n        const nonUserCode = factory.createTempVariable(/*recordTempVariable*/ undefined);\r\n        const done = factory.createTempVariable(hoistVariableDeclaration);\r\n        const errorRecord = factory.createUniqueName(\"e\");\r\n        const catchVariable = factory.getGeneratedNameForNode(errorRecord);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 113 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformES2018",
            "complexity": 1,
            "lineCount": 1333,
            "parameterCount": 1,
            "snippet": "export function transformES2018(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        resumeLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 1333 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/es2020.ts",
        "criticalFunctions": [
          {
            "name": "visitOptionalExpression",
            "complexity": 18,
            "lineCount": 60,
            "parameterCount": 3,
            "snippet": "function visitOptionalExpression(node: OptionalChain, captureThisArg: boolean, isDelete: boolean): Expression {\r\n        const { expression, chain } = flattenChain(node);\r\n        const left = visitNonOptionalExpression(skipPartiallyEmittedExpressions(expression), isCallChain(chain[0]), /*isDelete*/ false);\r\n        let leftThisArg = isSyntheticReference(left) ? left.thisArg : undefined;\r\n        let capturedLeft = isSyntheticReference(left) ? left.expression : left;\r\n        let leftExpression = factory.restoreOuterExpressions(expression, capturedLeft, OuterExpressionKinds.PartiallyEmittedExpressions);\r\n        if (!isSimpleCopiableExpression(capturedLeft)) {\r\n            capturedLeft = factory.createTempVariable(hoistVariableDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformES2020",
            "complexity": 1,
            "lineCount": 226,
            "parameterCount": 1,
            "snippet": "export function transformES2020(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    return chainBundle(context, transformSourceFile);\r\n    function transformSourceFile(node: SourceFile) {\r\n        if (node.isDeclarationFile) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 226 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/esDecorators.ts",
        "criticalFunctions": [
          {
            "name": "transformClassLike",
            "complexity": 52,
            "lineCount": 378,
            "parameterCount": 1,
            "snippet": "function transformClassLike(node: ClassLikeDeclaration) {\r\n        startLexicalEnvironment();\r\n        if (!classHasDeclaredOrExplicitlyAssignedName(node) && classOrConstructorParameterIsDecorated(/*useLegacyDecorators*/ false, node)) {\r\n            node = injectClassNamedEvaluationHelperBlockIfMissing(context, node, factory.createStringLiteral(\"\"));\r\n        }\r\n        const classReference = factory.getLocalName(node, /*allowComments*/ false, /*allowSourceMaps*/ false, /*ignoreAssignedName*/ true);\r\n        const classInfo = createClassInfo(node);\r\n        const classDefinitionStatements: Statement[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 52 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 378 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "partialTransformClassElement",
            "complexity": 36,
            "lineCount": 173,
            "parameterCount": 3,
            "snippet": "function partialTransformClassElement<\r\n        TNode extends MethodDeclaration | PropertyDeclaration | GetAccessorDeclaration | SetAccessorDeclaration,\r\n    >(\r\n        member: TNode,\r\n        classInfo: ClassInfo | undefined,\r\n        createDescriptor?: (node: TNode & { readonly name: PrivateIdentifier; }, modifiers: ModifiersArray | undefined) => Expression,\r\n    ) {\r\n        let referencedName: Expression | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 36 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 173 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitor",
            "complexity": 33,
            "lineCount": 71,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): VisitResult<Node> {\r\n        if (!shouldVisitNode(node)) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.Decorator: // elided, will be emitted as part of `visitClassDeclaration`\r\n                return Debug.fail(\"Use `modifierVisitor` instead.\");\r\n            case SyntaxKind.ClassDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createClassInfo",
            "complexity": 22,
            "lineCount": 91,
            "parameterCount": 1,
            "snippet": "function createClassInfo(node: ClassLikeDeclaration): ClassInfo {\r\n        const metadataReference = factory.createUniqueName(\"_metadata\", GeneratedIdentifierFlags.Optimistic | GeneratedIdentifierFlags.FileLevel);\r\n        let instanceMethodExtraInitializersName: Identifier | undefined;\r\n        let staticMethodExtraInitializersName: Identifier | undefined;\r\n        let hasStaticInitializers = false;\r\n        let hasNonAmbientInstanceFields = false;\r\n        let hasStaticPrivateClassElements = false;\r\n        let classThis: Identifier | undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitPropertyDeclaration",
            "complexity": 17,
            "lineCount": 134,
            "parameterCount": 1,
            "snippet": "function visitPropertyDeclaration(node: PropertyDeclaration) {\r\n        if (isNamedEvaluation(node, isAnonymousClassNeedingAssignedName)) {\r\n            node = transformNamedEvaluation(context, node, canIgnoreEmptyStringLiteralInAssignedName(node.initializer));\r\n        }\r\n        enterClassElement(node);\r\n        Debug.assert(!isAmbientPropertyDeclaration(node), \"Not yet implemented.\");\r\n        const { modifiers, name, initializersName, extraInitializersName, descriptorName, thisArg } = partialTransformClassElement(node, classInfo, hasAccessorModifier(node) ? createAccessorPropertyDescriptorObject : undefined);\r\n        startLexicalEnvironment();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 134 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/esnext.ts",
        "criticalFunctions": [
          {
            "name": "transformUsingDeclarations",
            "complexity": 9,
            "lineCount": 81,
            "parameterCount": 5,
            "snippet": "function transformUsingDeclarations(statementsIn: readonly Statement[], start: number, end: number, envBinding: Identifier, topLevelStatements: Statement[] | undefined) {\r\n        const statements: Statement[] = [];\r\n        for (let i = start; i < end; i++) {\r\n            const statement = statementsIn[i];\r\n            const usingKind = getUsingKind(statement);\r\n            if (usingKind) {\r\n                Debug.assertNode(statement, isVariableStatement);\r\n                const declarations: VariableDeclaration[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "hoistClassDeclaration",
            "complexity": 9,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "function hoistClassDeclaration(node: ClassDeclaration) {\r\n        if (!node.name && defaultExportBinding) {\r\n            return node;\r\n        }\r\n        const isExported = hasSyntacticModifier(node, ModifierFlags.Export);\r\n        const isDefault = hasSyntacticModifier(node, ModifierFlags.Default);\r\n        let expression: Expression = factory.converters.convertToClassExpression(node);\r\n        if (node.name) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitSourceFile",
            "complexity": 8,
            "lineCount": 107,
            "parameterCount": 1,
            "snippet": "function visitSourceFile(node: SourceFile): SourceFile {\r\n        const usingKind = getUsingKindOfStatements(node.statements);\r\n        if (usingKind) {\r\n            startLexicalEnvironment();\r\n            exportBindings = new IdentifierNameMap();\r\n            exportVars = [];\r\n            const prologueCount = countPrologueStatements(node.statements);\r\n            const topLevelStatements: Statement[] = [];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 107 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createDownlevelUsingStatements",
            "complexity": 2,
            "lineCount": 99,
            "parameterCount": 3,
            "snippet": "function createDownlevelUsingStatements(bodyStatements: readonly Statement[], envBinding: Identifier, async: boolean) {\r\n        const statements: Statement[] = [];\r\n        const envObject = factory.createObjectLiteralExpression([\r\n            factory.createPropertyAssignment(\"stack\", factory.createArrayLiteralExpression()),\r\n            factory.createPropertyAssignment(\"error\", factory.createVoidZero()),\r\n            factory.createPropertyAssignment(\"hasError\", factory.createFalse()),\r\n        ]);\r\n        const envVar = factory.createVariableDeclaration(envBinding, /*exclamationToken*/ undefined, /*type*/ undefined, envObject);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformESNext",
            "complexity": 1,
            "lineCount": 762,
            "parameterCount": 1,
            "snippet": "export function transformESNext(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        hoistVariableDeclaration,\r\n        startLexicalEnvironment,\r\n        endLexicalEnvironment,\r\n    } = context;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 762 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/generators.ts",
        "criticalFunctions": [
          {
            "name": "transformAndEmitStatementWorker",
            "complexity": 17,
            "lineCount": 36,
            "parameterCount": 1,
            "snippet": "function transformAndEmitStatementWorker(node: Statement): void {\r\n        switch (node.kind) {\r\n            case SyntaxKind.Block:\r\n                return transformAndEmitBlock(node as Block);\r\n            case SyntaxKind.ExpressionStatement:\r\n                return transformAndEmitExpressionStatement(node as ExpressionStatement);\r\n            case SyntaxKind.IfStatement:\r\n                return transformAndEmitIfStatement(node as IfStatement);\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "transformAndEmitSwitchStatement",
            "complexity": 14,
            "lineCount": 108,
            "parameterCount": 1,
            "snippet": "function transformAndEmitSwitchStatement(node: SwitchStatement) {\r\n        if (containsYield(node.caseBlock)) {\r\n            const caseBlock = node.caseBlock;\r\n            const numClauses = caseBlock.clauses.length;\r\n            const endLabel = beginSwitchBlock();\r\n            const expression = cacheExpression(Debug.checkDefined(visitNode(node.expression, visitor, isExpression)));\r\n            const clauseLabels: Label[] = [];\r\n            let defaultClauseIndex = -1;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "appendLabel",
            "complexity": 8,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function appendLabel(markLabelEnd: boolean): void {\r\n        if (!clauses) {\r\n            clauses = [];\r\n        }\r\n        if (statements) {\r\n            if (withBlockStack) {\r\n                for (let i = withBlockStack.length - 1; i >= 0; i--) {\r\n                    const withBlock = withBlockStack[i];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitRightAssociativeBinaryExpression",
            "complexity": 6,
            "lineCount": 67,
            "parameterCount": 1,
            "snippet": "function visitRightAssociativeBinaryExpression(node: BinaryExpression) {\r\n        const { left, right } = node;\r\n        if (containsYield(right)) {\r\n            let target: Expression;\r\n            switch (left.kind) {\r\n                case SyntaxKind.PropertyAccessExpression:\r\n                    target = factory.updatePropertyAccessExpression(\r\n                        left as PropertyAccessExpression,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformAndEmitForStatement",
            "complexity": 6,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function transformAndEmitForStatement(node: ForStatement) {\r\n        if (containsYield(node)) {\r\n            const conditionLabel = defineLabel();\r\n            const incrementLabel = defineLabel();\r\n            const endLabel = beginLoopBlock(incrementLabel);\r\n            if (node.initializer) {\r\n                const initializer = node.initializer;\r\n                if (isVariableDeclarationList(initializer)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/transformers/jsx.ts",
        "criticalFunctions": [
          {
            "name": "transformJsx",
            "complexity": 1,
            "lineCount": 590,
            "parameterCount": 1,
            "snippet": "export function transformJsx(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    interface PerFileState {\r\n        importSpecifier?: string;\r\n        filenameDeclaration?: VariableDeclaration & { name: Identifier; };\r\n        utilizedImplicitRuntimeImports?: Map<string, Map<string, ImportSpecifier>>;\r\n    }\r\n    const {\r\n        factory,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 590 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/legacyDecorators.ts",
        "criticalFunctions": [
          {
            "name": "transformClassDeclarationWithClassDecorators",
            "complexity": 11,
            "lineCount": 172,
            "parameterCount": 2,
            "snippet": "function transformClassDeclarationWithClassDecorators(node: ClassDeclaration, name: Identifier | undefined) {\r\n        const isExport = hasSyntacticModifier(node, ModifierFlags.Export);\r\n        const isDefault = hasSyntacticModifier(node, ModifierFlags.Default);\r\n        const modifiers = visitNodes(node.modifiers, node => isExportOrDefaultModifier(node) || isDecorator(node) ? undefined : node, isModifierLike);\r\n        const location = moveRangePastModifiers(node);\r\n        const classAlias = getClassAliasIfNeeded(node);\r\n        const declName = languageVersion < ScriptTarget.ES2015 ?\r\n            factory.getInternalName(node, /*allowComments*/ false, /*allowSourceMaps*/ true) :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 172 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateClassElementDecorationExpression",
            "complexity": 4,
            "lineCount": 59,
            "parameterCount": 2,
            "snippet": "function generateClassElementDecorationExpression(node: ClassExpression | ClassDeclaration, member: ClassElement) {\r\n        const allDecorators = getAllDecoratorsOfClassElement(member, node, /*useLegacyDecorators*/ true);\r\n        const decoratorExpressions = transformAllDecoratorsOfDeclaration(allDecorators);\r\n        if (!decoratorExpressions) {\r\n            return undefined;\r\n        }\r\n        const prefix = getClassMemberPrefix(node, member);\r\n        const memberName = getExpressionForPropertyName(member, /*generateNameForComputedPropertyName*/ !hasSyntacticModifier(member, ModifierFlags.Ambient));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 59 lines, consider splitting"
              }
            ]
          },
          {
            "name": "transformLegacyDecorators",
            "complexity": 1,
            "lineCount": 759,
            "parameterCount": 1,
            "snippet": "export function transformLegacyDecorators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 759 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/namedEvaluation.ts",
        "criticalFunctions": [
          {
            "name": "injectClassNamedEvaluationHelperBlockIfMissing",
            "complexity": 4,
            "lineCount": 56,
            "parameterCount": 4,
            "snippet": "export function injectClassNamedEvaluationHelperBlockIfMissing(\r\n    context: TransformationContext,\r\n    node: ClassLikeDeclaration,\r\n    assignedName: Expression,\r\n    thisExpression?: Expression,\r\n) {\r\n    if (classHasExplicitlyAssignedName(node)) {\r\n        return node;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/transformers/ts.ts",
        "criticalFunctions": [
          {
            "name": "visitTypeScript",
            "complexity": 79,
            "lineCount": 195,
            "parameterCount": 1,
            "snippet": "function visitTypeScript(node: Node): VisitResult<Node | undefined> {\r\n        if (isStatement(node) && hasSyntacticModifier(node, ModifierFlags.Ambient)) {\r\n            return factory.createNotEmittedStatement(node);\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.ExportKeyword:\r\n            case SyntaxKind.DefaultKeyword:\r\n                return currentNamespace ? undefined : node;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 79 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 195 lines, consider splitting"
              }
            ]
          },
          {
            "name": "visitClassDeclaration",
            "complexity": 19,
            "lineCount": 146,
            "parameterCount": 1,
            "snippet": "function visitClassDeclaration(node: ClassDeclaration): VisitResult<Statement> {\r\n        const facts = getClassFacts(node);\r\n        const promoteToIIFE = languageVersion <= ScriptTarget.ES5 &&\r\n            !!(facts & ClassFacts.MayNeedImmediatelyInvokedFunctionExpression);\r\n        if (\r\n            !isClassLikeDeclarationWithTypeScriptSyntax(node) &&\r\n            !classOrConstructorParameterIsDecorated(legacyDecorators, node) &&\r\n            !isExportOfNamespace(node)\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 146 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isElisionBlocked",
            "complexity": 17,
            "lineCount": 46,
            "parameterCount": 1,
            "snippet": "function isElisionBlocked(node: ImportDeclaration | ImportEqualsDeclaration | ExportAssignment | ExportDeclaration) {\r\n        const parsed = getParseTreeNode(node);\r\n        if (parsed === node || isExportAssignment(node)) {\r\n            return false;\r\n        }\r\n        if (!parsed || parsed.kind !== node.kind) {\r\n            return true;\r\n        }\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "visitEnumDeclaration",
            "complexity": 8,
            "lineCount": 83,
            "parameterCount": 1,
            "snippet": "function visitEnumDeclaration(node: EnumDeclaration): VisitResult<Statement> {\r\n        if (!shouldEmitEnumDeclaration(node)) {\r\n            return factory.createNotEmittedStatement(node);\r\n        }\r\n        const statements: Statement[] = [];\r\n        let emitFlags = EmitFlags.AdviseOnEmitNode;\r\n        const varAdded = addVarForEnumOrModuleDeclaration(statements, node);\r\n        if (varAdded) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 83 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitModuleDeclaration",
            "complexity": 8,
            "lineCount": 85,
            "parameterCount": 1,
            "snippet": "function visitModuleDeclaration(node: ModuleDeclaration): VisitResult<Statement> {\r\n        if (!shouldEmitModuleDeclaration(node)) {\r\n            return factory.createNotEmittedStatement(node);\r\n        }\r\n        Debug.assertNode(node.name, isIdentifier, \"A TypeScript namespace should have an Identifier name.\");\r\n        enableSubstitutionForNamespaceExports();\r\n        const statements: Statement[] = [];\r\n        let emitFlags = EmitFlags.AdviseOnEmitNode;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 85 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/typeSerializer.ts",
        "criticalFunctions": [
          {
            "name": "serializeTypeNode",
            "complexity": 42,
            "lineCount": 95,
            "parameterCount": 1,
            "snippet": "function serializeTypeNode(node: TypeNode | undefined): SerializedTypeNode {\r\n        if (node === undefined) {\r\n            return factory.createIdentifier(\"Object\");\r\n        }\r\n        node = skipTypeParentheses(node);\r\n        switch (node.kind) {\r\n            case SyntaxKind.VoidKeyword:\r\n            case SyntaxKind.UndefinedKeyword:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 42 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              }
            ]
          },
          {
            "name": "equateSerializedTypeNodes",
            "complexity": 26,
            "lineCount": 36,
            "parameterCount": 2,
            "snippet": "function equateSerializedTypeNodes(left: Expression, right: Expression): boolean {\r\n        return (\r\n            isGeneratedIdentifier(left) ? isGeneratedIdentifier(right) :\r\n                isIdentifier(left) ? isIdentifier(right)\r\n                    && left.escapedText === right.escapedText :\r\n                isPropertyAccessExpression(left) ? isPropertyAccessExpression(right)\r\n                    && equateSerializedTypeNodes(left.expression, right.expression)\r\n                    && equateSerializedTypeNodes(left.name, right.name) :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 26 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "serializeTypeReferenceNode",
            "complexity": 15,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function serializeTypeReferenceNode(node: TypeReferenceNode): SerializedTypeNode {\r\n        const kind = resolver.getTypeReferenceSerializationKind(node.typeName, currentNameScope ?? currentLexicalScope);\r\n        switch (kind) {\r\n            case TypeReferenceSerializationKind.Unknown:\r\n                if (findAncestor(node, n => n.parent && isConditionalTypeNode(n.parent) && (n.parent.trueType === n || n.parent.falseType === n))) {\r\n                    return factory.createIdentifier(\"Object\");\r\n                }\r\n                const serialized = serializeEntityNameAsExpressionFallback(node.typeName);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createRuntimeTypeSerializer",
            "complexity": 1,
            "lineCount": 502,
            "parameterCount": 1,
            "snippet": "export function createRuntimeTypeSerializer(context: TransformationContext): RuntimeTypeSerializer {\r\n    const {\r\n        factory,\r\n        hoistVariableDeclaration,\r\n    } = context;\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n    const languageVersion = getEmitScriptTarget(compilerOptions);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 502 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/utilities.ts",
        "criticalFunctions": [
          {
            "name": "collectExternalModuleInfo",
            "complexity": 29,
            "lineCount": 175,
            "parameterCount": 2,
            "snippet": "export function collectExternalModuleInfo(context: TransformationContext, sourceFile: SourceFile): ExternalModuleInfo {\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n    const externalImports: (ImportDeclaration | ImportEqualsDeclaration | ExportDeclaration)[] = [];\r\n    const exportSpecifiers = new IdentifierNameMultiMap<ExportSpecifier>();\r\n    const exportedBindings: Identifier[][] = [];\r\n    const uniqueExports = new Map<string, boolean>();\r\n    const exportedFunctions = new Set<FunctionDeclaration>();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 175 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNonAssignmentOperatorForCompoundAssignment",
            "complexity": 16,
            "lineCount": 34,
            "parameterCount": 1,
            "snippet": "export function getNonAssignmentOperatorForCompoundAssignment(kind: CompoundAssignmentOperator): LogicalOperatorOrHigher | SyntaxKind.QuestionQuestionToken {\r\n    switch (kind) {\r\n        case SyntaxKind.PlusEqualsToken:\r\n            return SyntaxKind.PlusToken;\r\n        case SyntaxKind.MinusEqualsToken:\r\n            return SyntaxKind.MinusToken;\r\n        case SyntaxKind.AsteriskEqualsToken:\r\n            return SyntaxKind.AsteriskToken;\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "harness/_namespaces/ts.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "testRunner/_namespaces/ts.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "testRunner/parallel/host.ts",
        "criticalFunctions": [
          {
            "name": "startDelayed",
            "complexity": 25,
            "lineCount": 398,
            "parameterCount": 2,
            "snippet": "function startDelayed(perfData: { [testHash: string]: number; } | undefined, totalCost: number) {\r\n        console.log(`Discovered ${tasks.length} unittest suites` + (newTasks.length ? ` and ${newTasks.length} new suites.` : \".\"));\r\n        console.log(\"Discovering runner-based tests...\");\r\n        const discoverStart = +(new Date());\r\n        for (const runner of runners) {\r\n            for (const file of runner.getTestFiles()) {\r\n                let size: number;\r\n                if (!perfData) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 398 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "outputFinalResult",
            "complexity": 6,
            "lineCount": 128,
            "parameterCount": 0,
            "snippet": "function outputFinalResult() {\r\n            function patchStats(stats: Mocha.Stats) {\r\n                Object.defineProperties(stats, {\r\n                    start: {\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        get() {\r\n                            return startDate;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 128 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "start",
            "complexity": 3,
            "lineCount": 625,
            "parameterCount": 1,
            "snippet": "export function start(importTests: () => Promise<unknown>): void {\r\n    const Base = Mocha.reporters.Base;\r\n    const color = Base.color;\r\n    const cursor = Base.cursor;\r\n    const isatty = tty.isatty(1) && tty.isatty(2);\r\n    const FailedTestReporter = require(Utils.findUpFile(\"scripts/failed-tests.cjs\")) as typeof import(\"../../../scripts/failed-tests.cjs\");\r\n    const perfdataFileNameFragment = \".parallelperf\";\r\n    const perfData = readSavedPerfData(configOption);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 625 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/parallel/worker.ts",
        "criticalFunctions": [
          {
            "name": "executeUnitTests",
            "complexity": 16,
            "lineCount": 46,
            "parameterCount": 2,
            "snippet": "function executeUnitTests(task: UnitTestTask, fn: (payload: TaskResult) => void) {\r\n        if (!unitTestSuiteMap && unitTestSuite.suites.length) {\r\n            unitTestSuiteMap = new Map<string, Mocha.Suite>();\r\n            for (const suite of unitTestSuite.suites) {\r\n                unitTestSuiteMap.set(suite.title, suite);\r\n            }\r\n        }\r\n        if (!unitTestTestMap && unitTestSuite.tests.length) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "start",
            "complexity": 3,
            "lineCount": 325,
            "parameterCount": 1,
            "snippet": "export function start(importTests: () => Promise<unknown>): void {\r\n    const importTestsPromise = importTests();\r\n    function hookUncaughtExceptions() {\r\n        if (!exceptionsHooked) {\r\n            process.on(\"uncaughtException\", handleUncaughtException);\r\n            process.on(\"unhandledRejection\", handleUncaughtException);\r\n            exceptionsHooked = true;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 325 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/canWatch.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/customTransforms.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers.ts",
        "criticalFunctions": [
          {
            "name": "updateProgram",
            "complexity": 2,
            "lineCount": 13,
            "parameterCount": 7,
            "snippet": "export function updateProgram(oldProgram: ProgramWithSourceTexts, rootNames: readonly string[], options: ts.CompilerOptions, updater: (files: NamedSourceText[]) => void, newTexts?: NamedSourceText[], useGetSourceFileByPath?: boolean, useCaseSensitiveFileNames?: boolean): ProgramWithSourceTexts {\r\n    if (!newTexts) {\r\n        newTexts = oldProgram.sourceTexts!.slice(0);\r\n    }\r\n    updater(newTexts);\r\n    const host = createTestCompilerHost(newTexts, options.target!, oldProgram, useGetSourceFileByPath, useCaseSensitiveFileNames);\r\n    return programToProgramWithSourceTexts(\r\n        ts.createProgram(rootNames, options, host, oldProgram),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "testRunner/unittests/incrementalParser.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/jsDocParsing.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/moduleResolution.ts",
        "criticalFunctions": [
          {
            "name": "testWorker",
            "complexity": 4,
            "lineCount": 7,
            "parameterCount": 7,
            "snippet": "function testWorker(baselines: string[], hasDirectoryExists: boolean, typesRoot: string | undefined, typeDirective: string, initialFile: File, targetFile: File, ...otherFiles: File[]) {\r\n        const host = createModuleResolutionHost(baselines, hasDirectoryExists, ...[initialFile, targetFile].concat(...otherFiles));\r\n        baselines.push(`Resolving \"${typeDirective}\" from ${initialFile.name} typesRoots: ${typesRoot ? `[${typesRoot}]` : undefined}${hasDirectoryExists ? \"\" : \" with host that doesnt have directoryExists\"}`);\r\n        const result = ts.resolveTypeReferenceDirective(typeDirective, initialFile.name, typesRoot ? { typeRoots: [typesRoot] } : {}, host);\r\n        baselines.push(`Resolution:: ${jsonToReadableText(result)}`);\r\n        baselines.push(\"\");\r\n    }",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "test",
            "complexity": 1,
            "lineCount": 53,
            "parameterCount": 6,
            "snippet": "function test(\r\n        scenario: string,\r\n        filesMapLike: ts.MapLike<string>,\r\n        options: ts.CompilerOptions,\r\n        currentDirectory: string,\r\n        useCaseSensitiveFileNames: boolean,\r\n        rootFiles: string[],\r\n    ): void {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/paths.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/reuseProgramStructure.ts",
        "criticalFunctions": [
          {
            "name": "verifyRedirects",
            "complexity": 1,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function verifyRedirects(useGetSourceFileByPath: boolean) {\r\n            it(\"No changes -> redirect not broken\", () => {\r\n                const program1 = createRedirectProgram(useGetSourceFileByPath);\r\n                const baselines: string[] = [];\r\n                baselineProgram(baselines, program1);\r\n                const program2 = updateRedirectProgram(program1, files => {\r\n                    updateProgramText(files, root, \"const x = 1;\");\r\n                }, useGetSourceFileByPath);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/semver.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/transform.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/formatting/formatting.ts",
        "criticalFunctions": [
          {
            "name": "getOpenTokenForList",
            "complexity": 31,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "function getOpenTokenForList(node: Node, list: readonly Node[]) {\r\n    switch (node.kind) {\r\n        case SyntaxKind.Constructor:\r\n        case SyntaxKind.FunctionDeclaration:\r\n        case SyntaxKind.FunctionExpression:\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.MethodSignature:\r\n        case SyntaxKind.ArrowFunction:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processChildNode",
            "complexity": 23,
            "lineCount": 92,
            "parameterCount": 8,
            "snippet": "function processChildNode(\r\n            child: Node,\r\n            inheritedIndentation: number,\r\n            parent: Node,\r\n            parentDynamicIndentation: DynamicIndentation,\r\n            parentStartLine: number,\r\n            undecoratedParentStartLine: number,\r\n            isListItem: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 23 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 92 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "processChildNodes",
            "complexity": 18,
            "lineCount": 77,
            "parameterCount": 4,
            "snippet": "function processChildNodes(nodes: NodeArray<Node>, parent: Node, parentStartLine: number, parentDynamicIndentation: DynamicIndentation): void {\r\n            Debug.assert(isNodeArray(nodes));\r\n            Debug.assert(!nodeIsSynthesized(nodes));\r\n            const listStartToken = getOpenTokenForList(parent, nodes);\r\n            let listDynamicIndentation = parentDynamicIndentation;\r\n            let startLine = parentStartLine;\r\n            if (!rangeOverlapsWithStartEnd(originalRange, nodes.pos, nodes.end)) {\r\n                if (nodes.end < originalRange.pos) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 77 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "applyRuleEdits",
            "complexity": 18,
            "lineCount": 48,
            "parameterCount": 5,
            "snippet": "function applyRuleEdits(rule: Rule, previousRange: TextRangeWithKind, previousStartLine: number, currentRange: TextRangeWithKind, currentStartLine: number): LineAction {\r\n        const onLaterLine = currentStartLine !== previousStartLine;\r\n        switch (rule.action) {\r\n            case RuleAction.StopProcessingSpaceActions:\r\n                return LineAction.None;\r\n            case RuleAction.DeleteSpace:\r\n                if (previousRange.end !== currentRange.pos) {\r\n                    recordDelete(previousRange.end, currentRange.pos - previousRange.end);\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "shouldAddDelta",
            "complexity": 17,
            "lineCount": 31,
            "parameterCount": 3,
            "snippet": "function shouldAddDelta(line: number, kind: SyntaxKind, container: Node): boolean {\r\n            switch (kind) {\r\n                case SyntaxKind.OpenBraceToken:\r\n                case SyntaxKind.CloseBraceToken:\r\n                case SyntaxKind.CloseParenToken:\r\n                case SyntaxKind.ElseKeyword:\r\n                case SyntaxKind.WhileKeyword:\r\n                case SyntaxKind.AtToken:\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/formatting/formattingContext.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/formatting/formattingScanner.ts",
        "criticalFunctions": [
          {
            "name": "readTokenInfo",
            "complexity": 15,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function readTokenInfo(n: Node): TokenInfo {\r\n        Debug.assert(isOnToken());\r\n        const expectedScanAction = shouldRescanGreaterThanToken(n) ? ScanAction.RescanGreaterThanToken :\r\n            shouldRescanSlashToken(n) ? ScanAction.RescanSlashToken :\r\n            shouldRescanTemplateToken(n) ? ScanAction.RescanTemplateToken :\r\n            shouldRescanJsxIdentifier(n) ? ScanAction.RescanJsxIdentifier :\r\n            shouldRescanJsxText(n) ? ScanAction.RescanJsxText :\r\n            shouldRescanJsxAttributeValue(n) ? ScanAction.RescanJsxAttributeValue :\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getFormattingScanner",
            "complexity": 2,
            "lineCount": 281,
            "parameterCount": 5,
            "snippet": "export function getFormattingScanner<T>(text: string, languageVariant: LanguageVariant, startPos: number, endPos: number, cb: (scanner: FormattingScanner) => T): T {\r\n    const scanner = languageVariant === LanguageVariant.JSX ? jsxScanner : standardScanner;\r\n    scanner.setText(text);\r\n    scanner.resetTokenState(startPos);\r\n    let wasNewLine = true;\r\n    let leadingTrivia: TextRangeWithTriviaKind[] | undefined;\r\n    let trailingTrivia: TextRangeWithTriviaKind[] | undefined;\r\n    let savedPos: number;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 281 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/formatting/rules.ts",
        "criticalFunctions": [
          {
            "name": "isBinaryOpContext",
            "complexity": 28,
            "lineCount": 48,
            "parameterCount": 1,
            "snippet": "function isBinaryOpContext(context: FormattingContext): boolean {\r\n    switch (context.contextNode.kind) {\r\n        case SyntaxKind.BinaryExpression:\r\n            return (context.contextNode as BinaryExpression).operatorToken.kind !== SyntaxKind.CommaToken;\r\n        case SyntaxKind.ConditionalExpression:\r\n        case SyntaxKind.ConditionalType:\r\n        case SyntaxKind.AsExpression:\r\n        case SyntaxKind.ExportSpecifier:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "isSemicolonDeletionContext",
            "complexity": 28,
            "lineCount": 73,
            "parameterCount": 1,
            "snippet": "function isSemicolonDeletionContext(context: FormattingContext): boolean {\r\n    let nextTokenKind = context.nextTokenSpan.kind;\r\n    let nextTokenStart = context.nextTokenSpan.pos;\r\n    if (isTrivia(nextTokenKind)) {\r\n        const nextRealToken = context.nextTokenParent === context.currentTokenParent\r\n            ? findNextToken(\r\n                context.currentTokenParent,\r\n                findAncestor(context.currentTokenParent, a => !a.parent)!,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "isTypeArgumentOrParameterOrAssertion",
            "complexity": 20,
            "lineCount": 26,
            "parameterCount": 2,
            "snippet": "function isTypeArgumentOrParameterOrAssertion(token: TextRangeWithKind, parent: Node): boolean {\r\n    if (token.kind !== SyntaxKind.LessThanToken && token.kind !== SyntaxKind.GreaterThanToken) {\r\n        return false;\r\n    }\r\n    switch (parent.kind) {\r\n        case SyntaxKind.TypeReference:\r\n        case SyntaxKind.TypeAssertionExpression:\r\n        case SyntaxKind.TypeAliasDeclaration:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "getAllRules",
            "complexity": 3,
            "lineCount": 379,
            "parameterCount": 0,
            "snippet": "export function getAllRules(): RuleSpec[] {\r\n    const allTokens: SyntaxKind[] = [];\r\n    for (let token = SyntaxKind.FirstToken; token <= SyntaxKind.LastToken; token++) {\r\n        if (token !== SyntaxKind.EndOfFileToken) {\r\n            allTokens.push(token);\r\n        }\r\n    }\r\n    function anyTokenExcept(...tokens: SyntaxKind[]): TokenRange {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 379 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/formatting/rulesMap.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/formatting/smartIndenter.ts",
        "criticalFunctions": [
          {
            "name": "nodeWillIndentChild",
            "complexity": 86,
            "lineCount": 108,
            "parameterCount": 5,
            "snippet": "export function nodeWillIndentChild(settings: FormatCodeSettings, parent: TextRangeWithKind, child: TextRangeWithKind | undefined, sourceFile: SourceFileLike | undefined, indentByDefault: boolean): boolean {\r\n        const childKind = child ? child.kind : SyntaxKind.Unknown;\r\n        switch (parent.kind) {\r\n            case SyntaxKind.ExpressionStatement:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n            case SyntaxKind.EnumDeclaration:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 86 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 108 lines, consider splitting"
              }
            ]
          },
          {
            "name": "getListByRange",
            "complexity": 29,
            "lineCount": 45,
            "parameterCount": 4,
            "snippet": "function getListByRange(start: number, end: number, node: Node, sourceFile: SourceFile): NodeArray<Node> | undefined {\r\n        switch (node.kind) {\r\n            case SyntaxKind.TypeReference:\r\n                return getList((node as TypeReferenceNode).typeArguments);\r\n            case SyntaxKind.ObjectLiteralExpression:\r\n                return getList((node as ObjectLiteralExpression).properties);\r\n            case SyntaxKind.ArrayLiteralExpression:\r\n                return getList((node as ArrayLiteralExpression).elements);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getIndentation",
            "complexity": 19,
            "lineCount": 78,
            "parameterCount": 4,
            "snippet": "export function getIndentation(position: number, sourceFile: SourceFile, options: EditorSettings, assumeNewLineBeforeCloseBrace = false): number {\r\n        if (position > sourceFile.text.length) {\r\n            return getBaseIndentation(options); // past EOF\r\n        }\r\n        if (options.indentStyle === IndentStyle.None) {\r\n            return 0;\r\n        }\r\n        const precedingToken = findPrecedingToken(position, sourceFile, /*startNode*/ undefined, /*excludeJsdoc*/ true);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getIndentationForNodeWorker",
            "complexity": 12,
            "lineCount": 80,
            "parameterCount": 7,
            "snippet": "function getIndentationForNodeWorker(\r\n        current: Node,\r\n        currentStart: LineAndCharacter,\r\n        ignoreActualIndentationRange: TextRange | undefined,\r\n        indentationDelta: number,\r\n        sourceFile: SourceFile,\r\n        isNextChild: boolean,\r\n        options: EditorSettings,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 80 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/addOrRemoveBracesToArrowFunction.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/refactors/convertArrowFunctionOrFunctionExpression.ts",
        "criticalFunctions": [
          {
            "name": "getRefactorActionsToConvertFunctionExpressions",
            "complexity": 16,
            "lineCount": 47,
            "parameterCount": 1,
            "snippet": "function getRefactorActionsToConvertFunctionExpressions(context: RefactorContext): readonly ApplicableRefactorInfo[] {\r\n    const { file, startPosition, program, kind } = context;\r\n    const info = getFunctionInfo(file, startPosition, program);\r\n    if (!info) return emptyArray;\r\n    const { selectedVariableDeclaration, func } = info;\r\n    const possibleActions: RefactorActionInfo[] = [];\r\n    const errors: RefactorActionInfo[] = [];\r\n    if (refactorKindBeginsWith(toNamedFunctionAction.kind, kind)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/refactors/convertExport.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 31,
            "lineCount": 57,
            "parameterCount": 2,
            "snippet": "function getInfo(context: RefactorContext, considerPartialSpans = true): ExportInfo | RefactorErrorInfo | undefined {\r\n    const { file, program } = context;\r\n    const span = getRefactorContextSpan(context);\r\n    const token = getTokenAtPosition(file, span.start);\r\n    const exportNode = !!(token.parent && getSyntacticModifierFlags(token.parent) & ModifierFlags.Export) && considerPartialSpans ? token.parent : getParentNodeInSpan(token, file, span);\r\n    if (!exportNode || (!isSourceFile(exportNode.parent) && !(isModuleBlock(exportNode.parent) && isAmbientModule(exportNode.parent.parent)))) {\r\n        return { error: getLocaleSpecificMessage(Diagnostics.Could_not_find_export_statement) };\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/refactors/convertImport.ts",
        "criticalFunctions": [
          {
            "name": "doChangeNamedToNamespaceOrDefault",
            "complexity": 9,
            "lineCount": 67,
            "parameterCount": 5,
            "snippet": "export function doChangeNamedToNamespaceOrDefault(sourceFile: SourceFile, program: Program, changes: textChanges.ChangeTracker, toConvert: NamedImports, shouldUseDefault: boolean = getShouldUseDefault(program, toConvert.parent)): void {\r\n    const checker = program.getTypeChecker();\r\n    const importDecl = toConvert.parent.parent;\r\n    const { moduleSpecifier } = importDecl;\r\n    const toConvertSymbols = new Set<Symbol>();\r\n    toConvert.elements.forEach(namedImport => {\r\n        const symbol = checker.getSymbolAtLocation(namedImport.name);\r\n        if (symbol) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 67 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/convertOverloadListToSingleSignature.ts",
        "criticalFunctions": [
          {
            "name": "getRefactorEditsToConvertOverloadsToOneSignature",
            "complexity": 10,
            "lineCount": 142,
            "parameterCount": 1,
            "snippet": "function getRefactorEditsToConvertOverloadsToOneSignature(context: RefactorContext): RefactorEditInfo | undefined {\r\n    const { file, startPosition, program } = context;\r\n    const signatureDecls = getConvertableOverloadListAtPosition(file, startPosition, program);\r\n    if (!signatureDecls) return undefined;\r\n    const checker = program.getTypeChecker();\r\n    const lastDeclaration = signatureDecls[signatureDecls.length - 1];\r\n    let updated = lastDeclaration;\r\n    switch (lastDeclaration.kind) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 142 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/refactors/convertParamsToDestructuredObject.ts",
        "criticalFunctions": [
          {
            "name": "groupReferences",
            "complexity": 21,
            "lineCount": 103,
            "parameterCount": 1,
            "snippet": "function groupReferences(referenceEntries: readonly FindAllReferences.Entry[]): GroupedReferences {\r\n        const classReferences: ClassReferences = { accessExpressions: [], typeUsages: [] };\r\n        const groupedReferences: GroupedReferences = { functionCalls: [], declarations: [], classReferences, valid: true };\r\n        const functionSymbols = map(functionNames, getSymbolTargetAtLocation);\r\n        const classSymbols = map(classNames, getSymbolTargetAtLocation);\r\n        const isConstructor = isConstructorDeclaration(functionDeclaration);\r\n        const contextualSymbols = map(functionNames, name => getSymbolForContextualType(name, checker));\r\n        for (const entry of referenceEntries) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "entryToFunctionCall",
            "complexity": 18,
            "lineCount": 37,
            "parameterCount": 1,
            "snippet": "function entryToFunctionCall(entry: FindAllReferences.NodeEntry): CallExpression | NewExpression | undefined {\r\n    if (entry.node.parent) {\r\n        const functionReference = entry.node;\r\n        const parent = functionReference.parent;\r\n        switch (parent.kind) {\r\n            case SyntaxKind.CallExpression:\r\n            case SyntaxKind.NewExpression:\r\n                const callOrNewExpression = tryCast(parent, isCallOrNewExpression);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createNewParameters",
            "complexity": 4,
            "lineCount": 99,
            "parameterCount": 3,
            "snippet": "function createNewParameters(functionDeclaration: ValidFunctionDeclaration | ValidMethodSignature, program: Program, host: LanguageServiceHost): NodeArray<ParameterDeclaration> {\r\n    const checker = program.getTypeChecker();\r\n    const refactorableParameters = getRefactorableParameters(functionDeclaration.parameters);\r\n    const bindingElements = map(refactorableParameters, createBindingElementFromParameterDeclaration);\r\n    const objectParameterName = factory.createObjectBindingPattern(bindingElements);\r\n    const objectParameterType = createParameterTypeNode(refactorableParameters);\r\n    let objectInitializer: Expression | undefined;\r\n    if (every(refactorableParameters, isOptionalParameter)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 99 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getGroupedReferences",
            "complexity": 3,
            "lineCount": 124,
            "parameterCount": 3,
            "snippet": "function getGroupedReferences(functionDeclaration: ValidFunctionDeclaration, program: Program, cancellationToken: CancellationToken): GroupedReferences {\r\n    const functionNames = getFunctionNames(functionDeclaration);\r\n    const classNames = isConstructorDeclaration(functionDeclaration) ? getClassNames(functionDeclaration) : [];\r\n    const names = deduplicate([...functionNames, ...classNames], equateValues);\r\n    const checker = program.getTypeChecker();\r\n    const references = flatMap(names, /*mapfn*/ name => FindAllReferences.getReferenceEntriesForNode(-1, name, program, program.getSourceFiles(), cancellationToken));\r\n    const groupedReferences = groupReferences(references);\r\n    if (!every(groupedReferences.declarations, /*callback*/ decl => contains(names, decl))) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 124 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/convertStringOrTemplateLiteral.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/convertToOptionalChainExpression.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/extractSymbol.ts",
        "criticalFunctions": [
          {
            "name": "visit",
            "complexity": 48,
            "lineCount": 152,
            "parameterCount": 1,
            "snippet": "function visit(node: Node) {\r\n            if (errors) {\r\n                return true;\r\n            }\r\n            if (isDeclaration(node)) {\r\n                const declaringNode = (node.kind === SyntaxKind.VariableDeclaration) ? node.parent.parent : node;\r\n                if (hasSyntacticModifier(declaringNode, ModifierFlags.Export)) {\r\n                    (errors ||= []).push(createDiagnosticForNode(node, Messages.cannotExtractExportedEntity));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 48 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 152 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "extractFunctionInScope",
            "complexity": 43,
            "lineCount": 326,
            "parameterCount": 6,
            "snippet": "function extractFunctionInScope(\r\n    node: Statement | Expression | Block,\r\n    scope: Scope,\r\n    { usages: usagesInScope, typeParameterUsages, substitutions }: ScopeUsages,\r\n    exposedVariableDeclarations: readonly VariableDeclaration[],\r\n    range: TargetRange,\r\n    context: RefactorContext,\r\n): RefactorEditInfo {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 43 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 326 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectReadsAndWrites",
            "complexity": 39,
            "lineCount": 371,
            "parameterCount": 6,
            "snippet": "function collectReadsAndWrites(\r\n    targetRange: TargetRange,\r\n    scopes: Scope[],\r\n    enclosingTextRange: TextRange,\r\n    sourceFile: SourceFile,\r\n    checker: TypeChecker,\r\n    cancellationToken: CancellationToken,\r\n): ReadsAndWrites {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 39 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 371 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getRangeToExtract",
            "complexity": 25,
            "lineCount": 353,
            "parameterCount": 3,
            "snippet": "export function getRangeToExtract(sourceFile: SourceFile, span: TextSpan, invoked = true): RangeToExtract {\r\n    const { length } = span;\r\n    if (length === 0 && !invoked) {\r\n        return { errors: [createFileDiagnostic(sourceFile, span.start, length, Messages.cannotExtractEmpty)] };\r\n    }\r\n    const cursorRequest = length === 0 && invoked;\r\n    const startToken = findFirstNonJsxWhitespaceToken(sourceFile, span.start);\r\n    const endToken = findTokenOnLeftOfPosition(sourceFile, textSpanEnd(span));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 353 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getRefactorActionsToExtractSymbol",
            "complexity": 24,
            "lineCount": 149,
            "parameterCount": 1,
            "snippet": "export function getRefactorActionsToExtractSymbol(context: RefactorContext): readonly ApplicableRefactorInfo[] {\r\n    const requestedRefactor = context.kind;\r\n    const rangeToExtract = getRangeToExtract(context.file, getRefactorContextSpan(context), context.triggerReason === \"invoked\");\r\n    const targetRange = rangeToExtract.targetRange;\r\n    if (targetRange === undefined) {\r\n        if (!rangeToExtract.errors || rangeToExtract.errors.length === 0 || !context.preferences.provideRefactorNotApplicableReason) {\r\n            return emptyArray;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 149 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/extractType.ts",
        "criticalFunctions": [
          {
            "name": "visitor",
            "complexity": 30,
            "lineCount": 53,
            "parameterCount": 1,
            "snippet": "function visitor(node: Node): true | undefined {\r\n        if (isTypeReferenceNode(node)) {\r\n            if (isIdentifier(node.typeName)) {\r\n                const typeName = node.typeName;\r\n                const symbol = checker.resolveName(typeName.text, typeName, SymbolFlags.TypeParameter, /*excludeGlobals*/ true);\r\n                for (const decl of symbol?.declarations || emptyArray) {\r\n                    if (isTypeParameterDeclaration(decl) && decl.getSourceFile() === file) {\r\n                        if (decl.name.escapedText === typeName.escapedText && rangeContainsSkipTrivia(decl, selectionRange, file)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 30 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "collectTypeParameters",
            "complexity": 3,
            "lineCount": 63,
            "parameterCount": 4,
            "snippet": "function collectTypeParameters(checker: TypeChecker, selection: TypeNode | TypeNode[], enclosingNode: Node, file: SourceFile): { typeParameters: TypeParameterDeclaration[] | undefined; affectedTextRange: TextRange | undefined; } {\r\n    const result: TypeParameterDeclaration[] = [];\r\n    const selectionArray = toArray(selection);\r\n    const selectionRange = { pos: selectionArray[0].getStart(file), end: selectionArray[selectionArray.length - 1].end };\r\n    for (const t of selectionArray) {\r\n        if (visitor(t)) return { typeParameters: undefined, affectedTextRange: undefined };\r\n    }\r\n    return { typeParameters: result, affectedTextRange: selectionRange };\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "services/refactors/inferFunctionReturnType.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/refactors/inlineVariable.ts",
        "criticalFunctions": [
          {
            "name": "getInliningInfo",
            "complexity": 16,
            "lineCount": 54,
            "parameterCount": 4,
            "snippet": "function getInliningInfo(file: SourceFile, startPosition: number, tryWithReferenceToken: boolean, program: Program): InliningInfo | RefactorErrorInfo | undefined {\r\n    const checker = program.getTypeChecker();\r\n    const token = getTouchingPropertyName(file, startPosition);\r\n    const parent = token.parent;\r\n    if (!isIdentifier(token)) {\r\n        return undefined;\r\n    }\r\n    if (isInitializedVariable(parent) && isVariableDeclarationInVariableStatement(parent) && isIdentifier(parent.name)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/refactors/moveToFile.ts",
        "criticalFunctions": [
          {
            "name": "getUsageInfo",
            "complexity": 9,
            "lineCount": 79,
            "parameterCount": 5,
            "snippet": "export function getUsageInfo(oldFile: SourceFile, toMove: readonly Statement[], checker: TypeChecker, existingTargetLocals: ReadonlySet<Symbol> = new Set(), enclosingRange?: TextRange): UsageInfo {\r\n    const movedSymbols = new Set<Symbol>();\r\n    const oldImportsNeededByTargetFile = new Map<Symbol, [/*isValidTypeOnlyUseSite*/ boolean, codefix.ImportOrRequireAliasDeclaration | undefined]>();\r\n    const targetFileImportsFromOldFile = new Map<Symbol, /*isValidTypeOnlyUseSite*/ boolean>();\r\n    const jsxNamespaceSymbol = getJsxNamespaceSymbol(containsJsx(toMove));\r\n    if (jsxNamespaceSymbol) { // Might not exist (e.g. in non-compiling code)\r\n        oldImportsNeededByTargetFile.set(jsxNamespaceSymbol, [false, tryCast(jsxNamespaceSymbol.declarations?.[0], (d): d is codefix.ImportOrRequireAliasDeclaration => isImportSpecifier(d) || isImportClause(d) || isNamespaceImport(d) || isImportEqualsDeclaration(d) || isBindingElement(d) || isVariableDeclaration(d))]);\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getNewStatementsAndRemoveFromOldFile",
            "complexity": 7,
            "lineCount": 40,
            "parameterCount": 10,
            "snippet": "export function getNewStatementsAndRemoveFromOldFile(\r\n    oldFile: SourceFile,\r\n    targetFile: SourceFile | FutureSourceFile,\r\n    usage: UsageInfo,\r\n    changes: textChanges.ChangeTracker,\r\n    toMove: ToMove,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "doChange",
            "complexity": 6,
            "lineCount": 13,
            "parameterCount": 8,
            "snippet": "function doChange(context: RefactorContext, oldFile: SourceFile, targetFile: string, program: Program, toMove: ToMove, changes: textChanges.ChangeTracker, host: LanguageServiceHost, preferences: UserPreferences): void {\r\n    const checker = program.getTypeChecker();\r\n    const isForNewFile = !host.fileExists(targetFile);\r\n    const targetSourceFile = isForNewFile\r\n        ? createFutureSourceFile(targetFile, oldFile.externalModuleIndicator ? ModuleKind.ESNext : oldFile.commonJsModuleIndicator ? ModuleKind.CommonJS : undefined, program, host)\r\n        : Debug.checkDefined(program.getSourceFile(targetFile));\r\n    const importAdderForOldFile = codefix.createImportAdder(oldFile, context.program, context.preferences, context.host);\r\n    const importAdderForNewFile = codefix.createImportAdder(targetSourceFile, context.program, context.preferences, context.host);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "updateImportsInOtherFiles",
            "complexity": 4,
            "lineCount": 40,
            "parameterCount": 7,
            "snippet": "function updateImportsInOtherFiles(\r\n    changes: textChanges.ChangeTracker,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n    oldFile: SourceFile,\r\n    movedSymbols: Set<Symbol>,\r\n    targetFileName: string,\r\n    quotePreference: QuotePreference,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "updateNamespaceLikeImport",
            "complexity": 4,
            "lineCount": 29,
            "parameterCount": 8,
            "snippet": "function updateNamespaceLikeImport(\r\n    changes: textChanges.ChangeTracker,\r\n    sourceFile: SourceFile,\r\n    checker: TypeChecker,\r\n    movedSymbols: Set<Symbol>,\r\n    newModuleSpecifier: string,\r\n    oldImportId: Identifier,\r\n    oldImportNode: SupportedImport,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/addMissingAwait.ts",
        "criticalFunctions": [
          {
            "name": "makeChange",
            "complexity": 29,
            "lineCount": 57,
            "parameterCount": 6,
            "snippet": "function makeChange(changeTracker: textChanges.ChangeTracker, errorCode: number, sourceFile: SourceFile, checker: TypeChecker, insertionSite: Expression, fixedDeclarations?: Set<number>) {\r\n    if (isForOfStatement(insertionSite.parent) && !insertionSite.parent.awaitModifier) {\r\n        const exprType = checker.getTypeAtLocation(insertionSite);\r\n        const asyncIter = checker.getAnyAsyncIterableType();\r\n        if (asyncIter && checker.isTypeAssignableTo(exprType, asyncIter)) {\r\n            const forOf = insertionSite.parent;\r\n            changeTracker.replaceNode(sourceFile, forOf, factory.updateForOfStatement(forOf, factory.createToken(SyntaxKind.AwaitKeyword), forOf.initializer, forOf.expression, forOf.statement));\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "findAwaitableInitializers",
            "complexity": 16,
            "lineCount": 56,
            "parameterCount": 5,
            "snippet": "function findAwaitableInitializers(\r\n    expression: Node,\r\n    sourceFile: SourceFile,\r\n    cancellationToken: CancellationToken,\r\n    program: Program,\r\n    checker: TypeChecker,\r\n): AwaitableInitializers | undefined {\r\n    const identifiers = getIdentifiersFromErrorSpanExpression(expression, checker);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/addMissingConst.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/addMissingInvocationForDecorator.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/addOptionalPropertyUndefined.ts",
        "criticalFunctions": [
          {
            "name": "getSourceTarget",
            "complexity": 18,
            "lineCount": 35,
            "parameterCount": 2,
            "snippet": "function getSourceTarget(errorNode: Node | undefined, checker: TypeChecker): { source: Node; target: Node; } | undefined {\r\n    if (!errorNode) {\r\n        return undefined;\r\n    }\r\n    else if (isBinaryExpression(errorNode.parent) && errorNode.parent.operatorToken.kind === SyntaxKind.EqualsToken) {\r\n        return { source: errorNode.parent.right, target: errorNode.parent.left };\r\n    }\r\n    else if (isVariableDeclaration(errorNode.parent) && errorNode.parent.initializer) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/annotateWithTypeFromJSDoc.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/convertFunctionToEs6Class.ts",
        "criticalFunctions": [
          {
            "name": "createClassElement",
            "complexity": 15,
            "lineCount": 105,
            "parameterCount": 3,
            "snippet": "function createClassElement(symbol: Symbol, modifiers: Modifier[] | undefined, members: ClassElement[]): void {\r\n            if (!(symbol.flags & SymbolFlags.Method) && !(symbol.flags & SymbolFlags.ObjectLiteral)) {\r\n                return;\r\n            }\r\n            const memberDeclaration = symbol.valueDeclaration as AccessExpression | ObjectLiteralExpression;\r\n            const assignmentBinaryExpression = memberDeclaration.parent as BinaryExpression;\r\n            const assignmentExpr = assignmentBinaryExpression.right;\r\n            if (!shouldConvertDeclaration(memberDeclaration, assignmentExpr)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 105 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "doChange",
            "complexity": 10,
            "lineCount": 230,
            "parameterCount": 6,
            "snippet": "function doChange(changes: textChanges.ChangeTracker, sourceFile: SourceFile, position: number, checker: TypeChecker, preferences: UserPreferences, compilerOptions: CompilerOptions): void {\r\n    const ctorSymbol = checker.getSymbolAtLocation(getTokenAtPosition(sourceFile, position))!;\r\n    if (!ctorSymbol || !ctorSymbol.valueDeclaration || !(ctorSymbol.flags & (SymbolFlags.Function | SymbolFlags.Variable))) {\r\n        return undefined;\r\n    }\r\n    const ctorDeclaration = ctorSymbol.valueDeclaration;\r\n    if (isFunctionDeclaration(ctorDeclaration) || isFunctionExpression(ctorDeclaration)) {\r\n        changes.replaceNode(sourceFile, ctorDeclaration, createClassFromFunction(ctorDeclaration));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 230 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createClassElementsFromSymbol",
            "complexity": 3,
            "lineCount": 173,
            "parameterCount": 1,
            "snippet": "function createClassElementsFromSymbol(symbol: Symbol) {\r\n        const memberElements: ClassElement[] = [];\r\n        if (symbol.exports) {\r\n            symbol.exports.forEach(member => {\r\n                if (member.name === \"prototype\" && member.declarations) {\r\n                    const firstDeclaration = member.declarations[0];\r\n                    if (\r\n                        member.declarations.length === 1 &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 173 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/convertToAsyncFunction.ts",
        "criticalFunctions": [
          {
            "name": "transformCallbackArgument",
            "complexity": 28,
            "lineCount": 139,
            "parameterCount": 6,
            "snippet": "function transformCallbackArgument(func: Expression, hasContinuation: boolean, continuationArgName: SynthBindingName | undefined, inputArgName: SynthBindingName | undefined, parent: PromiseReturningCallExpression<\"then\" | \"catch\" | \"finally\">, transformer: Transformer): readonly Statement[] {\r\n    switch (func.kind) {\r\n        case SyntaxKind.NullKeyword:\r\n            break;\r\n        case SyntaxKind.PropertyAccessExpression:\r\n        case SyntaxKind.Identifier: // identifier includes undefined\r\n            if (!inputArgName) {\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 139 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "convertToAsyncFunction",
            "complexity": 12,
            "lineCount": 58,
            "parameterCount": 4,
            "snippet": "function convertToAsyncFunction(changes: textChanges.ChangeTracker, sourceFile: SourceFile, position: number, checker: TypeChecker): void {\r\n    const tokenAtPosition = getTokenAtPosition(sourceFile, position);\r\n    let functionToConvert: FunctionLikeDeclaration | undefined;\r\n    if (\r\n        isIdentifier(tokenAtPosition) && isVariableDeclaration(tokenAtPosition.parent) &&\r\n        tokenAtPosition.parent.initializer && isFunctionLikeDeclaration(tokenAtPosition.parent.initializer)\r\n    ) {\r\n        functionToConvert = tokenAtPosition.parent.initializer;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getArgBindingName",
            "complexity": 9,
            "lineCount": 55,
            "parameterCount": 2,
            "snippet": "function getArgBindingName(funcNode: Expression, transformer: Transformer): SynthBindingName | undefined {\r\n    const types: Type[] = [];\r\n    let name: SynthBindingName | undefined;\r\n    if (isFunctionLikeDeclaration(funcNode)) {\r\n        if (funcNode.parameters.length > 0) {\r\n            const param = funcNode.parameters[0].name;\r\n            name = getMappedBindingNameOrDefault(param);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "renameCollidingVarNames",
            "complexity": 1,
            "lineCount": 73,
            "parameterCount": 3,
            "snippet": "function renameCollidingVarNames(nodeToRename: FunctionLikeDeclaration, checker: TypeChecker, synthNamesMap: Map<string, SynthIdentifier>): FunctionLikeDeclaration {\r\n    const identsToRenameMap = new Map<string, Identifier>(); // key is the symbol id\r\n    const collidingSymbolMap = createMultiMap<string, Symbol>();\r\n    forEachChild(nodeToRename, function visit(node: Node) {\r\n        if (!isIdentifier(node)) {\r\n            forEachChild(node, visit);\r\n            return;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 73 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/convertToEsModule.ts",
        "criticalFunctions": [
          {
            "name": "convertStatement",
            "complexity": 8,
            "lineCount": 36,
            "parameterCount": 9,
            "snippet": "function convertStatement(\r\n    sourceFile: SourceFile,\r\n    statement: Statement,\r\n    checker: TypeChecker,\r\n    changes: textChanges.ChangeTracker,\r\n    identifiers: Identifiers,\r\n    target: ScriptTarget,\r\n    exports: ExportRenames,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "convertVariableStatement",
            "complexity": 2,
            "lineCount": 44,
            "parameterCount": 7,
            "snippet": "function convertVariableStatement(\r\n    sourceFile: SourceFile,\r\n    statement: VariableStatement,\r\n    changes: textChanges.ChangeTracker,\r\n    checker: TypeChecker,\r\n    identifiers: Identifiers,\r\n    target: ScriptTarget,\r\n    quotePreference: QuotePreference,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/convertTypedefToType.ts",
        "criticalFunctions": [
          {
            "name": "doChange",
            "complexity": 11,
            "lineCount": 54,
            "parameterCount": 5,
            "snippet": "function doChange(\r\n    changes: textChanges.ChangeTracker,\r\n    node: Node,\r\n    sourceFile: SourceFile,\r\n    newLine: string,\r\n    fixAll = false,\r\n) {\r\n    if (!isJSDocTypedefTag(node)) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/fixAddMissingConstraint.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixAddMissingMember.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 69,
            "lineCount": 111,
            "parameterCount": 5,
            "snippet": "function getInfo(sourceFile: SourceFile, tokenPos: number, errorCode: number, checker: TypeChecker, program: Program): Info | undefined {\r\n    const token = getTokenAtPosition(sourceFile, tokenPos);\r\n    const parent = token.parent;\r\n    if (errorCode === Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1.code) {\r\n        if (!(token.kind === SyntaxKind.OpenBraceToken && isObjectLiteralExpression(parent) && isCallExpression(parent.parent))) return undefined;\r\n        const argIndex = findIndex(parent.parent.arguments, arg => arg === parent);\r\n        if (argIndex < 0) return undefined;\r\n        const signature = checker.getResolvedSignature(parent.parent);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 69 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 111 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryGetValueFromType",
            "complexity": 31,
            "lineCount": 72,
            "parameterCount": 6,
            "snippet": "function tryGetValueFromType(context: CodeFixContextBase, checker: TypeChecker, importAdder: ImportAdder, quotePreference: QuotePreference, type: Type, enclosingDeclaration: Node | undefined): Expression {\r\n    if (type.flags & TypeFlags.AnyOrUnknown) {\r\n        return createUndefined();\r\n    }\r\n    if (type.flags & (TypeFlags.String | TypeFlags.TemplateLiteral)) {\r\n        return factory.createStringLiteral(\"\", /* isSingleQuote */ quotePreference === QuotePreference.Single);\r\n    }\r\n    if (type.flags & TypeFlags.Number) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 31 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "addMethodDeclaration",
            "complexity": 3,
            "lineCount": 21,
            "parameterCount": 7,
            "snippet": "function addMethodDeclaration(\r\n    context: CodeFixContextBase,\r\n    changes: textChanges.ChangeTracker,\r\n    callExpression: CallExpression,\r\n    name: Identifier | PrivateIdentifier,\r\n    modifierFlags: ModifierFlags,\r\n    parentDeclaration: ClassLikeDeclaration | InterfaceDeclaration | TypeLiteralNode,\r\n    sourceFile: SourceFile,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/fixAddMissingParam.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 17,
            "lineCount": 74,
            "parameterCount": 3,
            "snippet": "function getInfo(sourceFile: SourceFile, program: Program, pos: number): SignatureInfo | undefined {\r\n    const token = getTokenAtPosition(sourceFile, pos);\r\n    const callExpression = findAncestor(token, isCallExpression);\r\n    if (callExpression === undefined || length(callExpression.arguments) === 0) {\r\n        return undefined;\r\n    }\r\n    const checker = program.getTypeChecker();\r\n    const type = checker.getTypeAtLocation(callExpression.expression);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixAddVoidToPromise.ts",
        "criticalFunctions": [
          {
            "name": "makeChange",
            "complexity": 20,
            "lineCount": 46,
            "parameterCount": 5,
            "snippet": "function makeChange(changes: textChanges.ChangeTracker, sourceFile: SourceFile, span: TextSpan, program: Program, seen?: Set<ParameterDeclaration>) {\r\n    const node = getTokenAtPosition(sourceFile, span.start);\r\n    if (!isIdentifier(node) || !isCallExpression(node.parent) || node.parent.expression !== node || node.parent.arguments.length !== 0) return;\r\n    const checker = program.getTypeChecker();\r\n    const symbol = checker.getSymbolAtLocation(node);\r\n    const decl = symbol?.valueDeclaration;\r\n    if (!decl || !isParameter(decl) || !isNewExpression(decl.parent.parent)) return;\r\n    if (seen?.has(decl)) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixAwaitInSyncFunction.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixImportNonExportedMember.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixIncorrectNamedTupleSyntax.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixInvalidImportSyntax.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixJSDocTypes.ts",
        "criticalFunctions": [
          {
            "name": "isTypeContainer",
            "complexity": 18,
            "lineCount": 25,
            "parameterCount": 1,
            "snippet": "function isTypeContainer(node: Node): node is TypeContainer {\r\n    switch (node.kind) {\r\n        case SyntaxKind.AsExpression:\r\n        case SyntaxKind.CallSignature:\r\n        case SyntaxKind.ConstructSignature:\r\n        case SyntaxKind.FunctionDeclaration:\r\n        case SyntaxKind.GetAccessor:\r\n        case SyntaxKind.IndexSignature:\r\n  // ... more code ...",
            "issues": []
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixMissingTypeAnnotationOnExports.ts",
        "criticalFunctions": [
          {
            "name": "addInlineAssertion",
            "complexity": 22,
            "lineCount": 76,
            "parameterCount": 1,
            "snippet": "function addInlineAssertion(span: TextSpan): DiagnosticOrDiagnosticAndArguments | undefined {\r\n        context.cancellationToken.throwIfCancellationRequested();\r\n        const nodeWithDiag = getTokenAtPosition(sourceFile, span.start);\r\n        const expandoFunction = findExpandoFunction(nodeWithDiag);\r\n        if (expandoFunction) return;\r\n        const targetNode = findBestFittingNode(nodeWithDiag, span);\r\n        if (!targetNode || isValueSignatureDeclaration(targetNode) || isValueSignatureDeclaration(targetNode.parent)) return;\r\n        const isExpressionTarget = isExpression(targetNode);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "relativeType",
            "complexity": 17,
            "lineCount": 45,
            "parameterCount": 1,
            "snippet": "function relativeType(node: Node): InferenceResult {\r\n        if (isParameter(node)) {\r\n            return emptyInferenceResult;\r\n        }\r\n        if (isShorthandPropertyAssignment(node)) {\r\n            return {\r\n                typeNode: createTypeOfFromEntityNameExpression(node.name),\r\n                mutatedTarget: false,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "fixIsolatedDeclarationError",
            "complexity": 16,
            "lineCount": 28,
            "parameterCount": 1,
            "snippet": "function fixIsolatedDeclarationError(node: Node): DiagnosticOrDiagnosticAndArguments | undefined {\r\n        if (fixedNodes?.has(node)) return undefined;\r\n        fixedNodes?.add(node);\r\n        switch (node.kind) {\r\n            case SyntaxKind.Parameter:\r\n            case SyntaxKind.PropertyDeclaration:\r\n            case SyntaxKind.VariableDeclaration:\r\n                return addTypeToVariableLike(node as ParameterDeclaration | PropertyDeclaration | VariableDeclaration);\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "transformDestructuringPatterns",
            "complexity": 14,
            "lineCount": 130,
            "parameterCount": 1,
            "snippet": "function transformDestructuringPatterns(bindingPattern: BindingPattern): DiagnosticOrDiagnosticAndArguments | undefined {\r\n        const enclosingVariableDeclaration = bindingPattern.parent as VariableDeclaration;\r\n        const enclosingVarStmt = bindingPattern.parent.parent.parent as VariableStatement;\r\n        if (!enclosingVariableDeclaration.initializer) return undefined;\r\n        let baseExpr: ExpressionReverseChain;\r\n        const newNodes: Node[] = [];\r\n        if (!isIdentifier(enclosingVariableDeclaration.initializer)) {\r\n            const tempHolderForReturn = factory.createUniqueName(\"dest\", GeneratedIdentifierFlags.Optimistic);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 130 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "extractAsVariable",
            "complexity": 12,
            "lineCount": 76,
            "parameterCount": 1,
            "snippet": "function extractAsVariable(span: TextSpan): DiagnosticOrDiagnosticAndArguments | undefined {\r\n        context.cancellationToken.throwIfCancellationRequested();\r\n        const nodeWithDiag = getTokenAtPosition(sourceFile, span.start);\r\n        const targetNode = findBestFittingNode(nodeWithDiag, span) as Expression;\r\n        if (!targetNode || isValueSignatureDeclaration(targetNode) || isValueSignatureDeclaration(targetNode.parent)) return;\r\n        const isExpressionTarget = isExpression(targetNode);\r\n        if (!isExpressionTarget) return;\r\n        if (isArrayLiteralExpression(targetNode)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 76 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/fixNaNEquality.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixOverrideModifier.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixSpelling.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 28,
            "lineCount": 66,
            "parameterCount": 4,
            "snippet": "function getInfo(sourceFile: SourceFile, pos: number, context: CodeFixContextBase, errorCode: number): { node: Node; suggestedSymbol: Symbol; } | undefined {\r\n    const node = getTokenAtPosition(sourceFile, pos);\r\n    const parent = node.parent;\r\n    if (\r\n        (\r\n            errorCode === Diagnostics.No_overload_matches_this_call.code ||\r\n            errorCode === Diagnostics.Type_0_is_not_assignable_to_type_1.code\r\n        ) &&\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 28 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixStrictClassInitialization.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixUnreachableCode.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/fixUnusedIdentifier.ts",
        "criticalFunctions": [
          {
            "name": "mayDeleteParameter",
            "complexity": 27,
            "lineCount": 54,
            "parameterCount": 7,
            "snippet": "function mayDeleteParameter(checker: TypeChecker, sourceFile: SourceFile, parameter: ParameterDeclaration, sourceFiles: readonly SourceFile[], program: Program, cancellationToken: CancellationToken, isFixAll: boolean): boolean {\r\n    const { parent } = parameter;\r\n    switch (parent.kind) {\r\n        case SyntaxKind.MethodDeclaration:\r\n        case SyntaxKind.Constructor:\r\n            const index = parent.parameters.indexOf(parameter);\r\n            const referent = isMethodDeclaration(parent) ? parent.name : parent;\r\n            const entries = FindAllReferences.Core.getReferencedSymbolsForNode(parent.pos, referent, program, sourceFiles, cancellationToken);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 27 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryDeleteParameter",
            "complexity": 10,
            "lineCount": 26,
            "parameterCount": 8,
            "snippet": "function tryDeleteParameter(\r\n    changes: textChanges.ChangeTracker,\r\n    sourceFile: SourceFile,\r\n    parameter: ParameterDeclaration,\r\n    checker: TypeChecker,\r\n    sourceFiles: readonly SourceFile[],\r\n    program: Program,\r\n    cancellationToken: CancellationToken,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryDeleteDeclarationWorker",
            "complexity": 7,
            "lineCount": 11,
            "parameterCount": 8,
            "snippet": "function tryDeleteDeclarationWorker(token: Node, changes: textChanges.ChangeTracker, sourceFile: SourceFile, checker: TypeChecker, sourceFiles: readonly SourceFile[], program: Program, cancellationToken: CancellationToken, isFixAll: boolean): void {\r\n    const { parent } = token;\r\n    if (isParameter(parent)) {\r\n        tryDeleteParameter(changes, sourceFile, parent, checker, sourceFiles, program, cancellationToken, isFixAll);\r\n    }\r\n    else if (!(isFixAll && isIdentifier(token) && FindAllReferences.Core.isSymbolReferencedInFile(token, checker, sourceFile))) {\r\n        const node = isImportClause(parent) ? token : isComputedPropertyName(parent) ? parent.parent : parent;\r\n        Debug.assert(node !== sourceFile, \"should not delete whole source file\");\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "tryDeleteDeclaration",
            "complexity": 2,
            "lineCount": 11,
            "parameterCount": 8,
            "snippet": "function tryDeleteDeclaration(sourceFile: SourceFile, token: Node, changes: textChanges.ChangeTracker, checker: TypeChecker, sourceFiles: readonly SourceFile[], program: Program, cancellationToken: CancellationToken, isFixAll: boolean) {\r\n    tryDeleteDeclarationWorker(token, changes, sourceFile, checker, sourceFiles, program, cancellationToken, isFixAll);\r\n    if (isIdentifier(token)) {\r\n        FindAllReferences.Core.eachSymbolReferenceInFile(token, checker, sourceFile, (ref: Node) => {\r\n            if (isPropertyAccessExpression(ref.parent) && ref.parent.name === ref) ref = ref.parent;\r\n            if (!isFixAll && mayDeleteExpression(ref)) {\r\n                changes.delete(sourceFile, ref.parent.parent);\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/generateAccessors.ts",
        "criticalFunctions": [
          {
            "name": "generateAccessorFromProperty",
            "complexity": 8,
            "lineCount": 51,
            "parameterCount": 6,
            "snippet": "export function generateAccessorFromProperty(file: SourceFile, program: Program, start: number, end: number, context: textChanges.TextChangesContext, _actionName: string): FileTextChanges[] | undefined {\r\n    const fieldInfo = getAccessorConvertiblePropertyAtPosition(file, program, start, end);\r\n    if (!fieldInfo || refactor.isRefactorErrorInfo(fieldInfo)) return undefined;\r\n    const changeTracker = textChanges.ChangeTracker.fromContext(context);\r\n    const { isStatic, isReadonly, fieldName, accessorName, originalName, type, container, declaration } = fieldInfo;\r\n    suppressLeadingAndTrailingTrivia(fieldName);\r\n    suppressLeadingAndTrailingTrivia(accessorName);\r\n    suppressLeadingAndTrailingTrivia(declaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/helpers.ts",
        "criticalFunctions": [
          {
            "name": "addNewNodeForMemberSymbol",
            "complexity": 35,
            "lineCount": 199,
            "parameterCount": 10,
            "snippet": "export function addNewNodeForMemberSymbol(\r\n    symbol: Symbol,\r\n    enclosingDeclaration: ClassLikeDeclaration,\r\n    sourceFile: SourceFile,\r\n    context: TypeConstructionContext,\r\n    preferences: UserPreferences,\r\n    importAdder: ImportAdder | undefined,\r\n    addClassElement: (node: AddNode) => void,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 35 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 199 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSignatureDeclarationFromSignature",
            "complexity": 16,
            "lineCount": 110,
            "parameterCount": 10,
            "snippet": "export function createSignatureDeclarationFromSignature(\r\n    kind:\r\n        | SyntaxKind.MethodDeclaration\r\n        | SyntaxKind.FunctionExpression\r\n        | SyntaxKind.ArrowFunction\r\n        | SyntaxKind.FunctionDeclaration,\r\n    context: TypeConstructionContext,\r\n    quotePreference: QuotePreference,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 110 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "10 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSignatureDeclarationFromCallExpression",
            "complexity": 14,
            "lineCount": 78,
            "parameterCount": 7,
            "snippet": "export function createSignatureDeclarationFromCallExpression(\r\n    kind: SyntaxKind.MethodDeclaration | SyntaxKind.FunctionDeclaration | SyntaxKind.MethodSignature,\r\n    context: CodeFixContextBase,\r\n    importAdder: ImportAdder,\r\n    call: CallExpression,\r\n    name: Identifier | PrivateIdentifier | string,\r\n    modifierFlags: ModifierFlags,\r\n    contextNode: Node,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "createMethodImplementingSignatures",
            "complexity": 10,
            "lineCount": 54,
            "parameterCount": 9,
            "snippet": "function createMethodImplementingSignatures(\r\n    checker: TypeChecker,\r\n    context: TypeConstructionContext,\r\n    enclosingDeclaration: ClassLikeDeclaration,\r\n    signatures: readonly Signature[],\r\n    name: PropertyName,\r\n    optional: boolean,\r\n    modifiers: readonly Modifier[] | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getArgumentTypesAndTypeParameters",
            "complexity": 9,
            "lineCount": 71,
            "parameterCount": 8,
            "snippet": "function getArgumentTypesAndTypeParameters(checker: TypeChecker, importAdder: ImportAdder, instanceTypes: Type[], contextNode: Node | undefined, scriptTarget: ScriptTarget, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) {\r\n    const argumentTypeNodes: TypeNode[] = [];\r\n    const argumentTypeParameters = new Map<string, ArgumentTypeParameterAndConstraint | undefined>();\r\n    for (let i = 0; i < instanceTypes.length; i += 1) {\r\n        const instanceType = instanceTypes[i];\r\n        if (instanceType.isUnionOrIntersection() && instanceType.types.some(typeContainsTypeParameter)) {\r\n            const synthesizedTypeParameterName = createTypeParameterName(i);\r\n            argumentTypeNodes.push(factory.createTypeReferenceNode(synthesizedTypeParameterName));\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/importFixes.ts",
        "criticalFunctions": [
          {
            "name": "doAddExistingFix",
            "complexity": 24,
            "lineCount": 128,
            "parameterCount": 7,
            "snippet": "function doAddExistingFix(\r\n    changes: textChanges.ChangeTracker,\r\n    sourceFile: SourceFile,\r\n    clause: ImportClause | ObjectBindingPattern,\r\n    defaultImport: Import | undefined,\r\n    namedImports: readonly Import[],\r\n    removeExistingImportSpecifiers: Set<ImportSpecifier | BindingElement> | undefined,\r\n    preferences: UserPreferences,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 24 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 128 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getUmdImportKind",
            "complexity": 20,
            "lineCount": 33,
            "parameterCount": 3,
            "snippet": "function getUmdImportKind(importingFile: SourceFile | FutureSourceFile, program: Program, forceImportKeyword: boolean): ImportKind {\r\n    if (getAllowSyntheticDefaultImports(program.getCompilerOptions())) {\r\n        return ImportKind.Default;\r\n    }\r\n    const moduleKind = getEmitModuleKind(program.getCompilerOptions());\r\n    switch (moduleKind) {\r\n        case ModuleKind.AMD:\r\n        case ModuleKind.CommonJS:\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "writeFixes",
            "complexity": 19,
            "lineCount": 130,
            "parameterCount": 2,
            "snippet": "function writeFixes(changeTracker: textChanges.ChangeTracker, oldFileQuotePreference?: QuotePreference) {\r\n        let quotePreference: QuotePreference;\r\n        if (sourceFile.imports !== undefined && sourceFile.imports.length === 0 && oldFileQuotePreference !== undefined) {\r\n            quotePreference = oldFileQuotePreference;\r\n        }\r\n        else {\r\n            quotePreference = getQuotePreference(sourceFile, preferences);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 130 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getAddToExistingImportFix",
            "complexity": 19,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function getAddToExistingImportFix({ declaration, importKind, symbol, targetFlags }: FixAddToExistingImportInfo): FixAddToExistingImport | undefined {\r\n        if (importKind === ImportKind.CommonJS || importKind === ImportKind.Namespace || declaration.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n            return undefined;\r\n        }\r\n        if (declaration.kind === SyntaxKind.VariableDeclaration) {\r\n            return (importKind === ImportKind.Named || importKind === ImportKind.Default) && declaration.name.kind === SyntaxKind.ObjectBindingPattern\r\n                ? { kind: ImportFixKind.AddToExisting, importClauseOrBindingPattern: declaration.name, importKind, moduleSpecifierKind: undefined, moduleSpecifier: declaration.initializer.arguments[0].text, addAsTypeOnly: AddAsTypeOnly.NotAllowed }\r\n                : undefined;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          },
          {
            "name": "codeActionForFixWorker",
            "complexity": 19,
            "lineCount": 74,
            "parameterCount": 7,
            "snippet": "function codeActionForFixWorker(\r\n    changes: textChanges.ChangeTracker,\r\n    sourceFile: SourceFile,\r\n    symbolName: string,\r\n    fix: ImportFix,\r\n    includeSymbolNameInDescription: boolean,\r\n    program: Program,\r\n    preferences: UserPreferences,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/inferFromUsage.ts",
        "criticalFunctions": [
          {
            "name": "inferTypeFromBinaryExpression",
            "complexity": 55,
            "lineCount": 114,
            "parameterCount": 3,
            "snippet": "function inferTypeFromBinaryExpression(node: Expression, parent: BinaryExpression, usage: Usage): void {\r\n        switch (parent.operatorToken.kind) {\r\n            case SyntaxKind.AsteriskAsteriskToken:\r\n            case SyntaxKind.AsteriskToken:\r\n            case SyntaxKind.SlashToken:\r\n            case SyntaxKind.PercentToken:\r\n            case SyntaxKind.LessThanLessThanToken:\r\n            case SyntaxKind.GreaterThanGreaterThanToken:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 55 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 114 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "doChange",
            "complexity": 33,
            "lineCount": 96,
            "parameterCount": 9,
            "snippet": "function doChange(changes: textChanges.ChangeTracker, sourceFile: SourceFile, token: Node, errorCode: number, program: Program, cancellationToken: CancellationToken, markSeen: NodeSeenTracker, host: LanguageServiceHost, preferences: UserPreferences): Declaration | undefined {\r\n    if (!isParameterPropertyModifier(token.kind) && token.kind !== SyntaxKind.Identifier && token.kind !== SyntaxKind.DotDotDotToken && token.kind !== SyntaxKind.ThisKeyword) {\r\n        return undefined;\r\n    }\r\n    const { parent } = token;\r\n    const importAdder = createImportAdder(sourceFile, program, preferences, host);\r\n    errorCode = mapSuggestionDiagnostic(errorCode);\r\n    switch (errorCode) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 33 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 96 lines, consider splitting"
              },
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "9 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "calculateUsageOfNode",
            "complexity": 20,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function calculateUsageOfNode(node: Expression, usage: Usage): void {\r\n        while (isRightSideOfQualifiedNameOrPropertyAccess(node)) {\r\n            node = node.parent as Expression;\r\n        }\r\n        switch (node.parent.kind) {\r\n            case SyntaxKind.ExpressionStatement:\r\n                inferTypeFromExpressionStatement(node, usage);\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "annotateParameters",
            "complexity": 10,
            "lineCount": 31,
            "parameterCount": 8,
            "snippet": "function annotateParameters(\r\n    changes: textChanges.ChangeTracker,\r\n    importAdder: ImportAdder,\r\n    sourceFile: SourceFile,\r\n    parameterDeclaration: ParameterDeclaration,\r\n    containingFunction: SignatureDeclaration,\r\n    program: Program,\r\n    host: LanguageServiceHost,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "annotate",
            "complexity": 8,
            "lineCount": 17,
            "parameterCount": 7,
            "snippet": "function annotate(changes: textChanges.ChangeTracker, importAdder: ImportAdder, sourceFile: SourceFile, declaration: textChanges.TypeAnnotatable, type: Type, program: Program, host: LanguageServiceHost): void {\r\n    const typeNode = getTypeNodeIfAccessible(type, declaration, program, host);\r\n    if (typeNode) {\r\n        if (isInJSFile(sourceFile) && declaration.kind !== SyntaxKind.PropertySignature) {\r\n            const parent = isVariableDeclaration(declaration) ? tryCast(declaration.parent.parent, isVariableStatement) : declaration;\r\n            if (!parent) {\r\n                return;\r\n            }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "services/codefixes/returnValueCorrect.ts",
        "criticalFunctions": [
          {
            "name": "getInfo",
            "complexity": 20,
            "lineCount": 24,
            "parameterCount": 4,
            "snippet": "function getInfo(checker: TypeChecker, sourceFile: SourceFile, position: number, errorCode: number): Info | undefined {\r\n    const node = getTokenAtPosition(sourceFile, position);\r\n    if (!node.parent) return undefined;\r\n    const declaration = findAncestor(node.parent, isFunctionLikeDeclaration);\r\n    switch (errorCode) {\r\n        case Diagnostics.A_function_whose_declared_type_is_neither_undefined_void_nor_any_must_return_a_value.code:\r\n            if (!declaration || !declaration.body || !declaration.type || !rangeContainsRange(declaration.type, node)) return undefined;\r\n            return getFixInfo(checker, declaration, checker.getTypeFromTypeNode(declaration.type), /*isFunctionType*/ false);\r\n  // ... more code ...",
            "issues": []
          },
          {
            "name": "getFixInfo",
            "complexity": 15,
            "lineCount": 51,
            "parameterCount": 4,
            "snippet": "function getFixInfo(checker: TypeChecker, declaration: FunctionLikeDeclaration, expectType: Type, isFunctionType: boolean): Info | undefined {\r\n    if (!declaration.body || !isBlock(declaration.body) || length(declaration.body.statements) !== 1) return undefined;\r\n    const firstStatement = first(declaration.body.statements);\r\n    if (isExpressionStatement(firstStatement) && checkFixedAssignableTo(checker, declaration, checker.getTypeAtLocation(firstStatement.expression), expectType, isFunctionType)) {\r\n        return {\r\n            declaration,\r\n            kind: ProblemKind.MissingReturnStatement,\r\n            expression: firstStatement.expression,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "services/codefixes/wrapDecoratorInParentheses.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": []
        }
      },
      {
        "file": "compiler/transformers/declarations/diagnostics.ts",
        "criticalFunctions": [
          {
            "name": "getParameterDeclarationTypeVisibilityDiagnosticMessage",
            "complexity": 29,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccessibilityResult: SymbolAccessibilityResult): DiagnosticMessage {\r\n        switch (node.parent.kind) {\r\n            case SyntaxKind.Constructor:\r\n                return symbolAccessibilityResult.errorModuleName ?\r\n                    symbolAccessibilityResult.accessibility === SymbolAccessibility.CannotBeNamed ?\r\n                        Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :\r\n                        Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2 :\r\n                    Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 29 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createGetSymbolAccessibilityDiagnosticForNode",
            "complexity": 25,
            "lineCount": 366,
            "parameterCount": 1,
            "snippet": "export function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationDiagnosticProducing): GetSymbolAccessibilityDiagnostic {\r\n    if (isVariableDeclaration(node) || isPropertyDeclaration(node) || isPropertySignature(node) || isPropertyAccessExpression(node) || isElementAccessExpression(node) || isBinaryExpression(node) || isBindingElement(node) || isConstructorDeclaration(node)) {\r\n        return getVariableDeclarationTypeVisibilityError;\r\n    }\r\n    else if (isSetAccessor(node) || isGetAccessor(node)) {\r\n        return getAccessorDeclarationTypeVisibilityError;\r\n    }\r\n    else if (isConstructSignatureDeclaration(node) || isCallSignatureDeclaration(node) || isMethodDeclaration(node) || isMethodSignature(node) || isFunctionDeclaration(node) || isIndexSignatureDeclaration(node)) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 366 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getDiagnostic",
            "complexity": 25,
            "lineCount": 42,
            "parameterCount": 1,
            "snippet": "function getDiagnostic(node: Node) {\r\n        const heritageClause = findAncestor(node, isHeritageClause);\r\n        if (heritageClause) {\r\n            return createDiagnosticForNode(node, Diagnostics.Extends_clause_can_t_contain_an_expression_with_isolatedDeclarations);\r\n        }\r\n        if ((isPartOfTypeNode(node) || isTypeQueryNode(node.parent)) && (isEntityName(node) || isEntityNameExpression(node))) {\r\n            return createEntityInTypeNodeError(node);\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 25 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "canProduceDiagnostics",
            "complexity": 22,
            "lineCount": 24,
            "parameterCount": 1,
            "snippet": "export function canProduceDiagnostics(node: Node): node is DeclarationDiagnosticProducing {\r\n    return isVariableDeclaration(node) ||\r\n        isPropertyDeclaration(node) ||\r\n        isPropertySignature(node) ||\r\n        isBindingElement(node) ||\r\n        isSetAccessor(node) ||\r\n        isGetAccessor(node) ||\r\n        isConstructSignatureDeclaration(node) ||\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "getReturnTypeVisibilityError",
            "complexity": 21,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function getReturnTypeVisibilityError(symbolAccessibilityResult: SymbolAccessibilityResult): SymbolAccessibilityDiagnostic {\r\n        let diagnosticMessage: DiagnosticMessage;\r\n        switch (node.kind) {\r\n            case SyntaxKind.ConstructSignature:\r\n                diagnosticMessage = symbolAccessibilityResult.errorModuleName ?\r\n                    Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 :\r\n                    Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0;\r\n                break;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 21 exceeds recommended threshold of 15"
              },
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "high-complexity",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/module/esnextAnd2015.ts",
        "criticalFunctions": [
          {
            "name": "transformECMAScriptModule",
            "complexity": 1,
            "lineCount": 373,
            "parameterCount": 1,
            "snippet": "export function transformECMAScriptModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {\r\n    const {\r\n        factory,\r\n        getEmitHelperFactory: emitHelpers,\r\n    } = context;\r\n    const host = context.getEmitHost();\r\n    const resolver = context.getEmitResolver();\r\n    const compilerOptions = context.getCompilerOptions();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 373 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/module/impliedNodeFormatDependent.ts",
        "criticalFunctions": [
          {
            "name": "transformImpliedNodeFormatDependentModule",
            "complexity": 1,
            "lineCount": 82,
            "parameterCount": 1,
            "snippet": "export function transformImpliedNodeFormatDependentModule(context: TransformationContext): Transformer<SourceFile | Bundle> {\r\n    const previousOnSubstituteNode = context.onSubstituteNode;\r\n    const previousOnEmitNode = context.onEmitNode;\r\n    const esmTransform = transformECMAScriptModule(context);\r\n    const esmOnSubstituteNode = context.onSubstituteNode;\r\n    const esmOnEmitNode = context.onEmitNode;\r\n    context.onSubstituteNode = previousOnSubstituteNode;\r\n    context.onEmitNode = previousOnEmitNode;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 82 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": []
        }
      },
      {
        "file": "compiler/transformers/module/module.ts",
        "criticalFunctions": [
          {
            "name": "topLevelNestedVisitor",
            "complexity": 20,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "function topLevelNestedVisitor(node: Node): VisitResult<Node | undefined> {\r\n        switch (node.kind) {\r\n            case SyntaxKind.VariableStatement:\r\n                return visitVariableStatement(node as VariableStatement);\r\n            case SyntaxKind.FunctionDeclaration:\r\n                return visitFunctionDeclaration(node as FunctionDeclaration);\r\n            case SyntaxKind.ClassDeclaration:\r\n                return visitClassDeclaration(node as ClassDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          },
          {
            "name": "destructuringNeedsFlattening",
            "complexity": 20,
            "lineCount": 45,
            "parameterCount": 1,
            "snippet": "function destructuringNeedsFlattening(node: Expression): boolean {\r\n        if (isObjectLiteralExpression(node)) {\r\n            for (const elem of node.properties) {\r\n                switch (elem.kind) {\r\n                    case SyntaxKind.PropertyAssignment:\r\n                        if (destructuringNeedsFlattening(elem.initializer)) {\r\n                            return true;\r\n                        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitTopLevelExportDeclaration",
            "complexity": 17,
            "lineCount": 103,
            "parameterCount": 1,
            "snippet": "function visitTopLevelExportDeclaration(node: ExportDeclaration): VisitResult<Statement | undefined> {\r\n        if (!node.moduleSpecifier) {\r\n            return undefined;\r\n        }\r\n        const generatedName = factory.getGeneratedNameForNode(node);\r\n        if (node.exportClause && isNamedExports(node.exportClause)) {\r\n            const statements: Statement[] = [];\r\n            if (moduleKind !== ModuleKind.AMD) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 103 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitorWorker",
            "complexity": 16,
            "lineCount": 40,
            "parameterCount": 2,
            "snippet": "function visitorWorker(node: Node, valueIsDiscarded: boolean): VisitResult<Node> {\r\n        if (!(node.transformFlags & (TransformFlags.ContainsDynamicImport | TransformFlags.ContainsDestructuringAssignment | TransformFlags.ContainsUpdateExpressionForIdentifier)) && !importsAndRequiresToRewriteOrShim?.length) {\r\n            return node;\r\n        }\r\n        switch (node.kind) {\r\n            case SyntaxKind.ForStatement:\r\n                return visitForStatement(node as ForStatement, /*isTopLevel*/ false);\r\n            case SyntaxKind.ExpressionStatement:\r\n  // ... more code ...",
            "issues": [
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "visitVariableStatement",
            "complexity": 15,
            "lineCount": 87,
            "parameterCount": 1,
            "snippet": "function visitVariableStatement(node: VariableStatement): VisitResult<Statement | undefined> {\r\n        let statements: Statement[] | undefined;\r\n        let variables: VariableDeclaration[] | undefined;\r\n        let expressions: Expression[] | undefined;\r\n        if (hasSyntacticModifier(node, ModifierFlags.Export)) {\r\n            let modifiers: NodeArray<Modifier> | undefined;\r\n            let removeCommentsOnExpressions = false;\r\n            for (const variable of node.declarationList.declarations) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "compiler/transformers/module/system.ts",
        "criticalFunctions": [
          {
            "name": "topLevelNestedVisitor",
            "complexity": 20,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "function topLevelNestedVisitor(node: Node): VisitResult<Node | undefined> {\r\n        switch (node.kind) {\r\n            case SyntaxKind.VariableStatement:\r\n                return visitVariableStatement(node as VariableStatement);\r\n            case SyntaxKind.FunctionDeclaration:\r\n                return visitFunctionDeclaration(node as FunctionDeclaration);\r\n            case SyntaxKind.ClassDeclaration:\r\n                return visitClassDeclaration(node as ClassDeclaration);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              }
            ]
          },
          {
            "name": "addExportStarIfNeeded",
            "complexity": 14,
            "lineCount": 81,
            "parameterCount": 1,
            "snippet": "function addExportStarIfNeeded(statements: Statement[]) {\r\n        if (!moduleInfo.hasExportStarsToExportValues) {\r\n            return;\r\n        }\r\n        if (!some(moduleInfo.exportedNames) && moduleInfo.exportedFunctions.size === 0 && moduleInfo.exportSpecifiers.size === 0) {\r\n            let hasExportDeclarationWithExportClause = false;\r\n            for (const externalImport of moduleInfo.externalImports) {\r\n                if (externalImport.kind === SyntaxKind.ExportDeclaration && externalImport.exportClause) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 81 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createSettersArray",
            "complexity": 13,
            "lineCount": 127,
            "parameterCount": 2,
            "snippet": "function createSettersArray(exportStarFunction: Identifier, dependencyGroups: DependencyGroup[]) {\r\n        const setters: Expression[] = [];\r\n        for (const group of dependencyGroups) {\r\n            const localName = forEach(group.externalImports, i => getLocalNameForExternalImport(factory, i, currentSourceFile));\r\n            const parameterName = localName ? factory.getGeneratedNameForNode(localName) : factory.createUniqueName(\"\");\r\n            const statements: Statement[] = [];\r\n            for (const entry of group.externalImports) {\r\n                const importVariableName = getLocalNameForExternalImport(factory, entry, currentSourceFile)!; // TODO: GH#18217\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "transformSourceFile",
            "complexity": 7,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "function transformSourceFile(node: SourceFile) {\r\n        if (node.isDeclarationFile || !(isEffectiveExternalModule(node, compilerOptions) || node.transformFlags & TransformFlags.ContainsDynamicImport)) {\r\n            return node;\r\n        }\r\n        const id = getOriginalNodeId(node);\r\n        currentSourceFile = node;\r\n        enclosingBlockScopedContainer = node;\r\n        moduleInfo = moduleInfoMap[id] = collectExternalModuleInfo(context, node);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              }
            ]
          },
          {
            "name": "createSystemModuleBody",
            "complexity": 3,
            "lineCount": 112,
            "parameterCount": 2,
            "snippet": "function createSystemModuleBody(node: SourceFile, dependencyGroups: DependencyGroup[]) {\r\n        const statements: Statement[] = [];\r\n        startLexicalEnvironment();\r\n        const ensureUseStrict = getStrictOptionValue(compilerOptions, \"alwaysStrict\") || isExternalModule(currentSourceFile);\r\n        const statementOffset = factory.copyPrologue(node.statements, statements, ensureUseStrict, topLevelVisitor);\r\n        statements.push(\r\n            factory.createVariableStatement(\r\n                /*modifiers*/ undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 112 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/config/matchFiles.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/config/showConfig.ts",
        "criticalFunctions": [
          {
            "name": "baselineOption",
            "complexity": 17,
            "lineCount": 72,
            "parameterCount": 2,
            "snippet": "function baselineOption(option: ts.CommandLineOption, isCompilerOptions: boolean) {\r\n        if (option.name === \"project\") return;\r\n        let args: string[];\r\n        let optionValue: object | undefined;\r\n        switch (option.type) {\r\n            case \"boolean\": {\r\n                if (option.isTSConfigOnly) {\r\n                    args = [\"-p\", \"tsconfig.json\"];\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/evaluation/awaitUsingDeclarations.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "async-heavy",
            "error-handling",
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/evaluation/esDecorators.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/evaluation/usingDeclarations.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "async-heavy",
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/baseline.ts",
        "criticalFunctions": [
          {
            "name": "baselineProgram",
            "complexity": 14,
            "lineCount": 72,
            "parameterCount": 4,
            "snippet": "function baselineProgram(baseline: string[], [program, builderProgram]: CommandLineProgram, oldProgram: CommandLineProgram | undefined, baselineDependencies: boolean | undefined) {\r\n    if (program !== oldProgram?.[0]) {\r\n        const options = program.getCompilerOptions();\r\n        baseline.push(`Program root files: ${jsonToReadableText(program.getRootFileNames())}`);\r\n        baseline.push(`Program options: ${jsonToReadableText(options)}`);\r\n        baseline.push(`Program structureReused: ${(ts as any).StructureIsReused[program.structureIsReused]}`);\r\n        baseline.push(\"Program files::\");\r\n        for (const file of program.getSourceFiles()) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "generateBuildInfoBaseline",
            "complexity": 7,
            "lineCount": 164,
            "parameterCount": 3,
            "snippet": "function generateBuildInfoBaseline(sys: ts.System, buildInfoPath: string, buildInfo: ts.BuildInfo) {\r\n    let fileIdsList: string[][] | undefined;\r\n    let result;\r\n    const version = buildInfo.version === ts.version ? fakeTsVersion : buildInfo.version;\r\n    if (!ts.isIncrementalBuildInfo(buildInfo)) {\r\n        result = {\r\n            ...buildInfo,\r\n            version,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 164 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "baselineAfterTscCompile",
            "complexity": 3,
            "lineCount": 24,
            "parameterCount": 7,
            "snippet": "export function baselineAfterTscCompile(\r\n    sys: BaselineBase[\"sys\"],\r\n    baseline: BaselineBase[\"baseline\"],\r\n    getPrograms: CommandLineCallbacks[\"getPrograms\"],\r\n    oldPrograms: readonly (CommandLineProgram | undefined)[],\r\n    baselineSourceMap: boolean | undefined,\r\n    shouldBaselinePrograms: boolean | undefined,\r\n    baselineDependencies: boolean | undefined,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/monorepoSymlinkedSiblingPackages.ts",
        "criticalFunctions": [
          {
            "name": "getEditsWithBuildAndClean",
            "complexity": 5,
            "lineCount": 34,
            "parameterCount": 7,
            "snippet": "function getEditsWithBuildAndClean(\r\n    forTsserver: boolean,\r\n    built: boolean,\r\n    osFlavor: TestServerHostOsFlavor | undefined,\r\n    build: (host: TscWatchSystem) => void,\r\n    clean: (host: TscWatchSystem) => void,\r\n    beforeBuild?: readonly TscWatchCompileChange[],\r\n    beforeClean?: readonly TscWatchCompileChange[],\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "forEachMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders",
            "complexity": 4,
            "lineCount": 65,
            "parameterCount": 2,
            "snippet": "function forEachMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders(\r\n    forTsserver: boolean,\r\n    action: (\r\n        scenario: string,\r\n        sys: () => TestServerHost,\r\n        edits: () => readonly TscWatchCompileChange[],\r\n        indexFile: string,\r\n        currentDirectory: string,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "getMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders",
            "complexity": 2,
            "lineCount": 52,
            "parameterCount": 3,
            "snippet": "function getMonorepoSymlinkedSiblingPackagesSysWithUnRelatedFolders(\r\n    forTsserver: boolean,\r\n    built: boolean,\r\n    osFlavor: TestServerHostOsFlavor,\r\n): TestServerHost {\r\n    const sys = TestServerHost.getCreateWatchedSystem(forTsserver)({\r\n        \"/home/src/projects/c/3/c-impl/c/src/c.ts\": `export const c: string = 'test';`,\r\n        \"/home/src/projects/c/3/c-impl/c/src/index.ts\": `export * from './c';`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "too-many-params",
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/noEmit.ts",
        "criticalFunctions": [
          {
            "name": "forEachNoEmitChangesWorker",
            "complexity": 9,
            "lineCount": 127,
            "parameterCount": 2,
            "snippet": "function forEachNoEmitChangesWorker(commandType: string[], compilerOptions: CompilerOptions) {\r\n    const discrepancyExplanation = () => [\r\n        \"Clean build will not have latestChangedDtsFile as there was no emit and emitSignatures as undefined for files\",\r\n        \"Incremental will store the past latestChangedDtsFile and emitSignatures\",\r\n    ];\r\n    const noChangeRunWithNoEmit: TestTscEdit = {\r\n        ...noChangeRun,\r\n        caption: \"No Change run with noEmit\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 127 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "editsForDtsChanges",
            "complexity": 4,
            "lineCount": 51,
            "parameterCount": 4,
            "snippet": "function editsForDtsChanges(\r\n    commandType: string[],\r\n    aContent: string,\r\n    incremental: boolean | undefined,\r\n    multiFile: boolean,\r\n): TestTscEdit[] {\r\n    return [\r\n        noChangeRun,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          },
          {
            "name": "forEachNoEmitDtsChanges",
            "complexity": 1,
            "lineCount": 60,
            "parameterCount": 1,
            "snippet": "export function forEachNoEmitDtsChanges(commandType: string[]): void {\r\n    describe(\"dts errors with declaration enable changes\", () => {\r\n        if (commandType[0] !== \"-b\") return; // Only test non multiple file errors with -b\r\n        [false, true].forEach(asModules =>\r\n            [undefined, true].forEach(incremental =>\r\n                [{}, { outFile: \"../outFile.js\", module: asModules ? \"amd\" : undefined }].forEach(options => {\r\n                    if (!incremental && asModules) return; // Not the interesting case\r\n                    const aContent = asModules ? `export const a = class { private p = 10; };` : `const a = class { private p = 10; };`;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 60 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "forEachNoEmitTscWatch",
            "complexity": 1,
            "lineCount": 84,
            "parameterCount": 1,
            "snippet": "export function forEachNoEmitTscWatch(commandType: string[]): void {\r\n    forEachNoEmitAndErrors((subScenario, sys, aTsContent, fixedATsContent, compilerOptions) =>\r\n        verifyTscWatch({\r\n            scenario: \"noEmit\",\r\n            subScenario,\r\n            commandLineArgs: [...commandType, \"-w\"],\r\n            sys: () => {\r\n                const result = sys();\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/noEmitOnError.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/tsc.ts",
        "criticalFunctions": [
          {
            "name": "verifyTscEditDiscrepancies",
            "complexity": 13,
            "lineCount": 239,
            "parameterCount": 4,
            "snippet": "function verifyTscEditDiscrepancies(\r\n    input: VerifyTscWithEditsInput,\r\n    index: number,\r\n    snaps: readonly TestServerHostSnapshot[],\r\n    baselines: string[] | undefined,\r\n): string[] | undefined {\r\n    const result = initialTestTscCompile({\r\n        ...input,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 239 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/tscWatch.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/tsserver.ts",
        "criticalFunctions": [
          {
            "name": "patchSessionToHandleWatchEvents",
            "complexity": 1,
            "lineCount": 123,
            "parameterCount": 1,
            "snippet": "function patchSessionToHandleWatchEvents(session: TestSession) {\r\n    const event = session.event;\r\n    const idToClose = new Map<number, () => void>();\r\n    session.event = (data, eventName) => {\r\n        event.call(session, data, eventName);\r\n        switch (eventName) {\r\n            case ts.server.CreateFileWatcherEvent:\r\n                watchFile(data as ts.server.protocol.CreateFileWatcherEventBody);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 123 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/helpers/typingsInstaller.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation"
          ],
          "testing": []
        }
      },
      {
        "file": "testRunner/unittests/helpers/virtualFileSystemWithWatch.ts",
        "criticalFunctions": [
          {
            "name": "diffFsEntry",
            "complexity": 20,
            "lineCount": 57,
            "parameterCount": 5,
            "snippet": "function diffFsEntry(baseline: string[], oldFsEntry: FSEntry | undefined, newFsEntry: FSEntry | undefined, newInode: number | undefined, writtenFiles: Map<string, any> | undefined): void {\r\n    const file = newFsEntry && newFsEntry.fullPath;\r\n    if (isFsFileOrFsLibFile(oldFsEntry)) {\r\n        if (isFsFileOrFsLibFile(newFsEntry)) {\r\n            if (oldFsEntry.content !== newFsEntry.content) {\r\n                diffFsFile(baseline, newFsEntry, newInode);\r\n            }\r\n            else if (oldFsEntry.modifiedTime !== newFsEntry.modifiedTime) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "<anonymous>",
            "complexity": 8,
            "lineCount": 84,
            "parameterCount": 2,
            "snippet": "private constructor(\r\n        fileOrFolderorSymLinkList: FileOrFolderOrSymLinkMap | readonly FileOrFolderOrSymLink[],\r\n        {\r\n            useCaseSensitiveFileNames,\r\n            executingFilePath,\r\n            currentDirectory,\r\n            newLine,\r\n            windowsStyleRoot,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 84 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/sys/symlinkWatching.ts",
        "criticalFunctions": [
          {
            "name": "watchDirectoryOperation",
            "complexity": 22,
            "lineCount": 41,
            "parameterCount": 4,
            "snippet": "function watchDirectoryOperation(\r\n            sys: System,\r\n            opType: keyof RecursiveFsEventsForWatchDirectory,\r\n            dir: string,\r\n            link: string,\r\n        ) {\r\n            switch (opType) {\r\n                case \"init\":\r\n  // ... more code ...",
            "issues": [
              {
                "type": "high-complexity",
                "severity": "high",
                "description": "Complexity 22 exceeds recommended threshold of 15"
              }
            ]
          },
          {
            "name": "verifyRecursiveWatchDirectoryUsingFsEvents",
            "complexity": 3,
            "lineCount": 241,
            "parameterCount": 5,
            "snippet": "function verifyRecursiveWatchDirectoryUsingFsEvents<System extends ts.System>(\r\n        getSys: () => System,\r\n        fsWatch: FsWatch<System>,\r\n        dir: string,\r\n        link: string,\r\n        osFlavor: TestServerHostOsFlavor.Windows | TestServerHostOsFlavor.MacOs,\r\n    ) {\r\n        if (skipSysTests) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 241 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyWatchFile",
            "complexity": 2,
            "lineCount": 55,
            "parameterCount": 6,
            "snippet": "function verifyWatchFile(\r\n        scenario: string,\r\n        getSys: () => ts.System,\r\n        file: string,\r\n        link: string,\r\n        watchOptions: Pick<ts.WatchOptions, \"watchFile\">,\r\n        getFileName?: (file: string) => string,\r\n    ) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 55 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyWatchDirectoryUsingFsEvents",
            "complexity": 2,
            "lineCount": 150,
            "parameterCount": 5,
            "snippet": "function verifyWatchDirectoryUsingFsEvents<System extends ts.System>(\r\n        getSys: () => System,\r\n        fsWatch: FsWatch<System>,\r\n        dir: string,\r\n        link: string,\r\n        osFlavor: TestServerHostOsFlavor,\r\n    ) {\r\n        if (skipSysTests) return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 150 lines, consider splitting"
              }
            ]
          },
          {
            "name": "testWatchDirectoryOperations",
            "complexity": 2,
            "lineCount": 20,
            "parameterCount": 8,
            "snippet": "async function testWatchDirectoryOperations<System extends ts.System, Events extends EventRecord>(\r\n        sys: System,\r\n        fsWatch: FsWatch<System>,\r\n        tableOfEvents: Events,\r\n        operation: Operation<System, Events>,\r\n        directoryName: string,\r\n        linkName: string,\r\n        recursive: boolean,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "high-complexity",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "async-heavy",
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/colorization.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/convertToAsyncFunction.ts",
        "criticalFunctions": [
          {
            "name": "testConvertToAsyncFunction",
            "complexity": 7,
            "lineCount": 115,
            "parameterCount": 5,
            "snippet": "function testConvertToAsyncFunction(it: Mocha.PendingTestFunction, caption: string, text: string, baselineFolder: string, flags: ConvertToAsyncTestFlags) {\r\n    const includeLib = !!(flags & ConvertToAsyncTestFlags.IncludeLib);\r\n    const includeModule = !!(flags & ConvertToAsyncTestFlags.IncludeModule);\r\n    const expectSuggestionDiagnostic = !!(flags & ConvertToAsyncTestFlags.ExpectSuggestionDiagnostic);\r\n    const expectNoSuggestionDiagnostic = !!(flags & ConvertToAsyncTestFlags.ExpectNoSuggestionDiagnostic);\r\n    const expectAction = !!(flags & ConvertToAsyncTestFlags.ExpectAction);\r\n    const expectNoAction = !!(flags & ConvertToAsyncTestFlags.ExpectNoAction);\r\n    const expectFailure = expectNoSuggestionDiagnostic || expectNoAction;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 115 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runBaseline",
            "complexity": 7,
            "lineCount": 74,
            "parameterCount": 1,
            "snippet": "function runBaseline(extension: ts.Extension) {\r\n        const path = \"/home/src/workspaces/project/a\" + extension;\r\n        const languageService = makeLanguageService({ path, content: t.source }, includeLib, includeModule);\r\n        const program = languageService.getProgram()!;\r\n        if (hasSyntacticDiagnostics(program)) {\r\n            assert.equal(ts.Extension.Js, extension, \"Syntactic diagnostics found in non-JS file\");\r\n            return;\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/organizeImports.ts",
        "criticalFunctions": [
          {
            "name": "assertEqual",
            "complexity": 15,
            "lineCount": 74,
            "parameterCount": 2,
            "snippet": "function assertEqual(node1?: ts.Node, node2?: ts.Node) {\r\n        if (node1 === undefined) {\r\n            assert.isUndefined(node2);\r\n            return;\r\n        }\r\n        else if (node2 === undefined) {\r\n            assert.isUndefined(node1); // Guaranteed to fail\r\n            return;\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 74 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [
            "input-validation"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/preProcessFile.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/textChanges.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/transpile.ts",
        "criticalFunctions": [
          {
            "name": "transpilesCorrectly",
            "complexity": 3,
            "lineCount": 93,
            "parameterCount": 3,
            "snippet": "function transpilesCorrectly(nameIn: string, input: string, testSettings: TranspileTestSettings) {\r\n        const runOnce = (name: string, testSettings: TranspileTestSettings) =>\r\n            describe(name, () => {\r\n                let transpileResult: ts.TranspileOutput;\r\n                let oldTranspileResult: string;\r\n                let oldTranspileDiagnostics: ts.Diagnostic[];\r\n                const transpileOptions: ts.TranspileOptions = testSettings.options || {};\r\n                if (!transpileOptions.compilerOptions) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "runOnce",
            "complexity": 1,
            "lineCount": 75,
            "parameterCount": 2,
            "snippet": "(name: string, testSettings: TranspileTestSettings) =>\r\n            describe(name, () => {\r\n                let transpileResult: ts.TranspileOutput;\r\n                let oldTranspileResult: string;\r\n                let oldTranspileDiagnostics: ts.Diagnostic[];\r\n                const transpileOptions: ts.TranspileOptions = testSettings.options || {};\r\n                if (!transpileOptions.compilerOptions) {\r\n                    transpileOptions.compilerOptions = {};\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/configFileErrors.ts",
        "criticalFunctions": [
          {
            "name": "verify",
            "complexity": 2,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function verify(outFile?: object) {\r\n        verifyTscWatch({\r\n            scenario: \"configFileErrors\",\r\n            subScenario: `${outFile ? \"outFile\" : \"multiFile\"}/reports syntax errors in config file`,\r\n            sys: () =>\r\n                TestServerHost.createWatchedSystem(\r\n                    [\r\n                        { path: `/user/username/projects/myproject/a.ts`, content: \"export function foo() { }\" },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/moduleResolution.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/programUpdates.ts",
        "criticalFunctions": [
          {
            "name": "verifyProjectChanges",
            "complexity": 1,
            "lineCount": 71,
            "parameterCount": 2,
            "snippet": "function verifyProjectChanges(subScenario: string, sys: () => TestServerHost) {\r\n            const buildLogicAndTests: TscWatchCompileChange = {\r\n                caption: \"Build logic and tests\",\r\n                edit: ts.noop,\r\n                timeouts: sys => sys.runQueuedTimeoutCallbacks(),\r\n            };\r\n            verifyTscWatch({\r\n                scenario: \"programUpdates\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 71 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/publicApi.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuildWatch/reexport.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsc/composite.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsc/declarationEmit.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsc/extends.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsc/incremental.ts",
        "criticalFunctions": [
          {
            "name": "verify",
            "complexity": 3,
            "lineCount": 58,
            "parameterCount": 2,
            "snippet": "function verify(withAlias: AliasType, preserveConstEnums: boolean) {\r\n            verifyTsc({\r\n                scenario: \"incremental\",\r\n                subScenario: `with ${withAlias}const enums${preserveConstEnums ? \" with preserveConstEnums\" : \"\"}`,\r\n                commandLineArgs: [\"-i\", `a.ts`, \"--tsbuildinfofile\", \"a.tsbuildinfo\", ...preserveConstEnums ? [\"--preserveConstEnums\"] : []],\r\n                sys: () =>\r\n                    TestServerHost.createWatchedSystem({\r\n                        \"/home/src/workspaces/project/a.ts\": dedent`\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsc/listFilesOnly.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsc/projectReferences.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/emit.ts",
        "criticalFunctions": [
          {
            "name": "verifyTscWatchEmit",
            "complexity": 1,
            "lineCount": 52,
            "parameterCount": 1,
            "snippet": "function verifyTscWatchEmit({\r\n        subScenario,\r\n        configObj,\r\n        getAdditionalFileOrFolder,\r\n        firstReloadFileList,\r\n        changes,\r\n    }: VerifyTscWatchEmit) {\r\n        verifyTscWatch({\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 52 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/incremental.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/moduleResolution.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/programUpdates.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/resolutionCache.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts",
        "criticalFunctions": [
          {
            "name": "verifyMonoRepoLike",
            "complexity": 1,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "function verifyMonoRepoLike(scope = \"\") {\r\n            describe(\"when packageJson has types field\", () => {\r\n                verifySymlinkScenario({\r\n                    files: () => ({\r\n                        bPackageJson: {\r\n                            path: `/user/username/projects/myproject/packages/B/package.json`,\r\n                            content: jsonToReadableText({\r\n                                main: \"lib/index.js\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/watchApi.ts",
        "criticalFunctions": [
          {
            "name": "verifyBuilder",
            "complexity": 1,
            "lineCount": 13,
            "parameterCount": 7,
            "snippet": "function verifyBuilder<T extends ts.BuilderProgram>(\r\n        baseline: string[],\r\n        emitBaseline: string[],\r\n        config: File,\r\n        sys: TscWatchSystem,\r\n        emitSys: TscWatchSystem,\r\n        createProgram: ts.CreateProgram<T>,\r\n        optionsToExtend?: ts.CompilerOptions,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "7 parameters, consider using object parameter"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 1,
            "lineCount": 153,
            "parameterCount": 1,
            "snippet": "function verify(outFileOptions: ts.CompilerOptions | undefined) {\r\n        function scenarioName(scenario: string) {\r\n            return `${outFileOptions ? \"outFile\" : \"multiFile\"}/${scenario}`;\r\n        }\r\n        function baselineName(baseline: string) {\r\n            return `tscWatch/watchApi/${outFileOptions ? \"outFile\" : \"multiFile\"}/${baseline}.js`;\r\n        }\r\n        it(scenarioName(\"verifies that noEmit is handled on createSemanticDiagnosticsBuilderProgram and typechecking happens only on affected files\"), () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 153 lines, consider splitting"
              }
            ]
          },
          {
            "name": "setup",
            "complexity": 1,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function setup(useSourceOfProjectReferenceRedirect?: () => boolean) {\r\n        const config1: File = {\r\n            path: `/user/username/projects/myproject/projects/project1/tsconfig.json`,\r\n            content: jsonToReadableText({\r\n                compilerOptions: {\r\n                    module: \"none\",\r\n                    composite: true,\r\n                },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 1,
            "lineCount": 87,
            "parameterCount": 2,
            "snippet": "function verify(subScenario: string, outFile?: string) {\r\n        it(subScenario, () => {\r\n            const system = TestServerHost.createWatchedSystem({\r\n                [`/user/username/projects/myproject/tsconfig.json`]: jsonToReadableText({\r\n                    compilerOptions: { composite: true, noEmitOnError: true, module: \"amd\", outFile },\r\n                    files: [\"a.ts\", \"b.ts\"],\r\n                }),\r\n                [`/user/username/projects/myproject/a.ts`]: \"export const x = 10;\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 87 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tscWatch/watchEnvironment.ts",
        "criticalFunctions": [
          {
            "name": "verifySymlinks",
            "complexity": 2,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "function verifySymlinks(synchronousWatchDirectory: boolean) {\r\n            verifyTscWatch({\r\n                scenario,\r\n                subScenario: `watchDirectories/when there are symlinks to folders in recursive folders${synchronousWatchDirectory ? \" with synchronousWatchDirectory\" : \"\"}`,\r\n                commandLineArgs: [\"--w\"],\r\n                sys: () => {\r\n                    const cwd = \"/home/user/projects/myproject\";\r\n                    const file1: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuild/commandLine.ts",
        "criticalFunctions": [
          {
            "name": "verifyWithIncremental",
            "complexity": 1,
            "lineCount": 93,
            "parameterCount": 1,
            "snippet": "function verifyWithIncremental(options: ts.CompilerOptions) {\r\n            verifyTsc({\r\n                scenario: \"commandLine\",\r\n                subScenario: subScenario(\"emitDeclarationOnly on commandline\"),\r\n                sys: () => sys(options),\r\n                commandLineArgs: [\"--b\", \"project2/src\", \"--verbose\", \"--emitDeclarationOnly\"],\r\n                edits: [\r\n                    noChangeRun,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 93 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyNonIncremental",
            "complexity": 1,
            "lineCount": 75,
            "parameterCount": 1,
            "snippet": "function verifyNonIncremental(options: ts.CompilerOptions) {\r\n            verifyTsc({\r\n                scenario: \"commandLine\",\r\n                subScenario: scenarioName(\"emitDeclarationOnly on commandline with declaration\", options),\r\n                sys: () => sys({ declaration: true, ...options }),\r\n                commandLineArgs: [\"--b\", \"project2/src\", \"--verbose\", \"--emitDeclarationOnly\"],\r\n                edits: [\r\n                    noChangeRun,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 75 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuild/extends.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuild/javascriptProjectEmit.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuild/moduleResolution.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuild/publicApi.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsbuild/sample.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/autoImportProvider.ts",
        "criticalFunctions": [
          {
            "name": "setup",
            "complexity": 1,
            "lineCount": 56,
            "parameterCount": 1,
            "snippet": "function setup(files: File[]) {\r\n    const host = TestServerHost.createServerHost(files);\r\n    const session = new TestSession(host);\r\n    session.executeCommandSeq<ts.server.protocol.ConfigureRequest>({\r\n        command: ts.server.protocol.CommandTypes.Configure,\r\n        arguments: {\r\n            preferences: {\r\n                includePackageJsonAutoImports: \"auto\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 56 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/cachingFileSystemInformation.ts",
        "criticalFunctions": [
          {
            "name": "verifyWatchDirectoriesCaseSensitivity",
            "complexity": 2,
            "lineCount": 68,
            "parameterCount": 1,
            "snippet": "function verifyWatchDirectoriesCaseSensitivity(useCaseSensitiveFileNames: boolean) {\r\n            it(`watchDirectories for config file with case ${useCaseSensitiveFileNames ? \"\" : \"in\"}sensitive file system`, () => {\r\n                const frontendDir = \"/Users/someuser/work/applications/frontend\";\r\n                const file1: File = {\r\n                    path: `${frontendDir}/src/app/utils/Analytic.ts`,\r\n                    content: \"export class SomeClass { };\",\r\n                };\r\n                const file2: File = {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyNpmInstall",
            "complexity": 2,
            "lineCount": 161,
            "parameterCount": 1,
            "snippet": "function verifyNpmInstall(timeoutDuringPartialInstallation: boolean) {\r\n            const root = \"/user/username/rootfolder/otherfolder\";\r\n            const getRootedFileOrFolder = <T extends File | Folder>(fileOrFolder: T) => {\r\n                fileOrFolder.path = root + fileOrFolder.path;\r\n                return fileOrFolder;\r\n            };\r\n            const app: File = getRootedFileOrFolder({\r\n                path: \"/user/username/projects/project/a/b/app.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 161 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "createLoggerTrackingHostCalls",
            "complexity": 1,
            "lineCount": 66,
            "parameterCount": 1,
            "snippet": "function createLoggerTrackingHostCalls(host: TestServerHost) {\r\n        const originals: Record<CalledMaps, any> = {} as any;\r\n        const calledMaps: Record<CalledMapsWithSingleArg, ts.MultiMap<string, true>> & Record<CalledMapsWithFiveArgs, ts.MultiMap<string, CalledWithFiveArgs>> = {\r\n            fileExists: setCallsTrackingWithSingleArgFn(\"fileExists\"),\r\n            directoryExists: setCallsTrackingWithSingleArgFn(\"directoryExists\"),\r\n            getDirectories: setCallsTrackingWithSingleArgFn(\"getDirectories\"),\r\n            readFile: setCallsTrackingWithSingleArgFn(\"readFile\"),\r\n            readDirectory: setCallsTrackingWithFiveArgFn(\"readDirectory\"),\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/compileOnSave.ts",
        "criticalFunctions": [
          {
            "name": "verifyGlobalSave",
            "complexity": 6,
            "lineCount": 86,
            "parameterCount": 2,
            "snippet": "function verifyGlobalSave(declaration: boolean, hasModule: boolean) {\r\n            const config: File = {\r\n                path: `/user/username/projects/myproject/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n                    compileOnSave: true,\r\n                    compilerOptions: {\r\n                        declaration,\r\n                        module: hasModule ? undefined : \"none\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 86 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/completions.ts",
        "criticalFunctions": [
          {
            "name": "verify",
            "complexity": 3,
            "lineCount": 91,
            "parameterCount": 2,
            "snippet": "function verify(withExistingImport: boolean, includeCompletionsForModuleExports: boolean) {\r\n            it(`in project reference setup with path mapping${withExistingImport ? \" with existing import\" : \"\"}${!includeCompletionsForModuleExports ? \" without includeCompletionsForModuleExports\" : \"\"}`, () => {\r\n                const host = TestServerHost.createServerHost({\r\n                    \"/user/username/projects/app/src/index.ts\": `\r\n${withExistingImport ? \"import { MyClass } from 'shared';\" : \"\"}`,\r\n                    \"/user/username/projects/app/tsconfig.json\": JSON.stringify(\r\n                        {\r\n                            compilerOptions: {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 91 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/configuredProjects.ts",
        "criticalFunctions": [
          {
            "name": "verify",
            "complexity": 1,
            "lineCount": 171,
            "parameterCount": 2,
            "snippet": "function verify(scenario: string, parentOrSiblingConfigFile: File) {\r\n            it(`add and then remove a config file ${scenario}`, () => {\r\n                const { host, session, commonFile1, commonFile2, configFile } = setup(parentOrSiblingConfigFile);\r\n                openFilesForSession([commonFile1], session);\r\n                projectInfoForSession(session, commonFile1);\r\n                session.logger.log(\"1: When config file is deleted and then another file is opened\");\r\n                host.deleteFile(configFile.path);\r\n                openFilesForSession([commonFile2], session);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 171 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/declarationFileMaps.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/exportMapCache.ts",
        "criticalFunctions": [
          {
            "name": "verifyReferences",
            "complexity": 2,
            "lineCount": 65,
            "parameterCount": 1,
            "snippet": "function verifyReferences(includesLib: boolean) {\r\n        const files = [libTsconfig, libIndex, appTsconfig, appIndex];\r\n        if (includesLib) {\r\n            files.push({\r\n                path: \"/home/src/projects/project/packages/app/other.ts\",\r\n                content: `import { foo } from \"../lib\";`,\r\n            });\r\n        }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 65 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/externalProjects.ts",
        "criticalFunctions": [
          {
            "name": "verifyAddRemoveConfig",
            "complexity": 4,
            "lineCount": 78,
            "parameterCount": 1,
            "snippet": "function verifyAddRemoveConfig(lazyConfiguredProjectsFromExternalProject: boolean) {\r\n            const f1 = {\r\n                path: \"/home/src/projects/project/a/b/app.ts\",\r\n                content: \"let x = 1;\",\r\n            };\r\n            const cLib = {\r\n                path: \"/home/src/projects/project/a/b/c/lib.ts\",\r\n                content: \"\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 78 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts",
        "criticalFunctions": [
          {
            "name": "verifySymlink",
            "complexity": 1,
            "lineCount": 95,
            "parameterCount": 3,
            "snippet": "function verifySymlink(\r\n            subScenario: string,\r\n            linkPath: string,\r\n            getFiles: () => { moduleA: File; symlinkA: SymLink; moduleB: File; tsconfig: File; },\r\n        ) {\r\n            it(subScenario, () => {\r\n                const { moduleA, symlinkA, moduleB, tsconfig } = getFiles();\r\n                const host = TestServerHost.createServerHost([moduleA, symlinkA, moduleB, tsconfig]);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 95 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/goToDefinition.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/occurences.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/partialSemanticServer.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/plugins.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/projectErrors.ts",
        "criticalFunctions": [
          {
            "name": "verifyNpmInstall",
            "complexity": 2,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function verifyNpmInstall(timeoutDuringPartialInstallation: boolean) {\r\n        const main: File = {\r\n            path: `/user/username/projects/myproject/src/main.ts`,\r\n            content: \"import * as _a from '@angular/core';\",\r\n        };\r\n        const config: File = {\r\n            path: `/user/username/projects/myproject/tsconfig.json`,\r\n            content: \"{}\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferences.ts",
        "criticalFunctions": [
          {
            "name": "verifyAutoImport",
            "complexity": 4,
            "lineCount": 79,
            "parameterCount": 2,
            "snippet": "function verifyAutoImport(built: boolean, disableSourceOfProjectReferenceRedirect?: boolean) {\r\n            const solnConfig: File = {\r\n                path: `/user/username/projects/myproject/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n                    files: [],\r\n                    references: [\r\n                        { path: \"shared/src/library\" },\r\n                        { path: \"app/src/program\" },\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              }
            ]
          },
          {
            "name": "setup",
            "complexity": 2,
            "lineCount": 90,
            "parameterCount": 1,
            "snippet": "function setup(tempFile?: File) {\r\n            const containerLibConfig: File = {\r\n                path: \"/user/username/projects/container/lib/tsconfig.json\",\r\n                content: jsonToReadableText({\r\n                    compilerOptions: {\r\n                        outFile: \"../built/local/lib.js\",\r\n                        composite: true,\r\n                        declarationMap: true,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 90 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 2,
            "lineCount": 70,
            "parameterCount": 1,
            "snippet": "function verify(disableSourceOfProjectReferenceRedirect: boolean) {\r\n            const projectLocation = `/user/username/projects/project`;\r\n            const commonConfig: File = {\r\n                path: `${projectLocation}/src/common/tsconfig.json`,\r\n                content: jsonToReadableText({\r\n                    compilerOptions: {\r\n                        composite: true,\r\n                        declarationMap: true,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 70 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifySolutionScenario",
            "complexity": 2,
            "lineCount": 57,
            "parameterCount": 1,
            "snippet": "function verifySolutionScenario(input: Setup) {\r\n            const { session, host } = setup(input);\r\n            const defaultProject = logDefaultProjectAndDefaultConfiguredProject(session, main);\r\n            verifyGetErrRequest({ session, files: [main] });\r\n            openFilesForSession([dummyFilePath], session);\r\n            closeFilesForSession([main, dummyFilePath], session);\r\n            openFilesForSession([dummyFilePath, main], session);\r\n            closeFilesForSession([dummyFilePath], session);\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 57 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verify",
            "complexity": 1,
            "lineCount": 66,
            "parameterCount": 4,
            "snippet": "function verify(scenario: string, definition: string, usage: string, referenceTerm: string) {\r\n            it(scenario, () => {\r\n                const solutionLocation = \"/user/username/projects/solution\";\r\n                const solution: File = {\r\n                    path: `${solutionLocation}/tsconfig.json`,\r\n                    content: jsonToReadableText({\r\n                        files: [],\r\n                        references: [\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/projectReferencesSourcemap.ts",
        "criticalFunctions": [
          {
            "name": "verifyFileChangeAndRenames",
            "complexity": 1,
            "lineCount": 79,
            "parameterCount": 1,
            "snippet": "function verifyFileChangeAndRenames(options: VerifyFileRenamesOptions) {\r\n        function file(options: VerifyFileRenamesOptions) {\r\n            return options.file === \"dts\" ? dtsLocation : dtsMapLocation;\r\n        }\r\n        enum ChangeAsRenameType {\r\n            NoTimeout = \"no timeout\",\r\n            TimeoutAfterDelete = \"timeout after delete\",\r\n            TimeoutAfterWrite = \"timeout after write\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 79 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "verifyScenario",
            "complexity": 1,
            "lineCount": 58,
            "parameterCount": 1,
            "snippet": "function verifyScenario(options: VerifyScenario) {\r\n        verifyForAllSessionTypes((type, options) => {\r\n            verifyAction({\r\n                scenarioLocation: options.scenarioLocation,\r\n                type,\r\n                scenario: options.scenario,\r\n                openFiles: options.openFiles,\r\n                action: options.action,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 58 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/projects.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/resolutionCache.ts",
        "criticalFunctions": [
          {
            "name": "verifyModuleResolution",
            "complexity": 1,
            "lineCount": 53,
            "parameterCount": 2,
            "snippet": "function verifyModuleResolution(scenario: string, useNodeFile: boolean) {\r\n            it(scenario, () => {\r\n                const nodeFile: File = {\r\n                    path: `/user/username/projects/myproject/src/typings/node.d.ts`,\r\n                    content: `\r\ndeclare module \"fs\" {\r\n    export interface something {\r\n    }\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 53 lines, consider splitting"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/session.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/syntacticServer.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "error-handling",
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/typeAquisition.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/typeOnlyImportChains.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/typingsInstaller.ts",
        "criticalFunctions": [
          {
            "name": "setup",
            "complexity": 1,
            "lineCount": 51,
            "parameterCount": 0,
            "snippet": "function setup() {\r\n            const lodashJs = {\r\n                path: \"/user/username/projects/project/lodash.js\",\r\n                content: \"\",\r\n            };\r\n            const commanderJs = {\r\n                path: \"/user/username/projects/project/commander.js\",\r\n                content: \"\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 51 lines, consider splitting"
              }
            ]
          },
          {
            "name": "testConfiguredProjectNodeModules",
            "complexity": 1,
            "lineCount": 68,
            "parameterCount": 2,
            "snippet": "function testConfiguredProjectNodeModules(\r\n        subScenario: string,\r\n        { jsconfigContent, appJsContent }: {\r\n            jsconfigContent?: object;\r\n            appJsContent?: string;\r\n        } = {},\r\n    ) {\r\n        it(subScenario, () => {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 68 lines, consider splitting"
              }
            ]
          },
          {
            "name": "setup",
            "complexity": 1,
            "lineCount": 63,
            "parameterCount": 1,
            "snippet": "function setup(files: readonly File[]) {\r\n        const host = TestServerHost.createServerHost(files);\r\n        const logger = createLoggerWithInMemoryLogs(host);\r\n        const log = loggerToTypingsInstallerLog(logger);\r\n        const testhost = patchHostTimeouts(\r\n            changeToHostTrackingWrittenFiles(host),\r\n            /*session*/ undefined,\r\n            logger,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 63 lines, consider splitting"
              }
            ]
          },
          {
            "name": "discoverTypings",
            "complexity": 1,
            "lineCount": 40,
            "parameterCount": 8,
            "snippet": "function discoverTypings(\r\n            fileNames: string[],\r\n            projectRootPath: ts.Path,\r\n            safeList: ts.JsTyping.SafeList,\r\n            packageNameToTypingLocation: ReadonlyMap<string, ts.JsTyping.CachedTyping>,\r\n            typeAcquisition: ts.TypeAcquisition,\r\n            unresolvedImports: readonly string[],\r\n            typesRegistry: ReadonlyMap<string, ts.MapLike<string>>,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "too-many-params",
                "severity": "medium",
                "description": "8 parameters, consider using object parameter"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "too-many-params"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [
            "input-validation",
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/watchEnvironment.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/extract/constants.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/extract/functions.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/extract/helpers.ts",
        "criticalFunctions": [
          {
            "name": "extractTest",
            "complexity": 12,
            "lineCount": 54,
            "parameterCount": 1,
            "snippet": "export function extractTest(source: string): Test {\r\n    const activeRanges: Range[] = [];\r\n    let text = \"\";\r\n    let lastPos = 0;\r\n    let pos = 0;\r\n    const ranges = new Map<string, Range>();\r\n    while (pos < source.length) {\r\n        if (\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 54 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          },
          {
            "name": "testExtractSymbol",
            "complexity": 3,
            "lineCount": 66,
            "parameterCount": 4,
            "snippet": "export function testExtractSymbol(caption: string, text: string, baselineFolder: string, description: ts.DiagnosticMessage): void {\r\n    const t = extractTest(text);\r\n    const selectionRange = t.ranges.get(\"selection\")!;\r\n    if (!selectionRange) {\r\n        throw new Error(`Test ${caption} does not specify selection range`);\r\n    }\r\n    [ts.Extension.Ts, ts.Extension.Js].forEach(extension => it(`${caption} [${extension}]`, () => runBaseline(extension)));\r\n    function runBaseline(extension: ts.Extension) {\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 66 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/services/extract/ranges.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "caching"
          ],
          "security": [
            "auth-check"
          ],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/events/projectLanguageServiceState.ts",
        "criticalFunctions": [],
        "patterns": {
          "quality": [
            "long-function"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      },
      {
        "file": "testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts",
        "criticalFunctions": [
          {
            "name": "getInitialState",
            "complexity": 5,
            "lineCount": 72,
            "parameterCount": 1,
            "snippet": "function getInitialState({ configObj = {}, getAdditionalFileOrFolder, firstReloadFileList }: InitialStateParams = {}) {\r\n                const moduleFile1: File = {\r\n                    path: moduleFile1Path,\r\n                    content: \"export function Foo() { };\",\r\n                };\r\n                const file1Consumer1: File = {\r\n                    path: file1Consumer1Path,\r\n                    content: `import {Foo} from \"./moduleFile1\"; export var y = 10;`,\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 72 lines, consider splitting"
              }
            ]
          },
          {
            "name": "verifyProjectsUpdatedInBackgroundEvent",
            "complexity": 1,
            "lineCount": 386,
            "parameterCount": 2,
            "snippet": "function verifyProjectsUpdatedInBackgroundEvent(scenario: string, createSession: (host: TestServerHost) => TestSession) {\r\n        it(\"when adding new file\", () => {\r\n            const commonFile1: File = {\r\n                path: \"/users/username/projects/project/file1.ts\",\r\n                content: \"export var x = 10;\",\r\n            };\r\n            const commonFile2: File = {\r\n                path: \"/users/username/projects/project/file2.ts\",\r\n  // ... more code ...",
            "issues": [
              {
                "type": "long-function",
                "severity": "medium",
                "description": "Function has 386 lines, consider splitting"
              },
              {
                "type": "deep-nesting",
                "severity": "medium",
                "description": "Deep nesting detected, consider extracting sub-functions"
              }
            ]
          }
        ],
        "patterns": {
          "quality": [
            "long-function",
            "deep-nesting"
          ],
          "architecture": [
            "type-safe"
          ],
          "performance": [
            "io-heavy",
            "caching"
          ],
          "security": [],
          "testing": [
            "test-file"
          ]
        }
      }
    ]
  },
  "durationMs": 67397
}